(function(){(function(n,t){function e(n){var t=n.length,e=ot.type(n);return ot.isWindow(n)?!1:1===n.nodeType&&t?!0:"array"===e||"function"!==e&&(0===t||"number"==typeof t&&t>0&&t-1 in n)}function i(n){var t=ft[n]={};return ot.each(n.match(rt)||[],function(n,e){t[e]=!0}),t}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=ot.expando+Math.random()}function o(n,e,i){var s;if(i===t&&1===n.nodeType)if(s="data-"+e.replace(vt,"-$1").toLowerCase(),i=n.getAttribute(s),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:bt.test(i)?JSON.parse(i):i}catch(o){}mt.set(n,e,i)}else i=t;return i}function a(){return!0}function r(){return!1}function h(){try{return U.activeElement}catch(n){}}function l(n,t){for(;(n=n[t])&&1!==n.nodeType;);return n}function c(n,t,e){if(ot.isFunction(t))return ot.grep(n,function(n,i){return!!t.call(n,i,n)!==e});if(t.nodeType)return ot.grep(n,function(n){return n===t!==e});if("string"==typeof t){if(Nt.test(t))return ot.filter(t,n,e);t=ot.filter(t,n)}return ot.grep(n,function(n){return tt.call(t,n)>=0!==e})}function u(n,t){return ot.nodeName(n,"table")&&ot.nodeName(1===t.nodeType?t:t.firstChild,"tr")?n.getElementsByTagName("tbody")[0]||n.appendChild(n.ownerDocument.createElement("tbody")):n}function p(n){return n.type=(null!==n.getAttribute("type"))+"/"+n.type,n}function d(n){var t=Wt.exec(n.type);return t?n.type=t[1]:n.removeAttribute("type"),n}function f(n,t){for(var e=n.length,i=0;e>i;i++)gt.set(n[i],"globalEval",!t||gt.get(t[i],"globalEval"))}function m(n,t){var e,i,s,o,a,r,h,l;if(1===t.nodeType){if(gt.hasData(n)&&(o=gt.access(n),a=ot.extend({},o),l=o.events,gt.set(t,a),l)){delete a.handle,a.events={};for(s in l)for(e=0,i=l[s].length;i>e;e++)ot.event.add(t,s,l[s][e])}mt.hasData(n)&&(r=mt.access(n),h=ot.extend({},r),mt.set(t,h))}}function g(n,e){var i=n.getElementsByTagName?n.getElementsByTagName(e||"*"):n.querySelectorAll?n.querySelectorAll(e||"*"):[];return e===t||e&&ot.nodeName(n,e)?ot.merge([n],i):i}function b(n,t){var e=t.nodeName.toLowerCase();"input"===e&&Mt.test(n.type)?t.checked=n.checked:("input"===e||"textarea"===e)&&(t.defaultValue=n.defaultValue)}function v(n,t){if(t in n)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),i=t,s=Jt.length;s--;)if(t=Jt[s]+e,t in n)return t;return i}function k(n,t){return n=t||n,"none"===ot.css(n,"display")||!ot.contains(n.ownerDocument,n)}function y(t){return n.getComputedStyle(t,null)}function w(n,t){for(var e,i,s,o=[],a=0,r=n.length;r>a;a++)i=n[a],i.style&&(o[a]=gt.get(i,"olddisplay"),e=i.style.display,t?(o[a]||"none"!==e||(i.style.display=""),""===i.style.display&&k(i)&&(o[a]=gt.access(i,"olddisplay",D(i.nodeName)))):o[a]||(s=k(i),(e&&"none"!==e||!s)&&gt.set(i,"olddisplay",s?e:ot.css(i,"display"))));for(a=0;r>a;a++)i=n[a],i.style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[a]||"":"none"));return n}function x(n,t,e){var i=Ut.exec(t);return i?Math.max(0,i[1]-(e||0))+(i[2]||"px"):t}function L(n,t,e,i,s){for(var o=e===(i?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===e&&(a+=ot.css(n,e+Kt[o],!0,s)),i?("content"===e&&(a-=ot.css(n,"padding"+Kt[o],!0,s)),"margin"!==e&&(a-=ot.css(n,"border"+Kt[o]+"Width",!0,s))):(a+=ot.css(n,"padding"+Kt[o],!0,s),"padding"!==e&&(a+=ot.css(n,"border"+Kt[o]+"Width",!0,s)));return a}function C(n,t,e){var i=!0,s="width"===t?n.offsetWidth:n.offsetHeight,o=y(n),a=ot.support.boxSizing&&"border-box"===ot.css(n,"boxSizing",!1,o);if(0>=s||null==s){if(s=jt(n,t,o),(0>s||null==s)&&(s=n.style[t]),qt.test(s))return s;i=a&&(ot.support.boxSizingReliable||s===n.style[t]),s=parseFloat(s)||0}return s+L(n,t,e||(a?"border":"content"),i,o)+"px"}function D(n){var t=U,e=Xt[n];return e||(e=T(n,t),"none"!==e&&e||($t=($t||ot("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(t.documentElement),t=($t[0].contentWindow||$t[0].contentDocument).document,t.write("<!doctype html><html><body>"),t.close(),e=T(n,t),$t.detach()),Xt[n]=e),e}function T(n,t){var e=ot(t.createElement(n)).appendTo(t.body),i=ot.css(e[0],"display");return e.remove(),i}function E(n,t,e,i){var s;if(ot.isArray(t))ot.each(t,function(t,s){e||ne.test(n)?i(n,s):E(n+"["+("object"==typeof s?t:"")+"]",s,e,i)});else if(e||"object"!==ot.type(t))i(n,t);else for(s in t)E(n+"["+s+"]",t[s],e,i)}function N(n){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,s=0,o=t.toLowerCase().match(rt)||[];if(ot.isFunction(e))for(;i=o[s++];)"+"===i[0]?(i=i.slice(1)||"*",(n[i]=n[i]||[]).unshift(e)):(n[i]=n[i]||[]).push(e)}}function A(n,e,i,s){function o(h){var l;return a[h]=!0,ot.each(n[h]||[],function(n,h){var c=h(e,i,s);return"string"!=typeof c||r||a[c]?r?!(l=c):t:(e.dataTypes.unshift(c),o(c),!1)}),l}var a={},r=n===be;return o(e.dataTypes[0])||!a["*"]&&o("*")}function S(n,e){var i,s,o=ot.ajaxSettings.flatOptions||{};for(i in e)e[i]!==t&&((o[i]?n:s||(s={}))[i]=e[i]);return s&&ot.extend(!0,n,s),n}function P(n,e,i){for(var s,o,a,r,h=n.contents,l=n.dataTypes;"*"===l[0];)l.shift(),s===t&&(s=n.mimeType||e.getResponseHeader("Content-Type"));if(s)for(o in h)if(h[o]&&h[o].test(s)){l.unshift(o);break}if(l[0]in i)a=l[0];else{for(o in i){if(!l[0]||n.converters[o+" "+l[0]]){a=o;break}r||(r=o)}a=a||r}return a?(a!==l[0]&&l.unshift(a),i[a]):t}function O(n,t,e,i){var s,o,a,r,h,l={},c=n.dataTypes.slice();if(c[1])for(a in n.converters)l[a.toLowerCase()]=n.converters[a];for(o=c.shift();o;)if(n.responseFields[o]&&(e[n.responseFields[o]]=t),!h&&i&&n.dataFilter&&(t=n.dataFilter(t,n.dataType)),h=o,o=c.shift())if("*"===o)o=h;else if("*"!==h&&h!==o){if(a=l[h+" "+o]||l["* "+o],!a)for(s in l)if(r=s.split(" "),r[1]===o&&(a=l[h+" "+r[0]]||l["* "+r[0]])){a===!0?a=l[s]:l[s]!==!0&&(o=r[0],c.unshift(r[1]));break}if(a!==!0)if(a&&n["throws"])t=a(t);else try{t=a(t)}catch(u){return{state:"parsererror",error:a?u:"No conversion from "+h+" to "+o}}}return{state:"success",data:t}}function R(){return setTimeout(function(){Te=t}),Te=ot.now()}function I(n,t){ot.each(t,function(t,e){for(var i=(Oe[t]||[]).concat(Oe["*"]),s=0,o=i.length;o>s;s++)if(i[s].call(n,t,e))return})}function M(n,t,e){var i,s,o=0,a=Pe.length,r=ot.Deferred().always(function(){delete h.elem}),h=function(){if(s)return!1;for(var t=Te||R(),e=Math.max(0,l.startTime+l.duration-t),i=e/l.duration||0,o=1-i,a=0,h=l.tweens.length;h>a;a++)l.tweens[a].run(o);return r.notifyWith(n,[l,o,e]),1>o&&h?e:(r.resolveWith(n,[l]),!1)},l=r.promise({elem:n,props:ot.extend({},t),opts:ot.extend(!0,{specialEasing:{}},e),originalProperties:t,originalOptions:e,startTime:Te||R(),duration:e.duration,tweens:[],createTween:function(t,e){var i=ot.Tween(n,l.opts,t,e,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(i),i},stop:function(t){var e=0,i=t?l.tweens.length:0;if(s)return this;for(s=!0;i>e;e++)l.tweens[e].run(1);return t?r.resolveWith(n,[l,t]):r.rejectWith(n,[l,t]),this}}),c=l.props;for(B(c,l.opts.specialEasing);a>o;o++)if(i=Pe[o].call(l,n,c,l.opts))return i;return I(l,c),ot.isFunction(l.opts.start)&&l.opts.start.call(n,l),ot.fx.timer(ot.extend(h,{elem:n,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function B(n,t){var e,i,s,o,a;for(e in n)if(i=ot.camelCase(e),s=t[i],o=n[e],ot.isArray(o)&&(s=o[1],o=n[e]=o[0]),e!==i&&(n[i]=o,delete n[e]),a=ot.cssHooks[i],a&&"expand"in a){o=a.expand(o),delete n[i];for(e in o)e in n||(n[e]=o[e],t[e]=s)}else t[i]=s}function F(n,e,i){var s,o,a,r,h,l,c,u,p,d=this,f=n.style,m={},g=[],b=n.nodeType&&k(n);i.queue||(u=ot._queueHooks(n,"fx"),null==u.unqueued&&(u.unqueued=0,p=u.empty.fire,u.empty.fire=function(){u.unqueued||p()}),u.unqueued++,d.always(function(){d.always(function(){u.unqueued--,ot.queue(n,"fx").length||u.empty.fire()})})),1===n.nodeType&&("height"in e||"width"in e)&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],"inline"===ot.css(n,"display")&&"none"===ot.css(n,"float")&&(f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),h=gt.get(n,"fxshow");for(s in e)if(a=e[s],Ne.exec(a)){if(delete e[s],l=l||"toggle"===a,a===(b?"hide":"show")){if("show"!==a||h===t||h[s]===t)continue;b=!0}g.push(s)}if(r=g.length){h=gt.get(n,"fxshow")||gt.access(n,"fxshow",{}),"hidden"in h&&(b=h.hidden),l&&(h.hidden=!b),b?ot(n).show():d.done(function(){ot(n).hide()}),d.done(function(){var t;gt.remove(n,"fxshow");for(t in m)ot.style(n,t,m[t])});for(s=0;r>s;s++)o=g[s],c=d.createTween(o,b?h[o]:0),m[o]=h[o]||ot.style(n,o),o in h||(h[o]=c.start,b&&(c.end=c.start,c.start="width"===o||"height"===o?1:0))}}function W(n,t,e,i,s){return new W.prototype.init(n,t,e,i,s)}function _(n,t){var e,i={height:n},s=0;for(t=t?1:0;4>s;s+=2-t)e=Kt[s],i["margin"+e]=i["padding"+e]=n;return t&&(i.opacity=i.width=n),i}function V(n){return ot.isWindow(n)?n:9===n.nodeType&&n.defaultView}var j,$,z=typeof t,G=n.location,U=n.document,q=U.documentElement,H=n.jQuery,X=n.$,Q={},Y=[],K="2.0.0",J=Y.concat,Z=Y.push,nt=Y.slice,tt=Y.indexOf,et=Q.toString,it=Q.hasOwnProperty,st=K.trim,ot=function(n,t){return new ot.fn.init(n,t,j)},at=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=/\S+/g,ht=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,lt=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ct=/^-ms-/,ut=/-([\da-z])/gi,pt=function(n,t){return t.toUpperCase()},dt=function(){U.removeEventListener("DOMContentLoaded",dt,!1),n.removeEventListener("load",dt,!1),ot.ready()};ot.fn=ot.prototype={jquery:K,constructor:ot,init:function(n,e,i){var s,o;if(!n)return this;if("string"==typeof n){if(s="<"===n.charAt(0)&&">"===n.charAt(n.length-1)&&n.length>=3?[null,n,null]:ht.exec(n),!s||!s[1]&&e)return!e||e.jquery?(e||i).find(n):this.constructor(e).find(n);if(s[1]){if(e=e instanceof ot?e[0]:e,ot.merge(this,ot.parseHTML(s[1],e&&e.nodeType?e.ownerDocument||e:U,!0)),lt.test(s[1])&&ot.isPlainObject(e))for(s in e)ot.isFunction(this[s])?this[s](e[s]):this.attr(s,e[s]);return this}return o=U.getElementById(s[2]),o&&o.parentNode&&(this.length=1,this[0]=o),this.context=U,this.selector=n,this}return n.nodeType?(this.context=this[0]=n,this.length=1,this):ot.isFunction(n)?i.ready(n):(n.selector!==t&&(this.selector=n.selector,this.context=n.context),ot.makeArray(n,this))},selector:"",length:0,toArray:function(){return nt.call(this)},get:function(n){return null==n?this.toArray():0>n?this[this.length+n]:this[n]},pushStack:function(n){var t=ot.merge(this.constructor(),n);return t.prevObject=this,t.context=this.context,t},each:function(n,t){return ot.each(this,n,t)},ready:function(n){return ot.ready.promise().done(n),this},slice:function(){return this.pushStack(nt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(n){var t=this.length,e=+n+(0>n?t:0);return this.pushStack(e>=0&&t>e?[this[e]]:[])},map:function(n){return this.pushStack(ot.map(this,function(t,e){return n.call(t,e,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:Z,sort:[].sort,splice:[].splice},ot.fn.init.prototype=ot.fn,ot.extend=ot.fn.extend=function(){var n,e,i,s,o,a,r=arguments[0]||{},h=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[1]||{},h=2),"object"==typeof r||ot.isFunction(r)||(r={}),l===h&&(r=this,--h);l>h;h++)if(null!=(n=arguments[h]))for(e in n)i=r[e],s=n[e],r!==s&&(c&&s&&(ot.isPlainObject(s)||(o=ot.isArray(s)))?(o?(o=!1,a=i&&ot.isArray(i)?i:[]):a=i&&ot.isPlainObject(i)?i:{},r[e]=ot.extend(c,a,s)):s!==t&&(r[e]=s));return r},ot.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),noConflict:function(t){return n.$===ot&&(n.$=X),t&&n.jQuery===ot&&(n.jQuery=H),ot},isReady:!1,readyWait:1,holdReady:function(n){n?ot.readyWait++:ot.ready(!0)},ready:function(n){(n===!0?--ot.readyWait:ot.isReady)||(ot.isReady=!0,n!==!0&&--ot.readyWait>0||($.resolveWith(U,[ot]),ot.fn.trigger&&ot(U).trigger("ready").off("ready")))},isFunction:function(n){return"function"===ot.type(n)},isArray:Array.isArray,isWindow:function(n){return null!=n&&n===n.window},isNumeric:function(n){return!isNaN(parseFloat(n))&&isFinite(n)},type:function(n){return null==n?n+"":"object"==typeof n||"function"==typeof n?Q[et.call(n)]||"object":typeof n},isPlainObject:function(n){if("object"!==ot.type(n)||n.nodeType||ot.isWindow(n))return!1;try{if(n.constructor&&!it.call(n.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}return!0},isEmptyObject:function(n){var t;for(t in n)return!1;return!0},error:function(n){throw Error(n)},parseHTML:function(n,t,e){if(!n||"string"!=typeof n)return null;"boolean"==typeof t&&(e=t,t=!1),t=t||U;var i=lt.exec(n),s=!e&&[];return i?[t.createElement(i[1])]:(i=ot.buildFragment([n],t,s),s&&ot(s).remove(),ot.merge([],i.childNodes))},parseJSON:JSON.parse,parseXML:function(n){var e,i;if(!n||"string"!=typeof n)return null;try{i=new DOMParser,e=i.parseFromString(n,"text/xml")}catch(s){e=t}return(!e||e.getElementsByTagName("parsererror").length)&&ot.error("Invalid XML: "+n),e},noop:function(){},globalEval:function(n){var t,e=eval;n=ot.trim(n),n&&(1===n.indexOf("use strict")?(t=U.createElement("script"),t.text=n,U.head.appendChild(t).parentNode.removeChild(t)):e(n))},camelCase:function(n){return n.replace(ct,"ms-").replace(ut,pt)},nodeName:function(n,t){return n.nodeName&&n.nodeName.toLowerCase()===t.toLowerCase()},each:function(n,t,i){var s,o=0,a=n.length,r=e(n);if(i){if(r)for(;a>o&&(s=t.apply(n[o],i),s!==!1);o++);else for(o in n)if(s=t.apply(n[o],i),s===!1)break}else if(r)for(;a>o&&(s=t.call(n[o],o,n[o]),s!==!1);o++);else for(o in n)if(s=t.call(n[o],o,n[o]),s===!1)break;return n},trim:function(n){return null==n?"":st.call(n)},makeArray:function(n,t){var i=t||[];return null!=n&&(e(Object(n))?ot.merge(i,"string"==typeof n?[n]:n):Z.call(i,n)),i},inArray:function(n,t,e){return null==t?-1:tt.call(t,n,e)},merge:function(n,e){var i=e.length,s=n.length,o=0;if("number"==typeof i)for(;i>o;o++)n[s++]=e[o];else for(;e[o]!==t;)n[s++]=e[o++];return n.length=s,n},grep:function(n,t,e){var i,s=[],o=0,a=n.length;for(e=!!e;a>o;o++)i=!!t(n[o],o),e!==i&&s.push(n[o]);return s},map:function(n,t,i){var s,o=0,a=n.length,r=e(n),h=[];if(r)for(;a>o;o++)s=t(n[o],o,i),null!=s&&(h[h.length]=s);else for(o in n)s=t(n[o],o,i),null!=s&&(h[h.length]=s);return J.apply([],h)},guid:1,proxy:function(n,e){var i,s,o;return"string"==typeof e&&(i=n[e],e=n,n=i),ot.isFunction(n)?(s=nt.call(arguments,2),o=function(){return n.apply(e||this,s.concat(nt.call(arguments)))},o.guid=n.guid=n.guid||ot.guid++,o):t},access:function(n,e,i,s,o,a,r){var h=0,l=n.length,c=null==i;if("object"===ot.type(i)){o=!0;for(h in i)ot.access(n,e,h,i[h],!0,a,r)}else if(s!==t&&(o=!0,ot.isFunction(s)||(r=!0),c&&(r?(e.call(n,s),e=null):(c=e,e=function(n,t,e){return c.call(ot(n),e)})),e))for(;l>h;h++)e(n[h],i,r?s:s.call(n[h],h,e(n[h],i)));return o?n:c?e.call(n):l?e(n[0],i):a},now:Date.now,swap:function(n,t,e,i){var s,o,a={};for(o in t)a[o]=n.style[o],n.style[o]=t[o];s=e.apply(n,i||[]);for(o in t)n.style[o]=a[o];return s}}),ot.ready.promise=function(t){return $||($=ot.Deferred(),"complete"===U.readyState?setTimeout(ot.ready):(U.addEventListener("DOMContentLoaded",dt,!1),n.addEventListener("load",dt,!1))),$.promise(t)},ot.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(n,t){Q["[object "+t+"]"]=t.toLowerCase()}),j=ot(U),function(n,t){function e(n){return kt.test(n+"")}function i(){var n,t=[];return n=function(e,i){return t.push(e+=" ")>T.cacheLength&&delete n[t.shift()],n[e]=i}}function s(n){return n[V]=!0,n}function o(n){var t=R.createElement("div");try{return!!n(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function a(n,t,e,i){var s,o,a,r,h,l,c,u,p,m;if((t?t.ownerDocument||t:j)!==R&&O(t),t=t||R,e=e||[],!n||"string"!=typeof n)return e;if(1!==(r=t.nodeType)&&9!==r)return[];if(M&&!i){if(s=yt.exec(n))if(a=s[1]){if(9===r){if(o=t.getElementById(a),!o||!o.parentNode)return e;if(o.id===a)return e.push(o),e}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(a))&&_(t,o)&&o.id===a)return e.push(o),e}else{if(s[2])return tt.apply(e,t.getElementsByTagName(n)),e;if((a=s[3])&&$.getElementsByClassName&&t.getElementsByClassName)return tt.apply(e,t.getElementsByClassName(a)),e}if($.qsa&&(!B||!B.test(n))){if(u=c=V,p=t,m=9===r&&n,1===r&&"object"!==t.nodeName.toLowerCase()){for(l=d(n),(c=t.getAttribute("id"))?u=c.replace(Lt,"\\$&"):t.setAttribute("id",u),u="[id='"+u+"'] ",h=l.length;h--;)l[h]=u+f(l[h]);p=ft.test(n)&&t.parentNode||t,m=l.join(",")}if(m)try{return tt.apply(e,p.querySelectorAll(m)),e}catch(g){}finally{c||t.removeAttribute("id")}}}return x(n.replace(ut,"$1"),t,e,i)}function r(n,t){var e=t&&n,i=e&&(~t.sourceIndex||K)-(~n.sourceIndex||K);if(i)return i;if(e)for(;e=e.nextSibling;)if(e===t)return-1;return n?1:-1}function h(n,e,i){var s;return i?t:(s=n.getAttributeNode(e))&&s.specified?s.value:n[e]===!0?e.toLowerCase():null}function l(n,e,i){var s;return i?t:s=n.getAttribute(e,"type"===e.toLowerCase()?1:2)}function c(n){return function(t){var e=t.nodeName.toLowerCase();return"input"===e&&t.type===n}}function u(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function p(n){return s(function(t){return t=+t,s(function(e,i){for(var s,o=n([],e.length,t),a=o.length;a--;)e[s=o[a]]&&(e[s]=!(i[s]=e[s]))})})}function d(n,t){var e,i,s,o,r,h,l,c=q[n+" "];if(c)return t?0:c.slice(0);for(r=n,h=[],l=T.preFilter;r;){(!e||(i=pt.exec(r)))&&(i&&(r=r.slice(i[0].length)||r),h.push(s=[])),e=!1,(i=dt.exec(r))&&(e=i.shift(),s.push({value:e,type:i[0].replace(ut," ")}),r=r.slice(e.length));for(o in T.filter)!(i=vt[o].exec(r))||l[o]&&!(i=l[o](i))||(e=i.shift(),s.push({value:e,type:o,matches:i}),r=r.slice(e.length));if(!e)break}return t?r.length:r?a.error(n):q(n,h).slice(0)}function f(n){for(var t=0,e=n.length,i="";e>t;t++)i+=n[t].value;return i}function m(n,t,e){var i=t.dir,s=e&&"parentNode"===i,o=G++;return t.first?function(t,e,o){for(;t=t[i];)if(1===t.nodeType||s)return n(t,e,o)}:function(t,e,a){var r,h,l,c=z+" "+o;if(a){for(;t=t[i];)if((1===t.nodeType||s)&&n(t,e,a))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(l=t[V]||(t[V]={}),(h=l[i])&&h[0]===c){if((r=h[1])===!0||r===D)return r===!0}else if(h=l[i]=[c],h[1]=n(t,e,a)||D,h[1]===!0)return!0}}function g(n){return n.length>1?function(t,e,i){for(var s=n.length;s--;)if(!n[s](t,e,i))return!1;return!0}:n[0]}function b(n,t,e,i,s){for(var o,a=[],r=0,h=n.length,l=null!=t;h>r;r++)(o=n[r])&&(!e||e(o,i,s))&&(a.push(o),l&&t.push(r));return a}function v(n,t,e,i,o,a){return i&&!i[V]&&(i=v(i)),o&&!o[V]&&(o=v(o,a)),s(function(s,a,r,h){var l,c,u,p=[],d=[],f=a.length,m=s||w(t||"*",r.nodeType?[r]:r,[]),g=!n||!s&&t?m:b(m,p,n,r,h),v=e?o||(s?n:f||i)?[]:a:g;if(e&&e(g,v,r,h),i)for(l=b(v,d),i(l,[],r,h),c=l.length;c--;)(u=l[c])&&(v[d[c]]=!(g[d[c]]=u));if(s){if(o||n){if(o){for(l=[],c=v.length;c--;)(u=v[c])&&l.push(g[c]=u);o(null,v=[],l,h)}for(c=v.length;c--;)(u=v[c])&&(l=o?it.call(s,u):p[c])>-1&&(s[l]=!(a[l]=u))}}else v=b(v===a?v.splice(f,v.length):v),o?o(null,a,v,h):tt.apply(a,v)})}function k(n){for(var t,e,i,s=n.length,o=T.relative[n[0].type],a=o||T.relative[" "],r=o?1:0,h=m(function(n){return n===t},a,!0),l=m(function(n){return it.call(t,n)>-1},a,!0),c=[function(n,e,i){return!o&&(i||e!==S)||((t=e).nodeType?h(n,e,i):l(n,e,i))}];s>r;r++)if(e=T.relative[n[r].type])c=[m(g(c),e)];else{if(e=T.filter[n[r].type].apply(null,n[r].matches),e[V]){for(i=++r;s>i&&!T.relative[n[i].type];i++);return v(r>1&&g(c),r>1&&f(n.slice(0,r-1)).replace(ut,"$1"),e,i>r&&k(n.slice(r,i)),s>i&&k(n=n.slice(i)),s>i&&f(n))}c.push(e)}return g(c)}function y(n,t){var e=0,i=t.length>0,o=n.length>0,r=function(s,r,h,l,c){var u,p,d,f=[],m=0,g="0",v=s&&[],k=null!=c,y=S,w=s||o&&T.find.TAG("*",c&&r.parentNode||r),x=z+=null==y?1:Math.random()||.1;for(k&&(S=r!==R&&r,D=e);null!=(u=w[g]);g++){if(o&&u){for(p=0;d=n[p++];)if(d(u,r,h)){l.push(u);break}k&&(z=x,D=++e)}i&&((u=!d&&u)&&m--,s&&v.push(u))}if(m+=g,i&&g!==m){for(p=0;d=t[p++];)d(v,f,r,h);if(s){if(m>0)for(;g--;)v[g]||f[g]||(f[g]=Z.call(l));f=b(f)}tt.apply(l,f),k&&!s&&f.length>0&&m+t.length>1&&a.uniqueSort(l)}return k&&(z=x,S=y),v};return i?s(r):r}function w(n,t,e){for(var i=0,s=t.length;s>i;i++)a(n,t[i],e);return e}function x(n,t,e,i){var s,o,a,r,h,l=d(n);if(!i&&1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&M&&T.relative[o[1].type]){if(t=(T.find.ID(a.matches[0].replace(Ct,Dt),t)||[])[0],!t)return e;n=n.slice(o.shift().value.length)}for(s=vt.needsContext.test(n)?0:o.length;s--&&(a=o[s],!T.relative[r=a.type]);)if((h=T.find[r])&&(i=h(a.matches[0].replace(Ct,Dt),ft.test(o[0].type)&&t.parentNode||t))){if(o.splice(s,1),n=i.length&&f(o),!n)return tt.apply(e,i),e;break}}return A(n,l)(i,t,!M,e,ft.test(n)),e}function L(){}var C,D,T,E,N,A,S,P,O,R,I,M,B,F,W,_,V="sizzle"+-new Date,j=n.document,$={},z=0,G=0,U=i(),q=i(),H=i(),X=!1,Q=function(){return 0},Y=typeof t,K=1<<31,J=[],Z=J.pop,nt=J.push,tt=J.push,et=J.slice,it=J.indexOf||function(n){for(var t=0,e=this.length;e>t;t++)if(this[t]===n)return t;return-1},st="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",at="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ht=rt.replace("w","w#"),lt="\\["+at+"*("+rt+")"+at+"*(?:([*^$|!~]?=)"+at+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+ht+")|)|)"+at+"*\\]",ct=":("+rt+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+lt.replace(3,8)+")*)|.*)\\)|)",ut=RegExp("^"+at+"+|((?:^|[^\\\\])(?:\\\\.)*)"+at+"+$","g"),pt=RegExp("^"+at+"*,"+at+"*"),dt=RegExp("^"+at+"*([>+~]|"+at+")"+at+"*"),ft=RegExp(at+"*[+~]"),mt=RegExp("="+at+"*([^\\]'\"]*)"+at+"*\\]","g"),gt=RegExp(ct),bt=RegExp("^"+ht+"$"),vt={ID:RegExp("^#("+rt+")"),CLASS:RegExp("^\\.("+rt+")"),TAG:RegExp("^("+rt.replace("w","w*")+")"),ATTR:RegExp("^"+lt),PSEUDO:RegExp("^"+ct),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+at+"*(even|odd|(([+-]|)(\\d*)n|)"+at+"*(?:([+-]|)"+at+"*(\\d+)|))"+at+"*\\)|)","i"),"boolean":RegExp("^(?:"+st+")$","i"),needsContext:RegExp("^"+at+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+at+"*((?:-\\d)?\\d*)"+at+"*\\)|)(?=[^-]|$)","i")},kt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wt=/^(?:input|select|textarea|button)$/i,xt=/^h\d$/i,Lt=/'|\\/g,Ct=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,Dt=function(n,t){var e="0x"+t-65536;return e!==e?t:0>e?String.fromCharCode(e+65536):String.fromCharCode(55296|e>>10,56320|1023&e)};try{tt.apply(J=et.call(j.childNodes),j.childNodes),J[j.childNodes.length].nodeType}catch(Tt){tt={apply:J.length?function(n,t){nt.apply(n,et.call(t))}:function(n,t){for(var e=n.length,i=0;n[e++]=t[i++];);n.length=e-1}}}N=a.isXML=function(n){var t=n&&(n.ownerDocument||n).documentElement;return t?"HTML"!==t.nodeName:!1},O=a.setDocument=function(n){var i=n?n.ownerDocument||n:j;return i!==R&&9===i.nodeType&&i.documentElement?(R=i,I=i.documentElement,M=!N(i),$.getElementsByTagName=o(function(n){return n.appendChild(i.createComment("")),!n.getElementsByTagName("*").length}),$.attributes=o(function(n){return n.className="i",!n.getAttribute("className")}),$.getElementsByClassName=o(function(n){return n.innerHTML="<div class='a'></div><div class='a i'></div>",n.firstChild.className="i",2===n.getElementsByClassName("i").length}),$.sortDetached=o(function(n){return 1&n.compareDocumentPosition(R.createElement("div"))}),$.getById=o(function(n){return I.appendChild(n).id=V,!i.getElementsByName||!i.getElementsByName(V).length}),$.getById?(T.find.ID=function(n,t){if(typeof t.getElementById!==Y&&M){var e=t.getElementById(n);return e&&e.parentNode?[e]:[]}},T.filter.ID=function(n){var t=n.replace(Ct,Dt);return function(n){return n.getAttribute("id")===t}}):(T.find.ID=function(n,e){if(typeof e.getElementById!==Y&&M){var i=e.getElementById(n);return i?i.id===n||typeof i.getAttributeNode!==Y&&i.getAttributeNode("id").value===n?[i]:t:[]}},T.filter.ID=function(n){var t=n.replace(Ct,Dt);return function(n){var e=typeof n.getAttributeNode!==Y&&n.getAttributeNode("id");return e&&e.value===t}}),T.find.TAG=$.getElementsByTagName?function(n,e){return typeof e.getElementsByTagName!==Y?e.getElementsByTagName(n):t}:function(n,t){var e,i=[],s=0,o=t.getElementsByTagName(n);if("*"===n){for(;e=o[s++];)1===e.nodeType&&i.push(e);return i}return o},T.find.CLASS=$.getElementsByClassName&&function(n,e){return typeof e.getElementsByClassName!==Y&&M?e.getElementsByClassName(n):t},F=[],B=[],($.qsa=e(i.querySelectorAll))&&(o(function(n){n.innerHTML="<select><option selected=''></option></select>",n.querySelectorAll("[selected]").length||B.push("\\["+at+"*(?:value|"+st+")"),n.querySelectorAll(":checked").length||B.push(":checked")}),o(function(n){var t=R.createElement("input");t.setAttribute("type","hidden"),n.appendChild(t).setAttribute("t",""),n.querySelectorAll("[t^='']").length&&B.push("[*^$]="+at+"*(?:''|\"\")"),n.querySelectorAll(":enabled").length||B.push(":enabled",":disabled"),n.querySelectorAll("*,:x"),B.push(",.*:")})),($.matchesSelector=e(W=I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&o(function(n){$.disconnectedMatch=W.call(n,"div"),W.call(n,"[s!='']:x"),F.push("!=",ct)}),B=B.length&&RegExp(B.join("|")),F=F.length&&RegExp(F.join("|")),_=e(I.contains)||I.compareDocumentPosition?function(n,t){var e=9===n.nodeType?n.documentElement:n,i=t&&t.parentNode;return n===i||!(!i||1!==i.nodeType||!(e.contains?e.contains(i):n.compareDocumentPosition&&16&n.compareDocumentPosition(i)))}:function(n,t){if(t)for(;t=t.parentNode;)if(t===n)return!0;return!1},Q=I.compareDocumentPosition?function(n,t){if(n===t)return X=!0,0;var e=t.compareDocumentPosition&&n.compareDocumentPosition&&n.compareDocumentPosition(t);return e?1&e||!$.sortDetached&&t.compareDocumentPosition(n)===e?n===i||_(j,n)?-1:t===i||_(j,t)?1:P?it.call(P,n)-it.call(P,t):0:4&e?-1:1:n.compareDocumentPosition?-1:1}:function(n,t){var e,s=0,o=n.parentNode,a=t.parentNode,h=[n],l=[t];if(n===t)return X=!0,0;if(!o||!a)return n===i?-1:t===i?1:o?-1:a?1:P?it.call(P,n)-it.call(P,t):0;if(o===a)return r(n,t);for(e=n;e=e.parentNode;)h.unshift(e);for(e=t;e=e.parentNode;)l.unshift(e);for(;h[s]===l[s];)s++;return s?r(h[s],l[s]):h[s]===j?-1:l[s]===j?1:0},R):R},a.matches=function(n,t){return a(n,null,null,t)},a.matchesSelector=function(n,t){if((n.ownerDocument||n)!==R&&O(n),t=t.replace(mt,"='$1']"),!(!$.matchesSelector||!M||F&&F.test(t)||B&&B.test(t)))try{var e=W.call(n,t);if(e||$.disconnectedMatch||n.document&&11!==n.document.nodeType)return e}catch(i){}return a(t,R,null,[n]).length>0},a.contains=function(n,t){return(n.ownerDocument||n)!==R&&O(n),_(n,t)},a.attr=function(n,e){(n.ownerDocument||n)!==R&&O(n);var i=T.attrHandle[e.toLowerCase()],s=i&&i(n,e,!M);return s===t?$.attributes||!M?n.getAttribute(e):(s=n.getAttributeNode(e))&&s.specified?s.value:null:s},a.error=function(n){throw Error("Syntax error, unrecognized expression: "+n)},a.uniqueSort=function(n){var t,e=[],i=0,s=0;if(X=!$.detectDuplicates,P=!$.sortStable&&n.slice(0),n.sort(Q),X){for(;t=n[s++];)t===n[s]&&(i=e.push(s));for(;i--;)n.splice(e[i],1)}return n},E=a.getText=function(n){var t,e="",i=0,s=n.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof n.textContent)return n.textContent;for(n=n.firstChild;n;n=n.nextSibling)e+=E(n)}else if(3===s||4===s)return n.nodeValue}else for(;t=n[i];i++)e+=E(t);return e},T=a.selectors={cacheLength:50,createPseudo:s,match:vt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(n){return n[1]=n[1].replace(Ct,Dt),n[3]=(n[4]||n[5]||"").replace(Ct,Dt),"~="===n[2]&&(n[3]=" "+n[3]+" "),n.slice(0,4)},CHILD:function(n){return n[1]=n[1].toLowerCase(),"nth"===n[1].slice(0,3)?(n[3]||a.error(n[0]),n[4]=+(n[4]?n[5]+(n[6]||1):2*("even"===n[3]||"odd"===n[3])),n[5]=+(n[7]+n[8]||"odd"===n[3])):n[3]&&a.error(n[0]),n},PSEUDO:function(n){var t,e=!n[5]&&n[2];return vt.CHILD.test(n[0])?null:(n[4]?n[2]=n[4]:e&&gt.test(e)&&(t=d(e,!0))&&(t=e.indexOf(")",e.length-t)-e.length)&&(n[0]=n[0].slice(0,t),n[2]=e.slice(0,t)),n.slice(0,3))}},filter:{TAG:function(n){var t=n.replace(Ct,Dt).toLowerCase();return"*"===n?function(){return!0}:function(n){return n.nodeName&&n.nodeName.toLowerCase()===t}},CLASS:function(n){var t=U[n+" "];return t||(t=RegExp("(^|"+at+")"+n+"("+at+"|$)"))&&U(n,function(n){return t.test("string"==typeof n.className&&n.className||typeof n.getAttribute!==Y&&n.getAttribute("class")||"")})},ATTR:function(n,t,e){return function(i){var s=a.attr(i,n);return null==s?"!="===t:t?(s+="","="===t?s===e:"!="===t?s!==e:"^="===t?e&&0===s.indexOf(e):"*="===t?e&&s.indexOf(e)>-1:"$="===t?e&&s.slice(-e.length)===e:"~="===t?(" "+s+" ").indexOf(e)>-1:"|="===t?s===e||s.slice(0,e.length+1)===e+"-":!1):!0}},CHILD:function(n,t,e,i,s){var o="nth"!==n.slice(0,3),a="last"!==n.slice(-4),r="of-type"===t;return 1===i&&0===s?function(n){return!!n.parentNode}:function(t,e,h){var l,c,u,p,d,f,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,b=r&&t.nodeName.toLowerCase(),v=!h&&!r;if(g){if(o){for(;m;){for(u=t;u=u[m];)if(r?u.nodeName.toLowerCase()===b:1===u.nodeType)return!1;f=m="only"===n&&!f&&"nextSibling"}return!0}if(f=[a?g.firstChild:g.lastChild],a&&v){for(c=g[V]||(g[V]={}),l=c[n]||[],d=l[0]===z&&l[1],p=l[0]===z&&l[2],u=d&&g.childNodes[d];u=++d&&u&&u[m]||(p=d=0)||f.pop();)if(1===u.nodeType&&++p&&u===t){c[n]=[z,d,p];break}}else if(v&&(l=(t[V]||(t[V]={}))[n])&&l[0]===z)p=l[1];else for(;(u=++d&&u&&u[m]||(p=d=0)||f.pop())&&((r?u.nodeName.toLowerCase()!==b:1!==u.nodeType)||!++p||(v&&((u[V]||(u[V]={}))[n]=[z,p]),u!==t)););return p-=s,p===i||0===p%i&&p/i>=0}}},PSEUDO:function(n,t){var e,i=T.pseudos[n]||T.setFilters[n.toLowerCase()]||a.error("unsupported pseudo: "+n);return i[V]?i(t):i.length>1?(e=[n,n,"",t],T.setFilters.hasOwnProperty(n.toLowerCase())?s(function(n,e){for(var s,o=i(n,t),a=o.length;a--;)s=it.call(n,o[a]),n[s]=!(e[s]=o[a])}):function(n){return i(n,0,e)}):i}},pseudos:{not:s(function(n){var t=[],e=[],i=A(n.replace(ut,"$1"));return i[V]?s(function(n,t,e,s){for(var o,a=i(n,null,s,[]),r=n.length;r--;)(o=a[r])&&(n[r]=!(t[r]=o))}):function(n,s,o){return t[0]=n,i(t,null,o,e),!e.pop()}}),has:s(function(n){return function(t){return a(n,t).length>0}}),contains:s(function(n){return function(t){return(t.textContent||t.innerText||E(t)).indexOf(n)>-1}}),lang:s(function(n){return bt.test(n||"")||a.error("unsupported lang: "+n),n=n.replace(Ct,Dt).toLowerCase(),function(t){var e;do if(e=M?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return e=e.toLowerCase(),e===n||0===e.indexOf(n+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(n){return n===I},focus:function(n){return n===R.activeElement&&(!R.hasFocus||R.hasFocus())&&!!(n.type||n.href||~n.tabIndex)},enabled:function(n){return n.disabled===!1},disabled:function(n){return n.disabled===!0},checked:function(n){var t=n.nodeName.toLowerCase();return"input"===t&&!!n.checked||"option"===t&&!!n.selected},selected:function(n){return n.parentNode&&n.parentNode.selectedIndex,n.selected===!0},empty:function(n){for(n=n.firstChild;n;n=n.nextSibling)if(n.nodeName>"@"||3===n.nodeType||4===n.nodeType)return!1;return!0},parent:function(n){return!T.pseudos.empty(n)},header:function(n){return xt.test(n.nodeName)},input:function(n){return wt.test(n.nodeName)},button:function(n){var t=n.nodeName.toLowerCase();return"input"===t&&"button"===n.type||"button"===t},text:function(n){var t;return"input"===n.nodeName.toLowerCase()&&"text"===n.type&&(null==(t=n.getAttribute("type"))||t.toLowerCase()===n.type)},first:p(function(){return[0]}),last:p(function(n,t){return[t-1]}),eq:p(function(n,t,e){return[0>e?e+t:e]}),even:p(function(n,t){for(var e=0;t>e;e+=2)n.push(e);return n}),odd:p(function(n,t){for(var e=1;t>e;e+=2)n.push(e);return n}),lt:p(function(n,t,e){for(var i=0>e?e+t:e;--i>=0;)n.push(i);return n}),gt:p(function(n,t,e){for(var i=0>e?e+t:e;t>++i;)n.push(i);
return n})}};for(C in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[C]=c(C);for(C in{submit:!0,reset:!0})T.pseudos[C]=u(C);A=a.compile=function(n,t){var e,i=[],s=[],o=H[n+" "];if(!o){for(t||(t=d(n)),e=t.length;e--;)o=k(t[e]),o[V]?i.push(o):s.push(o);o=H(n,y(s,i))}return o},T.pseudos.nth=T.pseudos.eq,L.prototype=T.filters=T.pseudos,T.setFilters=new L,$.sortStable=V.split("").sort(Q).join("")===V,O(),[0,0].sort(Q),$.detectDuplicates=X,o(function(n){if(n.innerHTML="<a href='#'></a>","#"!==n.firstChild.getAttribute("href"))for(var t="type|href|height|width".split("|"),e=t.length;e--;)T.attrHandle[t[e]]=l}),o(function(n){if(null!=n.getAttribute("disabled"))for(var t=st.split("|"),e=t.length;e--;)T.attrHandle[t[e]]=h}),ot.find=a,ot.expr=a.selectors,ot.expr[":"]=ot.expr.pseudos,ot.unique=a.uniqueSort,ot.text=a.getText,ot.isXMLDoc=a.isXML,ot.contains=a.contains}(n);var ft={};ot.Callbacks=function(n){n="string"==typeof n?ft[n]||i(n):ot.extend({},n);var e,s,o,a,r,h,l=[],c=!n.once&&[],u=function(t){for(e=n.memory&&t,s=!0,h=a||0,a=0,r=l.length,o=!0;l&&r>h;h++)if(l[h].apply(t[0],t[1])===!1&&n.stopOnFalse){e=!1;break}o=!1,l&&(c?c.length&&u(c.shift()):e?l=[]:p.disable())},p={add:function(){if(l){var t=l.length;(function i(t){ot.each(t,function(t,e){var s=ot.type(e);"function"===s?n.unique&&p.has(e)||l.push(e):e&&e.length&&"string"!==s&&i(e)})})(arguments),o?r=l.length:e&&(a=t,u(e))}return this},remove:function(){return l&&ot.each(arguments,function(n,t){for(var e;(e=ot.inArray(t,l,e))>-1;)l.splice(e,1),o&&(r>=e&&r--,h>=e&&h--)}),this},has:function(n){return n?ot.inArray(n,l)>-1:!(!l||!l.length)},empty:function(){return l=[],r=0,this},disable:function(){return l=c=e=t,this},disabled:function(){return!l},lock:function(){return c=t,e||p.disable(),this},locked:function(){return!c},fireWith:function(n,t){return t=t||[],t=[n,t.slice?t.slice():t],!l||s&&!c||(o?c.push(t):u(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!s}};return p},ot.extend({Deferred:function(n){var t=[["resolve","done",ot.Callbacks("once memory"),"resolved"],["reject","fail",ot.Callbacks("once memory"),"rejected"],["notify","progress",ot.Callbacks("memory")]],e="pending",i={state:function(){return e},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var n=arguments;return ot.Deferred(function(e){ot.each(t,function(t,o){var a=o[0],r=ot.isFunction(n[t])&&n[t];s[o[1]](function(){var n=r&&r.apply(this,arguments);n&&ot.isFunction(n.promise)?n.promise().done(e.resolve).fail(e.reject).progress(e.notify):e[a+"With"](this===i?e.promise():this,r?[n]:arguments)})}),n=null}).promise()},promise:function(n){return null!=n?ot.extend(n,i):i}},s={};return i.pipe=i.then,ot.each(t,function(n,o){var a=o[2],r=o[3];i[o[1]]=a.add,r&&a.add(function(){e=r},t[1^n][2].disable,t[2][2].lock),s[o[0]]=function(){return s[o[0]+"With"](this===s?i:this,arguments),this},s[o[0]+"With"]=a.fireWith}),i.promise(s),n&&n.call(s,s),s},when:function(n){var t,e,i,s=0,o=nt.call(arguments),a=o.length,r=1!==a||n&&ot.isFunction(n.promise)?a:0,h=1===r?n:ot.Deferred(),l=function(n,e,i){return function(s){e[n]=this,i[n]=arguments.length>1?nt.call(arguments):s,i===t?h.notifyWith(e,i):--r||h.resolveWith(e,i)}};if(a>1)for(t=Array(a),e=Array(a),i=Array(a);a>s;s++)o[s]&&ot.isFunction(o[s].promise)?o[s].promise().done(l(s,i,o)).fail(h.reject).progress(l(s,e,t)):--r;return r||h.resolveWith(i,o),h.promise()}}),ot.support=function(t){var e=U.createElement("input"),i=U.createDocumentFragment(),s=U.createElement("div"),o=U.createElement("select"),a=o.appendChild(U.createElement("option"));return e.type?(e.type="checkbox",t.checkOn=""!==e.value,t.optSelected=a.selected,t.reliableMarginRight=!0,t.boxSizingReliable=!0,t.pixelPosition=!1,e.checked=!0,t.noCloneChecked=e.cloneNode(!0).checked,o.disabled=!0,t.optDisabled=!a.disabled,e=U.createElement("input"),e.value="t",e.type="radio",t.radioValue="t"===e.value,e.setAttribute("checked","t"),e.setAttribute("name","t"),i.appendChild(e),t.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,t.focusinBubbles="onfocusin"in n,s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",t.clearCloneStyle="content-box"===s.style.backgroundClip,ot(function(){var e,i,o="padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",a=U.getElementsByTagName("body")[0];a&&(e=U.createElement("div"),e.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",a.appendChild(e).appendChild(s),s.innerHTML="",s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",ot.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===s.offsetWidth}),n.getComputedStyle&&(t.pixelPosition="1%"!==(n.getComputedStyle(s,null)||{}).top,t.boxSizingReliable="4px"===(n.getComputedStyle(s,null)||{width:"4px"}).width,i=s.appendChild(U.createElement("div")),i.style.cssText=s.style.cssText=o,i.style.marginRight=i.style.width="0",s.style.width="1px",t.reliableMarginRight=!parseFloat((n.getComputedStyle(i,null)||{}).marginRight)),a.removeChild(e))}),t):t}({});var mt,gt,bt=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,vt=/([A-Z])/g;s.uid=1,s.accepts=function(n){return n.nodeType?1===n.nodeType||9===n.nodeType:!0},s.prototype={key:function(n){if(!s.accepts(n))return 0;var t={},e=n[this.expando];if(!e){e=s.uid++;try{t[this.expando]={value:e},Object.defineProperties(n,t)}catch(i){t[this.expando]=e,ot.extend(n,t)}}return this.cache[e]||(this.cache[e]={}),e},set:function(n,t,e){var i,s=this.key(n),o=this.cache[s];if("string"==typeof t)o[t]=e;else if(ot.isEmptyObject(o))this.cache[s]=t;else for(i in t)o[i]=t[i]},get:function(n,e){var i=this.cache[this.key(n)];return e===t?i:i[e]},access:function(n,e,i){return e===t||e&&"string"==typeof e&&i===t?this.get(n,e):(this.set(n,e,i),i!==t?i:e)},remove:function(n,e){var i,s,o=this.key(n),a=this.cache[o];if(e===t)this.cache[o]={};else{ot.isArray(e)?s=e.concat(e.map(ot.camelCase)):e in a?s=[e]:(s=ot.camelCase(e),s=s in a?[s]:s.match(rt)||[]),i=s.length;for(;i--;)delete a[s[i]]}},hasData:function(n){return!ot.isEmptyObject(this.cache[n[this.expando]]||{})},discard:function(n){delete this.cache[this.key(n)]}},mt=new s,gt=new s,ot.extend({acceptData:s.accepts,hasData:function(n){return mt.hasData(n)||gt.hasData(n)},data:function(n,t,e){return mt.access(n,t,e)},removeData:function(n,t){mt.remove(n,t)},_data:function(n,t,e){return gt.access(n,t,e)},_removeData:function(n,t){gt.remove(n,t)}}),ot.fn.extend({data:function(n,e){var i,s,a=this[0],r=0,h=null;if(n===t){if(this.length&&(h=mt.get(a),1===a.nodeType&&!gt.get(a,"hasDataAttrs"))){for(i=a.attributes;i.length>r;r++)s=i[r].name,0===s.indexOf("data-")&&(s=ot.camelCase(s.substring(5)),o(a,s,h[s]));gt.set(a,"hasDataAttrs",!0)}return h}return"object"==typeof n?this.each(function(){mt.set(this,n)}):ot.access(this,function(e){var i,s=ot.camelCase(n);if(a&&e===t){if(i=mt.get(a,n),i!==t)return i;if(i=mt.get(a,s),i!==t)return i;if(i=o(a,s,t),i!==t)return i}else this.each(function(){var i=mt.get(this,s);mt.set(this,s,e),-1!==n.indexOf("-")&&i!==t&&mt.set(this,n,e)})},null,e,arguments.length>1,null,!0)},removeData:function(n){return this.each(function(){mt.remove(this,n)})}}),ot.extend({queue:function(n,e,i){var s;return n?(e=(e||"fx")+"queue",s=gt.get(n,e),i&&(!s||ot.isArray(i)?s=gt.access(n,e,ot.makeArray(i)):s.push(i)),s||[]):t},dequeue:function(n,t){t=t||"fx";var e=ot.queue(n,t),i=e.length,s=e.shift(),o=ot._queueHooks(n,t),a=function(){ot.dequeue(n,t)};"inprogress"===s&&(s=e.shift(),i--),o.cur=s,s&&("fx"===t&&e.unshift("inprogress"),delete o.stop,s.call(n,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(n,t){var e=t+"queueHooks";return gt.get(n,e)||gt.access(n,e,{empty:ot.Callbacks("once memory").add(function(){gt.remove(n,[t+"queue",e])})})}}),ot.fn.extend({queue:function(n,e){var i=2;return"string"!=typeof n&&(e=n,n="fx",i--),i>arguments.length?ot.queue(this[0],n):e===t?this:this.each(function(){var t=ot.queue(this,n,e);ot._queueHooks(this,n),"fx"===n&&"inprogress"!==t[0]&&ot.dequeue(this,n)})},dequeue:function(n){return this.each(function(){ot.dequeue(this,n)})},delay:function(n,t){return n=ot.fx?ot.fx.speeds[n]||n:n,t=t||"fx",this.queue(t,function(t,e){var i=setTimeout(t,n);e.stop=function(){clearTimeout(i)}})},clearQueue:function(n){return this.queue(n||"fx",[])},promise:function(n,e){var i,s=1,o=ot.Deferred(),a=this,r=this.length,h=function(){--s||o.resolveWith(a,[a])};for("string"!=typeof n&&(e=n,n=t),n=n||"fx";r--;)i=gt.get(a[r],n+"queueHooks"),i&&i.empty&&(s++,i.empty.add(h));return h(),o.promise(e)}});var kt,yt,wt=/[\t\r\n]/g,xt=/\r/g,Lt=/^(?:input|select|textarea|button)$/i;ot.fn.extend({attr:function(n,t){return ot.access(this,ot.attr,n,t,arguments.length>1)},removeAttr:function(n){return this.each(function(){ot.removeAttr(this,n)})},prop:function(n,t){return ot.access(this,ot.prop,n,t,arguments.length>1)},removeProp:function(n){return this.each(function(){delete this[ot.propFix[n]||n]})},addClass:function(n){var t,e,i,s,o,a=0,r=this.length,h="string"==typeof n&&n;if(ot.isFunction(n))return this.each(function(t){ot(this).addClass(n.call(this,t,this.className))});if(h)for(t=(n||"").match(rt)||[];r>a;a++)if(e=this[a],i=1===e.nodeType&&(e.className?(" "+e.className+" ").replace(wt," "):" ")){for(o=0;s=t[o++];)0>i.indexOf(" "+s+" ")&&(i+=s+" ");e.className=ot.trim(i)}return this},removeClass:function(n){var t,e,i,s,o,a=0,r=this.length,h=0===arguments.length||"string"==typeof n&&n;if(ot.isFunction(n))return this.each(function(t){ot(this).removeClass(n.call(this,t,this.className))});if(h)for(t=(n||"").match(rt)||[];r>a;a++)if(e=this[a],i=1===e.nodeType&&(e.className?(" "+e.className+" ").replace(wt," "):"")){for(o=0;s=t[o++];)for(;i.indexOf(" "+s+" ")>=0;)i=i.replace(" "+s+" "," ");e.className=n?ot.trim(i):""}return this},toggleClass:function(n,t){var e=typeof n,i="boolean"==typeof t;return ot.isFunction(n)?this.each(function(e){ot(this).toggleClass(n.call(this,e,this.className,t),t)}):this.each(function(){if("string"===e)for(var s,o=0,a=ot(this),r=t,h=n.match(rt)||[];s=h[o++];)r=i?r:!a.hasClass(s),a[r?"addClass":"removeClass"](s);else(e===z||"boolean"===e)&&(this.className&&gt.set(this,"__className__",this.className),this.className=this.className||n===!1?"":gt.get(this,"__className__")||"")})},hasClass:function(n){for(var t=" "+n+" ",e=0,i=this.length;i>e;e++)if(1===this[e].nodeType&&(" "+this[e].className+" ").replace(wt," ").indexOf(t)>=0)return!0;return!1},val:function(n){var e,i,s,o=this[0];{if(arguments.length)return s=ot.isFunction(n),this.each(function(i){var o,a=ot(this);1===this.nodeType&&(o=s?n.call(this,i,a.val()):n,null==o?o="":"number"==typeof o?o+="":ot.isArray(o)&&(o=ot.map(o,function(n){return null==n?"":n+""})),e=ot.valHooks[this.type]||ot.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&e.set(this,o,"value")!==t||(this.value=o))});if(o)return e=ot.valHooks[o.type]||ot.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&(i=e.get(o,"value"))!==t?i:(i=o.value,"string"==typeof i?i.replace(xt,""):null==i?"":i)}}}),ot.extend({valHooks:{option:{get:function(n){var t=n.attributes.value;return!t||t.specified?n.value:n.text}},select:{get:function(n){for(var t,e,i=n.options,s=n.selectedIndex,o="select-one"===n.type||0>s,a=o?null:[],r=o?s+1:i.length,h=0>s?r:o?s:0;r>h;h++)if(e=i[h],!(!e.selected&&h!==s||(ot.support.optDisabled?e.disabled:null!==e.getAttribute("disabled"))||e.parentNode.disabled&&ot.nodeName(e.parentNode,"optgroup"))){if(t=ot(e).val(),o)return t;a.push(t)}return a},set:function(n,t){for(var e,i,s=n.options,o=ot.makeArray(t),a=s.length;a--;)i=s[a],(i.selected=ot.inArray(ot(i).val(),o)>=0)&&(e=!0);return e||(n.selectedIndex=-1),o}}},attr:function(n,e,i){var s,o,a=n.nodeType;if(n&&3!==a&&8!==a&&2!==a)return typeof n.getAttribute===z?ot.prop(n,e,i):(1===a&&ot.isXMLDoc(n)||(e=e.toLowerCase(),s=ot.attrHooks[e]||(ot.expr.match.boolean.test(e)?yt:kt)),i===t?s&&"get"in s&&null!==(o=s.get(n,e))?o:(o=ot.find.attr(n,e),null==o?t:o):null!==i?s&&"set"in s&&(o=s.set(n,i,e))!==t?o:(n.setAttribute(e,i+""),i):(ot.removeAttr(n,e),t))},removeAttr:function(n,t){var e,i,s=0,o=t&&t.match(rt);if(o&&1===n.nodeType)for(;e=o[s++];)i=ot.propFix[e]||e,ot.expr.match.boolean.test(e)&&(n[i]=!1),n.removeAttribute(e)},attrHooks:{type:{set:function(n,t){if(!ot.support.radioValue&&"radio"===t&&ot.nodeName(n,"input")){var e=n.value;return n.setAttribute("type",t),e&&(n.value=e),t}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(n,e,i){var s,o,a,r=n.nodeType;if(n&&3!==r&&8!==r&&2!==r)return a=1!==r||!ot.isXMLDoc(n),a&&(e=ot.propFix[e]||e,o=ot.propHooks[e]),i!==t?o&&"set"in o&&(s=o.set(n,i,e))!==t?s:n[e]=i:o&&"get"in o&&null!==(s=o.get(n,e))?s:n[e]},propHooks:{tabIndex:{get:function(n){return n.hasAttribute("tabindex")||Lt.test(n.nodeName)||n.href?n.tabIndex:-1}}}}),yt={set:function(n,t,e){return t===!1?ot.removeAttr(n,e):n.setAttribute(e,e),e}},ot.each(ot.expr.match.boolean.source.match(/\w+/g),function(n,e){var i=ot.expr.attrHandle[e]||ot.find.attr;ot.expr.attrHandle[e]=function(n,e,s){var o=ot.expr.attrHandle[e],a=s?t:(ot.expr.attrHandle[e]=t)!=i(n,e,s)?e.toLowerCase():null;return ot.expr.attrHandle[e]=o,a}}),ot.support.optSelected||(ot.propHooks.selected={get:function(n){var t=n.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),ot.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ot.propFix[this.toLowerCase()]=this}),ot.each(["radio","checkbox"],function(){ot.valHooks[this]={set:function(n,e){return ot.isArray(e)?n.checked=ot.inArray(ot(n).val(),e)>=0:t}},ot.support.checkOn||(ot.valHooks[this].get=function(n){return null===n.getAttribute("value")?"on":n.value})});var Ct=/^key/,Dt=/^(?:mouse|contextmenu)|click/,Tt=/^(?:focusinfocus|focusoutblur)$/,Et=/^([^.]*)(?:\.(.+)|)$/;ot.event={global:{},add:function(n,e,i,s,o){var a,r,h,l,c,u,p,d,f,m,g,b=gt.get(n);if(b){for(i.handler&&(a=i,i=a.handler,o=a.selector),i.guid||(i.guid=ot.guid++),(l=b.events)||(l=b.events={}),(r=b.handle)||(r=b.handle=function(n){return typeof ot===z||n&&ot.event.triggered===n.type?t:ot.event.dispatch.apply(r.elem,arguments)},r.elem=n),e=(e||"").match(rt)||[""],c=e.length;c--;)h=Et.exec(e[c])||[],f=g=h[1],m=(h[2]||"").split(".").sort(),f&&(p=ot.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=ot.event.special[f]||{},u=ot.extend({type:f,origType:g,data:s,handler:i,guid:i.guid,selector:o,needsContext:o&&ot.expr.match.needsContext.test(o),namespace:m.join(".")},a),(d=l[f])||(d=l[f]=[],d.delegateCount=0,p.setup&&p.setup.call(n,s,m,r)!==!1||n.addEventListener&&n.addEventListener(f,r,!1)),p.add&&(p.add.call(n,u),u.handler.guid||(u.handler.guid=i.guid)),o?d.splice(d.delegateCount++,0,u):d.push(u),ot.event.global[f]=!0);n=null}},remove:function(n,t,e,i,s){var o,a,r,h,l,c,u,p,d,f,m,g=gt.hasData(n)&&gt.get(n);if(g&&(h=g.events)){for(t=(t||"").match(rt)||[""],l=t.length;l--;)if(r=Et.exec(t[l])||[],d=m=r[1],f=(r[2]||"").split(".").sort(),d){for(u=ot.event.special[d]||{},d=(i?u.delegateType:u.bindType)||d,p=h[d]||[],r=r[2]&&RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)c=p[o],!s&&m!==c.origType||e&&e.guid!==c.guid||r&&!r.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,u.remove&&u.remove.call(n,c));a&&!p.length&&(u.teardown&&u.teardown.call(n,f,g.handle)!==!1||ot.removeEvent(n,d,g.handle),delete h[d])}else for(d in h)ot.event.remove(n,d+t[l],e,i,!0);ot.isEmptyObject(h)&&(delete g.handle,gt.remove(n,"events"))}},trigger:function(e,i,s,o){var a,r,h,l,c,u,p,d=[s||U],f=it.call(e,"type")?e.type:e,m=it.call(e,"namespace")?e.namespace.split("."):[];if(r=h=s=s||U,3!==s.nodeType&&8!==s.nodeType&&!Tt.test(f+ot.event.triggered)&&(f.indexOf(".")>=0&&(m=f.split("."),f=m.shift(),m.sort()),c=0>f.indexOf(":")&&"on"+f,e=e[ot.expando]?e:new ot.Event(f,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=m.join("."),e.namespace_re=e.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=t,e.target||(e.target=s),i=null==i?[e]:ot.makeArray(i,[e]),p=ot.event.special[f]||{},o||!p.trigger||p.trigger.apply(s,i)!==!1)){if(!o&&!p.noBubble&&!ot.isWindow(s)){for(l=p.delegateType||f,Tt.test(l+f)||(r=r.parentNode);r;r=r.parentNode)d.push(r),h=r;h===(s.ownerDocument||U)&&d.push(h.defaultView||h.parentWindow||n)}for(a=0;(r=d[a++])&&!e.isPropagationStopped();)e.type=a>1?l:p.bindType||f,u=(gt.get(r,"events")||{})[e.type]&&gt.get(r,"handle"),u&&u.apply(r,i),u=c&&r[c],u&&ot.acceptData(r)&&u.apply&&u.apply(r,i)===!1&&e.preventDefault();return e.type=f,o||e.isDefaultPrevented()||p._default&&p._default.apply(d.pop(),i)!==!1||!ot.acceptData(s)||c&&ot.isFunction(s[f])&&!ot.isWindow(s)&&(h=s[c],h&&(s[c]=null),ot.event.triggered=f,s[f](),ot.event.triggered=t,h&&(s[c]=h)),e.result}},dispatch:function(n){n=ot.event.fix(n);var e,i,s,o,a,r=[],h=nt.call(arguments),l=(gt.get(this,"events")||{})[n.type]||[],c=ot.event.special[n.type]||{};if(h[0]=n,n.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,n)!==!1){for(r=ot.event.handlers.call(this,n,l),e=0;(o=r[e++])&&!n.isPropagationStopped();)for(n.currentTarget=o.elem,i=0;(a=o.handlers[i++])&&!n.isImmediatePropagationStopped();)(!n.namespace_re||n.namespace_re.test(a.namespace))&&(n.handleObj=a,n.data=a.data,s=((ot.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,h),s!==t&&(n.result=s)===!1&&(n.preventDefault(),n.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,n),n.result}},handlers:function(n,e){var i,s,o,a,r=[],h=e.delegateCount,l=n.target;if(h&&l.nodeType&&(!n.button||"click"!==n.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==n.type){for(s=[],i=0;h>i;i++)a=e[i],o=a.selector+" ",s[o]===t&&(s[o]=a.needsContext?ot(o,this).index(l)>=0:ot.find(o,this,null,[l]).length),s[o]&&s.push(a);s.length&&r.push({elem:l,handlers:s})}return e.length>h&&r.push({elem:this,handlers:e.slice(h)}),r},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(n,t){return null==n.which&&(n.which=null!=t.charCode?t.charCode:t.keyCode),n}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(n,e){var i,s,o,a=e.button;return null==n.pageX&&null!=e.clientX&&(i=n.target.ownerDocument||U,s=i.documentElement,o=i.body,n.pageX=e.clientX+(s&&s.scrollLeft||o&&o.scrollLeft||0)-(s&&s.clientLeft||o&&o.clientLeft||0),n.pageY=e.clientY+(s&&s.scrollTop||o&&o.scrollTop||0)-(s&&s.clientTop||o&&o.clientTop||0)),n.which||a===t||(n.which=1&a?1:2&a?3:4&a?2:0),n}},fix:function(n){if(n[ot.expando])return n;var t,e,i,s=n.type,o=n,a=this.fixHooks[s];for(a||(this.fixHooks[s]=a=Dt.test(s)?this.mouseHooks:Ct.test(s)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,n=new ot.Event(o),t=i.length;t--;)e=i[t],n[e]=o[e];return 3===n.target.nodeType&&(n.target=n.target.parentNode),a.filter?a.filter(n,o):n},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==h()&&this.focus?(this.focus(),!1):t},delegateType:"focusin"},blur:{trigger:function(){return this===h()&&this.blur?(this.blur(),!1):t},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&ot.nodeName(this,"input")?(this.click(),!1):t},_default:function(n){return ot.nodeName(n.target,"a")}},beforeunload:{postDispatch:function(n){n.result!==t&&(n.originalEvent.returnValue=n.result)}}},simulate:function(n,t,e,i){var s=ot.extend(new ot.Event,e,{type:n,isSimulated:!0,originalEvent:{}});i?ot.event.trigger(s,null,t):ot.event.dispatch.call(t,s),s.isDefaultPrevented()&&e.preventDefault()}},ot.removeEvent=function(n,t,e){n.removeEventListener&&n.removeEventListener(t,e,!1)},ot.Event=function(n,e){return this instanceof ot.Event?(n&&n.type?(this.originalEvent=n,this.type=n.type,this.isDefaultPrevented=n.defaultPrevented||n.getPreventDefault&&n.getPreventDefault()?a:r):this.type=n,e&&ot.extend(this,e),this.timeStamp=n&&n.timeStamp||ot.now(),this[ot.expando]=!0,t):new ot.Event(n,e)},ot.Event.prototype={isDefaultPrevented:r,isPropagationStopped:r,isImmediatePropagationStopped:r,preventDefault:function(){var n=this.originalEvent;this.isDefaultPrevented=a,n&&n.preventDefault&&n.preventDefault()},stopPropagation:function(){var n=this.originalEvent;this.isPropagationStopped=a,n&&n.stopPropagation&&n.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=a,this.stopPropagation()}},ot.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(n,t){ot.event.special[n]={delegateType:t,bindType:t,handle:function(n){var e,i=this,s=n.relatedTarget,o=n.handleObj;return(!s||s!==i&&!ot.contains(i,s))&&(n.type=o.origType,e=o.handler.apply(this,arguments),n.type=t),e}}}),ot.support.focusinBubbles||ot.each({focus:"focusin",blur:"focusout"},function(n,t){var e=0,i=function(n){ot.event.simulate(t,n.target,ot.event.fix(n),!0)};ot.event.special[t]={setup:function(){0===e++&&U.addEventListener(n,i,!0)},teardown:function(){0===--e&&U.removeEventListener(n,i,!0)}}}),ot.fn.extend({on:function(n,e,i,s,o){var a,h;if("object"==typeof n){"string"!=typeof e&&(i=i||e,e=t);for(h in n)this.on(h,e,i,n[h],o);return this}if(null==i&&null==s?(s=e,i=e=t):null==s&&("string"==typeof e?(s=i,i=t):(s=i,i=e,e=t)),s===!1)s=r;else if(!s)return this;return 1===o&&(a=s,s=function(n){return ot().off(n),a.apply(this,arguments)},s.guid=a.guid||(a.guid=ot.guid++)),this.each(function(){ot.event.add(this,n,s,i,e)})},one:function(n,t,e,i){return this.on(n,t,e,i,1)},off:function(n,e,i){var s,o;if(n&&n.preventDefault&&n.handleObj)return s=n.handleObj,ot(n.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"==typeof n){for(o in n)this.off(o,e,n[o]);return this}return(e===!1||"function"==typeof e)&&(i=e,e=t),i===!1&&(i=r),this.each(function(){ot.event.remove(this,n,i,e)})},trigger:function(n,t){return this.each(function(){ot.event.trigger(n,t,this)})},triggerHandler:function(n,e){var i=this[0];return i?ot.event.trigger(n,e,i,!0):t}});var Nt=/^.[^:#\[\.,]*$/,At=ot.expr.match.needsContext,St={children:!0,contents:!0,next:!0,prev:!0};ot.fn.extend({find:function(n){var t,e,i,s=this.length;if("string"!=typeof n)return t=this,this.pushStack(ot(n).filter(function(){for(i=0;s>i;i++)if(ot.contains(t[i],this))return!0}));for(e=[],i=0;s>i;i++)ot.find(n,this[i],e);return e=this.pushStack(s>1?ot.unique(e):e),e.selector=(this.selector?this.selector+" ":"")+n,e},has:function(n){var t=ot(n,this),e=t.length;return this.filter(function(){for(var n=0;e>n;n++)if(ot.contains(this,t[n]))return!0})},not:function(n){return this.pushStack(c(this,n||[],!0))},filter:function(n){return this.pushStack(c(this,n||[],!1))},is:function(n){return!!n&&("string"==typeof n?At.test(n)?ot(n,this.context).index(this[0])>=0:ot.filter(n,this).length>0:this.filter(n).length>0)},closest:function(n,t){for(var e,i=0,s=this.length,o=[],a=At.test(n)||"string"!=typeof n?ot(n,t||this.context):0;s>i;i++)for(e=this[i];e&&e!==t;e=e.parentNode)if(11>e.nodeType&&(a?a.index(e)>-1:1===e.nodeType&&ot.find.matchesSelector(e,n))){e=o.push(e);break}return this.pushStack(o.length>1?ot.unique(o):o)},index:function(n){return n?"string"==typeof n?tt.call(ot(n),this[0]):tt.call(this,n.jquery?n[0]:n):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(n,t){var e="string"==typeof n?ot(n,t):ot.makeArray(n&&n.nodeType?[n]:n),i=ot.merge(this.get(),e);return this.pushStack(ot.unique(i))},addBack:function(n){return this.add(null==n?this.prevObject:this.prevObject.filter(n))}}),ot.each({parent:function(n){var t=n.parentNode;return t&&11!==t.nodeType?t:null},parents:function(n){return ot.dir(n,"parentNode")},parentsUntil:function(n,t,e){return ot.dir(n,"parentNode",e)},next:function(n){return l(n,"nextSibling")},prev:function(n){return l(n,"previousSibling")},nextAll:function(n){return ot.dir(n,"nextSibling")},prevAll:function(n){return ot.dir(n,"previousSibling")},nextUntil:function(n,t,e){return ot.dir(n,"nextSibling",e)},prevUntil:function(n,t,e){return ot.dir(n,"previousSibling",e)},siblings:function(n){return ot.sibling((n.parentNode||{}).firstChild,n)},children:function(n){return ot.sibling(n.firstChild)},contents:function(n){return ot.nodeName(n,"iframe")?n.contentDocument||n.contentWindow.document:ot.merge([],n.childNodes)}},function(n,t){ot.fn[n]=function(e,i){var s=ot.map(this,t,e);return"Until"!==n.slice(-5)&&(i=e),i&&"string"==typeof i&&(s=ot.filter(i,s)),this.length>1&&(St[n]||ot.unique(s),"p"===n[0]&&s.reverse()),this.pushStack(s)}}),ot.extend({filter:function(n,t,e){var i=t[0];return e&&(n=":not("+n+")"),1===t.length&&1===i.nodeType?ot.find.matchesSelector(i,n)?[i]:[]:ot.find.matches(n,ot.grep(t,function(n){return 1===n.nodeType}))},dir:function(n,e,i){for(var s=[],o=i!==t;(n=n[e])&&9!==n.nodeType;)if(1===n.nodeType){if(o&&ot(n).is(i))break;s.push(n)}return s},sibling:function(n,t){for(var e=[];n;n=n.nextSibling)1===n.nodeType&&n!==t&&e.push(n);return e}});var Pt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ot=/<([\w:]+)/,Rt=/<|&#?\w+;/,It=/<(?:script|style|link)/i,Mt=/^(?:checkbox|radio)$/i,Bt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ft=/^$|\/(?:java|ecma)script/i,Wt=/^true\/(.*)/,_t=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Vt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Vt.optgroup=Vt.option,Vt.tbody=Vt.tfoot=Vt.colgroup=Vt.caption=Vt.col=Vt.thead,Vt.th=Vt.td,ot.fn.extend({text:function(n){return ot.access(this,function(n){return n===t?ot.text(this):this.empty().append((this[0]&&this[0].ownerDocument||U).createTextNode(n))},null,n,arguments.length)},append:function(){return this.domManip(arguments,function(n){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=u(this,n);t.appendChild(n)}})},prepend:function(){return this.domManip(arguments,function(n){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=u(this,n);t.insertBefore(n,t.firstChild)}})},before:function(){return this.domManip(arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this)})},after:function(){return this.domManip(arguments,function(n){this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling)})},remove:function(n,t){for(var e,i=n?ot.filter(n,this):this,s=0;null!=(e=i[s]);s++)t||1!==e.nodeType||ot.cleanData(g(e)),e.parentNode&&(t&&ot.contains(e.ownerDocument,e)&&f(g(e,"script")),e.parentNode.removeChild(e));return this},empty:function(){for(var n,t=0;null!=(n=this[t]);t++)1===n.nodeType&&(ot.cleanData(g(n,!1)),n.textContent="");return this},clone:function(n,t){return n=null==n?!1:n,t=null==t?n:t,this.map(function(){return ot.clone(this,n,t)})},html:function(n){return ot.access(this,function(n){var e=this[0]||{},i=0,s=this.length;if(n===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof n&&!It.test(n)&&!Vt[(Ot.exec(n)||["",""])[1].toLowerCase()]){n=n.replace(Pt,"<$1></$2>");try{for(;s>i;i++)e=this[i]||{},1===e.nodeType&&(ot.cleanData(g(e,!1)),e.innerHTML=n);e=0}catch(o){}}e&&this.empty().append(n)},null,n,arguments.length)},replaceWith:function(){var n=ot.map(this,function(n){return[n.nextSibling,n.parentNode]}),t=0;return this.domManip(arguments,function(e){var i=n[t++],s=n[t++];s&&(ot(this).remove(),s.insertBefore(e,i))},!0),t?this:this.remove()},detach:function(n){return this.remove(n,!0)},domManip:function(n,t,e){n=J.apply([],n);var i,s,o,a,r,h,l=0,c=this.length,u=this,f=c-1,m=n[0],b=ot.isFunction(m);if(b||!(1>=c||"string"!=typeof m||ot.support.checkClone)&&Bt.test(m))return this.each(function(i){var s=u.eq(i);b&&(n[0]=m.call(this,i,s.html())),s.domManip(n,t,e)});if(c&&(i=ot.buildFragment(n,this[0].ownerDocument,!1,!e&&this),s=i.firstChild,1===i.childNodes.length&&(i=s),s)){for(o=ot.map(g(i,"script"),p),a=o.length;c>l;l++)r=i,l!==f&&(r=ot.clone(r,!0,!0),a&&ot.merge(o,g(r,"script"))),t.call(this[l],r,l);if(a)for(h=o[o.length-1].ownerDocument,ot.map(o,d),l=0;a>l;l++)r=o[l],Ft.test(r.type||"")&&!gt.access(r,"globalEval")&&ot.contains(h,r)&&(r.src?ot._evalUrl(r.src):ot.globalEval(r.textContent.replace(_t,"")))}return this}}),ot.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(n,t){ot.fn[n]=function(n){for(var e,i=[],s=ot(n),o=s.length-1,a=0;o>=a;a++)e=a===o?this:this.clone(!0),ot(s[a])[t](e),Z.apply(i,e.get());return this.pushStack(i)}}),ot.extend({clone:function(n,t,e){var i,s,o,a,r=n.cloneNode(!0),h=ot.contains(n.ownerDocument,n);if(!(ot.support.noCloneChecked||1!==n.nodeType&&11!==n.nodeType||ot.isXMLDoc(n)))for(a=g(r),o=g(n),i=0,s=o.length;s>i;i++)b(o[i],a[i]);if(t)if(e)for(o=o||g(n),a=a||g(r),i=0,s=o.length;s>i;i++)m(o[i],a[i]);else m(n,r);return a=g(r,"script"),a.length>0&&f(a,!h&&g(n,"script")),r},buildFragment:function(n,t,e,i){for(var s,o,a,r,h,l,c=0,u=n.length,p=t.createDocumentFragment(),d=[];u>c;c++)if(s=n[c],s||0===s)if("object"===ot.type(s))ot.merge(d,s.nodeType?[s]:s);else if(Rt.test(s)){for(o=o||p.appendChild(t.createElement("div")),a=(Ot.exec(s)||["",""])[1].toLowerCase(),r=Vt[a]||Vt._default,o.innerHTML=r[1]+s.replace(Pt,"<$1></$2>")+r[2],l=r[0];l--;)o=o.firstChild;ot.merge(d,o.childNodes),o=p.firstChild,o.textContent=""}else d.push(t.createTextNode(s));for(p.textContent="",c=0;s=d[c++];)if((!i||-1===ot.inArray(s,i))&&(h=ot.contains(s.ownerDocument,s),o=g(p.appendChild(s),"script"),h&&f(o),e))for(l=0;s=o[l++];)Ft.test(s.type||"")&&e.push(s);return p},cleanData:function(n){for(var t,e,i,s=n.length,o=0,a=ot.event.special;s>o;o++){if(e=n[o],ot.acceptData(e)&&(t=gt.access(e)))for(i in t.events)a[i]?ot.event.remove(e,i):ot.removeEvent(e,i,t.handle);mt.discard(e),gt.discard(e)}},_evalUrl:function(n){return ot.ajax({url:n,type:"GET",dataType:"text",async:!1,global:!1,success:ot.globalEval})}}),ot.fn.extend({wrapAll:function(n){var t;return ot.isFunction(n)?this.each(function(t){ot(this).wrapAll(n.call(this,t))}):(this[0]&&(t=ot(n,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var n=this;n.firstElementChild;)n=n.firstElementChild;return n}).append(this)),this)},wrapInner:function(n){return ot.isFunction(n)?this.each(function(t){ot(this).wrapInner(n.call(this,t))}):this.each(function(){var t=ot(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(n){var t=ot.isFunction(n);return this.each(function(e){ot(this).wrapAll(t?n.call(this,e):n)})},unwrap:function(){return this.parent().each(function(){ot.nodeName(this,"body")||ot(this).replaceWith(this.childNodes)}).end()}});var jt,$t,zt=/^(none|table(?!-c[ea]).+)/,Gt=/^margin/,Ut=RegExp("^("+at+")(.*)$","i"),qt=RegExp("^("+at+")(?!px)[a-z%]+$","i"),Ht=RegExp("^([+-])=("+at+")","i"),Xt={BODY:"block"},Qt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:0,fontWeight:400},Kt=["Top","Right","Bottom","Left"],Jt=["Webkit","O","Moz","ms"];ot.fn.extend({css:function(n,e){return ot.access(this,function(n,e,i){var s,o,a={},r=0;if(ot.isArray(e)){for(s=y(n),o=e.length;o>r;r++)a[e[r]]=ot.css(n,e[r],!1,s);return a}return i!==t?ot.style(n,e,i):ot.css(n,e)},n,e,arguments.length>1)},show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(n){var t="boolean"==typeof n;return this.each(function(){(t?n:k(this))?ot(this).show():ot(this).hide()})}}),ot.extend({cssHooks:{opacity:{get:function(n,t){if(t){var e=jt(n,"opacity");return""===e?"1":e}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(n,e,i,s){if(n&&3!==n.nodeType&&8!==n.nodeType&&n.style){var o,a,r,h=ot.camelCase(e),l=n.style;
return e=ot.cssProps[h]||(ot.cssProps[h]=v(l,h)),r=ot.cssHooks[e]||ot.cssHooks[h],i===t?r&&"get"in r&&(o=r.get(n,!1,s))!==t?o:l[e]:(a=typeof i,"string"===a&&(o=Ht.exec(i))&&(i=(o[1]+1)*o[2]+parseFloat(ot.css(n,e)),a="number"),null==i||"number"===a&&isNaN(i)||("number"!==a||ot.cssNumber[h]||(i+="px"),ot.support.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),r&&"set"in r&&(i=r.set(n,i,s))===t||(l[e]=i)),t)}},css:function(n,e,i,s){var o,a,r,h=ot.camelCase(e);return e=ot.cssProps[h]||(ot.cssProps[h]=v(n.style,h)),r=ot.cssHooks[e]||ot.cssHooks[h],r&&"get"in r&&(o=r.get(n,!0,i)),o===t&&(o=jt(n,e,s)),"normal"===o&&e in Yt&&(o=Yt[e]),""===i||i?(a=parseFloat(o),i===!0||ot.isNumeric(a)?a||0:o):o}}),jt=function(n,e,i){var s,o,a,r=i||y(n),h=r?r.getPropertyValue(e)||r[e]:t,l=n.style;return r&&(""!==h||ot.contains(n.ownerDocument,n)||(h=ot.style(n,e)),qt.test(h)&&Gt.test(e)&&(s=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=h,h=r.width,l.width=s,l.minWidth=o,l.maxWidth=a)),h},ot.each(["height","width"],function(n,e){ot.cssHooks[e]={get:function(n,i,s){return i?0===n.offsetWidth&&zt.test(ot.css(n,"display"))?ot.swap(n,Qt,function(){return C(n,e,s)}):C(n,e,s):t},set:function(n,t,i){var s=i&&y(n);return x(n,t,i?L(n,e,i,ot.support.boxSizing&&"border-box"===ot.css(n,"boxSizing",!1,s),s):0)}}}),ot(function(){ot.support.reliableMarginRight||(ot.cssHooks.marginRight={get:function(n,e){return e?ot.swap(n,{display:"inline-block"},jt,[n,"marginRight"]):t}}),!ot.support.pixelPosition&&ot.fn.position&&ot.each(["top","left"],function(n,e){ot.cssHooks[e]={get:function(n,i){return i?(i=jt(n,e),qt.test(i)?ot(n).position()[e]+"px":i):t}}})}),ot.expr&&ot.expr.filters&&(ot.expr.filters.hidden=function(n){return 0>=n.offsetWidth&&0>=n.offsetHeight},ot.expr.filters.visible=function(n){return!ot.expr.filters.hidden(n)}),ot.each({margin:"",padding:"",border:"Width"},function(n,t){ot.cssHooks[n+t]={expand:function(e){for(var i=0,s={},o="string"==typeof e?e.split(" "):[e];4>i;i++)s[n+Kt[i]+t]=o[i]||o[i-2]||o[0];return s}},Gt.test(n)||(ot.cssHooks[n+t].set=x)});var Zt=/%20/g,ne=/\[\]$/,te=/\r?\n/g,ee=/^(?:submit|button|image|reset|file)$/i,ie=/^(?:input|select|textarea|keygen)/i;ot.fn.extend({serialize:function(){return ot.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var n=ot.prop(this,"elements");return n?ot.makeArray(n):this}).filter(function(){var n=this.type;return this.name&&!ot(this).is(":disabled")&&ie.test(this.nodeName)&&!ee.test(n)&&(this.checked||!Mt.test(n))}).map(function(n,t){var e=ot(this).val();return null==e?null:ot.isArray(e)?ot.map(e,function(n){return{name:t.name,value:n.replace(te,"\r\n")}}):{name:t.name,value:e.replace(te,"\r\n")}}).get()}}),ot.param=function(n,e){var i,s=[],o=function(n,t){t=ot.isFunction(t)?t():null==t?"":t,s[s.length]=encodeURIComponent(n)+"="+encodeURIComponent(t)};if(e===t&&(e=ot.ajaxSettings&&ot.ajaxSettings.traditional),ot.isArray(n)||n.jquery&&!ot.isPlainObject(n))ot.each(n,function(){o(this.name,this.value)});else for(i in n)E(i,n[i],e,o);return s.join("&").replace(Zt,"+")},ot.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(n,t){ot.fn[t]=function(n,e){return arguments.length>0?this.on(t,null,n,e):this.trigger(t)}}),ot.fn.extend({hover:function(n,t){return this.mouseenter(n).mouseleave(t||n)},bind:function(n,t,e){return this.on(n,null,t,e)},unbind:function(n,t){return this.off(n,null,t)},delegate:function(n,t,e,i){return this.on(t,n,e,i)},undelegate:function(n,t,e){return 1===arguments.length?this.off(n,"**"):this.off(t,n||"**",e)}});var se,oe,ae=ot.now(),re=/\?/,he=/#.*$/,le=/([?&])_=[^&]*/,ce=/^(.*?):[ \t]*([^\r\n]*)$/gm,ue=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,pe=/^(?:GET|HEAD)$/,de=/^\/\//,fe=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,me=ot.fn.load,ge={},be={},ve="*/".concat("*");try{oe=G.href}catch(ke){oe=U.createElement("a"),oe.href="",oe=oe.href}se=fe.exec(oe.toLowerCase())||[],ot.fn.load=function(n,e,i){if("string"!=typeof n&&me)return me.apply(this,arguments);var s,o,a,r=this,h=n.indexOf(" ");return h>=0&&(s=n.slice(h),n=n.slice(0,h)),ot.isFunction(e)?(i=e,e=t):e&&"object"==typeof e&&(o="POST"),r.length>0&&ot.ajax({url:n,type:o,dataType:"html",data:e}).done(function(n){a=arguments,r.html(s?ot("<div>").append(ot.parseHTML(n)).find(s):n)}).complete(i&&function(n,t){r.each(i,a||[n.responseText,t,n])}),this},ot.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(n,t){ot.fn[t]=function(n){return this.on(t,n)}}),ot.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:oe,type:"GET",isLocal:ue.test(se[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ve,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":ot.parseJSON,"text xml":ot.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(n,t){return t?S(S(n,ot.ajaxSettings),t):S(ot.ajaxSettings,n)},ajaxPrefilter:N(ge),ajaxTransport:N(be),ajax:function(n,e){function i(n,e,i,r){var l,u,v,k,w,L=e;2!==y&&(y=2,h&&clearTimeout(h),s=t,a=r||"",x.readyState=n>0?4:0,l=n>=200&&300>n||304===n,i&&(k=P(p,x,i)),k=O(p,k,x,l),l?(p.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(ot.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(ot.etag[o]=w)),204===n?L="nocontent":304===n?L="notmodified":(L=k.state,u=k.data,v=k.error,l=!v)):(v=L,(n||!L)&&(L="error",0>n&&(n=0))),x.status=n,x.statusText=(e||L)+"",l?m.resolveWith(d,[u,L,x]):m.rejectWith(d,[x,L,v]),x.statusCode(b),b=t,c&&f.trigger(l?"ajaxSuccess":"ajaxError",[x,p,l?u:v]),g.fireWith(d,[x,L]),c&&(f.trigger("ajaxComplete",[x,p]),--ot.active||ot.event.trigger("ajaxStop")))}"object"==typeof n&&(e=n,n=t),e=e||{};var s,o,a,r,h,l,c,u,p=ot.ajaxSetup({},e),d=p.context||p,f=p.context&&(d.nodeType||d.jquery)?ot(d):ot.event,m=ot.Deferred(),g=ot.Callbacks("once memory"),b=p.statusCode||{},v={},k={},y=0,w="canceled",x={readyState:0,getResponseHeader:function(n){var t;if(2===y){if(!r)for(r={};t=ce.exec(a);)r[t[1].toLowerCase()]=t[2];t=r[n.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===y?a:null},setRequestHeader:function(n,t){var e=n.toLowerCase();return y||(n=k[e]=k[e]||n,v[n]=t),this},overrideMimeType:function(n){return y||(p.mimeType=n),this},statusCode:function(n){var t;if(n)if(2>y)for(t in n)b[t]=[b[t],n[t]];else x.always(n[x.status]);return this},abort:function(n){var t=n||w;return s&&s.abort(t),i(0,t),this}};if(m.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,p.url=((n||p.url||oe)+"").replace(he,"").replace(de,se[1]+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=ot.trim(p.dataType||"*").toLowerCase().match(rt)||[""],null==p.crossDomain&&(l=fe.exec(p.url.toLowerCase()),p.crossDomain=!(!l||l[1]===se[1]&&l[2]===se[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(se[3]||("http:"===se[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=ot.param(p.data,p.traditional)),A(ge,p,e,x),2===y)return x;c=p.global,c&&0===ot.active++&&ot.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!pe.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(re.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=le.test(o)?o.replace(le,"$1_="+ae++):o+(re.test(o)?"&":"?")+"_="+ae++)),p.ifModified&&(ot.lastModified[o]&&x.setRequestHeader("If-Modified-Since",ot.lastModified[o]),ot.etag[o]&&x.setRequestHeader("If-None-Match",ot.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",p.contentType),x.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ve+"; q=0.01":""):p.accepts["*"]);for(u in p.headers)x.setRequestHeader(u,p.headers[u]);if(p.beforeSend&&(p.beforeSend.call(d,x,p)===!1||2===y))return x.abort();w="abort";for(u in{success:1,error:1,complete:1})x[u](p[u]);if(s=A(be,p,e,x)){x.readyState=1,c&&f.trigger("ajaxSend",[x,p]),p.async&&p.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},p.timeout));try{y=1,s.send(v,i)}catch(L){if(!(2>y))throw L;i(-1,L)}}else i(-1,"No Transport");return x},getJSON:function(n,t,e){return ot.get(n,t,e,"json")},getScript:function(n,e){return ot.get(n,t,e,"script")}}),ot.each(["get","post"],function(n,e){ot[e]=function(n,i,s,o){return ot.isFunction(i)&&(o=o||s,s=i,i=t),ot.ajax({url:n,type:e,dataType:o,data:i,success:s})}}),ot.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(n){return ot.globalEval(n),n}}}),ot.ajaxPrefilter("script",function(n){n.cache===t&&(n.cache=!1),n.crossDomain&&(n.type="GET")}),ot.ajaxTransport("script",function(n){if(n.crossDomain){var t,e;return{send:function(i,s){t=ot("<script>").prop({async:!0,charset:n.scriptCharset,src:n.url}).on("load error",e=function(n){t.remove(),e=null,n&&s("error"===n.type?404:200,n.type)}),U.head.appendChild(t[0])},abort:function(){e&&e()}}}});var ye=[],we=/(=)\?(?=&|$)|\?\?/;ot.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var n=ye.pop()||ot.expando+"_"+ae++;return this[n]=!0,n}}),ot.ajaxPrefilter("json jsonp",function(e,i,s){var o,a,r,h=e.jsonp!==!1&&(we.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&we.test(e.data)&&"data");return h||"jsonp"===e.dataTypes[0]?(o=e.jsonpCallback=ot.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,h?e[h]=e[h].replace(we,"$1"+o):e.jsonp!==!1&&(e.url+=(re.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||ot.error(o+" was not called"),r[0]},e.dataTypes[0]="json",a=n[o],n[o]=function(){r=arguments},s.always(function(){n[o]=a,e[o]&&(e.jsonpCallback=i.jsonpCallback,ye.push(o)),r&&ot.isFunction(a)&&a(r[0]),r=a=t}),"script"):t}),ot.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(n){}};var xe=ot.ajaxSettings.xhr(),Le={0:200,1223:204},Ce=0,De={};n.ActiveXObject&&ot(n).on("unload",function(){for(var n in De)De[n]();De=t}),ot.support.cors=!!xe&&"withCredentials"in xe,ot.support.ajax=xe=!!xe,ot.ajaxTransport(function(n){var e;return ot.support.cors||xe&&!n.crossDomain?{send:function(i,s){var o,a,r=n.xhr();if(r.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(o in n.xhrFields)r[o]=n.xhrFields[o];n.mimeType&&r.overrideMimeType&&r.overrideMimeType(n.mimeType),n.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)r.setRequestHeader(o,i[o]);e=function(n){return function(){e&&(delete De[a],e=r.onload=r.onerror=null,"abort"===n?r.abort():"error"===n?s(r.status||404,r.statusText):s(Le[r.status]||r.status,r.statusText,"string"==typeof r.responseText?{text:r.responseText}:t,r.getAllResponseHeaders()))}},r.onload=e(),r.onerror=e("error"),e=De[a=Ce++]=e("abort"),r.send(n.hasContent&&n.data||null)},abort:function(){e&&e()}}:t});var Te,Ee,Ne=/^(?:toggle|show|hide)$/,Ae=RegExp("^(?:([+-])=|)("+at+")([a-z%]*)$","i"),Se=/queueHooks$/,Pe=[F],Oe={"*":[function(n,t){var e,i,s=this.createTween(n,t),o=Ae.exec(t),a=s.cur(),r=+a||0,h=1,l=20;if(o){if(e=+o[2],i=o[3]||(ot.cssNumber[n]?"":"px"),"px"!==i&&r){r=ot.css(s.elem,n,!0)||e||1;do h=h||".5",r/=h,ot.style(s.elem,n,r+i);while(h!==(h=s.cur()/a)&&1!==h&&--l)}s.unit=i,s.start=r,s.end=o[1]?r+(o[1]+1)*e:e}return s}]};ot.Animation=ot.extend(M,{tweener:function(n,t){ot.isFunction(n)?(t=n,n=["*"]):n=n.split(" ");for(var e,i=0,s=n.length;s>i;i++)e=n[i],Oe[e]=Oe[e]||[],Oe[e].unshift(t)},prefilter:function(n,t){t?Pe.unshift(n):Pe.push(n)}}),ot.Tween=W,W.prototype={constructor:W,init:function(n,t,e,i,s,o){this.elem=n,this.prop=e,this.easing=s||"swing",this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(ot.cssNumber[e]?"":"px")},cur:function(){var n=W.propHooks[this.prop];return n&&n.get?n.get(this):W.propHooks._default.get(this)},run:function(n){var t,e=W.propHooks[this.prop];return this.pos=t=this.options.duration?ot.easing[this.easing](n,this.options.duration*n,0,1,this.options.duration):n,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),e&&e.set?e.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(n){var t;return null==n.elem[n.prop]||n.elem.style&&null!=n.elem.style[n.prop]?(t=ot.css(n.elem,n.prop,""),t&&"auto"!==t?t:0):n.elem[n.prop]},set:function(n){ot.fx.step[n.prop]?ot.fx.step[n.prop](n):n.elem.style&&(null!=n.elem.style[ot.cssProps[n.prop]]||ot.cssHooks[n.prop])?ot.style(n.elem,n.prop,n.now+n.unit):n.elem[n.prop]=n.now}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(n){n.elem.nodeType&&n.elem.parentNode&&(n.elem[n.prop]=n.now)}},ot.each(["toggle","show","hide"],function(n,t){var e=ot.fn[t];ot.fn[t]=function(n,i,s){return null==n||"boolean"==typeof n?e.apply(this,arguments):this.animate(_(t,!0),n,i,s)}}),ot.fn.extend({fadeTo:function(n,t,e,i){return this.filter(k).css("opacity",0).show().end().animate({opacity:t},n,e,i)},animate:function(n,t,e,i){var s=ot.isEmptyObject(n),o=ot.speed(t,e,i),a=function(){var t=M(this,ot.extend({},n),o);a.finish=function(){t.stop(!0)},(s||gt.get(this,"finish"))&&t.stop(!0)};return a.finish=a,s||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(n,e,i){var s=function(n){var t=n.stop;delete n.stop,t(i)};return"string"!=typeof n&&(i=e,e=n,n=t),e&&n!==!1&&this.queue(n||"fx",[]),this.each(function(){var t=!0,e=null!=n&&n+"queueHooks",o=ot.timers,a=gt.get(this);if(e)a[e]&&a[e].stop&&s(a[e]);else for(e in a)a[e]&&a[e].stop&&Se.test(e)&&s(a[e]);for(e=o.length;e--;)o[e].elem!==this||null!=n&&o[e].queue!==n||(o[e].anim.stop(i),t=!1,o.splice(e,1));(t||!i)&&ot.dequeue(this,n)})},finish:function(n){return n!==!1&&(n=n||"fx"),this.each(function(){var t,e=gt.get(this),i=e[n+"queue"],s=e[n+"queueHooks"],o=ot.timers,a=i?i.length:0;for(e.finish=!0,ot.queue(this,n,[]),s&&s.cur&&s.cur.finish&&s.cur.finish.call(this),t=o.length;t--;)o[t].elem===this&&o[t].queue===n&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),ot.each({slideDown:_("show"),slideUp:_("hide"),slideToggle:_("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(n,t){ot.fn[n]=function(n,e,i){return this.animate(t,n,e,i)}}),ot.speed=function(n,t,e){var i=n&&"object"==typeof n?ot.extend({},n):{complete:e||!e&&t||ot.isFunction(n)&&n,duration:n,easing:e&&t||t&&!ot.isFunction(t)&&t};return i.duration=ot.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in ot.fx.speeds?ot.fx.speeds[i.duration]:ot.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){ot.isFunction(i.old)&&i.old.call(this),i.queue&&ot.dequeue(this,i.queue)},i},ot.easing={linear:function(n){return n},swing:function(n){return.5-Math.cos(n*Math.PI)/2}},ot.timers=[],ot.fx=W.prototype.init,ot.fx.tick=function(){var n,e=ot.timers,i=0;for(Te=ot.now();e.length>i;i++)n=e[i],n()||e[i]!==n||e.splice(i--,1);e.length||ot.fx.stop(),Te=t},ot.fx.timer=function(n){n()&&ot.timers.push(n)&&ot.fx.start()},ot.fx.interval=13,ot.fx.start=function(){Ee||(Ee=setInterval(ot.fx.tick,ot.fx.interval))},ot.fx.stop=function(){clearInterval(Ee),Ee=null},ot.fx.speeds={slow:600,fast:200,_default:400},ot.fx.step={},ot.expr&&ot.expr.filters&&(ot.expr.filters.animated=function(n){return ot.grep(ot.timers,function(t){return n===t.elem}).length}),ot.fn.offset=function(n){if(arguments.length)return n===t?this:this.each(function(t){ot.offset.setOffset(this,n,t)});var e,i,s=this[0],o={top:0,left:0},a=s&&s.ownerDocument;if(a)return e=a.documentElement,ot.contains(e,s)?(typeof s.getBoundingClientRect!==z&&(o=s.getBoundingClientRect()),i=V(a),{top:o.top+i.pageYOffset-e.clientTop,left:o.left+i.pageXOffset-e.clientLeft}):o},ot.offset={setOffset:function(n,t,e){var i,s,o,a,r,h,l,c=ot.css(n,"position"),u=ot(n),p={};"static"===c&&(n.style.position="relative"),r=u.offset(),o=ot.css(n,"top"),h=ot.css(n,"left"),l=("absolute"===c||"fixed"===c)&&(o+h).indexOf("auto")>-1,l?(i=u.position(),a=i.top,s=i.left):(a=parseFloat(o)||0,s=parseFloat(h)||0),ot.isFunction(t)&&(t=t.call(n,e,r)),null!=t.top&&(p.top=t.top-r.top+a),null!=t.left&&(p.left=t.left-r.left+s),"using"in t?t.using.call(n,p):u.css(p)}},ot.fn.extend({position:function(){if(this[0]){var n,t,e=this[0],i={top:0,left:0};return"fixed"===ot.css(e,"position")?t=e.getBoundingClientRect():(n=this.offsetParent(),t=this.offset(),ot.nodeName(n[0],"html")||(i=n.offset()),i.top+=ot.css(n[0],"borderTopWidth",!0),i.left+=ot.css(n[0],"borderLeftWidth",!0)),{top:t.top-i.top-ot.css(e,"marginTop",!0),left:t.left-i.left-ot.css(e,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var n=this.offsetParent||q;n&&!ot.nodeName(n,"html")&&"static"===ot.css(n,"position");)n=n.offsetParent;return n||q})}}),ot.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var s="pageYOffset"===i;ot.fn[e]=function(o){return ot.access(this,function(e,o,a){var r=V(e);return a===t?r?r[i]:e[o]:(r?r.scrollTo(s?n.pageXOffset:a,s?a:n.pageYOffset):e[o]=a,t)},e,o,arguments.length,null)}}),ot.each({Height:"height",Width:"width"},function(n,e){ot.each({padding:"inner"+n,content:e,"":"outer"+n},function(i,s){ot.fn[s]=function(s,o){var a=arguments.length&&(i||"boolean"!=typeof s),r=i||(s===!0||o===!0?"margin":"border");return ot.access(this,function(e,i,s){var o;return ot.isWindow(e)?e.document.documentElement["client"+n]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+n],o["scroll"+n],e.body["offset"+n],o["offset"+n],o["client"+n])):s===t?ot.css(e,i,r):ot.style(e,i,s,r)},e,a?s:t,a,null)}})}),ot.fn.size=function(){return this.length},ot.fn.andSelf=ot.fn.addBack,"object"==typeof module&&"object"==typeof module.exports?module.exports=ot:"function"==typeof define&&define.amd&&define("jquery",[],function(){return ot}),"object"==typeof n&&"object"==typeof n.document&&(n.jQuery=n.$=ot)})(window),function(n){function t(i){function o(n){return n&&"object"==typeof n&&!Ci(n)&&ti.call(n,"__wrapped__")?n:new q(n)}function W(n){var t=n.length,e=t>=l;if(e)for(var i={},s=-1;t>++s;){var o=h+n[s];(i[o]||(i[o]=[])).push(n[s])}return function(t){if(e){var s=h+t;return i[s]&&Xt(i[s],t)>-1}return Xt(n,t)>-1}}function _(n){return n.charCodeAt(0)}function V(n,t){var i=n.index,s=t.index;if(n=n.criteria,t=t.criteria,n!==t){if(n>t||n===e)return 1;if(t>n||t===e)return-1}return s>i?-1:1}function j(n,t,e,i){function s(){var i=arguments,l=a?this:t;if(o||(n=t[r]),e.length&&(i=i.length?(i=mi.call(i),h?i.concat(e):e.concat(i)):e),this instanceof s){H.prototype=n.prototype,l=new H,H.prototype=null;var c=n.apply(l,i);return ut(c)?c:l}return n.apply(l,i)}var o=ct(n),a=!e,r=t;if(a){var h=i;e=t}else if(!o){if(!i)throw new Ue;t=n}return s}function $(){for(var n,t={shadowedProps:L,support:ki,arrays:"isArray(iterable)",bottom:"",init:"iterable",loop:"",top:"",useHas:!0,useKeys:!!Ti},e=0;n=arguments[e];e++)for(var i in n)t[i]=n[i];var s=t.args;t.firstArg=/^[^,]+/.exec(s)[0];var a=_e("hasOwnProperty, isArguments, isArray, isString, keys, lodash, objectTypes","return function("+s+") {\n"+yi(t)+"\n}");return a(ti,K,Ci,gt,Ti,o,M)}function z(n){return"\\"+B[n]}function G(n){return Ni[n]}function U(n){return"function"!=typeof n.toString&&"string"==typeof(n+"")}function q(n){this.__wrapped__=n}function H(){}function X(n){var t=!1;if(!n||oi.call(n)!=P||!ki.argsClass&&K(n))return t;var e=n.constructor;return(ct(e)?e instanceof e:ki.nodeClass||!U(n))?ki.ownLast?(Oi(n,function(n,e,i){return t=ti.call(i,e),!1}),t===!0):(Oi(n,function(n,e){t=e}),t===!1||ti.call(n,t)):t}function Q(n,t,i){t||(t=0),i===e&&(i=n?n.length:0);for(var s=-1,o=i-t||0,a=Be(0>o?0:o);o>++s;)a[s]=n[t+s];return a}function Y(n){return Ai[n]}function K(n){return oi.call(n)==D}function J(n,t,i,s,a,r){var h=n;if("function"==typeof t&&(s=i,i=t,t=!1),"function"==typeof i){if(i=s===e?i:o.createCallback(i,s,1),h=i(h),h!==e)return h;h=n}var l=ut(h);if(l){var c=oi.call(h);if(!I[c]||!ki.nodeClass&&U(h))return h;var u=Ci(h)}if(!l||!t)return l?u?Q(h):Si({},h):h;var p=vi[c];switch(c){case E:case N:return new p(+h);case S:case R:return new p(h);case O:return p(h.source,m.exec(h))}a||(a=[]),r||(r=[]);for(var d=a.length;d--;)if(a[d]==n)return r[d];return h=u?p(h.length):{},u&&(ti.call(n,"index")&&(h.index=n.index),ti.call(n,"input")&&(h.input=n.input)),a.push(n),r.push(h),(u?At:Ri)(n,function(n,s){h[s]=J(n,t,i,e,a,r)}),h}function Z(n,t,e){return J(n,!0,t,e)}function nt(n,t,i){var s;return t=o.createCallback(t,i),Ri(n,function(n,i,o){return t(n,i,o)?(s=i,!1):e}),s}function tt(n){var t=[];return Oi(n,function(n,e){ct(n)&&t.push(e)}),t.sort()}function et(n,t){return n?ti.call(n,t):!1}function it(n){for(var t=-1,e=Ti(n),i=e.length,s={};i>++t;){var o=e[t];s[n[o]]=o}return s}function st(n){return n===!0||n===!1||oi.call(n)==E}function ot(n){return n?"object"==typeof n&&oi.call(n)==N:!1}function at(n){return n?1===n.nodeType:!1}function rt(n){var t=!0;if(!n)return t;var e=oi.call(n),i=n.length;return e==T||e==R||(ki.argsClass?e==D:K(n))||e==P&&"number"==typeof i&&ct(n.splice)?!i:(Ri(n,function(){return t=!1}),t)}function ht(n,t,i,s,a,h){var l=i===r;if("function"==typeof i&&!l){i=o.createCallback(i,s,2);var c=i(n,t);if(c!==e)return!!c}if(n===t)return 0!==n||1/n==1/t;var u=typeof n,p=typeof t;if(n===n&&(!n||"function"!=u&&"object"!=u)&&(!t||"function"!=p&&"object"!=p))return!1;if(null==n||null==t)return n===t;var d=oi.call(n),f=oi.call(t);if(d==D&&(d=P),f==D&&(f=P),d!=f)return!1;switch(d){case E:case N:return+n==+t;case S:return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case O:case R:return n==Ge(t)}var m=d==T;if(!m){if(ti.call(n,"__wrapped__ ")||ti.call(t,"__wrapped__"))return ht(n.__wrapped__||n,t.__wrapped__||t,i,s,a,h);if(d!=P||!ki.nodeClass&&(U(n)||U(t)))return!1;var g=!ki.argsObject&&K(n)?$e:n.constructor,b=!ki.argsObject&&K(t)?$e:t.constructor;if(g!=b&&!(ct(g)&&g instanceof g&&ct(b)&&b instanceof b))return!1}a||(a=[]),h||(h=[]);for(var v=a.length;v--;)if(a[v]==n)return h[v]==t;var k=0;if(c=!0,a.push(n),h.push(t),m){if(v=n.length,k=t.length,c=k==n.length,!c&&!l)return c;for(;k--;){var y=v,w=t[k];if(l)for(;y--&&!(c=ht(n[y],w,i,s,a,h)););else if(!(c=ht(n[k],w,i,s,a,h)))break}return c}return Oi(t,function(t,o,r){return ti.call(r,o)?(k++,c=ti.call(n,o)&&ht(n[o],t,i,s,a,h)):e}),c&&!l&&Oi(n,function(n,t,i){return ti.call(i,t)?c=--k>-1:e}),c}function lt(n){return hi(n)&&!li(parseFloat(n))}function ct(n){return"function"==typeof n}function ut(n){return n?M[typeof n]:!1}function pt(n){return ft(n)&&n!=+n}function dt(n){return null===n}function ft(n){return"number"==typeof n||oi.call(n)==S}function mt(n){return n?M[typeof n]&&oi.call(n)==O:!1}function gt(n){return"string"==typeof n||oi.call(n)==R}function bt(n){return n===e}function vt(n,t,i){var s=arguments,a=0,h=2;if(!ut(n))return n;if(i===r)var l=s[3],c=s[4],u=s[5];else c=[],u=[],"number"!=typeof i&&(h=s.length),h>3&&"function"==typeof s[h-2]?l=o.createCallback(s[--h-1],s[h--],2):h>2&&"function"==typeof s[h-1]&&(l=s[--h]);for(;h>++a;)(Ci(s[a])?At:Ri)(s[a],function(t,i){var s,o,a=t,h=n[i];if(t&&((o=Ci(t))||Ii(t))){for(var p=c.length;p--;)if(s=c[p]==t){h=u[p];break}if(!s){var d;l&&(a=l(h,t),(d=a!==e)&&(h=a)),d||(h=o?Ci(h)?h:[]:Ii(h)?h:{}),c.push(t),u.push(h),d||(h=vt(h,t,r,l,c,u))}}else l&&(a=l(h,t),a===e&&(a=t)),a!==e&&(h=a);n[i]=h});return n}function kt(n,t,e){var i="function"==typeof t,s={};if(i)t=o.createCallback(t,e);else var a=Je.apply(qe,mi.call(arguments,1));return Oi(n,function(n,e,o){(i?!t(n,e,o):0>Xt(a,e))&&(s[e]=n)}),s}function yt(n){for(var t=-1,e=Ti(n),i=e.length,s=Be(i);i>++t;){var o=e[t];s[t]=[o,n[o]]}return s}function wt(n,t,e){var i={};if("function"!=typeof t)for(var s=-1,a=Je.apply(qe,mi.call(arguments,1)),r=ut(n)?a.length:0;r>++s;){var h=a[s];h in n&&(i[h]=n[h])}else t=o.createCallback(t,e),Oi(n,function(n,e,s){t(n,e,s)&&(i[e]=n)});return i}function xt(n){for(var t=-1,e=Ti(n),i=e.length,s=Be(i);i>++t;)s[t]=n[e[t]];return s}function Lt(n){var t=-1,e=Je.apply(qe,mi.call(arguments,1)),i=e.length,s=Be(i);for(ki.unindexedChars&&gt(n)&&(n=n.split(""));i>++t;)s[t]=n[e[t]];return s}function Ct(n,t,i){var s=-1,o=n?n.length:0,a=!1;return i=(0>i?ui(0,o+i):i)||0,"number"==typeof o?a=(gt(n)?n.indexOf(t,i):Xt(n,t,i))>-1:Ei(n,function(n){return++s>=i?!(a=n===t):e}),a}function Dt(n,t,e){var i={};return t=o.createCallback(t,e),At(n,function(n,e,s){e=Ge(t(n,e,s)),ti.call(i,e)?i[e]++:i[e]=1}),i}function Tt(n,t,e){var i=!0;if(t=o.createCallback(t,e),Ci(n))for(var s=-1,a=n.length;a>++s&&(i=!!t(n[s],s,n)););else Ei(n,function(n,e,s){return i=!!t(n,e,s)});return i}function Et(n,t,e){var i=[];if(t=o.createCallback(t,e),Ci(n))for(var s=-1,a=n.length;a>++s;){var r=n[s];t(r,s,n)&&i.push(r)}else Ei(n,function(n,e,s){t(n,e,s)&&i.push(n)});return i}function Nt(n,t,i){if(t=o.createCallback(t,i),!Ci(n)){var s;return Ei(n,function(n,i,o){return t(n,i,o)?(s=n,!1):e}),s}for(var a=-1,r=n.length;r>++a;){var h=n[a];if(t(h,a,n))return h}}function At(n,t,i){if(t&&i===e&&Ci(n))for(var s=-1,o=n.length;o>++s&&t(n[s],s,n)!==!1;);else Ei(n,t,i);return n}function St(n,t,e){var i={};return t=o.createCallback(t,e),At(n,function(n,e,s){e=Ge(t(n,e,s)),(ti.call(i,e)?i[e]:i[e]=[]).push(n)}),i}function Pt(n,t){var e=mi.call(arguments,2),i=-1,s="function"==typeof t,o=n?n.length:0,a=Be("number"==typeof o?o:0);return At(n,function(n){a[++i]=(s?t:n[t]).apply(n,e)}),a}function Ot(n,t,e){var i=-1,s=n?n.length:0,a=Be("number"==typeof s?s:0);if(t=o.createCallback(t,e),Ci(n))for(;s>++i;)a[i]=t(n[i],i,n);else Ei(n,function(n,e,s){a[++i]=t(n,e,s)});return a}function Rt(n,t,e){var i=-1/0,s=i;if(!t&&Ci(n))for(var a=-1,r=n.length;r>++a;){var h=n[a];h>s&&(s=h)}else t=!t&&gt(n)?_:o.createCallback(t,e),Ei(n,function(n,e,o){var a=t(n,e,o);a>i&&(i=a,s=n)});return s}function It(n,t,e){var i=1/0,s=i;if(!t&&Ci(n))for(var a=-1,r=n.length;r>++a;){var h=n[a];s>h&&(s=h)}else t=!t&&gt(n)?_:o.createCallback(t,e),Ei(n,function(n,e,o){var a=t(n,e,o);i>a&&(i=a,s=n)});return s}function Mt(n,t,e,i){var s=3>arguments.length;if(t=o.createCallback(t,i,4),Ci(n)){var a=-1,r=n.length;for(s&&(e=n[++a]);r>++a;)e=t(e,n[a],a,n)}else Ei(n,function(n,i,o){e=s?(s=!1,n):t(e,n,i,o)});return e}function Bt(n,t,e,i){var s=n,a=n?n.length:0,r=3>arguments.length;if("number"!=typeof a){var h=Ti(n);a=h.length}else ki.unindexedChars&&gt(n)&&(s=n.split(""));return t=o.createCallback(t,i,4),At(n,function(n,i,o){i=h?h[--a]:--a,e=r?(r=!1,s[i]):t(e,s[i],i,o)}),e}function Ft(n,t,e){return t=o.createCallback(t,e),Et(n,function(n,e,i){return!t(n,e,i)})}function Wt(n){var t=-1,e=n?n.length:0,i=Be("number"==typeof e?e:0);return At(n,function(n){var e=Ze(fi()*(++t+1));i[t]=i[e],i[e]=n}),i}function _t(n){var t=n?n.length:0;return"number"==typeof t?t:Ti(n).length}function Vt(n,t,e){var i;if(t=o.createCallback(t,e),Ci(n))for(var s=-1,a=n.length;a>++s&&!(i=t(n[s],s,n)););else Ei(n,function(n,e,s){return!(i=t(n,e,s))});return!!i}function jt(n,t,e){var i=-1,s=n?n.length:0,a=Be("number"==typeof s?s:0);for(t=o.createCallback(t,e),At(n,function(n,e,s){a[++i]={criteria:t(n,e,s),index:i,value:n}}),s=a.length,a.sort(V);s--;)a[s]=a[s].value;return a}function $t(n){return n&&"number"==typeof n.length?ki.unindexedChars&&gt(n)?n.split(""):Q(n):xt(n)}function zt(n){for(var t=-1,e=n?n.length:0,i=[];e>++t;){var s=n[t];s&&i.push(s)}return i}function Gt(n){for(var t=-1,e=n?n.length:0,i=Je.apply(qe,mi.call(arguments,1)),s=W(i),o=[];e>++t;){var a=n[t];s(a)||o.push(a)}return o}function Ut(n,t,e){var i=-1,s=n?n.length:0;for(t=o.createCallback(t,e);s>++i;)if(t(n[i],i,n))return i;return-1}function qt(n,t,e){if(n){var i=0,s=n.length;if("number"!=typeof t&&null!=t){var a=-1;for(t=o.createCallback(t,e);s>++a&&t(n[a],a,n);)i++}else if(i=t,null==i||e)return n[0];return Q(n,0,pi(ui(0,i),s))}}function Ht(n,t,e,i){var s=-1,a=n?n.length:0,r=[];for("boolean"!=typeof t&&null!=t&&(i=e,e=t,t=!1),null!=e&&(e=o.createCallback(e,i));a>++s;){var h=n[s];e&&(h=e(h,s,n)),Ci(h)?ei.apply(r,t?h:Ht(h)):r.push(h)}return r}function Xt(n,t,e){var i=-1,s=n?n.length:0;if("number"==typeof e)i=(0>e?ui(0,s+e):e||0)-1;else if(e)return i=te(n,t),n[i]===t?i:-1;for(;s>++i;)if(n[i]===t)return i;return-1}function Qt(n,t,e){if(!n)return[];var i=0,s=n.length;if("number"!=typeof t&&null!=t){var a=s;for(t=o.createCallback(t,e);a--&&t(n[a],a,n);)i++}else i=null==t||e?1:t||i;return Q(n,0,pi(ui(0,s-i),s))}function Yt(n){var t=arguments,e=t.length,i={0:{}},s=-1,o=n?n.length:0,a=o>=l,r=[],c=r;n:for(;o>++s;){var u=n[s];if(a)var p=h+u,d=i[0][p]?!(c=i[0][p]):c=i[0][p]=[];if(d||0>Xt(c,u)){a&&c.push(u);for(var f=e;--f;)if(!(i[f]||(i[f]=W(t[f])))(u))continue n;r.push(u)}}return r}function Kt(n,t,e){if(n){var i=0,s=n.length;if("number"!=typeof t&&null!=t){var a=s;for(t=o.createCallback(t,e);a--&&t(n[a],a,n);)i++}else if(i=t,null==i||e)return n[s-1];return Q(n,ui(0,s-i))}}function Jt(n,t,e){var i=n?n.length:0;for("number"==typeof e&&(i=(0>e?ui(0,i+e):pi(e,i-1))+1);i--;)if(n[i]===t)return i;return-1}function Zt(n,t,e){n=+n||0,e=+e||1,null==t&&(t=n,n=0);for(var i=-1,s=ui(0,Ye((t-n)/e)),o=Be(s);s>++i;)o[i]=n,n+=e;return o}function ne(n,t,e){if("number"!=typeof t&&null!=t){var i=0,s=-1,a=n?n.length:0;for(t=o.createCallback(t,e);a>++s&&t(n[s],s,n);)i++}else i=null==t||e?1:ui(0,t);return Q(n,i)}function te(n,t,e,i){var s=0,a=n?n.length:s;for(e=e?o.createCallback(e,i,1):Ce,t=e(t);a>s;){var r=s+a>>>1;t>e(n[r])?s=r+1:a=r}return s}function ee(n){return Ci(n)||(arguments[0]=n?mi.call(n):qe),ie(Je.apply(qe,arguments))}function ie(n,t,e,i){var s=-1,a=n?n.length:0,r=[],c=r;"boolean"!=typeof t&&null!=t&&(i=e,e=t,t=!1);var u=!t&&a>=l;if(u)var p={};for(null!=e&&(c=[],e=o.createCallback(e,i));a>++s;){var d=n[s],f=e?e(d,s,n):d;if(u)var m=h+f,g=p[m]?!(c=p[m]):c=p[m]=[];(t?!s||c[c.length-1]!==f:g||0>Xt(c,f))&&((e||u)&&c.push(f),r.push(d))}return r}function se(n){for(var t=-1,e=n?n.length:0,i=e?Rt(Mi(n,"length")):0,s=Be(i);e>++t;)for(var o=-1,a=n[t];i>++o;)(s[o]||(s[o]=Be(e)))[t]=a[o];return s}function oe(n){return Gt(n,mi.call(arguments,1))}function ae(n){for(var t=-1,e=n?Rt(Mi(arguments,"length")):0,i=Be(e);e>++t;)i[t]=Mi(arguments,t);return i}function re(n,t){for(var e=-1,i=n?n.length:0,s={};i>++e;){var o=n[e];t?s[o]=t[e]:s[o[0]]=o[1]}return s}function he(n,t){return 1>n?t():function(){return 1>--n?t.apply(this,arguments):e}}function le(n,t){return ki.fastBind||ai&&arguments.length>2?ai.call.apply(ai,arguments):j(n,t,mi.call(arguments,2))}function ce(n){for(var t=arguments.length>1?Je.apply(qe,mi.call(arguments,1)):tt(n),e=-1,i=t.length;i>++e;){var s=t[e];n[s]=le(n[s],n)}return n}function ue(n,t){return j(n,t,mi.call(arguments,2),r)}function pe(){var n=arguments;return function(){for(var t=arguments,e=n.length;e--;)t=[n[e].apply(this,t)];return t[0]}}function de(n,t,i){if(null==n)return Ce;var s=typeof n;if("function"!=s){if("object"!=s)return function(t){return t[n]};var o=Ti(n);return function(t){for(var e=o.length,i=!1;e--&&(i=ht(t[o[e]],n[o[e]],r)););return i}}return t!==e?1===i?function(e){return n.call(t,e)}:2===i?function(e,i){return n.call(t,e,i)}:4===i?function(e,i,s,o){return n.call(t,e,i,s,o)}:function(e,i,s){return n.call(t,e,i,s)}:n}function fe(n,t,e){function i(){o=h=null,l&&(a=n.apply(r,s))}var s,o,a,r,h,l=!0;if(e===!0){var c=!0;l=!1}else e&&M[typeof e]&&(c=e.leading,l="trailing"in e?e.trailing:l);return function(){return s=arguments,r=this,Ke(h),!o&&c?(o=!0,a=n.apply(r,s)):h=si(i,t),a}}function me(n){var t=mi.call(arguments,1);return si(function(){n.apply(e,t)},1)}function ge(n,t){var i=mi.call(arguments,2);return si(function(){n.apply(e,i)
},t)}function be(n,t){var e={};return function(){var i=h+(t?t.apply(this,arguments):arguments[0]);return ti.call(e,i)?e[i]:e[i]=n.apply(this,arguments)}}function ve(n){var t,e;return function(){return t?e:(t=!0,e=n.apply(this,arguments),n=null,e)}}function ke(n){return j(n,mi.call(arguments,1))}function ye(n){return j(n,mi.call(arguments,1),null,r)}function we(n,t,e){function i(){r=null,c&&(h=new We,o=n.apply(a,s))}var s,o,a,r,h=0,l=!0,c=!0;return e===!1?l=!1:e&&M[typeof e]&&(l="leading"in e?e.leading:l,c="trailing"in e?e.trailing:c),function(){var e=new We;r||l||(h=e);var c=t-(e-h);return s=arguments,a=this,0>=c?(Ke(r),r=null,h=e,o=n.apply(a,s)):r||(r=si(i,c)),o}}function xe(n,t){return function(){var e=[n];return ei.apply(e,arguments),t.apply(this,e)}}function Le(n){return null==n?"":Ge(n).replace(y,G)}function Ce(n){return n}function De(n){At(tt(n),function(t){var e=o[t]=n[t];o.prototype[t]=function(){var n=this.__wrapped__,t=[n];ei.apply(t,arguments);var i=e.apply(o,t);return n&&"object"==typeof n&&n==i?this:new q(i)}})}function Te(){return i._=Xe,this}function Ee(n,t){return null==n&&null==t&&(t=1),n=+n||0,null==t&&(t=n,n=0),n+Ze(fi()*((+t||0)-n+1))}function Ne(n,t){var i=n?n[t]:e;return ct(i)?n[t]():i}function Ae(n,t,i){var s=o.templateSettings;n||(n=""),i=yi?Pi({},i,s):s;var a,r=yi&&Pi({},i.imports,s.imports),h=yi?Ti(r):["_"],l=yi?xt(r):[o],d=0,m=i.interpolate||k,b="__p += '",v=ze((i.escape||k).source+"|"+m.source+"|"+(m===g?f:k).source+"|"+(i.evaluate||k).source+"|$","g");n.replace(v,function(t,e,i,s,o,r){return i||(i=s),b+=n.slice(d,r).replace(w,z),e&&(b+="' +\n__e("+e+") +\n'"),o&&(a=!0,b+="';\n"+o+";\n__p += '"),i&&(b+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),d=r+t.length,t}),b+="';\n";var y=i.variable,x=y;x||(y="obj",b="with ("+y+") {\n"+b+"\n}\n"),b=(a?b.replace(c,""):b).replace(u,"$1").replace(p,"$1;"),b="function("+y+") {\n"+(x?"":y+" || ("+y+" = {});\n")+"var __t, __p = '', __e = _.escape"+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+b+"return __p\n}";var L="\n/*\n//@ sourceURL="+(i.sourceURL||"/lodash/template/source["+C++ +"]")+"\n*/";try{var D=_e(h,"return "+b+L).apply(e,l)}catch(T){throw T.source=b,T}return t?D(t):(D.source=b,D)}function Se(n,t,e){n=(n=+n)>-1?n:0;var i=-1,s=Be(n);for(t=o.createCallback(t,e,1);n>++i;)s[i]=t(i);return s}function Pe(n){return null==n?"":Ge(n).replace(d,Y)}function Oe(n){var t=++a;return Ge(null==n?"":n)+t}function Re(n,t){return t(n),n}function Ie(){return Ge(this.__wrapped__)}function Me(){return this.__wrapped__}i=i?F.defaults(n.Object(),i,F.pick(n,x)):n;var Be=i.Array,Fe=i.Boolean,We=i.Date,_e=i.Function,Ve=i.Math,je=i.Number,$e=i.Object,ze=i.RegExp,Ge=i.String,Ue=i.TypeError,qe=Be(),He=$e(),Xe=i._,Qe=ze("^"+Ge(He.valueOf).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/valueOf|for [^\]]+/g,".+?")+"$"),Ye=Ve.ceil,Ke=i.clearTimeout,Je=qe.concat,Ze=Ve.floor,ni=Qe.test(ni=$e.getPrototypeOf)&&ni,ti=He.hasOwnProperty,ei=qe.push,ii=i.setImmediate,si=i.setTimeout,oi=He.toString,ai=Qe.test(ai=oi.bind)&&ai,ri=Qe.test(ri=Be.isArray)&&ri,hi=i.isFinite,li=i.isNaN,ci=Qe.test(ci=$e.keys)&&ci,ui=Ve.max,pi=Ve.min,di=i.parseInt,fi=Ve.random,mi=qe.slice,gi=Qe.test(i.attachEvent),bi=ai&&!/\n|true/.test(ai+gi),vi={};vi[T]=Be,vi[E]=Fe,vi[N]=We,vi[P]=$e,vi[S]=je,vi[O]=ze,vi[R]=Ge;var ki=o.support={};(function(){var n=function(){this.x=1},t={0:1,length:1},e=[];n.prototype={valueOf:1,y:1};for(var i in new n)e.push(i);for(i in arguments);ki.argsObject=arguments.constructor==$e&&!(arguments instanceof Be),ki.argsClass=K(arguments),ki.enumPrototypes=n.propertyIsEnumerable("prototype"),ki.fastBind=ai&&!bi,ki.ownLast="x"!=e[0],ki.nonEnumArgs=0!=i,ki.nonEnumShadows=!/valueOf/.test(e),ki.spliceObjects=(qe.splice.call(t,0,1),!t[0]),ki.unindexedChars="xx"!="x"[0]+$e("x")[0];try{ki.nodeClass=!(oi.call(document)==P&&!({toString:0}+""))}catch(s){ki.nodeClass=!0}})(1),o.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:g,variable:"",imports:{_:o}};var yi=Ae("var index, iterable = <%= firstArg %>, result = <%= init %>;\nif (!iterable) return result;\n<%= top %>;\n<% if (arrays) { %>var length = iterable.length; index = -1;\nif (<%= arrays %>) {  <% if (support.unindexedChars) { %>\n  if (isString(iterable)) {\n    iterable = iterable.split('')\n  }  <% } %>\n  while (++index < length) {\n    <%= loop %>\n  }\n}\nelse {  <%  } else if (support.nonEnumArgs) { %>\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += '';\n      <%= loop %>\n    }\n  } else {  <% } %>  <% if (support.enumPrototypes) { %>\n  var skipProto = typeof iterable == 'function';\n  <% } %>  <% if (useHas && useKeys) { %>\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] ? keys(iterable) : [],\n      length = ownProps.length;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n    <% if (support.enumPrototypes) { %>if (!(skipProto && index == 'prototype')) {\n  <% } %>    <%= loop %>\n    <% if (support.enumPrototypes) { %>}\n<% } %>  }  <% } else { %>\n  for (index in iterable) {<%    if (support.enumPrototypes || useHas) { %>\n    if (<%      if (support.enumPrototypes) { %>!(skipProto && index == 'prototype')<% }      if (support.enumPrototypes && useHas) { %> && <% }      if (useHas) { %>hasOwnProperty.call(iterable, index)<% }    %>) {    <% } %>\n    <%= loop %>;    <% if (support.enumPrototypes || useHas) { %>\n    }<% } %>\n  }    <% if (support.nonEnumShadows) { %>\n\n  var ctor = iterable.constructor;\n      <% for (var k = 0; k < 7; k++) { %>\n  index = '<%= shadowedProps[k] %>';\n  if (<%      if (shadowedProps[k] == 'constructor') {        %>!(ctor && ctor.prototype === iterable) && <%      } %>hasOwnProperty.call(iterable, index)) {\n    <%= loop %>\n  }      <% } %>    <% } %>  <% } %>  <% if (arrays || support.nonEnumArgs) { %>\n}<% } %>\n<%= bottom %>;\nreturn result"),wi={args:"object, source, guard",top:"var args = arguments,\n    argsIndex = 0,\n    argsLength = typeof guard == 'number' ? 2 : args.length;\nwhile (++argsIndex < argsLength) {\n  iterable = args[argsIndex];\n  if (iterable && objectTypes[typeof iterable]) {",loop:"if (typeof result[index] == 'undefined') result[index] = iterable[index]",bottom:"  }\n}"},xi={args:"collection, callback, thisArg",top:"callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg)",arrays:"typeof length == 'number'",loop:"if (callback(iterable[index], index, collection) === false) return result"},Li={top:"if (!objectTypes[typeof iterable]) return result;\n"+xi.top,arrays:!1};q.prototype=o.prototype,ki.argsClass||(K=function(n){return n?ti.call(n,"callee"):!1});var Ci=ri||function(n){return n?"object"==typeof n&&oi.call(n)==T:!1},Di=$({args:"object",init:"[]",top:"if (!(objectTypes[typeof object])) return result",loop:"result.push(index)",arrays:!1}),Ti=ci?function(n){return ut(n)?ki.enumPrototypes&&"function"==typeof n||ki.nonEnumArgs&&n.length&&K(n)?Di(n):ci(n):[]}:Di,Ei=$(xi),Ni={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Ai=it(Ni),Si=$(wi,{top:wi.top.replace(";",";\nif (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n  var callback = lodash.createCallback(args[--argsLength - 1], args[argsLength--], 2);\n} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n  callback = args[--argsLength];\n}"),loop:"result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]"}),Pi=$(wi),Oi=$(xi,Li,{useHas:!1}),Ri=$(xi,Li);ct(/x/)&&(ct=function(n){return"function"==typeof n&&oi.call(n)==A});var Ii=ni?function(n){if(!n||oi.call(n)!=P||!ki.argsClass&&K(n))return!1;var t=n.valueOf,e="function"==typeof t&&(e=ni(t))&&ni(e);return e?n==e||ni(n)==e:X(n)}:X,Mi=Ot,Bi=Et;bi&&s&&"function"==typeof ii&&(me=le(ii,i));var Fi=8==di(b+"08")?di:function(n,t){return di(gt(n)?n.replace(v,""):n,t||0)};return o.after=he,o.assign=Si,o.at=Lt,o.bind=le,o.bindAll=ce,o.bindKey=ue,o.compact=zt,o.compose=pe,o.countBy=Dt,o.createCallback=de,o.debounce=fe,o.defaults=Pi,o.defer=me,o.delay=ge,o.difference=Gt,o.filter=Et,o.flatten=Ht,o.forEach=At,o.forIn=Oi,o.forOwn=Ri,o.functions=tt,o.groupBy=St,o.initial=Qt,o.intersection=Yt,o.invert=it,o.invoke=Pt,o.keys=Ti,o.map=Ot,o.max=Rt,o.memoize=be,o.merge=vt,o.min=It,o.omit=kt,o.once=ve,o.pairs=yt,o.partial=ke,o.partialRight=ye,o.pick=wt,o.pluck=Mi,o.range=Zt,o.reject=Ft,o.rest=ne,o.shuffle=Wt,o.sortBy=jt,o.tap=Re,o.throttle=we,o.times=Se,o.toArray=$t,o.union=ee,o.uniq=ie,o.unzip=se,o.values=xt,o.where=Bi,o.without=oe,o.wrap=xe,o.zip=ae,o.zipObject=re,o.collect=Ot,o.drop=ne,o.each=At,o.extend=Si,o.methods=tt,o.object=re,o.select=Et,o.tail=ne,o.unique=ie,De(o),o.clone=J,o.cloneDeep=Z,o.contains=Ct,o.escape=Le,o.every=Tt,o.find=Nt,o.findIndex=Ut,o.findKey=nt,o.has=et,o.identity=Ce,o.indexOf=Xt,o.isArguments=K,o.isArray=Ci,o.isBoolean=st,o.isDate=ot,o.isElement=at,o.isEmpty=rt,o.isEqual=ht,o.isFinite=lt,o.isFunction=ct,o.isNaN=pt,o.isNull=dt,o.isNumber=ft,o.isObject=ut,o.isPlainObject=Ii,o.isRegExp=mt,o.isString=gt,o.isUndefined=bt,o.lastIndexOf=Jt,o.mixin=De,o.noConflict=Te,o.parseInt=Fi,o.random=Ee,o.reduce=Mt,o.reduceRight=Bt,o.result=Ne,o.runInContext=t,o.size=_t,o.some=Vt,o.sortedIndex=te,o.template=Ae,o.unescape=Pe,o.uniqueId=Oe,o.all=Tt,o.any=Vt,o.detect=Nt,o.foldl=Mt,o.foldr=Bt,o.include=Ct,o.inject=Mt,Ri(o,function(n,t){o.prototype[t]||(o.prototype[t]=function(){var t=[this.__wrapped__];return ei.apply(t,arguments),n.apply(o,t)})}),o.first=qt,o.last=Kt,o.take=qt,o.head=qt,Ri(o,function(n,t){o.prototype[t]||(o.prototype[t]=function(t,e){var i=n(this.__wrapped__,t,e);return null==t||e&&"function"!=typeof t?i:new q(i)})}),o.VERSION="1.2.1",o.prototype.toString=Ie,o.prototype.value=Me,o.prototype.valueOf=Me,Ei(["join","pop","shift"],function(n){var t=qe[n];o.prototype[n]=function(){return t.apply(this.__wrapped__,arguments)}}),Ei(["push","reverse","sort","unshift"],function(n){var t=qe[n];o.prototype[n]=function(){return t.apply(this.__wrapped__,arguments),this}}),Ei(["concat","slice","splice"],function(n){var t=qe[n];o.prototype[n]=function(){return new q(t.apply(this.__wrapped__,arguments))}}),ki.spliceObjects||Ei(["pop","shift","splice"],function(n){var t=qe[n],e="splice"==n;o.prototype[n]=function(){var n=this.__wrapped__,i=t.apply(n,arguments);return 0===n.length&&delete n[0],e?new q(i):i}}),o._each=Ei,o._iteratorTemplate=yi,o._shimKeys=Di,o}var e,i="object"==typeof exports&&exports,s="object"==typeof module&&module&&module.exports==i&&module,o="object"==typeof global&&global;(o.global===o||o.window===o)&&(n=o);var a=0,r={},h=+new Date+"",l=200,c=/\b__p \+= '';/g,u=/\b(__p \+=) '' \+/g,p=/(__e\(.*?\)|\b__t\)) \+\n'';/g,d=/&(?:amp|lt|gt|quot|#39);/g,f=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,m=/\w*$/,g=/<%=([\s\S]+?)%>/g,b=" 	\f ﻿\n\r\u2028\u2029 ᠎             　",v=RegExp("^["+b+"]*0+(?=.$)"),k=/($^)/,y=/[&<>"']/g,w=/['\n\r\t\u2028\u2029\\]/g,x=["Array","Boolean","Date","Function","Math","Number","Object","RegExp","String","_","attachEvent","clearTimeout","isFinite","isNaN","parseInt","setImmediate","setTimeout"],L=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],C=0,D="[object Arguments]",T="[object Array]",E="[object Boolean]",N="[object Date]",A="[object Function]",S="[object Number]",P="[object Object]",O="[object RegExp]",R="[object String]",I={};I[A]=!1,I[D]=I[T]=I[E]=I[N]=I[S]=I[P]=I[O]=I[R]=!0;var M={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},B={"\\":"\\","'":"'","\n":"n","\r":"r","	":"t","\u2028":"u2028","\u2029":"u2029"},F=t();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(n._=F,define("lodash",[],function(){return F})):i&&!i.nodeType?s?(s.exports=F)._=F:i._=F:n._=F}(this),function(n,t){"undefined"!=typeof exports?t(n,exports,require("underscore")):"function"==typeof define&&define.amd?define("backbone",["underscore","jquery","exports"],function(e,i,s){n.Backbone=t(n,s,e,i)}):n.Backbone=t(n,{},n._,n.jQuery||n.Zepto||n.ender||n.$)}(this,function(n,t,e,i){var s=n.Backbone,o=[],a=o.push,r=o.slice,h=o.splice;t.VERSION="1.0.0",t.$=i,t.noConflict=function(){return n.Backbone=s,this},t.emulateHTTP=!1,t.emulateJSON=!1;var l=t.Events={on:function(n,t,e){if(!u(this,"on",n,[t,e])||!t)return this;this._events||(this._events={});var i=this._events[n]||(this._events[n]=[]);return i.push({callback:t,context:e,ctx:e||this}),this},once:function(n,t,i){if(!u(this,"once",n,[t,i])||!t)return this;var s=this,o=e.once(function(){s.off(n,o),t.apply(this,arguments)});return o._callback=t,this.on(n,o,i)},off:function(n,t,i){var s,o,a,r,h,l,c,p;if(!this._events||!u(this,"off",n,[t,i]))return this;if(!n&&!t&&!i)return this._events={},this;for(r=n?[n]:e.keys(this._events),h=0,l=r.length;l>h;h++)if(n=r[h],a=this._events[n]){if(this._events[n]=s=[],t||i)for(c=0,p=a.length;p>c;c++)o=a[c],(t&&t!==o.callback&&t!==o.callback._callback||i&&i!==o.context)&&s.push(o);s.length||delete this._events[n]}return this},trigger:function(n){if(!this._events)return this;var t=r.call(arguments,1);if(!u(this,"trigger",n,t))return this;var e=this._events[n],i=this._events.all;return e&&p(e,t),i&&p(i,arguments),this},stopListening:function(n,t,e){var i=this._listeners;if(!i)return this;var s=!t&&!e;"object"==typeof t&&(e=this),n&&((i={})[n._listenerId]=n);for(var o in i)i[o].off(t,e,this),s&&delete this._listeners[o];return this}},c=/\s+/,u=function(n,t,e,i){if(!e)return!0;if("object"==typeof e){for(var s in e)n[t].apply(n,[s,e[s]].concat(i));return!1}if(c.test(e)){for(var o=e.split(c),a=0,r=o.length;r>a;a++)n[t].apply(n,[o[a]].concat(i));return!1}return!0},p=function(n,t){var e,i=-1,s=n.length,o=t[0],a=t[1],r=t[2];switch(t.length){case 0:for(;s>++i;)(e=n[i]).callback.call(e.ctx);return;case 1:for(;s>++i;)(e=n[i]).callback.call(e.ctx,o);return;case 2:for(;s>++i;)(e=n[i]).callback.call(e.ctx,o,a);return;case 3:for(;s>++i;)(e=n[i]).callback.call(e.ctx,o,a,r);return;default:for(;s>++i;)(e=n[i]).callback.apply(e.ctx,t)}},d={listenTo:"on",listenToOnce:"once"};e.each(d,function(n,t){l[t]=function(t,i,s){var o=this._listeners||(this._listeners={}),a=t._listenerId||(t._listenerId=e.uniqueId("l"));return o[a]=t,"object"==typeof i&&(s=this),t[n](i,s,this),this}}),l.bind=l.on,l.unbind=l.off,e.extend(t,l);var f=t.Model=function(n,t){var i,s=n||{};t||(t={}),this.cid=e.uniqueId("c"),this.attributes={},e.extend(this,e.pick(t,m)),t.parse&&(s=this.parse(s,t)||{}),(i=e.result(this,"defaults"))&&(s=e.defaults({},s,i)),this.set(s,t),this.changed={},this.initialize.apply(this,arguments)},m=["url","urlRoot","collection"];e.extend(f.prototype,l,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(){return e.clone(this.attributes)},sync:function(){return t.sync.apply(this,arguments)},get:function(n){return this.attributes[n]},escape:function(n){return e.escape(this.get(n))},has:function(n){return null!=this.get(n)},set:function(n,t,i){var s,o,a,r,h,l,c,u;if(null==n)return this;if("object"==typeof n?(o=n,i=t):(o={})[n]=t,i||(i={}),!this._validate(o,i))return!1;a=i.unset,h=i.silent,r=[],l=this._changing,this._changing=!0,l||(this._previousAttributes=e.clone(this.attributes),this.changed={}),u=this.attributes,c=this._previousAttributes,this.idAttribute in o&&(this.id=o[this.idAttribute]);for(s in o)t=o[s],e.isEqual(u[s],t)||r.push(s),e.isEqual(c[s],t)?delete this.changed[s]:this.changed[s]=t,a?delete u[s]:u[s]=t;if(!h){r.length&&(this._pending=!0);for(var p=0,d=r.length;d>p;p++)this.trigger("change:"+r[p],this,u[r[p]],i)}if(l)return this;if(!h)for(;this._pending;)this._pending=!1,this.trigger("change",this,i);return this._pending=!1,this._changing=!1,this},unset:function(n,t){return this.set(n,void 0,e.extend({},t,{unset:!0}))},clear:function(n){var t={};for(var i in this.attributes)t[i]=void 0;return this.set(t,e.extend({},n,{unset:!0}))},hasChanged:function(n){return null==n?!e.isEmpty(this.changed):e.has(this.changed,n)},changedAttributes:function(n){if(!n)return this.hasChanged()?e.clone(this.changed):!1;var t,i=!1,s=this._changing?this._previousAttributes:this.attributes;for(var o in n)e.isEqual(s[o],t=n[o])||((i||(i={}))[o]=t);return i},previous:function(n){return null!=n&&this._previousAttributes?this._previousAttributes[n]:null},previousAttributes:function(){return e.clone(this._previousAttributes)},fetch:function(n){n=n?e.clone(n):{},void 0===n.parse&&(n.parse=!0);var t=this,i=n.success;return n.success=function(e){return t.set(t.parse(e,n),n)?(i&&i(t,e,n),t.trigger("sync",t,e,n),void 0):!1},W(this,n),this.sync("read",this,n)},save:function(n,t,i){var s,o,a,r=this.attributes;if(null==n||"object"==typeof n?(s=n,i=t):(s={})[n]=t,!(!s||i&&i.wait||this.set(s,i)))return!1;if(i=e.extend({validate:!0},i),!this._validate(s,i))return!1;s&&i.wait&&(this.attributes=e.extend({},r,s)),void 0===i.parse&&(i.parse=!0);var h=this,l=i.success;return i.success=function(n){h.attributes=r;var t=h.parse(n,i);return i.wait&&(t=e.extend(s||{},t)),e.isObject(t)&&!h.set(t,i)?!1:(l&&l(h,n,i),h.trigger("sync",h,n,i),void 0)},W(this,i),o=this.isNew()?"create":i.patch?"patch":"update","patch"===o&&(i.attrs=s),a=this.sync(o,this,i),s&&i.wait&&(this.attributes=r),a},destroy:function(n){n=n?e.clone(n):{};var t=this,i=n.success,s=function(){t.trigger("destroy",t,t.collection,n)};if(n.success=function(e){(n.wait||t.isNew())&&s(),i&&i(t,e,n),t.isNew()||t.trigger("sync",t,e,n)},this.isNew())return n.success(),!1;W(this,n);var o=this.sync("delete",this,n);return n.wait||s(),o},url:function(){var n=e.result(this,"urlRoot")||e.result(this.collection,"url")||F();return this.isNew()?n:n+("/"===n.charAt(n.length-1)?"":"/")+encodeURIComponent(this.id)},parse:function(n){return n},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return null==this.id},isValid:function(n){return this._validate({},e.extend(n||{},{validate:!0}))},_validate:function(n,t){if(!t.validate||!this.validate)return!0;n=e.extend({},this.attributes,n);var i=this.validationError=this.validate(n,t)||null;return i?(this.trigger("invalid",this,i,e.extend(t||{},{validationError:i})),!1):!0}});var g=["keys","values","pairs","invert","pick","omit"];e.each(g,function(n){f.prototype[n]=function(){var t=r.call(arguments);return t.unshift(this.attributes),e[n].apply(e,t)}});var b=t.Collection=function(n,t){t||(t={}),t.url&&(this.url=t.url),t.model&&(this.model=t.model),void 0!==t.comparator&&(this.comparator=t.comparator),this._reset(),this.initialize.apply(this,arguments),n&&this.reset(n,e.extend({silent:!0},t))},v={add:!0,remove:!0,merge:!0},k={add:!0,merge:!1,remove:!1};e.extend(b.prototype,l,{model:f,initialize:function(){},toJSON:function(n){return this.map(function(t){return t.toJSON(n)})},sync:function(){return t.sync.apply(this,arguments)},add:function(n,t){return this.set(n,e.defaults(t||{},k))},remove:function(n,t){n=e.isArray(n)?n.slice():[n],t||(t={});var i,s,o,a;for(i=0,s=n.length;s>i;i++)a=this.get(n[i]),a&&(delete this._byId[a.id],delete this._byId[a.cid],o=this.indexOf(a),this.models.splice(o,1),this.length--,t.silent||(t.index=o,a.trigger("remove",a,this,t)),this._removeReference(a));return this},set:function(n,t){t=e.defaults(t||{},v),t.parse&&(n=this.parse(n,t)),e.isArray(n)||(n=n?[n]:[]);var i,s,o,r,l,c=t.at,u=this.comparator&&null==c&&t.sort!==!1,p=e.isString(this.comparator)?this.comparator:null,d=[],f=[],m={};for(i=0,s=n.length;s>i;i++)(o=this._prepareModel(n[i],t))&&((r=this.get(o))?(t.remove&&(m[r.cid]=!0),t.merge&&(r.set(o.attributes,t),u&&!l&&r.hasChanged(p)&&(l=!0))):t.add&&(d.push(o),o.on("all",this._onModelEvent,this),this._byId[o.cid]=o,null!=o.id&&(this._byId[o.id]=o)));if(t.remove){for(i=0,s=this.length;s>i;++i)m[(o=this.models[i]).cid]||f.push(o);f.length&&this.remove(f,t)}if(d.length&&(u&&(l=!0),this.length+=d.length,null!=c?h.apply(this.models,[c,0].concat(d)):a.apply(this.models,d)),l&&this.sort({silent:!0}),t.silent)return this;for(i=0,s=d.length;s>i;i++)(o=d[i]).trigger("add",o,this,t);return l&&this.trigger("sort",this,t),this},reset:function(n,t){t||(t={});for(var i=0,s=this.models.length;s>i;i++)this._removeReference(this.models[i]);return t.previousModels=this.models,this._reset(),this.add(n,e.extend({silent:!0},t)),t.silent||this.trigger("reset",this,t),this},push:function(n,t){return n=this._prepareModel(n,t),this.add(n,e.extend({at:this.length},t)),n},pop:function(n){var t=this.at(this.length-1);return this.remove(t,n),t},unshift:function(n,t){return n=this._prepareModel(n,t),this.add(n,e.extend({at:0},t)),n},shift:function(n){var t=this.at(0);return this.remove(t,n),t},slice:function(n,t){return this.models.slice(n,t)},get:function(n){return null==n?void 0:this._byId[null!=n.id?n.id:n.cid||n]},at:function(n){return this.models[n]},where:function(n,t){return e.isEmpty(n)?t?void 0:[]:this[t?"find":"filter"](function(t){for(var e in n)if(n[e]!==t.get(e))return!1;return!0})},findWhere:function(n){return this.where(n,!0)},sort:function(n){if(!this.comparator)throw Error("Cannot sort a set without a comparator");return n||(n={}),e.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(e.bind(this.comparator,this)),n.silent||this.trigger("sort",this,n),this},sortedIndex:function(n,t,i){t||(t=this.comparator);var s=e.isFunction(t)?t:function(n){return n.get(t)};return e.sortedIndex(this.models,n,s,i)},pluck:function(n){return e.invoke(this.models,"get",n)},fetch:function(n){n=n?e.clone(n):{},void 0===n.parse&&(n.parse=!0);var t=n.success,i=this;return n.success=function(e){var s=n.reset?"reset":"set";i[s](e,n),t&&t(i,e,n),i.trigger("sync",i,e,n)},W(this,n),this.sync("read",this,n)},create:function(n,t){if(t=t?e.clone(t):{},!(n=this._prepareModel(n,t)))return!1;t.wait||this.add(n,t);var i=this,s=t.success;return t.success=function(e){t.wait&&i.add(n,t),s&&s(n,e,t)},n.save(null,t),n},parse:function(n){return n},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(n,t){if(n instanceof f)return n.collection||(n.collection=this),n;t||(t={}),t.collection=this;var e=new this.model(n,t);return e._validate(n,t)?e:(this.trigger("invalid",this,n,t),!1)},_removeReference:function(n){this===n.collection&&delete n.collection,n.off("all",this._onModelEvent,this)},_onModelEvent:function(n,t,e,i){("add"!==n&&"remove"!==n||e===this)&&("destroy"===n&&this.remove(t,i),t&&n==="change:"+t.idAttribute&&(delete this._byId[t.previous(t.idAttribute)],null!=t.id&&(this._byId[t.id]=t)),this.trigger.apply(this,arguments))}});var y=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain"];e.each(y,function(n){b.prototype[n]=function(){var t=r.call(arguments);return t.unshift(this.models),e[n].apply(e,t)}});var w=["groupBy","countBy","sortBy"];e.each(w,function(n){b.prototype[n]=function(t,i){var s=e.isFunction(t)?t:function(n){return n.get(t)};return e[n](this.models,s,i)}});var x=t.View=function(n){this.cid=e.uniqueId("view"),this._configure(n||{}),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},L=/^(\S+)\s*(.*)$/,C=["model","collection","el","id","attributes","className","tagName","events"];e.extend(x.prototype,l,{tagName:"div",$:function(n){return this.$el.find(n)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(n,e){return this.$el&&this.undelegateEvents(),this.$el=n instanceof t.$?n:t.$(n),this.el=this.$el[0],e!==!1&&this.delegateEvents(),this},delegateEvents:function(n){if(!n&&!(n=e.result(this,"events")))return this;this.undelegateEvents();for(var t in n){var i=n[t];if(e.isFunction(i)||(i=this[n[t]]),i){var s=t.match(L),o=s[1],a=s[2];i=e.bind(i,this),o+=".delegateEvents"+this.cid,""===a?this.$el.on(o,i):this.$el.on(o,a,i)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_configure:function(n){this.options&&(n=e.extend({},e.result(this,"options"),n)),e.extend(this,e.pick(n,C)),this.options=n},_ensureElement:function(){if(this.el)this.setElement(e.result(this,"el"),!1);else{var n=e.extend({},e.result(this,"attributes"));this.id&&(n.id=e.result(this,"id")),this.className&&(n["class"]=e.result(this,"className"));var i=t.$("<"+e.result(this,"tagName")+">").attr(n);this.setElement(i,!1)}}}),t.sync=function(n,i,s){var o=D[n];e.defaults(s||(s={}),{emulateHTTP:t.emulateHTTP,emulateJSON:t.emulateJSON});var a={type:o,dataType:"json"};if(s.url||(a.url=e.result(i,"url")||F()),null!=s.data||!i||"create"!==n&&"update"!==n&&"patch"!==n||(a.contentType="application/json",a.data=JSON.stringify(s.attrs||i.toJSON(s))),s.emulateJSON&&(a.contentType="application/x-www-form-urlencoded",a.data=a.data?{model:a.data}:{}),s.emulateHTTP&&("PUT"===o||"DELETE"===o||"PATCH"===o)){a.type="POST",s.emulateJSON&&(a.data._method=o);var r=s.beforeSend;s.beforeSend=function(n){return n.setRequestHeader("X-HTTP-Method-Override",o),r?r.apply(this,arguments):void 0}}"GET"===a.type||s.emulateJSON||(a.processData=!1),"PATCH"!==a.type||!window.ActiveXObject||window.external&&window.external.msActiveXFilteringEnabled||(a.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var h=s.xhr=t.ajax(e.extend(a,s));return i.trigger("request",i,h,s),h};var D={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};t.ajax=function(){return t.$.ajax.apply(t.$,arguments)};var T=t.Router=function(n){n||(n={}),n.routes&&(this.routes=n.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},E=/\((.*?)\)/g,N=/(\(\?)?:\w+/g,A=/\*\w+/g,S=/[\-{}\[\]+?.,\\\^$|#\s]/g;e.extend(T.prototype,l,{initialize:function(){},route:function(n,i,s){e.isRegExp(n)||(n=this._routeToRegExp(n)),e.isFunction(i)&&(s=i,i=""),s||(s=this[i]);var o=this;return t.history.route(n,function(e){var a=o._extractParameters(n,e);s&&s.apply(o,a),o.trigger.apply(o,["route:"+i].concat(a)),o.trigger("route",i,a),t.history.trigger("route",o,i,a)}),this},navigate:function(n,e){return t.history.navigate(n,e),this},_bindRoutes:function(){if(this.routes){this.routes=e.result(this,"routes");for(var n,t=e.keys(this.routes);null!=(n=t.pop());)this.route(n,this.routes[n])}},_routeToRegExp:function(n){return n=n.replace(S,"\\$&").replace(E,"(?:$1)?").replace(N,function(n,t){return t?n:"([^/]+)"}).replace(A,"(.*?)"),RegExp("^"+n+"$")},_extractParameters:function(n,t){var i=n.exec(t).slice(1);return e.map(i,function(n){return n?decodeURIComponent(n):null})}});var P=t.History=function(){this.handlers=[],e.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},O=/^[#\/]|\s+$/g,R=/^\/+|\/+$/g,I=/msie [\w.]+/,M=/\/$/;P.started=!1,e.extend(P.prototype,l,{interval:50,getHash:function(n){var t=(n||this).location.href.match(/#(.*)$/);return t?t[1]:""},getFragment:function(n,t){if(null==n)if(this._hasPushState||!this._wantsHashChange||t){n=this.location.pathname;var e=this.root.replace(M,"");n.indexOf(e)||(n=n.substr(e.length))}else n=this.getHash();return n.replace(O,"")},start:function(n){if(P.started)throw Error("Backbone.history has already been started");P.started=!0,this.options=e.extend({},{root:"/"},this.options,n),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var i=this.getFragment(),s=document.documentMode,o=I.exec(navigator.userAgent.toLowerCase())&&(!s||7>=s);this.root=("/"+this.root+"/").replace(R,"/"),o&&this._wantsHashChange&&(this.iframe=t.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow,this.navigate(i)),this._hasPushState?t.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!o?t.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=i;var a=this.location,r=a.pathname.replace(/[^\/]$/,"$&/")===this.root;return this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!r?(this.fragment=this.getFragment(null,!0),this.location.replace(this.root+this.location.search+"#"+this.fragment),!0):(this._wantsPushState&&this._hasPushState&&r&&a.hash&&(this.fragment=this.getHash().replace(O,""),this.history.replaceState({},document.title,this.root+this.fragment+a.search)),this.options.silent?void 0:this.loadUrl())},stop:function(){t.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),clearInterval(this._checkUrlInterval),P.started=!1},route:function(n,t){this.handlers.unshift({route:n,callback:t})},checkUrl:function(){var n=this.getFragment();return n===this.fragment&&this.iframe&&(n=this.getFragment(this.getHash(this.iframe))),n===this.fragment?!1:(this.iframe&&this.navigate(n),this.loadUrl()||this.loadUrl(this.getHash()),void 0)},loadUrl:function(n){var t=this.fragment=this.getFragment(n),i=e.any(this.handlers,function(n){return n.route.test(t)?(n.callback(t),!0):void 0});return i},navigate:function(n,t){if(!P.started)return!1;if(t&&t!==!0||(t={trigger:t}),n=this.getFragment(n||""),this.fragment!==n){this.fragment=n;var e=this.root+n;if(this._hasPushState)this.history[t.replace?"replaceState":"pushState"]({},document.title,e);else{if(!this._wantsHashChange)return this.location.assign(e);this._updateHash(this.location,n,t.replace),this.iframe&&n!==this.getFragment(this.getHash(this.iframe))&&(t.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,n,t.replace))}t.trigger&&this.loadUrl(n)}},_updateHash:function(n,t,e){if(e){var i=n.href.replace(/(javascript:|#).*$/,"");n.replace(i+"#"+t)}else n.hash="#"+t}}),t.history=new P;var B=function(n,t){var i,s=this;i=n&&e.has(n,"constructor")?n.constructor:function(){return s.apply(this,arguments)},e.extend(i,s,t);var o=function(){this.constructor=i};return o.prototype=s.prototype,i.prototype=new o,n&&e.extend(i.prototype,n),i.__super__=s.prototype,i};f.extend=b.extend=T.extend=x.extend=P.extend=B;var F=function(){throw Error('A "url" property or function must be specified')},W=function(n,t){var e=t.error;t.error=function(i){e&&e(n,i,t),n.trigger("error",n,i,t)}};return t}),define("data/toc",["lodash"],function(n){"use strict";var t=[{ch:0,title:"Prologue",sections:[{sec:"",title:"The base object",disabled:!0}]},{ch:1,title:"Introduction",sections:[{sec:"1.1",title:"Introduction",disabled:!0},{sec:"1.2",title:"The cradle",disabled:!0}]},{ch:2,title:"Expression Parsing",sections:[{sec:"2.1",title:"Getting started",disabled:!0},{sec:"2.2",title:"Single digits"},{sec:"2.3",title:"Binary expressions"},{sec:"2.4",title:"General expressions"},{sec:"2.5",title:"Using the stack"},{sec:"2.6",title:"Multiplication and division"},{sec:"2.7",title:"Parentheses"},{sec:"2.8",title:"Unary minus"},{sec:"2.9",title:"A word about optimization",disabled:!0}]},{ch:3,title:"More Expressions",sections:[{sec:"3.1",title:"Introduction",disabled:!0},{sec:"3.2",title:"Variables"},{sec:"3.3",title:"Functions"},{sec:"3.4",title:"More on error handling"},{sec:"3.5",title:"Assignment statements"},{sec:"3.6",title:"Multi-character tokens"},{sec:"3.7",title:"White space"}]},{ch:4,title:"Interpreters",sections:[{sec:"4.1",title:"Introduction",disabled:!0},{sec:"4.2",title:"The interpreters",disabled:!0},{sec:"4.2.1",title:"Single digits"},{sec:"4.2.2",title:"Addition and subtraction"},{sec:"4.2.3",title:"Multiplication and division"},{sec:"4.2.4",title:"Multi-digits number"},{sec:"4.2.5",title:"Factor"},{sec:"4.3",title:"A little philosophy",disabled:!0},{sec:"4.3.1",title:"Variables"},{sec:"4.3.2",title:"Assignment statements"},{sec:"4.3.3",title:"Multiple statements",editor:!0},{sec:"4.3.4",title:"I/O routines",editor:!0}]},{ch:5,title:"Control Constructs",sections:[{sec:"5.1",title:"Introduction",disabled:!0},{sec:"5.2",title:"The plan",disabled:!0},{sec:"5.2.1",title:"One statement"},{sec:"5.2.2",title:"More than one statement"},{sec:"5.3",title:"Some groundwork",console:!1},{sec:"5.4",title:"The IF statement"},{sec:"5.4.2",title:"Add the ELSE clause"},{sec:"5.5",title:"The WHILE statement"},{sec:"5.6",title:"The LOOP statement"},{sec:"5.7",title:"The Repeat-Until statement"},{sec:"5.8",title:"The FOR loop"},{sec:"5.9",title:"The DO statement"},{sec:"5.10",title:"The BREAK statement"},{sec:"5.11",title:"Conclusion"}]},{ch:6,title:"Boolean Expressions",sections:[{sec:"6.1",title:"Introduction",disabled:!0},{sec:"6.2",title:"The plan",disabled:!0},{sec:"6.3",title:"The grammar",disabled:!0},{sec:"6.4",title:"Relops",disabled:!0},{sec:"6.5",title:"Fixing the grammar",disabled:!0},{sec:"6.6",title:"The parser",disabled:!0},{sec:"6.6.1",title:"Boolean literal 1"},{sec:"6.6.2",title:"Boolean literal 2"},{sec:"6.6.3",title:"OR operation"},{sec:"6.6.4",title:"AND operation"},{sec:"6.6.5",title:"NOT operation"},{sec:"6.6.6",title:"Expand the factor"},{sec:"6.6.7",title:"Full-blown relation"},{sec:"6.6.8",title:"Merging with expressions"},{sec:"6.6.9",title:"Change to latest expression syntax"},{sec:"6.7",title:"Merging with control constructs"},{sec:"6.8",title:"Adding assignments",editor:!0},{sec:"6.9",title:"Conclusion"}]},{ch:7,title:"Lexical Scanning",sections:[{sec:"7.1",title:"Introduction",disabled:!0},{sec:"7.2",title:"Lexical scanning",disabled:!0},{sec:"7.3",title:"State machines and alternatives",disabled:!0},{sec:"7.4",title:"Some experiments in scanning"},{sec:"7.5",title:"White space"},{sec:"7.6",title:"State machines",disabled:!0},{sec:"7.7",title:"Newlines",editor:!0},{sec:"7.8",title:"Operators",editor:!0},{sec:"7.9",title:"Lists, commas and command lines",editor:!0},{sec:"7.10",title:"Getting fancy"},{sec:"7.10.2",title:"Returning codes",editor:!0},{sec:"7.10.3",title:"Cleanup with global",editor:!0},{sec:"7.11",title:"Returning a character",editor:!0},{sec:"7.12",title:"Distributed vs centralized scanners",console:!1},{sec:"7.13",title:"Merging scanner and parser",disabled:!0},{sec:"7.13.1",title:"Judicious copying",editor:!0},{sec:"7.13.2",title:"Merging scanner and parser",editor:!0},{sec:"7.14",title:"Conclusion",disabled:!0}]},{ch:8,title:"A Little Philosophy",sections:[{sec:"8.1",title:"Introduction",disabled:!0},{sec:"8.2",title:"The road home",disabled:!0},{sec:"8.3",title:"Why is it so simple",disabled:!0},{sec:"8.4",title:"Conclusion",disabled:!0}]},{ch:9,title:"A Top View",sections:[{sec:"9.1",title:"Introduction",disabled:!0},{sec:"9.2",title:"The top level",disabled:!0},{sec:"9.3",title:"The structure of Pascal"},{sec:"9.4",title:"Fleshing it out"},{sec:"9.5",title:"Declarations"},{sec:"9.6",title:"The structure of C"}]},{ch:10,title:'Introducing "Tiny"',sections:[{sec:"10.1",title:"Introduction",disabled:!0},{sec:"10.2",title:"Getting started",disabled:!0},{sec:"10.2.1",title:"First step"},{sec:"10.2.2",title:"The main program"},{sec:"10.3",title:"Declarations"},{sec:"10.4",title:"Declarations and symbols"},{sec:"10.4.2",title:"Variable list"},{sec:"10.5",title:"Initializers"},{sec:"10.5.2",title:"Multi-digit integer"},{sec:"10.6",title:"The symbol table"},{sec:"10.7",title:"Executable statements"},{sec:"10.7.2",title:"Code generation routines",console:!1},{sec:"10.7.3",title:"Assignment statement"},{sec:"10.8",title:"Booleans",disabled:!0},{sec:"10.8.1",title:"More code generation routines",console:!1},{sec:"10.8.2",title:"Boolean expressions"},{sec:"10.9",title:"Control structures"},{sec:"10.10",title:"Lexical scanning",editor:!0},{sec:"10.11",title:"Multi-character variable names",disabled:!0},{sec:"10.12",title:"More relops",editor:!0},{sec:"10.13",title:"Input / Output",editor:!0},{sec:"10.14",title:"Conclusion",console:!1}]},{ch:11,title:"Lexical Scan Revisited",sections:[{sec:"11.1",title:"Introduction",disabled:!0},{sec:"11.2",title:"Background",disabled:!0},{sec:"11.3",title:"The problem",disabled:!0},{sec:"11.4",title:"The solution",editor:!0},{sec:"11.4.2",title:"Single-character operators",console:!1},{sec:"11.5",title:"Fixing up the compiler",disabled:!0},{sec:"11.6",title:"Conclusion",editor:!0}]},{ch:12,title:"Miscellany",sections:[{sec:"12.1",title:"Introduction",disabled:!0},{sec:"12.2",title:"Semicolons",disabled:!0},{sec:"12.3",title:"Syntatic sugar",disabled:!0},{sec:"12.4",title:"Dealing with semicolons",disabled:!0},{sec:"12.4.1",title:"The C version",editor:!0},{sec:"12.4.2",title:"The Pascal version",editor:!0},{sec:"12.5",title:"A compromise",editor:!0},{sec:"12.6",title:"Comments",disabled:!0},{sec:"12.7",title:"Single character delimiters",disabled:!0},{sec:"12.7.1",title:"Strip the comments out",editor:!0},{sec:"12.7.2",title:"The conventional treatment",editor:!0},{sec:"12.7.3",title:"Nested comments",editor:!0},{sec:"12.8",title:"Multi character delimiters",editor:!0},{sec:"12.9",title:"One sided comments",editor:!0},{sec:"12.10",title:"Conclusion",console:!1}]},{ch:13,title:"Procedures",sections:[{sec:"13.1",title:"Introduction",disabled:!0},{sec:"13.2",title:"One last digression",disabled:!0},{sec:"13.3",title:"The basics",disabled:!0},{sec:"13.4",title:"A basis for experimentation",editor:!0},{sec:"13.5",title:"Declarating a procedure",editor:!0},{sec:"13.5.2",title:"The main program",editor:!0},{sec:"13.6",title:"Calling the procedure",editor:!0},{sec:"13.7",title:"Passing parameters",editor:!0},{sec:"13.8",title:"The semantics of parameters",disabled:!0},{sec:"13.9",title:"Pass by value",editor:!0},{sec:"13.10",title:"What's wrong?",editor:!0},{sec:"13.10.2",title:"The next problem",editor:!0},{sec:"13.11",title:"Call by reference",editor:!0},{sec:"13.12",title:"Local variables",editor:!0},{sec:"13.13",title:"Conclusion",console:!1}]},{ch:14,title:"Types",sections:[{sec:"14.1",title:"Introduction",disabled:!0},{sec:"14.2",title:"What's coming next?",disabled:!0},{sec:"14.3",title:"The symbol table"},{sec:"14.4",title:"Adding entries"},{sec:"14.5",title:"Allocating storage",editor:!0},{sec:"14.6",title:"Declaring types",editor:!0},{sec:"14.7",title:"Assignments",editor:!0},{sec:"14.8",title:"The coward's way out",editor:!0},{sec:"14.9",title:"A more reasonable solution",editor:!0},{sec:"14.10",title:"Literal arguments",editor:!0},{sec:"14.11",title:"Additive expressions",editor:!0},{sec:"14.12",title:"Why so many procedures?",disabled:!0},{sec:"14.13",title:"Multiplicative expressions",editor:!0},{sec:"14.14",title:"Multiplication",editor:!0},{sec:"14.15",title:"Division",editor:!0},{sec:"14.16",title:"Beginning to wind down",disabled:!0},{sec:"14.17",title:"To coerce or not coerce",disabled:!0},{sec:"14.18",title:"Conclusion",console:!1}]},{ch:15,title:"Back to The Future",sections:[{sec:"15.1",title:"Introduction",disabled:!0},{sec:"15.2",title:"New starts, old directions",disabled:!0},{sec:"15.3",title:"Starting over?",disabled:!0},{sec:"15.4",title:"The input unit"},{sec:"15.5",title:"The output unit"},{sec:"15.6",title:"The error unit"},{sec:"15.7",title:"Scanning and parsing"},{sec:"15.8",title:"The scanner unit"},{sec:"15.9",title:"Decisions, decisions"},{sec:"15.10",title:"Parsing"},{sec:"15.11",title:"References",console:!1}]},{ch:16,title:"Unit Construction",sections:[{sec:"16.1",title:"Introduction",disabled:!0},{sec:"16.2",title:"Just like classical",disabled:!0},{sec:"16.3",title:"Fleshing out the parser"},{sec:"16.4",title:"Terms and expressions"},{sec:"16.5",title:"Assignments"},{sec:"16.6",title:"Booleans"},{sec:"16.7",title:'Boolean "AND"'},{sec:"",title:""}]}];
return n.each(t,function(t){n.each(t.sections,function(n){n.ch=t.ch,n.disabled=n.disabled||!1})})}),function(n,t){"function"==typeof define&&define.amd?define("localstorage",["underscore","backbone"],function(e,i){return t(e||n._,i||n.Backbone)}):t(_,Backbone)}(this,function(n,t){function e(){return(0|65536*(1+Math.random())).toString(16).substring(1)}function i(){return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}return t.LocalStorage=window.Store=function(n){this.name=n;var t=this.localStorage().getItem(this.name);this.records=t&&t.split(",")||[]},n.extend(t.LocalStorage.prototype,{save:function(){this.localStorage().setItem(this.name,this.records.join(","))},create:function(n){return n.id||(n.id=i(),n.set(n.idAttribute,n.id)),this.localStorage().setItem(this.name+"-"+n.id,JSON.stringify(n)),this.records.push(""+n.id),this.save(),this.find(n)},update:function(t){return this.localStorage().setItem(this.name+"-"+t.id,JSON.stringify(t)),n.include(this.records,""+t.id)||this.records.push(""+t.id),this.save(),this.find(t)},find:function(n){return this.jsonData(this.localStorage().getItem(this.name+"-"+n.id))},findAll:function(){return n(this.records).chain().map(function(n){return this.jsonData(this.localStorage().getItem(this.name+"-"+n))},this).compact().value()},destroy:function(t){return t.isNew()?!1:(this.localStorage().removeItem(this.name+"-"+t.id),this.records=n.reject(this.records,function(n){return n===""+t.id}),this.save(),t)},localStorage:function(){return localStorage},jsonData:function(n){return n&&JSON.parse(n)}}),t.LocalStorage.sync=window.Store.sync=t.localSync=function(n,e,i){var s,o,a=e.localStorage||e.collection.localStorage,r=$.Deferred&&$.Deferred();try{switch(n){case"read":s=void 0!=e.id?a.find(e):a.findAll();break;case"create":s=a.create(e);break;case"update":s=a.update(e);break;case"delete":s=a.destroy(e)}}catch(h){o=h.code===DOMException.QUOTA_EXCEEDED_ERR&&0===window.localStorage.length?"Private browsing is unsupported":h.message}return s?(i&&i.success&&("0.9.10"===t.VERSION?i.success(e,s,i):i.success(s)),r&&r.resolve(s)):(o=o?o:"Record Not Found",i&&i.error&&("0.9.10"===t.VERSION?i.error(e,o,i):i.error(o)),r&&r.reject(o)),i&&i.complete&&i.complete(s),r&&r.promise()},t.ajaxSync=t.sync,t.getSyncMethod=function(n){return n.localStorage||n.collection&&n.collection.localStorage?t.localSync:t.ajaxSync},t.sync=function(n,e,i){return t.getSyncMethod(e).apply(this,[n,e,i])},t.LocalStorage}),define("models/app",["lodash","backbone","data/toc","localstorage"],function(n,t,e){"use strict";var i=t.Model.extend({localStorage:new t.LocalStorage("lbac-app"),defaults:{ch:0,sec:""},validate:function(t){var i=t.ch,s=t.sec;return i===""+n.parseInt(i)&&e[i]?s&&!n.any(e[i].sections,{sec:s})?"Invalid section: "+s:void 0:"Invalid chapter: "+i}});return i}),define("routes/router",["jquery","lodash","backbone","models/app"],function(n,t,e,i){"use strict";var s=e.Router.extend({routes:{"ch/:ch(/:sec)":"saveState","*any":"restorePage"},initialize:function(){this.model=new i({id:1}),this.listenTo(this.model,"sync",this.triggerUpdate),this.listenTo(this.model,"invalid",this.restorePage)},saveState:function(n,t){this.model.save({ch:n,sec:t})},restorePage:function(){this.model.fetch();var n="ch/"+this.model.get("ch");this.model.get("sec")&&(n+="/"+this.model.get("sec")),this.navigate(n,{replace:!0})},triggerUpdate:function(){var n=t.parseInt(this.model.get("ch")),e=this.model.get("sec");this.trigger("update",n,e)}});return s}),define("templates",[],function(){return this.JST=this.JST||{},this.JST["app/scripts/templates/chapterItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<div class="accordion-group">\n    <div class="accordion-heading">\n        <a id="chapter'+(null==(__t=ch)?"":__t)+'" class="accordion-toggle btn" href="#ch/'+(null==(__t=ch)?"":__t)+'">'+(null==(__t=ch?"Chapter "+ch+" ":"")?"":__t)+(null==(__t=title)?"":__t)+'</a>\n    </div>\n    <div id="ch'+(null==(__t=ch)?"":__t)+'" class="accordion-body collapse">\n        <ul class="accordion-inner nav nav-tabs nav-stacked">\n        '+(null==(__t=_.map(sections,function(n){return sectionTemplate(n)}).join(""))?"":__t)+"\n        </ul>\n    </div>\n</div>\n";return __p},this.JST["app/scripts/templates/info.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<button type="button" class="close" data-dismiss="alert">&times;</button>\n<b>NOTICE:</b> You are highly recommanded to read the original article:\n<a href="http://compilers.iecc.com/crenshaw/'+(null==(__t=ch?"tutor"+ch+".txt":"")?"":__t)+'" target="_blank">\n    <b>'+(null==(__t=(ch?"PART&nbsp;"+ch+":&nbsp;"+title:"Let's Build a Compiler")+", by&nbsp;Jack&nbsp;Crenshaw.")?"":__t)+"\n    </b>\n</a>\n";return __p},this.JST["app/scripts/templates/pagerItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+="<li"+(null==(__t=className?' class="'+className+'"':"")?"":__t)+'>\n    <a href="#ch/'+(null==(__t=ch)?"":__t)+(null==(__t=sec?"/"+sec:"")?"":__t)+'" data-title="'+(null==(__t=title)?"":__t)+'" '+(null==(__t=placement?'data-placement="'+placement+'"':"")?"":__t)+">"+(null==(__t=text)?"":__t)+"</a>\n</li>\n";return __p},this.JST["app/scripts/templates/sectionItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+="<li"+(null==(__t=disabled?' class="disabled"':"")?"":__t)+'>\n    <a id="sec'+(null==(__t=sec.replace(/\./g,"-"))?"":__t)+'" href="#ch/'+(null==(__t=ch)?"":__t)+"/"+(null==(__t=sec)?"":__t)+'">'+(null==(__t=sec)?"":__t)+" "+(null==(__t=title)?"":__t)+"</a>\n</li>\n";return __p},this.JST["app/scripts/templates/setting.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<div id="setting" class="btn-group">\n\n<a class="btn dropdown-toggle" data-toggle="dropdown">\n    Setting&nbsp;&nbsp;&nbsp;<span class="caret"></span>\n</a>\n\n<ul class="dropdown-menu pull-right">\n    <li>\n        <a id="toggle-editor" tabindex="-1" data-toggle="tooltip" data-placement="left" data-title="'+(null==(__t=editorTitle)?"":__t)+'"><i'+(null==(__t=editor?' class="icon-ok"':"")?"":__t)+'></i>Editor</a>\n    </li>\n    <li>\n        <a id="toggle-console" tabindex="-1" data-toggle="tooltip" data-placement="left" data-title="'+(null==(__t=consoleTitle)?"":__t)+'"><i'+(null==(__t=console?' class="icon-ok"':"")?"":__t)+"></i>Console</a>\n    </li>\n</ul>\n\n</div>\n";return __p},this.JST}),define("models/menu",["backbone"],function(n){"use strict";var t=n.Model.extend({defaults:{ch:-1,active:""}});return t}),define("views/menu",["jquery","lodash","backbone","templates","models/menu","data/toc"],function(n,t,e,i,s,o){"use strict";var a=e.View.extend({chapterTemplate:i["app/scripts/templates/chapterItem.ejs"],sectionTemplate:i["app/scripts/templates/sectionItem.ejs"],events:{"click .disabled a":function(){return!1},"click .accordion-toggle":"chapterClicked"},initialize:function(){this.model=new s,this.listenTo(this.model,"change:ch",this.toggleCh),this.listenTo(this.model,"change:active",this.toggleActive)},render:function(){var n=this.chapterTemplate,e=this.sectionTemplate,i=t.map(o,function(t){return t.sectionTemplate=e,n(t)}).join("");this.$el.html(i)},update:function(n,t){this.model.set("ch",n),t?this.model.set("active","#sec"+t.replace(/\./g,"-")):this.model.set("active","#chapter"+n)},chapterClicked:function(t){var e=n(t.target).attr("href");this.trigger("click:chapter",e),t.preventDefault()},toggleCh:function(n,t){this.$("#ch"+n.previous("ch")).collapse("hide"),this.$("#ch"+t).collapse("show")},toggleActive:function(n,t){this.$(n.previous("active")).removeClass("btn-primary"),this.$(t).addClass("btn-primary")}});return a}),window.PR_SHOULD_USE_CONTINUATION=!0,function(){function n(n){function t(n){var t=n.charCodeAt(0);if(92!==t)return t;var e=n.charAt(1);return t=u[e],t?t:e>="0"&&"7">=e?parseInt(n.substring(1),8):"u"===e||"x"===e?parseInt(n.substring(2),16):n.charCodeAt(1)}function e(n){if(32>n)return(16>n?"\\x0":"\\x")+n.toString(16);var t=String.fromCharCode(n);return"\\"===t||"-"===t||"]"===t||"^"===t?"\\"+t:t}function i(n){var i=n.substring(1,n.length-1).match(RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g")),s=[],o="^"===i[0],a=["["];o&&a.push("^");for(var r=o?1:0,h=i.length;h>r;++r){var l=i[r];if(/\\[bdsw]/i.test(l))a.push(l);else{var c,u=t(l);h>r+2&&"-"===i[r+1]?(c=t(i[r+2]),r+=2):c=u,s.push([u,c]),65>c||u>122||(65>c||u>90||s.push([32|Math.max(65,u),32|Math.min(c,90)]),97>c||u>122||s.push([-33&Math.max(97,u),-33&Math.min(c,122)]))}}s.sort(function(n,t){return n[0]-t[0]||t[1]-n[1]});for(var p=[],d=[],r=0;s.length>r;++r){var f=s[r];f[0]<=d[1]+1?d[1]=Math.max(d[1],f[1]):p.push(d=f)}for(var r=0;p.length>r;++r){var f=p[r];a.push(e(f[0])),f[1]>f[0]&&(f[1]+1>f[0]&&a.push("-"),a.push(e(f[1])))}return a.push("]"),a.join("")}function s(n){for(var t=n.source.match(RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g")),s=t.length,r=[],h=0,l=0;s>h;++h){var c=t[h];if("("===c)++l;else if("\\"===c.charAt(0)){var u=+c.substring(1);u&&(l>=u?r[u]=-1:t[h]=e(u))}}for(var h=1;r.length>h;++h)-1===r[h]&&(r[h]=++o);for(var h=0,l=0;s>h;++h){var c=t[h];if("("===c)++l,r[l]||(t[h]="(?:");else if("\\"===c.charAt(0)){var u=+c.substring(1);u&&l>=u&&(t[h]="\\"+r[u])}}for(var h=0;s>h;++h)"^"===t[h]&&"^"!==t[h+1]&&(t[h]="");if(n.ignoreCase&&a)for(var h=0;s>h;++h){var c=t[h],p=c.charAt(0);c.length>=2&&"["===p?t[h]=i(c):"\\"!==p&&(t[h]=c.replace(/[a-zA-Z]/g,function(n){var t=n.charCodeAt(0);return"["+String.fromCharCode(-33&t,32|t)+"]"}))}return t.join("")}for(var o=0,a=!1,r=!1,h=0,l=n.length;l>h;++h){var c=n[h];if(c.ignoreCase)r=!0;else if(/[a-z]/i.test(c.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){a=!0,r=!1;break}}for(var u={b:8,t:9,n:10,v:11,f:12,r:13},p=[],h=0,l=n.length;l>h;++h){var c=n[h];if(c.global||c.multiline)throw Error(""+c);p.push("(?:"+s(c)+")")}return RegExp(p.join("|"),r?"gi":"g")}function t(n,t){function e(n){switch(n.nodeType){case 1:if(i.test(n.className))return;for(var h=n.firstChild;h;h=h.nextSibling)e(h);var l=n.nodeName.toLowerCase();("br"===l||"li"===l)&&(s[r]="\n",a[r<<1]=o++,a[1|r++<<1]=n);break;case 3:case 4:var c=n.nodeValue;c.length&&(c=t?c.replace(/\r\n?/g,"\n"):c.replace(/[ \t\r\n]+/g," "),s[r]=c,a[r<<1]=o,o+=c.length,a[1|r++<<1]=n)}}var i=/(?:^|\s)nocode(?:\s|$)/,s=[],o=0,a=[],r=0;return e(n),{sourceCode:s.join("").replace(/\n$/,""),spans:a}}function e(n,t,e,i){if(t){var s={sourceCode:t,basePos:n};e(s),i.push.apply(i,s.decorations)}}function i(n){for(var t=void 0,e=n.firstChild;e;e=e.nextSibling){var i=e.nodeType;t=1===i?t?n:e:3===i?$.test(e.nodeValue)?n:t:t}return t===n?void 0:t}function s(t,i){var s,o={};(function(){for(var e=t.concat(i),a=[],r={},h=0,l=e.length;l>h;++h){var c=e[h],u=c[3];if(u)for(var p=u.length;--p>=0;)o[u.charAt(p)]=c;var d=c[1],f=""+d;r.hasOwnProperty(f)||(a.push(d),r[f]=null)}a.push(/[\0-\uffff]/),s=n(a)})();var a=i.length,r=function(n){for(var t=n.sourceCode,h=n.basePos,c=[h,I],u=0,p=t.match(s)||[],d={},f=0,m=p.length;m>f;++f){var g,b=p[f],v=d[b],k=void 0;if("string"==typeof v)g=!1;else{var y=o[b.charAt(0)];if(y)k=b.match(y[1]),v=y[0];else{for(var w=0;a>w;++w)if(y=i[w],k=b.match(y[1])){v=y[0];break}k||(v=I)}g=v.length>=5&&"lang-"===v.substring(0,5),!g||k&&"string"==typeof k[1]||(g=!1,v=F),g||(d[b]=v)}var x=u;if(u+=b.length,g){var L=k[1],C=b.indexOf(L),D=C+L.length;k[2]&&(D=b.length-k[2].length,C=D-L.length);var T=v.substring(5);e(h+x,b.substring(0,C),r,c),e(h+x+C,L,l(T,L),c),e(h+x+D,b.substring(D),r,c)}else c.push(h+x,v)}n.decorations=c};return r}function o(n){var t=[],e=[];n.tripleQuotedStrings?t.push([N,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""]):n.multiLineStrings?t.push([N,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"]):t.push([N,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"]),n.verbatimStrings&&e.push([N,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null]);var i=n.hashComments;if(i&&(n.cStyleComments?(i>1?t.push([S,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"]):t.push([S,/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"]),e.push([N,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,null])):t.push([S,/^#[^\r\n]*/,null,"#"])),n.cStyleComments&&(e.push([S,/^\/\/[^\r\n]*/,null]),e.push([S,/^\/\*[\s\S]*?(?:\*\/|$)/,null])),n.regexLiterals){var o="/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/";e.push(["lang-regex",RegExp("^"+j+"("+o+")")])}var a=n.types;a&&e.push([P,a]);var r=(""+n.keywords).replace(/^ | $/g,"");r.length&&e.push([A,RegExp("^(?:"+r.replace(/[\s,]+/g,"|")+")\\b"),null]),t.push([I,/^\s+/,null," \r\n	 "]);var h=/^.[^\s\w\.$@\'\"\`\/\\]*/;return e.push([O,/^@[a-z_$][a-z_$@0-9]*/i,null],[P,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[I,/^[a-z_$][a-z_$@0-9]*/i,null],[O,RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[I,/^\\[\s\S]?/,null],[R,h,null]),s(t,e)}function a(n,t,e){function i(n){switch(n.nodeType){case 1:if(o.test(n.className))break;if("br"===n.nodeName)s(n),n.parentNode&&n.parentNode.removeChild(n);else for(var t=n.firstChild;t;t=t.nextSibling)i(t);break;case 3:case 4:if(e){var h=n.nodeValue,l=h.match(a);if(l){var c=h.substring(0,l.index);n.nodeValue=c;var u=h.substring(l.index+l[0].length);if(u){var p=n.parentNode;p.insertBefore(r.createTextNode(u),n.nextSibling)}s(n),c||n.parentNode.removeChild(n)}}}}function s(n){function t(n,e){var i=e?n.cloneNode(!1):n,s=n.parentNode;if(s){var o=t(s,1),a=n.nextSibling;o.appendChild(i);for(var r=a;r;r=a)a=r.nextSibling,o.appendChild(r)}return i}for(;!n.nextSibling;)if(n=n.parentNode,!n)return;for(var e,i=t(n.nextSibling,0);(e=i.parentNode)&&1===e.nodeType;)i=e;l.push(i)}for(var o=/(?:^|\s)nocode(?:\s|$)/,a=/\r\n?|\n/,r=n.ownerDocument,h=r.createElement("li");n.firstChild;)h.appendChild(n.firstChild);for(var l=[h],c=0;l.length>c;++c)i(l[c]);t===(0|t)&&l[0].setAttribute("value",t);var u=r.createElement("ol");u.className="linenums";for(var p=Math.max(0,0|t-1)||0,c=0,d=l.length;d>c;++c)h=l[c],h.className="L"+(c+p)%10,h.firstChild||h.appendChild(r.createTextNode(" ")),u.appendChild(h);n.appendChild(u)}function r(n){var t=/\bMSIE\s(\d+)/.exec(navigator.userAgent);t=t&&8>=+t[1];var e=/\n/g,i=n.sourceCode,s=i.length,o=0,a=n.spans,r=a.length,h=0,l=n.decorations,c=l.length,u=0;l[c]=s;var p,d;for(d=p=0;c>d;)l[d]!==l[d+2]?(l[p++]=l[d++],l[p++]=l[d++]):d+=2;for(c=p,d=p=0;c>d;){for(var f=l[d],m=l[d+1],g=d+2;c>=g+2&&l[g+1]===m;)g+=2;l[p++]=f,l[p++]=m,d=g}c=l.length=p;var b,v=n.sourceNode;v&&(b=v.style.display,v.style.display="none");try{for(;r>h;){a[h];var k,y=a[h+2]||s,w=l[u+2]||s,g=Math.min(y,w),x=a[h+1];if(1!==x.nodeType&&(k=i.substring(o,g))){t&&(k=k.replace(e,"\r")),x.nodeValue=k;var L=x.ownerDocument,C=L.createElement("span");C.className=l[u+1];var D=x.parentNode;D.replaceChild(C,x),C.appendChild(x),y>o&&(a[h+1]=x=L.createTextNode(i.substring(g,y)),D.insertBefore(x,C.nextSibling))}o=g,o>=y&&(h+=2),o>=w&&(u+=2)}}finally{v&&(v.style.display=b)}}function h(n,t){for(var e=t.length;--e>=0;){var i=t[e];G.hasOwnProperty(i)?d.console&&console.warn("cannot override language handler %s",i):G[i]=n}}function l(n,t){return n&&G.hasOwnProperty(n)||(n=/^\s*</.test(t)?"default-markup":"default-code"),G[n]}function c(n){var e=n.langExtension;try{var i=t(n.sourceNode,n.pre),s=i.sourceCode;n.sourceCode=s,n.spans=i.spans,n.basePos=0,l(e,s)(n),r(n)}catch(o){d.console&&console.log(o&&o.stack?o.stack:o)}}function u(n,t,e){var i=document.createElement("pre");i.innerHTML=n,e&&a(i,e,!0);var s={langExtension:t,numberLines:e,sourceNode:i,pre:1};return c(s),i.innerHTML}function p(n){function t(n){return document.getElementsByTagName(n)}function e(){for(var t=d.PR_SHOULD_USE_CONTINUATION?u.now()+250:1/0;o.length>f&&t>u.now();f++){var s=o[f],r=s.className;if(g.test(r)&&!b.test(r)){for(var h=!1,l=s.parentNode;l;l=l.parentNode){var w=l.tagName;if(y.test(w)&&l.className&&g.test(l.className)){h=!0;break}}if(!h){s.className+=" prettyprinted";var x,L=r.match(m);!L&&(x=i(s))&&k.test(x.tagName)&&(L=x.className.match(m)),L&&(L=L[1]);var C;if(v.test(s.tagName))C=1;else{var D=s.currentStyle,T=D?D.whiteSpace:document.defaultView&&document.defaultView.getComputedStyle?document.defaultView.getComputedStyle(s,null).getPropertyValue("white-space"):0;C=T&&"pre"===T.substring(0,3)}var E=s.className.match(/\blinenums\b(?::(\d+))?/);E=E?E[1]&&E[1].length?+E[1]:!0:!1,E&&a(s,E,C),p={langExtension:L,sourceNode:s,numberLines:E,pre:C},c(p)}}}o.length>f?setTimeout(e,250):n&&n()}for(var s=[t("pre"),t("code"),t("xmp")],o=[],r=0;s.length>r;++r)for(var h=0,l=s[r].length;l>h;++h)o.push(s[r][h]);s=null;var u=Date;u.now||(u={now:function(){return+new Date}});var p,f=0,m=/\blang(?:uage)?-([\w.]+)(?!\S)/,g=/\bprettyprint\b/,b=/\bprettyprinted\b/,v=/pre|xmp/i,k=/^code$/i,y=/^(?:pre|code|xmp)$/i;e()}var d=window,f=["break,continue,do,else,for,if,return,while"],m=[f,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],g=[m,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],b=[g,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],v=[g,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"],k=[v,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],y="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",w=[g,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],x="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",L=[f,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],C=[f,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],D=[f,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],T=[b,k,w,x+L,C,D],E=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/,N="str",A="kwd",S="com",P="typ",O="lit",R="pun",I="pln",M="tag",B="dec",F="src",W="atn",_="atv",V="nocode",j="(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*",$=/\S/,z=o({keywords:T,hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),G={};h(z,["default-code"]),h(s([],[[I,/^[^<?]+/],[B,/^<!\w[^>]*(?:>|$)/],[S,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[R,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]),h(s([[I,/^[\s]+/,null," 	\r\n"],[_,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[M,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[W,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[R,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]),h(s([],[[_,/^[\s\S]+/]]),["uq.val"]),h(o({keywords:b,hashComments:!0,cStyleComments:!0,types:E}),["c","cc","cpp","cxx","cyc","m"]),h(o({keywords:"null,true,false"}),["json"]),h(o({keywords:k,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:E}),["cs"]),h(o({keywords:v,cStyleComments:!0}),["java"]),h(o({keywords:D,hashComments:!0,multiLineStrings:!0}),["bsh","csh","sh"]),h(o({keywords:L,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py"]),h(o({keywords:x,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["perl","pl","pm"]),h(o({keywords:C,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb"]),h(o({keywords:w,cStyleComments:!0,regexLiterals:!0}),["js"]),h(o({keywords:y,hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]),h(s([],[[N,/^[\s\S]+/]]),["regex"]);var U=d.PR={createSimpleLexer:s,registerLangHandler:h,sourceDecorator:o,PR_ATTRIB_NAME:W,PR_ATTRIB_VALUE:_,PR_COMMENT:S,PR_DECLARATION:B,PR_KEYWORD:A,PR_LITERAL:O,PR_NOCODE:V,PR_PLAIN:I,PR_PUNCTUATION:R,PR_SOURCE:F,PR_STRING:N,PR_TAG:M,PR_TYPE:P,prettyPrintOne:d.prettyPrintOne=u,prettyPrint:d.prettyPrint=p};"function"==typeof define&&define.amd&&define("prettify",[],function(){return U})}(),function(){function n(n){this.tokens=[],this.tokens.links={},this.options=n||r.defaults,this.rules=h.normal,this.options.gfm&&(this.rules=this.options.tables?h.tables:h.gfm)}function t(n,t){if(this.options=t||r.defaults,this.links=n,this.rules=l.normal,!this.links)throw Error("Tokens array requires a `links` property.");this.options.gfm?this.rules=this.options.breaks?l.breaks:l.gfm:this.options.pedantic&&(this.rules=l.pedantic)}function e(n){this.tokens=[],this.token=null,this.options=n||r.defaults}function i(n,t){return n.replace(t?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function s(n,t){return n=n.source,t=t||"",function e(i,s){return i?(s=s.source||s,s=s.replace(/(^|[^\[])\^/g,"$1"),n=n.replace(i,s),e):RegExp(n,t)}}function o(){}function a(n){for(var t,e,i=1;arguments.length>i;i++){t=arguments[i];for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])}return n}function r(t,s){try{return s&&(s=a({},r.defaults,s)),e.parse(n.lex(t,s),s)}catch(o){if(o.message+="\nPlease report this to https://github.com/chjj/marked.",(s||r.defaults).silent)return"<p>An error occured:</p><pre>"+i(o.message+"",!0)+"</pre>";throw o}}var h={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:o,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:o,lheading:/^([^\n]+)\n *(=|-){3,} *\n*/,blockquote:/^( *>[^\n]+(\n[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment|closed|closing) *(?:\n{2,}|\s*$)/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:o,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};h.bullet=/(?:[*+-]|\d+\.)/,h.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,h.item=s(h.item,"gm")(/bull/g,h.bullet)(),h.list=s(h.list)(/bull/g,h.bullet)("hr",/\n+(?=(?: *[-*_]){3,} *(?:\n+|$))/)(),h._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|@)\\b",h.html=s(h.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,h._tag)(),h.paragraph=s(h.paragraph)("hr",h.hr)("heading",h.heading)("lheading",h.lheading)("blockquote",h.blockquote)("tag","<"+h._tag)("def",h.def)(),h.normal=a({},h),h.gfm=a({},h.normal,{fences:/^ *(`{3,}|~{3,}) *(\w+)? *\n([\s\S]+?)\s*\1 *(?:\n+|$)/,paragraph:/^/}),h.gfm.paragraph=s(h.paragraph)("(?!","(?!"+h.gfm.fences.source.replace("\\1","\\2")+"|")(),h.tables=a({},h.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),n.rules=h,n.lex=function(t,e){var i=new n(e);return i.lex(t)},n.prototype.lex=function(n){return n=n.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(n,!0)},n.prototype.token=function(n,t){for(var e,i,s,o,a,r,l,c,u,n=n.replace(/^ +$/gm,"");n;)if((s=this.rules.newline.exec(n))&&(n=n.substring(s[0].length),s[0].length>1&&this.tokens.push({type:"space"})),s=this.rules.code.exec(n))n=n.substring(s[0].length),s=s[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?s:s.replace(/\n+$/,"")});else if(s=this.rules.fences.exec(n))n=n.substring(s[0].length),this.tokens.push({type:"code",lang:s[2],text:s[3]});else if(s=this.rules.heading.exec(n))n=n.substring(s[0].length),this.tokens.push({type:"heading",depth:s[1].length,text:s[2]});else if(t&&(s=this.rules.nptable.exec(n))){for(n=n.substring(s[0].length),r={type:"table",header:s[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3].replace(/\n$/,"").split("\n")},c=0;r.align.length>c;c++)r.align[c]=/^ *-+: *$/.test(r.align[c])?"right":/^ *:-+: *$/.test(r.align[c])?"center":/^ *:-+ *$/.test(r.align[c])?"left":null;for(c=0;r.cells.length>c;c++)r.cells[c]=r.cells[c].split(/ *\| */);this.tokens.push(r)}else if(s=this.rules.lheading.exec(n))n=n.substring(s[0].length),this.tokens.push({type:"heading",depth:"="===s[2]?1:2,text:s[1]});else if(s=this.rules.hr.exec(n))n=n.substring(s[0].length),this.tokens.push({type:"hr"});else if(s=this.rules.blockquote.exec(n))n=n.substring(s[0].length),this.tokens.push({type:"blockquote_start"}),s=s[0].replace(/^ *> ?/gm,""),this.token(s,t),this.tokens.push({type:"blockquote_end"});else if(s=this.rules.list.exec(n)){for(n=n.substring(s[0].length),this.tokens.push({type:"list_start",ordered:isFinite(s[2])}),s=s[0].match(this.rules.item),this.options.smartLists&&(o=h.bullet.exec(s[0])[0]),e=!1,u=s.length,c=0;u>c;c++)r=s[c],l=r.length,r=r.replace(/^ *([*+-]|\d+\.) +/,""),~r.indexOf("\n ")&&(l-=r.length,r=this.options.pedantic?r.replace(/^ {1,4}/gm,""):r.replace(RegExp("^ {1,"+l+"}","gm"),"")),this.options.smartLists&&c!==u-1&&(a=h.bullet.exec(s[c+1])[0],o===a||"."===o[1]&&"."===a[1]||(n=s.slice(c+1).join("\n")+n,c=u-1)),i=e||/\n\n(?!\s*$)/.test(r),c!==u-1&&(e="\n"===r[r.length-1],i||(i=e)),this.tokens.push({type:i?"loose_item_start":"list_item_start"}),this.token(r,!1),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(s=this.rules.html.exec(n))n=n.substring(s[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:"pre"===s[1],text:s[0]});else if(t&&(s=this.rules.def.exec(n)))n=n.substring(s[0].length),this.tokens.links[s[1].toLowerCase()]={href:s[2],title:s[3]};else if(t&&(s=this.rules.table.exec(n))){for(n=n.substring(s[0].length),r={type:"table",header:s[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3].replace(/(?: *\| *)?\n$/,"").split("\n")},c=0;r.align.length>c;c++)r.align[c]=/^ *-+: *$/.test(r.align[c])?"right":/^ *:-+: *$/.test(r.align[c])?"center":/^ *:-+ *$/.test(r.align[c])?"left":null;for(c=0;r.cells.length>c;c++)r.cells[c]=r.cells[c].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(r)}else if(t&&(s=this.rules.paragraph.exec(n)))n=n.substring(s[0].length),this.tokens.push({type:"paragraph",text:"\n"===s[1][s[1].length-1]?s[1].slice(0,-1):s[1]});else if(s=this.rules.text.exec(n))n=n.substring(s[0].length),this.tokens.push({type:"text",text:s[0]});else if(n)throw Error("Infinite loop on byte: "+n.charCodeAt(0));return this.tokens};var l={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:o,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:o,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};l._inside=/(?:\[[^\]]*\]|[^\]]|\](?=[^\[]*\]))*/,l._href=/\s*<?([^\s]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,l.link=s(l.link)("inside",l._inside)("href",l._href)(),l.reflink=s(l.reflink)("inside",l._inside)(),l.normal=a({},l),l.pedantic=a({},l.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),l.gfm=a({},l.normal,{escape:s(l.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:s(l.text)("]|","~]|")("|","|https?://|")()}),l.breaks=a({},l.gfm,{br:s(l.br)("{2,}","*")(),text:s(l.gfm.text)("{2,}","*")()}),t.rules=l,t.output=function(n,e,i){var s=new t(e,i);return s.output(n)},t.prototype.output=function(n){for(var t,e,s,o,a="";n;)if(o=this.rules.escape.exec(n))n=n.substring(o[0].length),a+=o[1];else if(o=this.rules.autolink.exec(n))n=n.substring(o[0].length),"@"===o[2]?(e=":"===o[1][6]?this.mangle(o[1].substring(7)):this.mangle(o[1]),s=this.mangle("mailto:")+e):(e=i(o[1]),s=e),a+='<a href="'+s+'">'+e+"</a>";else if(o=this.rules.url.exec(n))n=n.substring(o[0].length),e=i(o[1]),s=e,a+='<a href="'+s+'">'+e+"</a>";else if(o=this.rules.tag.exec(n))n=n.substring(o[0].length),a+=this.options.sanitize?i(o[0]):o[0];else if(o=this.rules.link.exec(n))n=n.substring(o[0].length),a+=this.outputLink(o,{href:o[2],title:o[3]});else if((o=this.rules.reflink.exec(n))||(o=this.rules.nolink.exec(n))){if(n=n.substring(o[0].length),t=(o[2]||o[1]).replace(/\s+/g," "),t=this.links[t.toLowerCase()],!t||!t.href){a+=o[0][0],n=o[0].substring(1)+n;continue}a+=this.outputLink(o,t)}else if(o=this.rules.strong.exec(n))n=n.substring(o[0].length),a+="<strong>"+this.output(o[2]||o[1])+"</strong>";else if(o=this.rules.em.exec(n))n=n.substring(o[0].length),a+="<em>"+this.output(o[2]||o[1])+"</em>";else if(o=this.rules.code.exec(n))n=n.substring(o[0].length),a+="<code>"+i(o[2],!0)+"</code>";else if(o=this.rules.br.exec(n))n=n.substring(o[0].length),a+="<br>";else if(o=this.rules.del.exec(n))n=n.substring(o[0].length),a+="<del>"+this.output(o[1])+"</del>";else if(o=this.rules.text.exec(n))n=n.substring(o[0].length),a+=i(o[0]);else if(n)throw Error("Infinite loop on byte: "+n.charCodeAt(0));return a},t.prototype.outputLink=function(n,t){return"!"!==n[0][0]?'<a href="'+i(t.href)+'"'+(t.title?' title="'+i(t.title)+'"':"")+">"+this.output(n[1])+"</a>":'<img src="'+i(t.href)+'" alt="'+i(n[1])+'"'+(t.title?' title="'+i(t.title)+'"':"")+">"},t.prototype.mangle=function(n){for(var t,e="",i=n.length,s=0;i>s;s++)t=n.charCodeAt(s),Math.random()>.5&&(t="x"+t.toString(16)),e+="&#"+t+";";return e},e.parse=function(n,t){var i=new e(t);return i.parse(n)},e.prototype.parse=function(n){this.inline=new t(n.links,this.options),this.tokens=n.reverse();for(var e="";this.next();)e+=this.tok();return e},e.prototype.next=function(){return this.token=this.tokens.pop()},e.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},e.prototype.parseText=function(){for(var n=this.token.text;"text"===this.peek().type;)n+="\n"+this.next().text;return this.inline.output(n)},e.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return"<hr>\n";case"heading":return"<h"+this.token.depth+">"+this.inline.output(this.token.text)+"</h"+this.token.depth+">\n";
case"code":if(this.options.highlight){var n=this.options.highlight(this.token.text,this.token.lang);null!=n&&n!==this.token.text&&(this.token.escaped=!0,this.token.text=n)}return this.token.escaped||(this.token.text=i(this.token.text,!0)),"<pre><code"+(this.token.lang?' class="'+this.options.langPrefix+this.token.lang+'"':"")+">"+this.token.text+"</code></pre>\n";case"table":var t,e,s,o,a,r="";for(r+="<thead>\n<tr>\n",e=0;this.token.header.length>e;e++)t=this.inline.output(this.token.header[e]),r+=this.token.align[e]?'<th align="'+this.token.align[e]+'">'+t+"</th>\n":"<th>"+t+"</th>\n";for(r+="</tr>\n</thead>\n",r+="<tbody>\n",e=0;this.token.cells.length>e;e++){for(s=this.token.cells[e],r+="<tr>\n",a=0;s.length>a;a++)o=this.inline.output(s[a]),r+=this.token.align[a]?'<td align="'+this.token.align[a]+'">'+o+"</td>\n":"<td>"+o+"</td>\n";r+="</tr>\n"}return r+="</tbody>\n","<table>\n"+r+"</table>\n";case"blockquote_start":for(var r="";"blockquote_end"!==this.next().type;)r+=this.tok();return"<blockquote>\n"+r+"</blockquote>\n";case"list_start":for(var h=this.token.ordered?"ol":"ul",r="";"list_end"!==this.next().type;)r+=this.tok();return"<"+h+">\n"+r+"</"+h+">\n";case"list_item_start":for(var r="";"list_item_end"!==this.next().type;)r+="text"===this.token.type?this.parseText():this.tok();return"<li>"+r+"</li>\n";case"loose_item_start":for(var r="";"list_item_end"!==this.next().type;)r+=this.tok();return"<li>"+r+"</li>\n";case"html":return this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);case"paragraph":return"<p>"+this.inline.output(this.token.text)+"</p>\n";case"text":return"<p>"+this.parseText()+"</p>\n"}},o.exec=o,r.options=r.setOptions=function(n){return a(r.defaults,n),r},r.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-"},r.Parser=e,r.parser=e.parse,r.Lexer=n,r.lexer=n.lex,r.InlineLexer=t,r.inlineLexer=t.output,r.parse=r,"object"==typeof exports?module.exports=r:"function"==typeof define&&define.amd?define("marked",[],function(){return r}):this.marked=r}.call(function(){return this||("undefined"!=typeof window?window:global)}()),define("common",["lodash","data/toc"],function(n,t){"use strict";function e(e,i){var s,o=t[e];return i?(s=n.find(o.sections,{sec:i}),i+" "+s.title):(o.ch?"Chapter "+o.ch+" ":"")+o.title}return{getTitle:e}}),define("text",["module"],function(n){"use strict";var t,e,i,s,o=["Msxml2.XMLHTTP","Microsoft.XMLHTTP","Msxml2.XMLHTTP.4.0"],a=/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,r=/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,h="undefined"!=typeof location&&location.href,l=h&&location.protocol&&location.protocol.replace(/\:/,""),c=h&&location.hostname,u=h&&(location.port||void 0),p=[],d=n.config&&n.config()||{};return t={version:"2.0.6",strip:function(n){if(n){n=n.replace(a,"");var t=n.match(r);t&&(n=t[1])}else n="";return n},jsEscape:function(n){return n.replace(/(['\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r").replace(/[\u2028]/g,"\\u2028").replace(/[\u2029]/g,"\\u2029")},createXhr:d.createXhr||function(){var n,t,e;if("undefined"!=typeof XMLHttpRequest)return new XMLHttpRequest;if("undefined"!=typeof ActiveXObject)for(t=0;3>t;t+=1){e=o[t];try{n=new ActiveXObject(e)}catch(i){}if(n){o=[e];break}}return n},parseName:function(n){var t,e,i,s=!1,o=n.indexOf("."),a=0===n.indexOf("./")||0===n.indexOf("../");return-1!==o&&(!a||o>1)?(t=n.substring(0,o),e=n.substring(o+1,n.length)):t=n,i=e||t,o=i.indexOf("!"),-1!==o&&(s="strip"===i.substring(o+1),i=i.substring(0,o),e?e=i:t=i),{moduleName:t,ext:e,strip:s}},xdRegExp:/^((\w+)\:)?\/\/([^\/\\]+)/,useXhr:function(n,e,i,s){var o,a,r,h=t.xdRegExp.exec(n);return h?(o=h[2],a=h[3],a=a.split(":"),r=a[1],a=a[0],!(o&&o!==e||a&&a.toLowerCase()!==i.toLowerCase()||(r||a)&&r!==s)):!0},finishLoad:function(n,e,i,s){i=e?t.strip(i):i,d.isBuild&&(p[n]=i),s(i)},load:function(n,e,i,s){if(s.isBuild&&!s.inlineText)return i(),void 0;d.isBuild=s.isBuild;var o=t.parseName(n),a=o.moduleName+(o.ext?"."+o.ext:""),r=e.toUrl(a),p=d.useXhr||t.useXhr;!h||p(r,l,c,u)?t.get(r,function(e){t.finishLoad(n,o.strip,e,i)},function(n){i.error&&i.error(n)}):e([a],function(n){t.finishLoad(o.moduleName+"."+o.ext,o.strip,n,i)})},write:function(n,e,i){if(p.hasOwnProperty(e)){var s=t.jsEscape(p[e]);i.asModule(n+"!"+e,"define(function () { return '"+s+"';});\n")}},writeFile:function(n,e,i,s,o){var a=t.parseName(e),r=a.ext?"."+a.ext:"",h=a.moduleName+r,l=i.toUrl(a.moduleName+r)+".js";t.load(h,i,function(){var e=function(n){return s(l,n)};e.asModule=function(n,t){return s.asModule(n,l,t)},t.write(n,h,e,o)},o)}},"node"===d.env||!d.env&&"undefined"!=typeof process&&process.versions&&process.versions.node?(e=require.nodeRequire("fs"),t.get=function(n,t){var i=e.readFileSync(n,"utf8");0===i.indexOf("﻿")&&(i=i.substring(1)),t(i)}):"xhr"===d.env||!d.env&&t.createXhr()?t.get=function(n,e,i,s){var o,a=t.createXhr();if(a.open("GET",n,!0),s)for(o in s)s.hasOwnProperty(o)&&a.setRequestHeader(o.toLowerCase(),s[o]);d.onXhr&&d.onXhr(a,n),a.onreadystatechange=function(){var t,s;4===a.readyState&&(t=a.status,t>399&&600>t?(s=Error(n+" HTTP status: "+t),s.xhr=a,i(s)):e(a.responseText),d.onXhrComplete&&d.onXhrComplete(a,n))},a.send(null)}:"rhino"===d.env||!d.env&&"undefined"!=typeof Packages&&"undefined"!=typeof java?t.get=function(n,t){var e,i,s="utf-8",o=new java.io.File(n),a=java.lang.System.getProperty("line.separator"),r=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(o),s)),h="";try{for(e=new java.lang.StringBuffer,i=r.readLine(),i&&i.length()&&65279===i.charAt(0)&&(i=i.substring(1)),e.append(i);null!==(i=r.readLine());)e.append(a),e.append(i);h=""+e+""}finally{r.close()}t(h)}:("xpconnect"===d.env||!d.env&&"undefined"!=typeof Components&&Components.classes&&Components.interfaces)&&(i=Components.classes,s=Components.interfaces,Components.utils["import"]("resource://gre/modules/FileUtils.jsm"),t.get=function(n,t){var e,o,a={},r=new FileUtils.File(n);try{e=i["@mozilla.org/network/file-input-stream;1"].createInstance(s.nsIFileInputStream),e.init(r,1,0,!1),o=i["@mozilla.org/intl/converter-input-stream;1"].createInstance(s.nsIConverterInputStream),o.init(e,"utf-8",e.available(),s.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER),o.readString(e.available(),a),o.close(),e.close(),t(a.value)}catch(h){throw Error((r&&r.path||"")+": "+h)}}),t}),define("text!src",[],function(){return"/*global define*/\n\n/**\n * Chapter 1 Introduction\n * ======================\n * 1.1 Introduction\n * ----------------\n * This series of articles is a tutorial on the theory and\n * practice of developing language parsers and compilers.\n * Before we are finished, we will have covered every aspect of\n * compiler construction, designed a new programming language,\n * and built a working compiler.\n *\n * 1.2 The cradle\n * --------------\n * The `cradle` is a boiler plate that consists of some *I/O routines*,\n * an *error-handling routine* and a *skeleton, null main program*.\n *\n * **A short list of the cradle**\n * ```\n * const:    TAB, CR, LF\n * variable: look\n * function: getChar, error, abort, expected,\n *           match, isAlpha, isDigit, getName, getNum\n *           emit, emitLn, init, main\n * ```\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var cradle = object.extend({\n\n        // Constant declarations.\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations.\n        look: '',   // lookahead character\n\n        // Read new character from input.\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error.\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt.\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected.\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n        },\n\n        // Recognize an alpha character.\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit.\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = this.look.toUpperCase();\n            this.getChar();\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = this.look;\n            this.getChar();\n            return num;\n        },\n\n        // Output a string with tab.\n        emit: function (str) {\n            io.write(this.TAB, str);\n        },\n\n        // Output a string with tab and newline.\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Initialize.\n        init: function () {\n            this.getChar();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n        }\n    });\n\n    return cradle;\n});\n\r\n/*global define*/\n\n/**\n * Chapter 10 Introducing \"Tiny\"\n * ==============================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 10.1 Introduction\n     * ------------------\n     * We’re going to do is call TINY, a subset of KISS.\n     * We’ll be doing a top-down development of BOTH the **language**\n     * and its **compiler**.\n     * The BNF description will grow along with the compiler.\n     *\n     * Why bother starting over from scratch?\n     *\n     * We had a working subset of KISS in chapter 7 lexical scanning.\n     * Why not just extend it as needed? The answer is threefold.\n     *\n     * - changes like encapsulating the code generation procedures,\n     *   so that we can convert to a different target machine more easily.\n     * - development from the top down as outlined in the last installment.\n     * - We both need the practice to get it better.\n     */\n\n    /**\n     * 10.2 Getting started\n     * ---------------------\n     * Top-level definition for TINY (similar to Pascal):\n     * ```\n     * <program> ::= PROGRAM <top-level decl> <main> '.'\n     * ```\n     *\n     * ### 10.2.1 First step ###\n     * We start with the cradle again.\n     * ```\n     * <program> ::= PROGRAM .\n     * ```\n     * At this point TINY will only accept code: `p.`, a null program\n     * ```\n     * PROGRAM.\n     * ```\n     * Note that the compiler DOES generate correct code for this program.\n     */\n    var firstStep = cradle.extend({\n\n        // Parse and translate a program.\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.prolog();\n            this.match('.');\n            this.epilog();\n        },\n\n        // Write header info.\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n        },\n\n        // Write the prolog.\n        prolog: function () {\n            this.postLabel('MAIN');\n        },\n\n        // Post a label to output (ch 5.3).\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        // Write the epilog.\n        epilog: function () {\n            this.emitLn('DC WARMST');\n            this.emitLn('END MAIN');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.prog();\n            if (this.look !== this.LF) {\n                this.abort('Unexpected data after \".\"');\n            }\n        }\n    });\n\n    /**\n     * ### 10.2.2 The main program ###\n     * The next step is to process the code for the main program.\n     * The Pascal BEGIN-block is chosen\n     * ```\n     * <program> ::= PROGRAM BEGIN END '.'\n     * ```\n     * and the TINY now only accept code: `pbe.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * You might try some deliberate errors, like omitting the `b` or the\n     * `e`, and see what happens.\n     * As always, the compiler should flag all illegal inputs.\n     */\n    var theMainProgram = firstStep.extend({\n\n        // Parse and translate a program.\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.doMain();\n            this.match('.');\n        },\n\n        // Main program.\n        doMain: function () {\n            this.match('b');\n            this.prolog();\n            this.match('e');\n            this.epilog();\n        }\n    });\n\n    /**\n     * 10.3 Declarations\n     * ------------------\n     * The next step is to decide what we mean by a declaration.\n     * At the top level, only global declarations are allowed, as in C.\n     *\n     * For now, there can only be variable declarations, identified by\n     * the keyword **VAR** (abbreviated `v`):\n     * ```\n     * <program>          ::= PROGRAM <top-level decls> BEGIN END '.'\n     * <top-level decls>  ::= (<data declaration>)*\n     * <data declaration> ::= VAR <var-list>\n     * ```\n     *\n     * Code example: `pbe.` or `pvxvybe.`\n     * which, the later, stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * VAR Y                    vy\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * Try a few cases and see what happens.\n     */\n    var declarations = theMainProgram.extend({\n\n        // Process a data declaration.\n        // A stub, it generates no code, and it doesn’t process a list.\n        decl: function () {\n            this.match('v');\n            this.getChar();\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== 'b') {\n                switch (this.look) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized Keyword \"' + this.look + '\"');\n                }\n            }\n        },\n\n        // Parse and translate a program.\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.topDecls();\n            this.doMain();\n            this.match('.');\n        }\n    });\n\n    /**\n     * 10.4 Declarations and symbols\n     * ------------------------------\n     * A real compiler would issue assembler directives\n     * to allocate storage for the variables.\n     * It’s about time we actually produced some code.\n     *\n     * The **BNF** is the same as the previous section.\n     * ```\n     * <data declaration> ::= VAR <var-list>\n     * <var-list> ::= <ident>\n     * ```\n     * Try again the code example: `pvxvyvzbe.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * VAR Y                    vy\n     * VAR Z                    yz\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * See how the storage is allocated? Simple, huh?\n     */\n    var declarationsAndSymbols = declarations.extend({\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            io.writeLn(name, ':', this.TAB, 'DC 0');\n        }\n    });\n\n    /**\n     * ### 10.4.2 Variable list ###\n     * We haven’t really parsed the correct syntax for a data declaration,\n     * since it involves a variable list.\n     * Our version only permits a single variable. That’s easy to fix\n     * ```\n     * <var-list> ::= <indent> (, <ident>)*\n     * ```\n     * Code example: `pvx,y,zbe.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X, Y, Z              vx,y,z\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * Try a number of VAR declarations, try a list of several\n     * variables, and try combinations of the two. Does it work?\n     */\n    var variableList = declarationsAndSymbols.extend({\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n            while (this.look === ',') {         // <--\n                this.getChar();\n                this.alloc(this.getName());\n            }\n        }\n    });\n\n    /**\n     * 10.5 Initializers\n     * ------------------\n     * The feature allows initializing data items in the declaration.\n     * ```\n     * <var-list> ::= <var> (, <var>)*\n     * <var>      ::= <ident> [= <integer>]\n     * ```\n     *\n     * ### 10.5.1 ###\n     * Code example: `pva=1vx=5,y=3,zbe.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR A = 1                va=1\n     * VAR X = 5,               vx=5,\n     *     Y = 3,               y=3,\n     *     Z                    z\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * Try this version of TINY and verify that you can.\n     * By golly, this thing is starting to look real!\n     */\n    var initializers = variableList.extend({\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        }\n    });\n\n    /**\n     * ### 10.5.2 Multi-digit integer ###\n     * Use multi-digit version of `getNum` and\n     * now we should be able to initialize variables\n     * with negative and/or multi-digit values.\n     *\n     * Try some code for example: `pvx=15,y,z=-23be.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X = 15, Y, Z = -23   vx=15,y,z=-23\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * We should be able to initialize variables with negative and/or\n     * multi-digit values.\n     *\n     * There’s one problem: the compiler doesn’t record a variable\n     * when we declare it. So it is perfectly content to allocate storage\n     * for several variables with the same name.\n     *\n     * Verify this with an input like `pvavavabe.`\n     * Here we’ve declared the variable A three times.\n     * As you can see, the compiler accept that, and generate three\n     * identical labels. Not good.\n     */\n    var multiDigitInteger = initializers.extend({\n\n        // Get a Number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = 0;\n            while (this.isDigit(this.look)) {\n                value = +this.look + 10 * value;\n                this.getChar();\n            }\n            return value;\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                if (this.look === '-') {\n                    io.write('-');\n                    this.match('-');\n                }\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        }\n    });\n\n    /**\n     * 10.6 The symbol table\n     * ----------------------\n     * The compiler will now catch duplicate declarations. Later, we can\n     * also use InTable when generating references to the variables.\n     *\n     * Verify again this with the input `pvavavabe.`\n     * The compiler will now catch duplicate declarations.\n     * Later, we can also use `inTable` when generating references to\n     * the variables.\n     */\n    var theSymbolTable = multiDigitInteger.extend({\n\n        symbolTable: null,\n\n        // Look for symbol in table.\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            if (this.inTable(name)) {                          // <--\n                this.abort('Duplicate Variable Name ' + name); // <\n            }\n\n            this.symbolTable[name] = 'v';                      // <--\n\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                if (this.look === '-') {\n                    io.write('-');\n                    this.match('-');\n                }\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};                              // <--\n            this.getChar();\n        }\n    });\n\n    /**\n     * 10.7 Executable statements\n     * ---------------------------\n     * At this point, we can generate a null program that has some data\n     * variables declared and possibly initialized.\n     * But so far we haven’t arranged to generate the first line of\n     * executable code.\n     *\n     * The BNF definition given earlier for the main program included\n     * a statement block, which we have so far ignored\n     * ```\n     * <main> ::= BEGIN <block> END\n     * ```\n     * For now, we can just consider a block to be\n     * a series of assignment statements\n     * ```\n     * <block> ::= (<assignment>)*\n     * ```\n     * ### 10.7.1 ###\n     * Null assignment\n     *\n     * Code example `pvxbxye.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * BEGIN                    b\n     *     X                    x\n     *     Y                    y\n     * END                      e\n     * .                        .\n     * ```\n     * This version still won’t generate any code for the \"assignment\n     * statements\"...\n     * The next step, of course, is to flesh out the code for an\n     * assignment statement.\n     */\n    var executableStatements = theSymbolTable.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            this.getChar();\n        },\n\n        // Parse and translate a block of statement.\n        block: function () {\n            while (this.look !== 'e') {\n                this.assignment();\n            }\n        },\n\n        // Main program.\n        doMain: function () {\n            this.match('b');\n            this.prolog();\n            this.block();           // <--\n            this.match('e');\n            this.epilog();\n        }\n    });\n\n    /**\n     * ### 10.7.2 Code generation routines ###\n     * Can the CPU-dependent code be collected into one spot where it\n     * would be easier to retarget to another CPU?\n     *\n     * The answer, of course, is yes.\n     * To accomplish this, insert the following *code generation* routines\n     */\n    var codeGenerationRoutines = executableStatements.extend({\n\n        // Clear the primary register.\n        clear: function () {\n            this.emitLn('CLR D0');\n        },\n\n        // Negate the primary register.\n        negate: function () {\n            this.emitLn('NEG D0');\n        },\n\n        // Load a constant value to primary register.\n        loadConst: function (number) {\n            this.emitLn('MOVE #' + number + ', D0');\n        },\n\n        // Load a variable to primary register.\n        loadVar: function (name) {\n            if (!this.inTable(name)) {\n                this.undefined(name);\n            }\n\n            this.emitLn('MOVE ' + name + '(PC), D0');\n        },\n\n        // Push primary onto stack.\n        push: function () {\n            this.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Add top of stack to primary.\n        popAdd: function () {\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Subtract primary from top of stack.\n        popSub: function () {\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Multiply top of stack to primary.\n        popMul: function () {\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Divide top of stack by primary.\n        popDiv: function () {\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Store primary to variable.\n        store: function (name) {\n            if (!this.inTable(name)) {\n                this.undefined(name);\n            }\n\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Report an undefined identifier.\n        undefined: function (name) {\n            this.abort('Undefined Identifier ' + name);\n        }\n    });\n\n    /**\n     * ### 10.7.3 Assignment statement ###\n     * We are ready to begin processing executable code, by replacing the\n     * stub version of procedure Assignment.\n     * ```\n     * <assignment>   ::= <ident> = <expression>\n     * <expression>   ::= <first term> (<addop> <term>)*\n     * <first term>   ::= <first factor> <rest>\n     * <term>         ::= <factor> <rest>\n     * <rest>         ::= (<mulop> <factor>)*\n     * <first factor> ::= [<addop>] <factor>\n     * <factor>       ::= <var> | <number> | (<expression>)\n     * ```\n     * This version of the BNF is a bit different than we’ve used before.\n     * It lets us handle negative constant values efficiently.\n     *\n     * Try, for example `pvx,y=-1bx=-22*(3-8)y=x+15e.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X,                   vx,\n     *     Y = -1               y=-1\n     * BEGIN                    b\n     *     X = -22 * (3 - 8)    x=-22*(3-8)\n     *     Y = X + 15           y=x+15\n     * END                      e\n     * .                        .\n     * ```\n     * We have a compiler!\n     */\n    var assignmentStatement = codeGenerationRoutines.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.loadVar(this.getName());\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate a negative factor.\n        negFactor: function () {\n            this.match('-');\n            if (this.isDigit(this.look)) {\n                this.loadConst(-this.getNum());\n            } else {\n                this.factor();\n                this.negate();\n            }\n        },\n\n        // Parse and translate a leading factor.\n        firstFactor: function () {\n            switch (this.look) {\n            case '+':\n                this.match('+');\n                this.factor();\n                break;\n            case '-':\n                this.negFactor();\n                break;\n            default:\n                this.factor();\n            }\n        },\n\n        // Recognize and translate a multiply.\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.popMul();\n        },\n\n        // Recognize and translate a divide.\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.popDiv();\n        },\n\n        // Recognize an addop.\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Common code used by term() and firstTerm().\n        term1: function () {\n            while (this.isMulop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.factor();\n            this.term1();\n        },\n\n        // Parse and translate a math term with possible leading sing.\n        firstTerm: function () {\n            this.firstFactor();\n            this.term1();\n        },\n\n        // Recognize and translate an add.\n        add: function () {\n            this.match('+');\n            this.term();\n            this.popAdd();\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.popSub();\n        },\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // parse and translate an expression.\n        expression: function () {\n            this.firstTerm();\n            while (this.isAddop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.store(name);\n        }\n    });\n\n    /**\n     * 10.8 Booleans\n     * --------------\n     * We must add Boolean expressions and relational operations.\n     */\n\n    /**\n     * ### 10.8.1 More code generation routines ###\n     * To begin, we’re going to need some more code generation routines.\n     */\n    var moreCodeGenerationRoutines = assignmentStatement.extend({\n\n        // Complement the primary register.\n        notIt: function () {\n            this.emitLn('NOT D0');\n        },\n\n        // AND top of stack with primary.\n        popAnd: function () {\n            this.emitLn('AND (SP)+, D0');\n        },\n\n        // OR top of stack with primary.\n        popOr: function () {\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // XOR top of stack with primary.\n        popXor: function () {\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Compare top of stack with primary.\n        popCompare: function () {\n            this.emitLn('CMP (SP)+, D0');\n        },\n\n        // Set D0 If compare was `=`.\n        setEqual: function () {\n            this.emitLn('SEQ D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `!=`.\n        setNEqual: function () {\n            this.emitLn('SNE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `>`.\n        setGreater: function () {\n            this.emitLn('SLT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `<`.\n        setLess: function () {\n            this.emitLn('SGT D0');\n            this.emitLn('EXT D0');\n        }\n    });\n\n    /**\n     * ### 10.8.2 Boolean expressions ###\n     * The **BNF for the boolean expressions** is\n     * ```\n     * <bool-expr>  ::= <bool-term> (<orop> <bool-term>)*\n     * <bool-term>  ::= <not-factor> (<andop> <not-factor>)*\n     * <not-factor> ::= ['!'] <relation>\n     * <relation>   ::= <expression> [<relop> <expression>]\n     * ```\n     *\n     * Try, for example `pvx,y,zbx=z>ye.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X, Y, Z              vx,y,z\n     * BEGIN                    b\n     *     X = Z > Y            x=z>y\n     * END                      e\n     * .                        .\n     * ```\n     * See how this assigns a Boolean value to X?\n     */\n    var booleanExpressions = moreCodeGenerationRoutines.extend({\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize and translate a relational \"equals\".\n        equals: function () {\n            this.match('=');\n            this.expression();\n            this.popCompare();\n            this.setEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEquals: function () {\n            this.match('#');\n            this.expression();\n            this.popCompare();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.match('<');\n            this.expression();\n            this.popCompare();\n            this.setLess();\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.match('>');\n            this.expression();\n            this.popCompare();\n            this.setGreater();\n        },\n\n        // Parse and translate a relation.\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '=':\n                    this.equals();\n                    break;\n                case '#':\n                    this.notEquals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean factor with leading NOT.\n        notFactor: function () {\n            if (this.look === '!') {\n                this.match('!');\n                this.relation();\n                this.notIt();\n            } else {\n                this.relation();\n            }\n        },\n\n        // Parse and translate a boolean term.\n        boolTerm: function () {\n            this.notFactor();\n            while (this.look === '&') {\n                this.push();\n                this.match('&');\n                this.notFactor();\n                this.popAnd();\n            }\n        },\n\n        // Recognize and translate a boolean OR.\n        boolOr: function () {\n            this.match('|');\n            this.boolTerm();\n            this.popOr();\n        },\n\n        // Recognize and translate an exclusive or (XOR).\n        boolXor: function () {\n            this.match('~');\n            this.boolTerm();\n            this.popXor();\n        },\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();      // <--\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.loadVar(this.getName());\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.boolExpression();          // <--\n            this.store(name);\n        }\n    });\n\n    /**\n     * 10.9 Control structures\n     * ------------------------\n     * We’re almost home. With Boolean expressions in place, it’s a\n     * simple matter to add control structures.\n     * For **TINY**, we’ll only allow two kinds of them,\n     * the `IF` and the `WHILE`\n     * ```\n     * <block>     ::= (<statement>)*\n     * <statement> ::= <if> | <while> | <assignment>\n     * <if>        ::= IF <bool-expression> <block> [ELSE <block>] ENDIF\n     * <while>     ::= WHILE <bool-expression> <block> ENDWHILE\n     * ```\n     *\n     * Code example `pvc=1,sbwc<11s=s+cc=c+1ee.`\n     * which stands for\n     * ```\n     * PROGRAM                      p\n     * VAR COUNT = 1,               vc=1\n     *     SUM                      s\n     * BEGIN                        b\n     *     WHILE COUNT < 11         wc<11\n     *         SUM = SUM + COUNT    s=s+c\n     *         COUNT = COUNT + 1    c=c+1\n     *     ENDWHILE                 e\n     * END                          e\n     * .\n     * ```\n     * You should be able to parse the single-character versions of any\n     * of the control constructs. It’s looking pretty good!\n     *\n     * So far, we have **TINY version 0.1**.\n     */\n    var controlStructures = booleanExpressions.extend({\n\n        // Add two new code generation routines `branch` and `branchFalse`.\n\n        // Branch uncoditional.\n        branch: function (label) {\n            this.emitLn('BRA ' + label);\n        },\n\n        // Branch false.\n        branchFalse: function (label) {\n            this.emitLn('TST D0');\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Generate a unique label.\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.match('i');\n            this.boolExpression();\n            label1 = label2 = this.newLabel();\n            this.branchFalse(label1);\n            this.block();\n\n            if (this.look === 'l') {\n                this.match('l');\n                label2 = this.newLabel();\n                this.branch(label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.match('e');\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.match('w');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.boolExpression();\n            this.branchFalse(label2);\n            this.block();\n            this.match('e');\n            this.branch(label1);\n            this.postLabel(label2);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':                   // <--\n                    this.doIf();\n                    break;\n                case 'w':                   // <--\n                    this.doWhile();\n                    break;\n                default:\n                    this.assignment();\n                }\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n        }\n    });\n\n    /**\n     * 10.10 Lexical scanning\n     * -----------------------\n     * Next we have to convert the program so that it can deal with\n     * multicharacter keywords, newlines, and whitespace.\n     *\n     * Now we can complile the previous code\n     * ```\n     * program\n     * var count = 1,\n     *     sum\n     * begin\n     *     while count < 11\n     *     count = count + 1\n     * endwhile\n     * end\n     * .\n     * ```\n     * Did it work? We’re just about home. In fact, with a few minor\n     * exceptions we’ve already got a compiler that’s usable.\n     */\n    var lexicalScanning = controlStructures.extend({\n\n        // Variable declarations.\n        token: '',      // encoded token\n        value: '',      // unencoded token\n\n        keywordCodeTable: {\n            IF:       'i',\n            ELSE:     'l',\n            ENDIF:    'e',\n            WHILE:    'w',\n            ENDWHILE: 'e',\n            VAR:      'v',\n            BEGIN:    'b',\n            END:      'e',\n            PROGRAM:  'p'\n        },\n\n        keywordCode: function (val) {\n            return this.keywordCodeTable[val] || 'x';\n        },\n\n        // Get an identifier and scan it for keywords.\n        scan: function () {\n            this.getName();\n            this.token = this.keywordCode(this.value);\n        },\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Skip over an end-of-line.\n        newLine: function () {\n            while (this.look === this.CR || this.look === this.LF) {\n                this.getChar();\n                this.skipWhite();\n            }\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            this.newLine();                     // <--\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();                   // <--\n        },\n\n        // Match a specific input string.\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n        },\n\n        // Get an identifier.\n        getName: function () {\n            this.newLine();                     // <--\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            this.value = '';\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();                   // <--\n        },\n\n        // Get a Number.\n        getNum: function () {\n            var value = 0;\n            this.newLine();                     // <--\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            while (this.isDigit(this.look)) {\n                value = +this.look + 10 * value;\n                this.getChar();\n            }\n            this.skipWhite();                   // <--\n            return value;\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.getName();\n                this.loadVar(this.value);\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.getName();\n            this.alloc(this.value);\n            while (this.look === ',') {         // <--\n                this.match(',');\n                this.getName();\n                this.alloc(this.value);\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.value;\n            this.match('=');\n            this.boolExpression();\n            this.store(name);\n        },\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.boolExpression();\n            label1 = label2 = this.newLabel();\n            this.branchFalse(label1);\n            this.block();\n\n            if (this.token === 'l') {\n                label2 = this.newLabel();\n                this.branch(label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.matchString('ENDIF');\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1 = this.newLabel(),\n                label2 = this.newLabel();\n\n            this.postLabel(label1);\n            this.boolExpression();\n            this.branchFalse(label2);\n            this.block();\n            this.matchString('ENDWHILE');\n            this.branch(label1);\n            this.postLabel(label2);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {  // <-- token\n                switch (this.token) {                           // <\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            this.scan();\n            while (this.token !== 'b') {\n                switch (this.token) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized Keyword \"' + this.value + '\"');\n                }\n                this.scan();\n            }\n        },\n\n        // Main program.\n        doMain: function () {\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        },\n\n        // Parse and translate a program.\n        prog: function () {\n            this.matchString('PROGRAM');\n            this.header();\n            this.topDecls();\n            this.doMain();\n            this.match('.');\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n            this.scan();\n        }\n    });\n\n    /**\n     * 10.11 Multi-character variable names\n     * ------------------------------------\n     * Skipped (Already supported).\n     */\n\n    /**\n     * 10.12 More relops\n     * ------------------\n     * We still have one remaining single-character restriction, **relops**.\n     * Some of the relops are indeed single characters,\n     * but others require two, such as `<=` and `>=`.\n     *\n     * We extend the relop set to include\n     * `<`, `<=`, `=`, `<>`, `#`, `>`, and `>=`.\n     *\n     * Now you can process all the relops.\n     * For example\n     * ```\n     * program\n     * var foo, bar, answer\n     * begin\n     * if foo >= bar + 20\n     *     answer = 10 * foo\n     * else\n     *     answer = -12 / bar\n     * endif\n     * foo = foo - 1\n     * end\n     * .\n     * ```\n     *  Try it.\n     */\n    var moreRelops = lexicalScanning.extend({\n\n        // TODO: double check the Scc command!\n\n        // Set D0 if compare was `<=`.\n        setLessOrEqual: function () {\n            this.emitLn('SGE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was `>=`.\n        setGreaterOrEqual: function () {\n            this.emitLn('SLE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Recognize and translate a relational \"less than or equal\".\n        lessOrEqual: function () {\n            this.match('=');\n            this.expression();\n            this.popCompare();\n            this.setLessOrEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEqual: function () {\n            this.match('>');\n            this.expression();\n            this.popCompare();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.match('<');\n            switch (this.look) {\n            case '=':   // <=  less or equal\n                this.lessOrEqual();\n                break;\n            case '>':   // <>  not equal\n                this.notEqual();\n                break;\n            default:    // <  less\n                this.expression();\n                this.popCompare();\n                this.setLess();\n            }\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.match('>');\n            if (this.look === '=') {   // >=  greater or equal\n                this.match('=');\n                this.expression();\n                this.popCompare();\n                this.setGreaterOrEqual();\n            } else {        // >  greater\n                this.expression();\n                this.popCompare();\n                this.setGreater();\n            }\n        }\n    });\n\n    /**\n     * 10.13 Input / Output\n     * ---------------------\n     * We now have a complete, working language, except we have no way\n     * to get data in or out. We need some I/O.\n     *\n     * Assuming a library call `TINYLIB.LIB` exists.\n     *\n     * Try, for example\n     * ```\n     * program\n     * var foo, bar\n     * begin\n     * read(foo, bar)\n     * if foo >= bar\n     *     bar = 10 * foo\n     * endif\n     * write(foo * 2, bar)\n     * end\n     * .\n     * ```\n     * That’s all there is to it. NOW we have a language!\n     */\n    var inputOutput = moreRelops.extend({\n\n        keywordCodeTable: {\n            IF:       'i',\n            ELSE:     'l',\n            ENDIF:    'e',\n            WHILE:    'w',\n            ENDWHILE: 'e',\n            READ:     'R',                              // <--\n            WRITE:    'W',                              // <--\n            VAR:      'v',\n            BEGIN:    'b',\n            END:      'e',\n            PROGRAM:  'p'\n        },\n\n        // Write header info.\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n            this.emitLn('LIB TINYLIB');                 // <--\n        },\n\n        // Read variable to primary register.\n        readVar: function () {\n            this.emitLn('BSR READ');\n            this.store(this.value);\n        },\n\n        // Write variable from primary register.\n        writeVar: function () {\n            this.emitLn('BSR WRITE');\n        },\n\n        // Process a read statement.\n        doRead: function () {\n            this.match('(');\n            this.getName();\n            this.readVar();\n            while (this.look === ',') {\n                this.match(',');\n                this.getName();\n                this.readVar();\n            }\n            this.match(')');\n        },\n\n        // Process a write statement.\n        doWrite: function () {\n            this.match('(');\n            this.expression();\n            this.writeVar();\n            while (this.look === ',') {\n                this.match(',');\n                this.expression();\n                this.writeVar();\n            }\n            this.match(')');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':                               // <--\n                    this.doRead();\n                    break;\n                case 'W':                               // <--\n                    this.doWrite();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        }\n    });\n    /**\n     * 10.14 Conclusion\n     * -----------------\n     * At this point we have **TINY Version 1.0** completely defined.\n     * It has only one data type and no subroutines...,\n     * but it’s a complete, usable language. Not too bad for a toy.\n     */\n\n\n    return {\n\n        // 10.2.1\n        // <program> ::= PROGRAM .\n        firstStep: firstStep,\n\n        // 10.2.2\n        // <program> ::= PROGRAM BEGIN END '.'\n        theMainProgram: theMainProgram,\n\n        // 10.3\n        // <program>          ::= PROGRAM <top-level decls> BEGIN END '.'\n        // <top-level decls>  ::= (<data declaration>)*\n        // <data declaration> ::= VAR <var-list>\n        declarations: declarations,\n\n        // 10.4.1\n        // <data declaration> ::= VAR <var-list>\n        // <var-list> ::= <ident>\n        declarationsAndSymbols: declarationsAndSymbols,\n\n        // 10.4.2\n        // <var-list> ::= <indent> (, <ident>)*\n        variableList: variableList,\n\n        // 10.5.1\n        // <var-list> ::= <var> (, <var>)*\n        // <var>      ::= <ident> [= <integer>]\n        initializers: initializers,\n\n        // 10.5.2\n        multiDigitInteger: multiDigitInteger,\n\n        // 10.6\n        theSymbolTable: theSymbolTable,\n\n        // 10.7.1\n        // <main> ::= BEGIN <block> END\n        // <block> ::= (<assignment>)*\n        executableStatements: executableStatements,\n\n        // 10.7.2\n        codeGenerationRoutines: codeGenerationRoutines,\n\n        // 10.7.3\n        // <assignment>   ::= <ident> = <expression>\n        // <expression>   ::= <first term> (<addop> <term>)*\n        // <first term>   ::= <first factor> <rest>\n        // <term>         ::= <factor> <rest>\n        // <rest>         ::= (<mulop> <factor>)*\n        // <first factor> ::= [<addop>] <factor>\n        // <factor>       ::= <var> | <number> | (<expression>)\n        assignmentStatement: assignmentStatement,\n\n        // 10.8.1\n        moreCodeGenerationRoutines: moreCodeGenerationRoutines,\n\n        // 10.8.2\n        // <bool-expr>  ::= <bool-term> (<orop> <bool-term>)*\n        // <bool-term>  ::= <not-factor> (<andop> <not-factor>)*\n        // <not-factor> ::= ['!'] <relation>\n        // <relation>   ::= <expression> [<relop> <expression>]\n        booleanExpressions: booleanExpressions,\n\n        // 10.9\n        // <block>     ::= (<statement>)*\n        // <statement> ::= <if> | <while> | <assignment>\n        // <if>        ::= IF <bool-expression> <block> [ELSE <block>] ENDIF\n        // <while>     ::= WHILE <bool-expression> <block> ENDWHILE\n        controlStructures: controlStructures,\n\n        //10.10\n        lexicalScanning: lexicalScanning,\n\n        // 10.12\n        moreRelops: moreRelops,\n\n        // 10.13\n        inputOutput: inputOutput\n    };\n});\n\r\n/*global define*/\n\n/**\n * 11.5 Fixing up the compiler\n * ----------------------------\n * Armed with these new scanner procedures, we can now begin to fix\n * the compiler to use them properly.\n *\n * The new version of `scan` doesn’t advance the input stream, it only\n * scans for keywords.\n * The input stream must be advanced by each procedure that `block` calls.\n *\n * Optional *improvements* in TINY Version 1.1:\n *\n * 1. Delete `prog` and `doMain` and combined them into the `main` program.\n * 2. Delete keywords *PROGRAM* and *BEGIN* from the keyword list.\n * 3. Replace the fancy handling of unary minus with the dumbest one.\n * 4. Added some error-checking routines such as `checkTable` and `checkDup`,\n *    and replaced in-line code by calls to them.\n * 5. Take the error checking out of code generation routines like `store`,\n *    and put it in the parser where it belongs. See `assignment`, for\n *    example.\n * 6. Skipped.\n * 7. Procedure `addEntry` now has two arguments, which helps to make things\n *    a bit more modular.\n * 8. Clean up the code for the relational operators by the addition of\n *    the new procedures `compareExpression` and `nextExpression`.\n * 9. Fix an error in the Read routine ... the earlier value did not check\n *    for a valid variable name.\n */\n\n\n/**\n * 11.6 Conclusion\n * ----------------\n * The resulting compiler is **TINY VERSION 1.1**. Other than the removal\n * of the keyword PROGRAM, it parses the same language as before.\n * It’s just a bit cleaner, and more importantly it’s considerably\n * more robust.\n *\n * Try some program, for example\n * ```\n * program\n * var num, fact, count\n * begin\n *     read(num)\n *     fact = 1\n *     count = 1\n *     while count <= num\n *         fact = fact * count\n *         count = count + 1\n *     endwhile\n *     write(fact)\n * end\n * .\n * ```\n * We’re getting very close to being able to write a serious compiler.\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var tiny11 = object.extend({\n\n        // Constant declarations.\n        TAB: '\\t',\n        CR:  '\\r',\n        LF:  '\\n',\n\n        // Variable declarations.\n        look: '',           // lookahead character\n        lCount: 0,          // label counter\n        token: '',          // encoded token\n        value: '',          // unencoded token\n        symbolTable: null,\n\n        keywordCodeTable: {\n            IF:       'i',\n            ELSE:     'l',\n            ENDIF:    'e',\n            WHILE:    'w',\n            ENDWHILE: 'e',\n            READ:     'R',\n            WRITE:    'W',\n            VAR:      'v',\n            END:      'e'\n        },\n\n        keywordCode: function (val) {\n            return this.keywordCodeTable[val] || 'x';\n        },\n\n        // Read new character from input.\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error.\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt.\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected.\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Report an undefined identifier.\n        undefined: function (name) {\n            this.abort('Undefined Identifier ' + name);\n        },\n\n        // Report a duplicate identifier.\n        duplicate: function (name) {\n            this.abort('Duplicate Identifier ' + name);\n        },\n\n        // Check to make sure the current token is an identifier.\n        checkIdent: function () {\n            if (this.token !== 'x') {\n                this.expected('Identifier');\n            }\n        },\n\n        // Recognize an alpha character.\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit.\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop.\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Look for symbol in table.\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Check to see if an identifier is in the symbol table.\n        // Report an error if it's not.\n        checkTable: function (name) {\n            if (!this.inTable(name)) {\n                this.undefined(name);\n            }\n        },\n\n        // Check the symbol table for a duplicate identifier.\n        // Report an error if identifier is already in table.\n        checkDup: function (name) {\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n        },\n\n        // Add a new entry to symbol table.\n        addEntry: function (name, type) {\n            this.checkDup(name);\n            this.symbolTable[name] = type;\n        },\n\n        // Get an identifier.\n        getName: function () {\n            this.skipWhite();\n            if (!this.isAlpha(this.look)) {\n                this.expected('Identifier');\n            }\n\n            this.token = 'x';\n            this.value = '';\n            do {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            } while (this.isAlNum(this.look));\n        },\n\n        // Get a Number.\n        getNum: function () {\n            this.skipWhite();\n            if (!this.isDigit(this.look)) {\n                this.expected('Number');\n            }\n\n            this.token = '#';\n            this.value = '';\n            do {\n                this.value += this.look;\n                this.getChar();\n            } while (this.isDigit(this.look));\n        },\n\n        // Get an operator.\n        getOp: function () {\n            this.token = this.look;\n            this.value = this.look;\n            this.getChar();\n        },\n\n        // Get the next input token.\n        next: function () {\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else {\n                this.getOp();\n            }\n        },\n\n        // Scan the current identifier for keywords.\n        scan: function () {\n            if (this.token === 'x') {\n                this.token = this.keywordCode(this.value);\n            }\n        },\n\n        // Match a specific input string.\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n            this.next();                            // <--\n        },\n\n         // Output a string with tab.\n        emit: function (str) {\n            io.write(this.TAB + str);\n        },\n\n        // Output a string with tab and newline.\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Generate a unique label.\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output.\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        /**\n         * Code generation routines\n         */\n\n         // Clear the primary register.\n        clear: function () {\n            this.emitLn('CLR D0');\n        },\n\n        // Negate the primary register.\n        negate: function () {\n            this.emitLn('NEG D0');\n        },\n\n        // Complement the primary register.\n        notIt: function () {\n            this.emitLn('NOT D0');\n        },\n\n        // Load a constant value to primary register.\n        loadConst: function (number) {\n            this.emitLn('MOVE #' + number + ', D0');\n        },\n\n        // Load a variable to primary register.\n        loadVar: function (name) {\n            if (!this.inTable(name)) {\n                this.undefined(name);\n            }\n            this.emitLn('MOVE ' + name + '(PC), D0');\n        },\n\n        // Push primary onto stack.\n        push: function () {\n            this.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Add top of stack to primary.\n        popAdd: function () {\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Subtract primary from top of stack.\n        popSub: function () {\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Multiply top of stack to primary.\n        popMul: function () {\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Divide top of stack by primary.\n        popDiv: function () {\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // AND top of stack with primary.\n        popAnd: function () {\n            this.emitLn('AND (SP)+, D0');\n        },\n\n        // OR top of stack with primary.\n        popOr: function () {\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // XOR top of stack with primary.\n        popXor: function () {\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Compare top of stack with primary\n        popCompare: function () {\n            this.emitLn('CMP (SP)+, D0');\n        },\n\n        // Set D0 If compare was `=`.\n        setEqual: function () {\n            this.emitLn('SEQ D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `!=`.\n        setNEqual: function () {\n            this.emitLn('SNE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `>`.\n        setGreater: function () {\n            this.emitLn('SLT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `<`.\n        setLess: function () {\n            this.emitLn('SGT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was `<=`.\n        setLessOrEqual: function () {\n            this.emitLn('SGE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was `>=`.\n        setGreaterOrEqual: function () {\n            this.emitLn('SLE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Store primary to variable.\n        store: function (name) {\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Branch uncoditional.\n        branch: function (label) {\n            this.emitLn('BRA ' + label);\n        },\n\n        // Branch false.\n        branchFalse: function (label) {\n            this.emitLn('TST D0');\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Read variable to primary register.\n        readIt: function () {\n            this.emitLn('BSR READ');\n            this.store(this.value);\n        },\n\n        // Write variable from primary register.\n        writeIt: function () {\n            this.emitLn('BSR WRITE');\n        },\n\n        // Write header info.\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n        },\n\n        // Write the prolog.\n        prolog: function () {\n            this.postLabel('MAIN');\n        },\n\n        // Write the epilog.\n        epilog: function () {\n            this.emitLn('DC WARMST');\n            this.emitLn('END MAIN');\n        },\n\n        // Allocate storage for a static variable.\n        allocate: function (name, value) {\n            io.writeLn(name, ':', this.TAB, 'DC ', value);\n        },\n\n        /**\n         * ```\n         * <expression> ::= <term> [<addop> <term>]*\n         * <term> ::= <factor> [<mulop> <factor>]*\n         * <factor> ::= <number> | (<b-expression>) | <variable>\n         * ```\n         */\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.token === '(') {\n                this.next();                        // <--\n                this.boolExpression();\n                this.matchString(')');\n            } else {\n                if (this.token === 'x') {\n                    this.loadVar(this.value);\n                } else if (this.token === '#') {\n                    this.loadConst(this.value);\n                } else {\n                    this.expected('Math Factor');\n                }\n                this.next();                        // <--\n            }\n        },\n\n        // Recognize and translate a multiply.\n        multiply: function () {\n            this.next();                            // <--\n            this.factor();\n            this.popMul();\n        },\n\n        // Recognize and translate a divide.\n        divide: function () {\n            this.next();                            // <--\n            this.factor();\n            this.popDiv();\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.factor();\n            while (this.isMulop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Recognize and translate an add.\n        add: function () {\n            this.next();                            // <--\n            this.term();\n            this.popAdd();\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.next();                            // <--\n            this.term();\n            this.popSub();\n        },\n\n        // parse and translate an expression.\n        expression: function () {\n            if (this.isAddop(this.token)) {\n                this.clear();\n            } else {\n                this.term();\n            }\n            while (this.isAddop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Get another expression and compare.\n        compareExpression: function () {\n            this.expression();\n            this.popCompare();\n        },\n\n        // Get the next expression and compare.\n        nextExpression: function () {\n            this.next();                            // <--\n            this.compareExpression();\n        },\n\n        // Recognize and translate a relational \"equal\".\n        equal: function () {\n            this.nextExpression();\n            this.setEqual();\n        },\n\n        // Recognize and translate a relational \"less than or equal\".\n        lessOrEqual: function () {\n            this.nextExpression();\n            this.setLessOrEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEqual: function () {\n            this.nextExpression();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.next();                            // <--\n            switch (this.token) {\n            case '=':                               // for `<=`\n                this.lessOrEqual();\n                break;\n            case '>':                               // for `<>`\n                this.notEqual();\n                break;\n            default:                                // for `<`\n                this.compareExpression();\n                this.setLess();\n            }\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.next();                            // <--\n            if (this.token === '=') {               // for `>=`\n                this.nextExpression();\n                this.setGreaterOrEqual();\n            } else {                                // fpr `>`\n                this.compareExpression();\n                this.setGreater();\n            }\n        },\n\n        // Parse and translate a relation.\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '=':\n                    this.equals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean factor with leading NOT.\n        notFactor: function () {\n            if (this.token === '!') {\n                this.next();                        // <--\n                this.relation();\n                this.notIt();\n            } else {\n                this.relation();\n            }\n        },\n\n        // Parse and translate a boolean term.\n        boolTerm: function () {\n            this.notFactor();\n            while (this.token === '&') {\n                this.push();\n                this.next();                        // <--\n                this.notFactor();\n                this.popAnd();\n            }\n        },\n\n        // Recognize and translate a boolean OR.\n        boolOr: function () {\n            this.next();                            // <--\n            this.boolTerm();\n            this.popOr();\n        },\n\n        // Recognize and translate an exclusive or (XOR).\n        boolXor: function () {\n            this.next();                            // <--\n            this.boolTerm();\n            this.popXor();\n        },\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name;\n\n            this.checkTable(this.value);\n            name = this.value;\n            this.next();                            // <--\n            this.matchString('=');\n            this.boolExpression();\n            this.store(name);\n        },\n\n        /**\n         * ```\n         * <program> ::= <block> END\n         * <block> ::= [<statement>]*\n         * <statement> ::= <if> | <assignment>\n         * <if stmt> ::= IF <condition> <block> [ELSE <block>] ENDIF\n         * <assignment> ::= <identifier> = <expression>\n         * ```\n         */\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.next();                            // <--\n            this.boolExpression();\n            label1 = label2 = this.newLabel();\n            this.branchFalse(label1);\n            this.block();\n\n            if (this.token === 'l') {\n                this.next();                        // <--\n                label2 = this.newLabel();\n                this.branch(label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.matchString('ENDIF');\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.next();                            // <--\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.boolExpression();\n            this.branchFalse(label2);\n            this.block();\n            this.matchString('ENDWHILE');\n            this.branch(label1);\n            this.postLabel(label2);\n        },\n\n        // Read variable to primary register.\n        readVar: function () {\n            this.checkIdent();\n            this.checkTable(this.value);\n            this.readIt(this.value);\n            this.next();                            // <--\n        },\n\n        // Process a read statement.\n        doRead: function () {\n            this.next();                            // <--\n            this.matchString('(');\n            this.readVar();\n            while (this.token === ',') {\n                this.next();                        // <--\n                this.readVar();\n            }\n            this.matchString(')');\n        },\n\n        // Process a write statement.\n        doWrite: function () {\n            this.next();                            // <--\n            this.matchString('(');\n            this.expression();\n            this.writeIt();\n            while (this.token === ',') {\n                this.next();                        // <--\n                this.expression();\n                this.writeIt();\n            }\n            this.matchString(')');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':\n                    this.doRead();\n                    break;\n                case 'W':\n                    this.doWrite();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        },\n\n        // Allocate storage for a variable.\n        alloc: function () {\n            this.next();                            // <--\n            if (this.token !== 'x') {\n                this.expected('Variable Name');\n            }\n\n            this.checkDup(this.value);\n            this.addEntry(this.value, 'v');\n            this.allocate(this.value, '0');\n            this.next();                            // <--\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            this.scan();\n            while (this.token === 'v') {\n                this.alloc();\n                while (this.token === ',') {\n                    this.alloc();\n                }\n                this.scan();                        // <--\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n            this.next();                            // <--\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.matchString('PROGRAM');\n            this.header();\n            this.topDecls();\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        }\n    });\n\n    return {\n        object: tiny11\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 12 Miscellany\n * ======================\n */\n\ndefine(['./11.6-tiny-1.1', 'io'], function (tiny11, io) {\n    'use strict';\n\n    /**\n     * 12.1 Introduction\n     * ------------------\n     * This installment is another one of those excursions into side alleys\n     * that don’t seem to fit into the mainstream of this tutorial series.\n     * Perhaps you’ve wondered about **semicolons** and **comments**, and\n     * wondered how things would change if we had to deal with them.\n     */\n\n    /**\n     * 12.2 Semicolons\n     * ----------------\n     * Ever since the introduction of Algol, semicolons have been a part of\n     * almost every modern language.\n     *\n     * To understand the role of the semicolon, you have to look at a little\n     * history. When the fathers of Algol introduced that language, they\n     * wanted to get away from *line-oriented* programs like FORTRAN and\n     * BASIC, and allow for *free-form* input. This included the possibility\n     * of stringing multiple statements on a single line, as in\n     * ```\n     * a = b ; c = d ; e = e + 1;\n     * ```\n     * The same line, without the semicolons, just looks \"funny\":\n     * ```\n     * a = b c= d e = e + 1\n     * ```\n     * This is the major, perhaps ONLY, reason for semicolons: to keep\n     * programs from looking funny.\n     * Howerver, the TINY compiler is perfectly happy to parse the most\n     * complicated statement, spread over any number of lines,\n     * **without** semicolons.\n     */\n\n    /**\n     * 12.3 Syntactic sugar\n     * ---------------------\n     * This whole discussion brings up the issue of \"syntactic sugar\"...\n     * constructs that are added to a language, not because they are needed,\n     * but because they help make the programs look right to the programmer.\n     *\n     * The best example of useful sugar is the semicolon itself.\n     * Consider the code fragment:\n     * ```\n     * a = 1 + (2 * b + c)   b...\n     * ```\n     * Since there is no operator connecting the token `b` with the rest of\n     * the statement, the compiler will conclude that the expression ends\n     * with the `)`, and the `b` is the beginning of a new statement.\n     * But suppose I have simply left out the intended operator, and I\n     * really want to say:\n     * ```\n     * a = 1 + (2 * b + c) * b...\n     * ```\n     * In this case the compiler will get an error, all right, but it won’t\n     * be very meaningful since it will be expecting an `=` sign after the\n     * `b` that really shouldn’t be there.\n     *\n     * If, on the other hand, I include a semicolon after the `b`, THEN\n     * there can be no doubt where I intend the statement to end.\n     * Syntactic sugar, then, can serve a very useful purpose by providing\n     * some additional insurance that we remain on track.\n     */\n\n    /**\n     * 12.4 Dealing with semicolons\n     * -----------------------------\n     * There are two distinct ways in which semicolons are used in popular\n     * languages.\n     * In **Pascal**, semicolon is a statement *SEPARATOR*.\n     * No semicolon is required after the last statement in a block.\n     * ```\n     * <block> ::= <statement> (';' <statement>)*\n     * <statement> ::= <assignment> | <if> | <while> ... | null\n     * ```\n     * In **C** and **Ada**, semicolon is a statement *TERMINATOR*,\n     * and follows all statements\n     * ```\n     * <block> ::= (<statement> ';')*\n     * ```\n     *\n     * ### 12.4.1 The C version ###\n     * Let’s take the last case first, since it’s simpler.\n     * ```\n     * <program>          ::= PROGRAM';' <top-level decls> BEGIN END '.'\n     * <top-level decls>  ::= (<data declaration> ';')*\n     * <data declaration> ::= VAR <var-list>\n     * <block>            ::= (<statement> ';')*\n     * <statement>        ::= <assignment> | <if> | <while> ... | null\n     * ```\n     * Try to write a program in the editor, for example\n     * ```\n     * program;\n     * var num, fact;\n     * var count;\n     * begin\n     *     fact = 1; count = 1;\n     *     read(num);\n     *     while count <= num\n     *         fact = fact * count;\n     *         count = count + 1;\n     *     endwhile;\n     *     write(fact);\n     * end\n     * .\n     * ```\n     */\n    var theCVersion = tiny11.object.extend({\n\n        // Match a semicolon.\n        semi: function () {\n            this.matchString(';');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':\n                    this.doRead();\n                    break;\n                case 'W':\n                    this.doWrite();\n                    break;\n                case 'x':                           // <--\n                    this.assignment();\n                    break;\n                }\n                this.semi();                        // <--\n                this.scan();\n            }\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            this.scan();\n            while (this.token === 'v') {\n                this.alloc();\n                while (this.token === ',') {\n                    this.alloc();\n                }\n                this.semi();                        // <--\n                this.scan();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.matchString('PROGRAM');\n            this.semi();                            // <--\n            this.header();\n            this.topDecls();\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        }\n    });\n\n    /**\n     * ### 12.4.2 The Pascal version ###\n     * The Pascal version is a little trickier, but it still only requires\n     * minor changes, and those only to procedure Block.\n     * ```\n     * <block> ::= <statement> (';' <statement>)*\n     * <statement> ::= <assignment> | <if> | <while> ... | null\n     * ```\n     *\n     * Try some code, for example\n     * ```\n     * program;\n     * var num, fact;\n     * var count;\n     * begin\n     *     fact = 1; count = 1;\n     *     read(num);\n     *     while count <= num\n     *         fact = fact * count;\n     *         count = count + 1\n     *     endwhile;\n     *     write(fact);\n     *     if fact > 100\n     *         fact = 100\n     *     endif\n     * end\n     * .\n     * ```\n     * Note that the semicolon for statement at each end of block,\n     * `count = count + 1` within **while**, `fact = 100` whithin **if**,\n     * or `if...endif` in **main** block is now optional.\n     */\n    var thePascalVersion = theCVersion.extend({\n\n        // Recognize and translate a single statement.\n        statement: function () {\n            this.scan();\n            switch (this.token) {\n            case 'i':\n                this.doIf();\n                break;\n            case 'w':\n                this.doWhile();\n                break;\n            case 'R':\n                this.doRead();\n                break;\n            case 'W':\n                this.doWrite();\n                break;\n            case 'x':\n                this.assignment();\n                break;\n            }\n        },\n\n        // Parse and translate a block of statement.\n        block: function () {\n            this.statement();\n            while (this.token === ';') {\n                this.next();\n                this.statement();\n            }\n        }\n    });\n\n    /**\n     * 12.5 A compromise\n     * ------------------\n     * Make all the semicolon optional\n     * ```\n     * <program>          ::= PROGRAM [';'] <top-level decls> BEGIN END '.'\n     * <top-level decls>  ::= (<data declaration> [';'])*\n     * <data declaration> ::= VAR <var-list>\n     * <block>            ::= (<statement> [';'])*\n     * <statement>        ::= <assignment> | <if> | <while> ... | null\n     * ```\n     * We have TINY Version 1.2.\n     */\n    var aCompromise = theCVersion.extend({\n\n        // Match a semicolon.\n        semi: function () {\n            if (this.token === ';') {               // <--\n                this.next();                        // <\n            }\n        }\n    });\n\n    /**\n     * 12.6 Comments\n     * -------------\n     * At one extreme, comments can be intercepted almost the instant\n     * they enter the compiler. At the other, we can treat them as\n     * lexical elements.\n     * Things tend to get interesting when you consider things like\n     * comment delimiters contained in quoted strings.\n     */\n\n    /**\n     * 12.7 Single character delimiters\n     * --------------------------------\n     * Here’s an example. Suppose we assume the Turbo Pascal standard and\n     * use curly braces for comments.\n     * In this case we have single-character delimiters, so our parsing is\n     * a little easier.\n     *\n     * ### 12.7.1 Strip the comments out ###\n     * One approach is to strip the comments out the instant we encounter\n     * them in the input stream; that is, right in procedure `getChar`.\n     *\n     * Give it a try, for example\n     * ```\n     * program\n     * var num, ans\n     * begin\n     *     read(num)\n     *     { Calculate the absolute value of num }\n     *     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     * You’ll find that you can, indeed, bury comments\n     * anywhere you like. The comments never even get into the parser.\n     *\n     * Problems: first, this version doesn’t care WHERE you put comments.\n     * Try to replace `ans = num` by\n     * `a{ in the middle of a name }ns = nu{again}m`.\n     * Second, the rest of the parser can’t receive a `{` character, you\n     * will not be allowed to put one in a quoted string.\n     */\n    var stripTheCommentsOut = aCompromise.extend({\n\n        // Read new character from input.\n        // Renamed from `getChar` (temporarily).\n        getCharX: function () {\n            this.look = io.read();\n        },\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== '}') {\n                this.getCharX();\n            }\n            this.getCharX();\n        },\n\n        // Get character from input stream.\n        // Skip any comments.\n        getChar: function () {\n            this.getCharX();\n            if (this.look === '{') {\n                this.skipComment();\n            }\n        }\n\n    });\n\n    /**\n     * ### 12.7.2 The conventional treatment ###\n     * If you want to the conventional treatment, we need to move the\n     * interception point downstream a little further.\n     *\n     * Try again\n     * ```\n     * program\n     * var num, ans\n     * var{The comment is now treated as whitespace}test\n     * begin\n     *     read(num)\n     *     { Calculate the absolute value of num. }\n     *     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     * and also try to replace `ans = num` by\n     * `a{ in the middle of a name }ns = nu{again}m`. Does it still work?\n     * Now the comments are treated as whitespace.\n     */\n    var theConventionalTreatment = aCompromise.extend({\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== '}') {\n                this.getChar();                     // <-- original `getChar`\n            }\n            this.getChar();                         // <\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF ||\n                   c === '{';                       // <--\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                if (this.look === '{') {            // <--\n                    this.skipComment();             // <\n                } else {\n                    this.getChar();\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 12.7.3 Nested comments ###\n     * There’s one last item to deal with: Nested comments.\n     * Some programmers like the idea of nesting comments, since it allows\n     * you to comment out code during debugging.\n     * Give it a try, for example\n     * ```\n     * program\n     * var num, ans\n     * begin\n     * { Comment out the code, with a nested comment.\n     *     read(num)\n     *     { Calculate the absolute value of num. }\n     *     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * }\n     * end\n     * .\n     * ```\n     * That does it. As sophisticated a comment-handler as you’ll ever need.\n     */\n    var nestedComments = theConventionalTreatment.extend({\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== '}') {\n                this.getChar();\n                if (this.look === '{') {            // <--\n                    this.skipComment();             // <\n                }\n            }\n            this.getChar();\n        }\n    });\n\n    /**\n     * 12.8 Multi character delimiters\n     * -------------------------------\n     * What about the cases such as C or standard Pascal, where two\n     * characters are required?\n     *\n     * The easiest thing to do is to intercept the left delimiter back at\n     * the `getChar` stage. We can *tokenize* it right there, replacing it\n     * by a single character.\n     *\n     * Give it a try, for example\n     * ```\n     * /* This is a program to demonstrate\n     *    the C comment.*/\n    /* program\n     * var num, ans\n     * begin\n     *     read(num)\n     *     /* Calculate the absolute value of num.*/\n    /*     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     */\n    var multiCharacterDelimiters = theConventionalTreatment.extend({\n\n        tempChar: ' ',\n\n        // Read new character from input.\n        // Renamed from `getChar` (temporarily).\n        getCharX: function () {\n            this.look = io.read();\n        },\n\n        // Read new character. Intercept `/*`.\n        getChar: function () {\n            if (this.tempChar !== ' ') {\n                this.look = this.tempChar;\n                this.tempChar = ' ';\n            } else {\n                this.getCharX();\n                if (this.look === '/') {\n                    this.tempChar = io.read();\n                    if (this.tempChar === '*') {\n                        this.look = '{';\n                        this.tempChar = ' ';\n                    }\n                }\n            }\n        },\n\n        // Skip a comment field. Until `*/`.\n        skipComment: function () {\n            do {\n                do {\n                    this.getCharX();\n                } while (this.look !== '*');\n                this.getCharX();\n            } while (this.look !== '/');\n            this.getCharX();\n        }\n    });\n\n    /**\n     * 12.9 One sided comments\n     * ----------------------\n     * The one-sided comments are like those in assembler language or\n     * in Ada, that are terminated by the end of the line.\n     *\n     * Give it a try, for example\n     * ```\n     * ; This is a program to demonstrate\n     * ; the comment of assembly language.\n     * program\n     * var num, ans\n     * begin\n     *     read(num)\n     *     ; Calculate the absolute value of num.\n     *     if num < 0\n     *         ans = -num   ; negate the value\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     */\n    var oneSidedComments = aCompromise.extend({\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== this.LF) {         // <--\n                this.getChar();\n            }\n            this.getChar();\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF ||\n                   c === ';';                       // <--\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                if (this.look === ';') {            // <-- asm comment\n                    this.skipComment();\n                } else {\n                    this.getChar();\n                }\n            }\n        }\n    });\n\n    /**\n     * 12.10 Conclusion\n     * ----------------\n     * At this point we now have the ability to deal with both comments\n     * and semicolons, as well as other kinds of syntactic sugar.\n     *\n     * The conventions we we use in KISS/TINY will be\n     *\n     * 1. Semicolons are *TERMINATORS*, not separators\n     * 2. Semicolons are *OPTIONAL*\n     * 3. Comments are delimited by *curly braces*\n     * 4. Comments *MAY* be nested\n     *\n     * which is the version in section 12.7.3.\n     */\n\n\n    return {\n\n        // 12.4.1\n        // <program>          ::= PROGRAM';' <top-level decls> BEGIN END '.'\n        // <top-level decls>  ::= (<data declaration> ';')*\n        // <data declaration> ::= VAR <var-list>\n        // <block>            ::= (<statement> ';')*\n        // <statement>        ::= <assignment> | <if> | <while> ... | null\n        theCVersion: theCVersion,\n\n        // 12.4.2\n        // <block> ::= <statement> (';' <statement>)*\n        // <statement> ::= <assignment> | <if> | <while> ... | null\n        thePascalVersion: thePascalVersion,\n\n        // 12.5\n        // <program>          ::= PROGRAM [';'] <top-level decls> BEGIN END '.'\n        // <top-level decls>  ::= (<data declaration> [';'])*\n        // <data declaration> ::= VAR <var-list>\n        // <block>            ::= (<statement> [';'])*\n        // <statement>        ::= <assignment> | <if> | <while> ... | null\n        aCompromise: aCompromise,\n\n        // 12.7.1\n        stripTheCommentsOut: stripTheCommentsOut,\n\n        // 12.7.2\n        theConventionalTreatment: theConventionalTreatment,\n\n        // 12.7.3\n        nestedComments: nestedComments,\n\n        // 12.8\n        multiCharacterDelimiters: multiCharacterDelimiters,\n\n        // 12.9\n        oneSidedComments: oneSidedComments\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 13 Procedures\n * ======================\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    /**\n     * 13.1 Introduction\n     * -----------------\n     * At this point we’ve studied almost all the basic features of\n     * compilers and parsing.\n     * That’s nice, but what we have is still only a toy language.\n     * We can’t read or write even a single character of text, and we\n     * still don’t have procedures.\n     */\n\n    /**\n     * 13.2 One last digression\n     * ------------------------\n     * We will be using single-character tokens again as we study\n     * the concepts of procedures, unfettered by the other baggage\n     * that we have accumulated in the previous sessions.\n     */\n\n    /**\n     * 13.3 The basics\n     * ---------------\n     * All modern CPU’s provide direct support for procedure calls,\n     * and the 68000 is no exception. For the 68000, the call is a\n     * `BSR` (PC-relative version) or `JSR`, and the return is `RTS`.\n     * All we have to do is to arrange for the compiler to issue\n     * these commands at the proper place.\n     *\n     * Three things we have to address:\n     *\n     * 1. Call/return mechanism\n     * 2. Defining the procedure\n     * 3. Parameter passing\n     *\n     * None of these things are really very difficult.\n     * The third, parameter passing will occupy most of our attention\n     * because there are many options available.\n     */\n\n    /**\n     * 13.4 A basis for experimentation\n     * --------------------------------\n     * As always, we will need some software to serve as a basis for\n     * what we are doing.\n     * The program here is that basis, a vestigial form of TINY:\n     *\n     * - With single-character tokens.\n     * - It has data declarations, but only in their simplest form...\n     * no lists or initializers.\n     * - It has assignment statements, but only of the kind\n     *\n     *       <ident> = <ident>\n     *\n     *   In other words, the only legal expression is a single\n     *   variable name. There are no control constructs.\n     *   the only legal statement is the assignment.\n     *\n     * In this program, Most of the program is the standard\n     * **Cradle** routines.\n     * We start with a language in BNF\n     * ```\n     * <program>     ::= <declaration> BEGIN <block> END'.'\n     * <declaration> ::= (<data decl>)*\n     * <data decl>   ::= VAR <ident>\n     * <block>       ::= (<assignment>)*\n     * <assignment>  ::= <ident> = <expression>\n     * <expression>  ::= <ident>\n     * ```\n     * Note that the assembly like comments are also included here.\n     * Try something like\n     * ```\n     * v a                  ; var a\n     * v b                  ; var b\n     * v c                  ; var c\n     * b                    ; begin\n     *     a = b            ;     a = b\n     *     b = c            ;     b = c\n     * e.                   ; end.\n     * ```\n     * As usual, you should also make some deliberate errors, and\n     * verify that the program catches them correctly.\n     */\n    var aBasisForExperimentation = object.extend({\n\n        // Constant declarations.\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations.\n        look: '',   // lookahead character\n        symbolTable: null,\n\n        // Read new character from input stream.\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error.\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt.\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected.\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Report an undefined identifier.\n        undefined: function (name) {\n            this.abort('Undefined identifier ' + name);\n        },\n\n        // Report a duplicate identifier.\n        duplicate: function (name) {\n            this.abort('Duplicate identifier ' + name);\n        },\n\n        // Get type of symbol.\n        typeOf: function (name) {\n            return this.symbolTable[name];\n        },\n\n        // Look for symbol in table.\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Add a new entry to symbol table.\n        addEntry: function (name, type) {\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.symbolTable[name] = type;\n        },\n\n        // Check an entry to make sure it's a variable.\n        checkVar: function (name) {\n            if (!this.inTable(name)) {\n                this.undefined(name);\n            }\n\n            if (this.typeOf(name) !== 'v') {\n                this.abort(name + ' is not a variable');\n            }\n        },\n\n        // Recognize an alpha character.\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit.\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop.\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB || c === ';';\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                if (this.look === ';') {\n                    this.skipComment();\n                } else {\n                    this.getChar();\n                }\n            }\n        },\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== this.LF) {\n                this.getChar();\n            }\n            this.getChar();\n        },\n\n        // Skip over and end-of-line.\n        fin: function () {\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();                       // <--\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = this.look.toUpperCase();\n            this.getChar();\n            this.skipWhite();                       // <--\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = this.look;\n            this.getChar();\n            this.skipWhite();                       // <--\n            return num;\n        },\n\n        // Output a string with tab.\n        emit: function (str) {\n            io.write(this.TAB, str);\n        },\n\n        // Output a string with tab and newline.\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Post a label to output.\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        // Load a variable to primary register.\n        loadVar: function (name) {\n            this.checkVar(name);                    // <--\n            this.emitLn('MOVE ' + name + '(PC), D0');\n        },\n\n        // Store the primary register.\n        storeVar: function (name) {\n            this.checkVar(name);                    // <--\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.getChar();\n            this.skipWhite();\n        },\n\n        // Parse and translate an expression\n        // Vestigial version.\n        expression: function () {\n            this.loadVar(this.getName());\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.storeVar(name);\n        },\n\n        // Recognize and translate a block of statements.\n        doBlock: function () {\n            while (this.look !== 'e') {\n                this.skipWhite();\n                this.assignment();\n                this.fin();\n            }\n        },\n\n        // Parse and translate a begin-block.\n        beginBlock: function () {\n            this.match('b');\n            this.fin();\n            this.doBlock();\n            this.match('e');\n            this.fin();\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.symbolTable[name] = 'v';\n            io.writeLn(name, ':', this.TAB, 'DC 0');\n        },\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== 'b') {\n                switch (this.look) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized keyword ' + this.look);\n                }\n                this.fin();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.topDecls();\n            this.beginBlock();\n        }\n    });\n\n    /**\n     * 13.5 Declarating a procedure\n     * ----------------------------\n     * It’s time to deal with the procedures. Since we haven’t talked\n     * about parameters yet, we’ll begin by considering only\n     * procedures that have no parameter lists.\n     *\n     * ### 13.5.1 ###\n     * Let’s consider a simple program with a procedure, and think about\n     * the code we’d like to see generated for it:\n     * ```\n     * Source Code                  Generated Code\n     * -------------------------------------------\n     * program foo;\n     * .\n     * .\n     * procedure bar;               BAR:\n     * begin                        .\n     * .                            .\n     * .                            .\n     * end;                         RTS\n     * begin main program           MAIN:\n     * .                            .\n     * .                            .\n     * foo;                         BSR BAR\n     * .                            .\n     * .                            .\n     * end.                         END MAIN\n     * ```\n     *\n     * Declaring procedure is no different than declaring a variable,\n     * and we can write the BNF\n     * ```\n     * <declaration> ::= (<data decl> | <procedure>)*\n     * ```\n     * What about the syntax of a procedure? Well, here’s a suggested\n     * syntax, which is essentially that of Pascal\n     * ```\n     * <procedure>   ::= PROCEDURE <ident> <begin-block>\n     * <begin-block> ::= BEGIN <block> END\n     * ```\n     *\n     * Try something like\n     * ```\n     * v a                  ; var a\n     * p f                  ; procedure f\n     * b                    ; begin\n     *     a = a            ;     a = a\n     * e                    ; end\n     *\n     * v b                  ; var b\n     * b                    ; begin       { of main }\n     *     b = a            ;     b = a\n     * e.                   ; end.\n     * ```\n     */\n    var declaratingAProcedure = aBasisForExperimentation.extend({\n\n        return: function () {\n            this.emitLn('RTS');\n        },\n\n        // Parse and translate a procedure declaration.\n        doProc: function () {\n            var name;\n\n            this.match('p');\n            name = this.getName();\n            this.fin();\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.symbolTable[name] = 'p';\n            this.postLabel(name);\n            this.beginBlock();\n            this.return();\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== 'b') {\n                switch (this.look) {\n                case 'v':\n                    this.decl();\n                    break;\n                case 'p':                           // <--\n                    this.doProc();\n                    break;\n                default:\n                    this.abort('Unrecognized keyword ' + this.look);\n                }\n                this.fin();\n            }\n        },\n\n        // Write the prolog.\n        prolog: function () {\n            this.postLabel('MAIN');\n        },\n\n        // Write the epilog.\n        epilog: function () {\n            this.emitLn('DC WARMST');\n            this.emitLn('END MAIN');\n        },\n\n        // Parse and translate a main program.\n        doMain: function () {\n            this.match('b');\n            this.fin();\n            this.prolog();\n            this.doBlock();\n            this.epilog();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.topDecls();\n            this.doMain();                          // <--\n        }\n    });\n\n    /**\n     * ### 13.5.2 The main program ###\n     * Isn’t the main program just one more declaration, also?\n     * The answer is yes.\n     *\n     * Suppose we use an explicit keyword, PROGRAM, to identify the main\n     * program (Note that this means that we can’t start the file with\n     * it, as in Pascal). In this case, our BNF becomes\n     * ```\n     * <declaration>  ::= <data decl> | <procedure> | <main program>\n     * <procedure>    ::= PROCEDURE <ident> <begin-block>\n     * <main program> ::= PROGRAM <ident> <begin-block>\n     * ```\n     *\n     * The previous code becomes\n     * ```\n     * v a                  ; var a\n     * p f                  ; procedure f\n     * b                    ; begin\n     *     a = a            ;     a = a\n     * e                    ; end\n     *\n     * v b                  ; var b\n     * P x                  ; program x\n     * b                    ; begin\n     *     b = a            ;     b = a\n     * e.                   ; end.\n     * ```\n     * Note that any code after the main program will not be accessible.\n     * However, we COULD access it via a FORWARD statement,\n     * which we’ll be providing later.\n     */\n    var theMainProgram = declaratingAProcedure.extend({\n\n        // Parse and translate a main program.\n        doMain: function () {\n            var name;\n\n            this.match('P');\n            name = this.getName();\n            this.fin();\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.prolog();\n            this.beginBlock();\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== '.') {             // <--\n                switch (this.look) {\n                case 'v':\n                    this.decl();\n                    break;\n                case 'p':\n                    this.doProc();\n                    break;\n                case 'P':                           // <--\n                    this.doMain();\n                    break;\n                default:\n                    this.abort('Unrecognized keyword ' + this.look);\n                }\n                this.fin();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.topDecls();\n            this.epilog();                          // <--\n        }\n    });\n\n    /**\n     * 13.6 Calling the procedure\n     * --------------------------\n     * Let’s address the second half of the equation, the call.\n     * Consider the BNF for a procedure call\n     * ```\n     * <proc call> ::= <ident>\n     * ```\n     * for an assignment statement, on the other hand, the BNF is\n     * ```\n     * <assignment>  ::= <ident> = <expression>\n     * ```\n     * At this point we seem to have a problem. The two BNF statements both\n     * begin on the right-hand side with the token <ident>.\n     * However, it turns out to be an easy problem to fix, since all we have\n     * to do is to look at the type of the identifier, as recorded in the\n     * symbol table.\n     *\n     * ```\n     * <block>          ::= (<assign-or-proc>)*\n     * <assign-or-proc> ::= assignment> | <proc call>\n     * <proc call>      ::= <ident>\n     * ```\n     * Try something like\n     * ```\n     * v a                  ; var a\n     * v b                  ; var b\n     * p f                  ; procedure f\n     * b                    ; begin\n     *     a = b            ;     a = b\n     *     f                ;     f       { call f recursively }\n     * e                    ; end\n     *\n     * P x                  ; program x\n     * b                    ; begin\n     *     f                ;     f       { call f }\n     *     b = a            ;     b = a\n     * e.                   ; end.\n     * ```\n     * So even though we don’t allow nested DECLARATIONS, there is certainly\n     * nothing to keep us from nesting CALLS, just as we would expect to do\n     * in any language.\n     *\n     * So far we can only deal with procedures that have no parameters.\n     * The procedures can only operate on the global variables by their\n     * global names.\n     */\n    var callingTheProcedure = theMainProgram.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function (name) {               // <--\n            this.match('=');\n            this.expression();\n            this.storeVar(name);\n        },\n\n        // Call a procedure.\n        callProc: function (name) {\n            this.emitLn('BSR ' + name);\n        },\n\n        // Decide if a statement is an assignment or procedure call.\n        assignOrProc: function () {\n            var name = this.getName();\n\n            switch (this.typeOf(name)) {\n            case ' ':\n                this.undefined(name);\n                break;\n            case 'v':\n                this.assignment(name);\n                break;\n            case 'p':\n                this.callProc(name);\n                break;\n            default:\n                this.abort('Identifier ' + name + ' cannot be used here');\n            }\n        },\n\n        // Recognize and translate a block of statements.\n        doBlock: function () {\n            while (this.look !== 'e') {\n                this.skipWhite();\n                this.assignOrProc();                // <--\n                this.fin();\n            }\n        }\n    });\n\n    /**\n     * 13.7 Passing parameters\n     * -----------------------\n     * In general the procedure is given a parameter list, for example\n     * ```\n     * PROCEDURE FOO(X, Y, Z)\n     * ```\n     * In the declaration of a procedure, the parameters are called\n     * *formal parameters*, and may be referred to in the body of the\n     * procedure by those names.\n     *\n     * When a procedure is called, the *actual parameters* (arguments)\n     * passed to it are associated with the formal parameters, on a\n     * one-for-one basis. The BNF for the syntax looks like\n     * ```\n     * <procedure> ::= PROCEDURE <ident> '(' <param-list> ')' <begin-block>\n     * <param-list> ::= <parameter> (',' <parameter>)* | null\n     * ```\n     * Similarly, the procedure call looks like:\n     * ```\n     * <proc call> ::= <ident> '(' <param-list> ')'\n     * ```\n     * Some languages such as Pascal and Ada, permit parameter lists to be\n     * *optional*. Other languages, like C and Modula 2, require the parens\n     * even if the list is empty. The BNF above corresponds to the former.\n     *\n     * Try something like\n     * ```\n     * v a                  ; var a\n     * v b                  ; var b\n     * p f(x, y)            ; procedure f(x, y)\n     * b                    ; begin\n     *     a = b            ;     a = b\n     *     f(a, y)          ;     f(a, y)\n     * e                    ; end\n     *\n     * P x                  ; program x\n     * b                    ; begin\n     *     f(n)             ;     f(n)\n     *     b = a            ;     b = a\n     * e.                   ; end.\n     * ```\n     * Note that there is NO checking to make sure that the number (and,\n     * later, types) of formal and actual parameters match up.\n     */\n    var passingParameters = callingTheProcedure.extend({\n\n        // Process a formal parameter.\n        // A dummy version.\n        formalParam: function () {\n            this.getName();\n        },\n\n        // Process the formal parameter list of a procedure.\n        formalList: function () {\n            this.match('(');\n            if (this.look !== ')') {\n                this.formalParam();\n                while (this.look === ',') {\n                    this.match(',');\n                    this.formalParam();\n                }\n            }\n            this.match(')');\n        },\n\n        // Parse and translate a procedure declaration.\n        doProc: function () {\n            var name;\n\n            this.match('p');\n            name = this.getName();\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.formalList();                      // <--\n            this.fin();\n            this.symbolTable[name] = 'p';\n            this.postLabel(name);\n            this.beginBlock();\n            this.return();\n        },\n\n        // Process an actual parameter.\n        // A dummy version.\n        param: function () {\n            this.getName();\n        },\n\n        // Process the parameter list for a procedure call.\n        paramList: function () {\n            this.match('(');\n            if (this.look !== ')') {\n                this.param();\n                while (this.look === ',') {\n                    this.match(',');\n                    this.param();\n                }\n            }\n            this.match(')');\n        },\n\n        call: function (name) {\n            this.emitLn('BSR ' + name);\n        },\n\n        // Call a procedure.\n        callProc: function (name) {\n            this.paramList();                       // <--\n            this.call(name);                        // <\n        }\n    });\n\n    /**\n     * 13.8 The semantics of parameters\n     * --------------------------------\n     * There are two main ways parameters are passed\n     *\n     * - By value\n     * - By reference (address)\n     *\n     * The old FORTRAN compilers passed all parameters by reference.\n     * This method created entirely too much coupling between the called\n     * subroutine and its caller. In effect, it gave the subroutine complete\n     * access to all variables that appeared in the parameter list.\n     * Some FORTRAN programmers, in fact, made it a practice to copy ALL\n     * parameters except those that were to be used as return values.\n     *\n     * There was, however, an even more insidious problem such as\n     * ```\n     * CALL FOO(A, B, J + 1)\n     * ```\n     * Here the third parameter is not a variable, and so it has no address.\n     * The earliest FORTRAN compilers did not allow such things, so we had\n     * to resort to subterfuges like:\n     * ```\n     * K = J + 1\n     * CALL FOO(A, B, K)\n     * ```\n     * Here again, there was copying required, and the burden was on the\n     * programmer to do it.\n     * Later FORTRAN implementations got rid of this by allowing expressions\n     * as parameters. What they did was to assign a compiler-generated\n     * variable, store the value of the expression in the variable, and\n     * then pass the address of the expression.\n     *\n     * The problem arose when someone decided to make things more efficient.\n     * They reasoned, rightly enough, that the most common kind of\n     * \"expression\" was a single integer value, as in\n     * ```\n     * CALL FOO(A, B, 4)\n     * ```\n     */\n\n    /**\n     * 13.9 Pass by value\n     * ------------------\n     * Let’s begin with the pass-by value case. Consider the procedure call\n     * ```\n     * FOO(X, Y)\n     * ```\n     * Almost the only reasonable way to pass the data is through the CPU\n     * stack. So the code we’d like to see generated might look like\n     * ```\n     * MOVE X(PC), -(SP)    ; Push X\n     * MOVE Y(PC), -(SP)    ; Push Y\n     * BSR FOO              ; Call FOO\n     * ```\n     * When the BSR is executed, the CPU pushes the return address onto the\n     * stack and jumps to FOO. At this point the stack will look like\n     * ```\n     * 6(SP)       Value of X     (2 bytes)\n     * 4(SP)       Value of Y     (2 bytes)\n     *  (SP)    –> Return Address (4 bytes)\n     * ```\n    * Now consider what the called procedure might look like\n     * ```\n     * PROCEDURE FOO(A, B)\n     * BEGIN\n     *     A = B\n     * END\n     * ```\n     * The desired output code might look like\n     * ```\n     * FOO:    MOVE 4(SP), D0        ; D0 <- B\n     *         MOVE D0, 6(SP)        ; A  <- D0\n     *         RTS\n     * ```\n     *\n     * Give it a try, for example\n     * ```\n     * v a                  ; var a\n     * v b                  ; var b\n     * p f(a, c)            ; procedure f(a, c)\n     * b                    ; begin\n     *     a = b            ;     a = b     { b is a global variable }\n     *     b = c            ;     b = c     { a and c are local variables }\n     *     f(a, c)          ;     f(a, c)   { call f recursively }\n     * e                    ; end\n     *\n     * P x                  ; program x\n     * b                    ; begin\n     *     f(a, b)          ;     f(a, b)\n     *     a = b            ;     a = b\n     * e.                   ; end.\n     * ```\n     * Try declaring one or two procedures, each with a formal\n     * parameter list. Then do some assignments, using combinations of global\n     * and formal parameters.\n     */\n    var passByValue = passingParameters.extend({\n\n        params: {},\n        numParams: 0,\n\n        // Initialize parameter table.\n        clearParams: function () {\n            this.params = {};\n            this.numParams = 0;\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.clearParams();                             // <--\n            this.getChar();\n            this.skipWhite();\n        },\n\n        // Parse and translate a procedure declaration.\n        doProc: function () {\n            var name;\n\n            this.match('p');\n            name = this.getName();\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.formalList();\n            this.fin();\n            this.symbolTable[name] = 'p';\n            this.postLabel(name);\n            this.beginBlock();\n            this.return();\n            this.clearParams();                             // <--\n        },\n\n        // Find the paramter number.\n        paramNumber: function (name) {\n            return this.params[name];\n        },\n\n        // See if an identifier is a parameter.\n        isParam: function (name) {\n            return !!this.params[name];\n        },\n\n        // Add a new Parameter to table.\n        addParam: function (name) {\n            if (this.isParam(name)) {\n                this.duplicate(name);\n            }\n\n            this.numParams += 1;\n            this.params[name] = this.numParams;\n        },\n\n        // Load a parameter to the primary register.\n        loadParam: function (num) {\n            var offset = 4 + 2 * (this.numParams - num);\n            this.emitLn('MOVE ' + offset + '(SP), D0');\n        },\n\n        // Store a parameter from the primary register.\n        storeParam: function (num) {\n            var offset = 4 + 2 * (this.numParams - num);\n            this.emitLn('MOVE D0, ' + offset + '(SP)');\n        },\n\n        // Push the primary register to the stack.\n        push: function () {\n            this.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Process a formal parameter.\n        formalParam: function () {\n            this.addParam(this.getName());                  // <--\n        },\n\n        // Get type of symbol.\n        typeOf: function (name) {\n            if (this.isParam(name)) {                       // <--\n                return 'f';                                 // <\n            }\n            return this.symbolTable[name];\n        },\n\n        // Decide if a statement is an assignment or procedure call.\n        assignOrProc: function () {\n            var name = this.getName();\n\n            switch (this.typeOf(name)) {\n            case ' ':\n                this.undefined(name);\n                break;\n            case 'v':   // fall through\n            case 'f':                                       // <--\n                this.assignment(name);\n                break;\n            case 'p':\n                this.callProc(name);\n                break;\n            default:\n                this.abort('Identifier ' + name + ' cannot be used here');\n            }\n        },\n\n        // Parse and translate an expression\n        // Vestigial version.\n        expression: function () {\n            var name = this.getName();\n            if (this.isParam(name)) {                           // <--\n                this.loadParam(this.paramNumber(name));     // <\n            } else {\n                this.loadVar(name);\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function (name) {\n            this.match('=');\n            this.expression();\n            if (this.isParam(name)) {                       // <--\n                this.storeParam(this.paramNumber(name));    // <\n            } else {\n                this.storeVar(name);\n            }\n        },\n\n        // Process an actual parameter.\n        param: function () {\n            this.expression();                              // <--\n            this.push();                                    // <\n        }\n    });\n\n    /**\n     * 13.10 What's wrong?\n     * -------------------\n     * The caller pushes each actual parameter onto the stack before it\n     * calls the procedure. The procedure USES that information, but it\n     * doesn’t change the stack pointer. That means that the stuff is still\n     * there when we return.\n     *\n     * Fortunately, that’s easily fixed. All we have to do is to increment\n     * the stack pointer when we’re finished.\n     * Should we do that in the calling program, or the called procedure?\n     * Here we let the caller clean up.\n     *\n     * Give it a try, for example\n     * ```\n     * v a                  ; var a\n     * p f(x, y)            ; procedure f(x, y)\n     * b                    ; begin\n     *     x = y            ;     x = y\n     * e                    ; end\n     * P x                  ; program x\n     * b                    ; begin\n     *     f(a, a)          ;     f(a, a)\n     * e.                   ; end.\n     * ```\n     */\n    var whatsWrong = passByValue.extend({\n\n        // Process the parameter list for a procedure call.\n        paramList: function () {\n            var num = 0;                            // <--\n            this.match('(');\n            if (this.look !== ')') {\n                this.param();\n                num += 1;                           // <\n                while (this.look === ',') {\n                    this.match(',');\n                    this.param();\n                    num += 1;                       // <\n                }\n            }\n            this.match(')');\n            return 2 * num;                         // <\n        },\n\n        // Call a procedure.\n        callProc: function (name) {\n            var num = this.paramList();             // <--\n            this.call(name);\n            this.cleanStack(num);                   // <\n        },\n\n        // Adjust the stack pointer upwards by num bytes.\n        cleanStack: function (num) {\n            if (num > 0) {\n                this.emitLn('ADD #' + num + ', SP');\n            }\n        }\n    });\n\n    /**\n     * ### 13.10.2 The next problem ###\n     * Consider a different example as simple as\n     * ```\n     * PROCEDURE FOO(A, B)\n     * BEGIN\n     *     A = A + B\n     * END\n     * ```\n     * The code generated by a simple-minded parser might be\n     * ```\n     * FOO: MOVE 6(SP), D0      ; Fetch A\n     *      MOVE D0, -(SP)      ; Push it\n     *      MOVE 4(SP), D0      ; Fetch B\n     *      ADD (SP)+, D0       ; Add A\n     *      MOVE D0, 6(SP)      ; Store A\n     *      RTS\n     * ```\n     * This would be wrong. When we push the first argument onto the stack,\n     * the offsets for the two formal parameters are no longer 4 and 6,\n     * but are 6 and 8. So the second fetch would fetch A again, not B.\n     *\n     * The 68000 instruction set `LINK` lets you declare a frame pointer.\n     * The complement, `UNLK`, restores the stack pointer and pops the old\n     * value back into the register.\n     * Using these two instructions, the previous code example becomes\n     * ```\n     * FOO: LINK A6, #0\n     *      MOVE 10(A6), D0     ; Fetch A\n     *      MOVE D0, -(SP)      ; Push it\n     *      MOVE 8(A6), D0      ; Fetch B\n     *      ADD (SP)+, D0       ; Add A\n     *      MOVE D0, 10(A6)     ; Store A\n     *      UNLK A6\n     *      RTS\n     * ```\n     *\n     * Give it a try, for example\n     * ```\n     * v n\n     * p f(a, b)            ; procedure f(a, b)\n     * b                    ; begin\n     *     a = b            ;     a = b\n     * e                    ; end\n     * P x                  ; program x\n     * b                    ; begin\n     *     f(n, n)          ;     f(n, n)\n     * e.                   ; end.\n     * ```\n     * There is still just one little small problem remaining\n     * > WE HAVE NO WAY TO RETURN RESULTS TO THE CALLER!\n     *\n     * To get over the problem, we need to look at the alternative protocol.\n     */\n    var theNextProblem = whatsWrong.extend({\n\n        // Write the prolog for a procedure.\n        procProlog: function (name) {\n            this.postLabel(name);\n            this.emitLn('LINK A6, #0');\n        },\n\n        // Write the epilog for a procedure.\n        procEpilog: function () {\n            this.emitLn('UNLK A6');\n            this.emitLn('RTS');\n        },\n\n        // Parse and translate a procedure declaration.\n        doProc: function () {\n            var name;\n\n            this.match('p');\n            name = this.getName();\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.formalList();\n            this.fin();\n            this.symbolTable[name] = 'p';\n            this.procProlog(name);                          // <--\n            this.beginBlock();\n            this.procEpilog();                              // <\n            this.clearParams();\n        },\n\n        // Load a parameter to the primary register.\n        loadParam: function (num) {\n            var offset = 8 + 2 * (this.numParams - num);    // <--\n            this.emitLn('MOVE ' + offset + '(A6), D0');     // <\n        },\n\n        // Store a parameter from the primary register.\n        storeParam: function (num) {\n            var offset = 8 + 2 * (this.numParams - num);    // <--\n            this.emitLn('MOVE D0, ' + offset + '(A6)');     // <\n        }\n    });\n\n    /**\n     * 13.11 Call by reference\n     * -----------------------\n     * This one is easy, now that we have the mechanisms already in place.\n     * We only have to make a few changes to the code generation.\n     * Instead of pushing a value onto the stack, we must push an address.\n     * The 68000 has an instruction `PEA` that does just that.\n     *\n     * we need the call `FOO(X, Y)` to be translated to:\n     * ```\n     * PEA X(PC)    ; Push the address of X\n     * PEA Y(PC)    ; Push Y the address of Y\n     * BSR FOO      ; Call FOO\n     * ```\n     * At the other end\n     * ```\n     * PROCEDURE FOO(A, B)\n     * BEGIN\n     *     A = A + B\n     * END\n     * ```\n     * The references to the formal parameters must be\n     * given one level of indirection\n     * ```\n     * FOO: LINK A6,#0\n     *      MOVE.L 12(A6), A0   ; Fetch the address of A\n     *      MOVE (A0), D0       ; Fetch A\n     *      MOVE D0, -(SP)      ; Push it\n     *      MOVE.L 8(A6), A0    ; Fetch the address of B\n     *      MOVE (A0), D0       ; Fetch B\n     *      ADD (SP)+, D0       ; Add A\n     *      MOVE.L 12(A6), A0   ; Fetch the address of A\n     *      MOVE D0, (A0)       ; Store A\n     *      UNLK A6\n     *      RTS\n     * ```\n     *\n     * Give it a try and see if it’s generating reasonable-looking code.\n     * For example\n     * ```\n     * v n                  ; var n\n     * p f(a, b)            ; procedure f(a, b)\n     * b                    ; begin\n     *     a = b            ;     a = b\n     * e                    ; end\n     * P x                  ; program x\n     * b                    ; begin\n     *     f(n, n)          ;     f(n, n)\n     * e.                   ; end.\n     * ```\n     * In the next version of TINY, we’ll use pass-by-reference for all\n     * parameters. KISS will support both methods.\n     */\n    var callByReference = theNextProblem.extend({\n\n        // Process an actual parameter.\n        param: function () {\n            this.emitLn('PEA ' + this.getName() + '(PC)');  // <--\n        },\n\n        // Load a parameter to the primary register.\n        loadParam: function (num) {\n            var offset = 8 + 4 * (this.numParams - num);    // <--\n            this.emitLn('MOVE.L ' + offset + '(A6), A0');   // <\n            this.emitLn('MOVE (A0), D0');                   // <\n        },\n\n        // Store a parameter from the primary register.\n        storeParam: function (num) {\n            var offset = 8 + 4 * (this.numParams - num);    // <--\n            this.emitLn('MOVE.L ' + offset + '(A6), A0');   // <\n            this.emitLn('MOVE D0, (A0)');                   // <\n        },\n\n        // Process the parameter list for a procedure call.\n        paramList: function () {\n            var num = 0;\n            this.match('(');\n            if (this.look !== ')') {\n                this.param();\n                num += 1;\n                while (this.look === ',') {\n                    this.match(',');\n                    this.param();\n                    num += 1;\n                }\n            }\n            this.match(')');\n            return 4 * num;                                 // <--\n        }\n    });\n\n    /**\n     * 13.12 Local variables\n     * ---------------------\n     * So far, we’ve said nothing about local variables, and our definition\n     * of procedures doesn’t allow for them.\n     *\n     * Here again we are faced with a choice: Static or dynamic storage?\n     * In those old FORTRAN programs, local variables were given static\n     * storage just like global ones. That is, each local variable got a\n     * name and allocated address, like any other variable, and was\n     * referenced by that name.\n     *\n     * That can be an advantage in some applications; however, that makes\n     * recursion impossible with static storage.\n     *\n     * The alternative is dynamic storage, in which storage is allocated on\n     * the stack just as for passed parameters.\n     *\n     * In BNF\n     * ```\n     * <procedure> ::= PROCEDURE <ident> '(' <param-list> ')'\n     *                 <loc-decls>\n     *                 <begin-block>\n     * <loc-decls> ::= (<loc-decl>)*\n     * <loc-decl>  ::= VAR <ident>\n     * ```\n     * For example\n     * ```\n     * v n                  ; var n\n     * p f(a, b)            ; procedure f(a, b)\n     * v i                  ; var i\n     * b                    ; begin\n     *     a = b            ;     a = b\n     *     b = i            ;     b = i\n     * e                    ; end\n     * P x                  ; program x\n     * b                    ; begin\n     *     f(n, n)          ;     f(n, n)\n     * e.                   ; end.\n     * ```\n     */\n    var localVariables = theNextProblem.extend({\n        base: 0,\n\n        // Load a parameter to the primary register.\n        loadParam: function (num) {\n            var offset = 8 + 2 * (this.base - num);         // <--\n            this.emitLn('MOVE ' + offset + '(A6), D0');\n        },\n\n        // Store a parameter from the primary register.\n        storeParam: function (num) {\n            var offset = 8 + 2 * (this.base - num);         // <--\n            this.emitLn('MOVE D0, ' + offset + '(A6)');\n        },\n\n        // Process the formal parameter list of a procedure.\n        formalList: function () {\n            this.match('(');\n            if (this.look !== ')') {\n                this.formalParam();\n                while (this.look === ',') {\n                    this.match(',');\n                    this.formalParam();\n                }\n            }\n            this.match(')');\n            this.fin();                                     // <--\n            this.base = this.numParams;                     // <\n            this.numParams += 4;                            // <\n        },\n\n        // Parse and translate a local data declaration.\n        locDecl: function () {\n            this.match('v');\n            this.addParam(this.getName());\n            this.fin();\n        },\n\n        // Parse and translate local declarations.\n        locDecls: function () {\n            var num = 0;\n            while (this.look === 'v') {\n                this.locDecl();\n                num += 1;\n            }\n            return num;\n        },\n\n        // Parse and translate a procedure declaration.\n        doProc: function () {\n            var name, k;                                    // <--\n\n            this.match('p');\n            name = this.getName();\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n\n            this.symbolTable[name] = 'p';\n            this.formalList();\n            k = this.locDecls();                            // <\n            this.procProlog(name, k);                       // <\n            this.beginBlock();\n            this.procEpilog();\n            this.clearParams();\n        },\n\n        // Write the prolog for a procedure.\n        procProlog: function (name, k) {                    // <--\n            this.postLabel(name);\n            this.emitLn('LINK A6, #' + (-2 * k));           // <\n        },\n\n    });\n\n    /**\n     * 13.13 Conclusion\n     * ----------------\n     * At this point you know how to compile procedure declarations and\n     * procedure calls, with parameters passed by reference and by value.\n     * You can also handle local variables.\n     */\n\n\n    return {\n\n        // 13.4\n        // <program>     ::= <declaration> BEGIN <block> END'.'\n        // <declaration> ::= (<data decl>)*\n        // <data decl>   ::= VAR <ident>\n        // <block>       ::= (<assignment>)*\n        // <assignment>  ::= <ident> = <expression>\n        // <expression>  ::= <ident>\n        aBasisForExperimentation: aBasisForExperimentation,\n\n        // 13.5.1\n        // <declaration> ::= (<data decl> | <procedure>)*\n        // <procedure>   ::= PROCEDURE <ident> <begin-block>\n        // <begin-block> ::= BEGIN <block> END\n        declaratingAProcedure: declaratingAProcedure,\n\n        // 13.5.2\n        // <declaration>  ::= <data decl> | <procedure> | <main program>\n        // <procedure>    ::= PROCEDURE <ident> <begin-block>\n        // <main program> ::= PROGRAM <ident> <begin-block>\n        theMainProgram: theMainProgram,\n\n        // 13.6\n        // <block>          ::= (<assign-or-proc>)*\n        // <assign-or-proc> ::= assignment> | <proc call>\n        // <proc call>      ::= <ident>\n        callingTheProcedure: callingTheProcedure,\n\n        // 13.7\n        // <procedure>  ::= PROCEDURE <ident> '(' <param-list> ')' <begin-block>\n        // <param-list> ::= <parameter> (',' <parameter>)* | null\n        // <proc call>  ::= <ident> '(' <param-list> ')'\n        passingParameters: passingParameters,\n\n        // 13.9\n        passByValue: passByValue,\n\n        // 13.10\n        whatsWrong: whatsWrong,\n\n        // 13.10.2\n        theNextProblem: theNextProblem,\n\n        // 13.11\n        callByReference: callByReference,\n\n        // 13.12\n        // <procedure> ::= PROCEDURE <ident> '(' <param-list> ')'\n        //                 <loc-decls>\n        //                 <begin-block>\n        // <loc-decls> ::= (<loc-decl>)*\n        // <loc-decl>  ::= VAR <ident>\n        localVariables: localVariables\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 14 Types\n * ========\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    /**\n     * 14.1 Introduction\n     * -----------------\n     * We’ll talk about how to deal with different data types.\n     * Here we will ONLY be talking about the simple, predefined types.\n     * We won’t even deal with arrays, pointers or strings,\n     * and we also will not discuss user-defined types.\n     *\n     * Handling variables of different types is straightforward enough.\n     * The complexity comes in when you add rules about conversion between\n     * types. In general, you can make the compiler as simple or as complex\n     * as you choose to make it.\n     */\n\n    /**\n     * 14.2 What's coming next?\n     * ------------------------\n     * The plan, in fact, is to have THREE compilers:\n     * One for a *single-character version* of **TINY** (to use for our\n     * experiments), one for **TINY** and one for **KISS**.\n     *\n     * The differences between TINY and KISS\n     *\n     * - **TINY** will support only two data types: The character and the\n     *   16-bit integer.\n     * - **TINY** will only have two control constructs, the `IF` and the\n     *   `WHILE`. **KISS** will support a very rich set of constructs,\n     *   including one we haven’t discussed here before, the `CASE`.\n     * - **KISS** will suport separately compilable modules.\n     */\n\n    /**\n     * 14.3 The symbol table\n     * ---------------------\n     * It should be apparent that, if we’re going to deal with variables of\n     * different types, we’re going to need someplace to record what those\n     * types are. The obvious vehicle for that is the symbol table.\n     *\n     * Press *Enter* in the console to see the output.\n     */\n    var theSymbolTable = object.extend({\n\n        // Constant declarations.\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations.\n        look: '',   // lookahead character\n        symbolTable: null,\n\n        // Read new character from input stream.\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error.\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt.\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected.\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Dump the symbol table.\n        dumpTable: function () {\n            for (var name in this.symbolTable) {\n                io.writeLn(name, ' ', this.symbolTable[name]);\n            }\n        },\n\n        // Recognize an alpha character.\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit.\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop.\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB || c === ';';\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                if (this.look === ';') {\n                    this.skipComment();\n                } else {\n                    this.getChar();\n                }\n            }\n        },\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== this.LF) {\n                this.getChar();\n            }\n            this.getChar();\n        },\n\n        // Skip over and end-of-line.\n        fin: function () {\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = this.look.toUpperCase();\n            this.getChar();\n            this.skipWhite();\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = this.look;\n            this.getChar();\n            this.skipWhite();\n            return num;\n        },\n\n        // Output a string with tab.\n        emit: function (str) {\n            io.write(this.TAB, str);\n        },\n\n        // Output a string with tab and newline.\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.getChar();\n            this.skipWhite();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.symbolTable = {\n                A: 'a',     // for\n                P: 'b',     // testing\n                X: 'c'      // purposes\n            };\n            this.dumpTable();\n        }\n    });\n\n    /**\n     * 14.4 Adding entries\n     * -------------------\n     * Writing to the table directly is pretty poor practice. What we need\n     * is a procedure to add entries to the table. At the same time,\n     * we’re going to need to test the table, to make sure that we aren’t\n     * redeclaring a variable that’s already in use.\n     *\n     * Press *Enter* again in the console to see the output.\n     */\n    var addingEntries = theSymbolTable.extend({\n\n        // Get type of symbol.\n        typeOf: function (name) {\n            return this.symbolTable[name];\n        },\n\n        // Look for symbol in table.\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Check for a duplicate variable name.\n        checkDup: function (name) {\n            if (this.inTable(name)) {\n                this.abort('Duplicate name ' + name);\n            }\n        },\n\n        // Add a new entry to symbol table.\n        addEntry: function (name, type) {\n            this.checkDup(name);\n            this.symbolTable[name] = type;\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.addEntry('A', 'a');    // for\n            this.addEntry('P', 'b');    // testing\n            this.addEntry('X', 'c');    // purposes\n            this.dumpTable();\n            this.addEntry('A', 'a');    // test for duplicate entry\n        }\n    });\n\n    /**\n     * 14.5 Allocating storage\n     * -----------------------\n     * We have already addressed the issue of declaring global variables,\n     * and the code generated for them. Let’s build a vestigial version.\n     * ```\n     * <program>     ::= <declaration> '.'\n     * <declaration> ::= (<data decl>)*\n     * <data decl>   ::= VAR <identifier>\n     * ```\n     * Try allocating a few variables, and note the resulting code\n     * generated. For example\n     * ```\n     * v a\n     * v p\n     * .\n     * ```\n     * Try declaring two variables with the same name, and verify that\n     * the parser catches the error.\n     */\n    var allocatingStorage = addingEntries.extend({\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            this.addEntry(name, 'v');\n            io.writeLn(name, ':', this.TAB, 'DC 0');\n        },\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== '.') {\n                switch (this.look) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized keyword ' + this.look);\n                }\n                this.fin();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.topDecls();                        // <--\n            this.dumpTable();\n        }\n    });\n\n    /**\n     * 14.6 Declaring types\n     * --------------------\n     * Allocating storage of different sizes is as easy as modifying\n     * procedure `topDecls` to recognize more than one keyword.\n     * ```\n     * <data decl> ::= <typename> <identifier>\n     * <typename>  ::= BYTE | WORD | LONG\n     * ```\n     *\n     * Give the thing a try. Use the single characters `b`, `w`, and `l`\n     * for the keywords.\n     * For example\n     * ```\n     * b a          ; BYTE A\n     * w b          ; WORD B\n     * l c          ; LONG C\n     * .\n     * ```\n     * You will see that in each case, we are allocating\n     * the proper storage size. Note from the dumped symbol table that\n     * the sizes are also recorded for later use.\n     */\n    var declaringTypes = allocatingStorage.extend({\n\n        // Generate code for allocation of a variable.\n        allocVar: function (name, type) {\n            io.writeLn(name, ':', this.TAB, 'DC.', type, ' 0');\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name, type) {              // <--\n            this.addEntry(name, type);              // <\n            this.allocVar(name, type);              // <\n        },\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            var type = this.getName();              // <--\n            this.alloc(this.getName(), type);       // <\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== '.') {\n                switch (this.look) {\n                case 'b':   // fall through         // <--\n                case 'w':   // fall through         // <\n                case 'l':                           // <\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized keyword ' + this.look);\n                }\n                this.fin();\n            }\n        }\n    });\n\n    /**\n     * 14.7 Assignments\n     * ----------------\n     * Now that we can declare variables of different sizes, it stands to\n     * reason that we ought to be able to do something with them.\n     * ```\n     * <program>     ::= <declaration> BEGIN <block> '.'\n     * <declaration> ::= (<data decl>)*\n     * <data decl>   ::= VAR <identifier>\n     * <block>       ::= (<assignment>)*\n     * <assignment>  ::= <ident> = <expression>\n     * <expression>  ::= <ident>\n     * ```\n     * Run this program. Try the input\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     a = a\n     *     a = b\n     *     a = c\n     *     b = a\n     *     b = b\n     *     b = c\n     *     c = a\n     *     c = b\n     *     c = c\n     * .\n     * ```\n     * There’s only one small little problem: The generated code is WRONG!\n     * we have run into here, early on, is the issue of\n     * **TYPE CONVERSION**, or **COERCION**.\n     */\n    var assignments = declaringTypes.extend({\n\n        // Load a variable to primary register.\n        loadVar: function (name, type) {\n            this.move(type, name + '(PC)', 'D0');\n        },\n\n        // Generate a move instruction.\n        move: function (size, source, dest) {\n            this.emitLn('MOVE.' + size + ' ' + source + ', ' + dest);\n        },\n\n        // Recognize a legal variable type.\n        isVarType: function (type) {\n            return type === 'B' || type === 'W' || type === 'L';\n        },\n\n        // Get a variable type from the symbol table.\n        varType: function (name) {\n            var type = this.typeOf(name);\n            if (!this.isVarType(type)) {\n                this.abort('Identifier ' + name + ' is not a variable');\n            }\n            return type;\n        },\n\n        // Load a variable to the primary register.\n        load: function (name) {\n            this.loadVar(name, this.varType(name));\n        },\n\n        // Store primary to variable.\n        storeVar: function (name, type) {\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.move(type, 'D0', '(A0)');\n        },\n\n        // Store a variable from the primary register.\n        store: function (name) {\n            this.storeVar(name, this.varType(name));\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.load(this.getName());\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.store(name);\n        },\n\n        // Parse and translate a block of statements.\n        block: function () {\n            while (this.look !== '.') {\n                this.skipWhite();\n                this.assignment();\n                this.fin();\n            }\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== 'B') {             // <--\n                switch (this.look) {\n                case 'b':   // fall through\n                case 'w':   // fall through\n                case 'l':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized keyword ' + this.look);\n                }\n                this.fin();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.topDecls();\n            this.match('B');\n            this.fin();\n            this.block();\n            this.dumpTable();\n        }\n    });\n\n    /**\n     * 14.8 The coward's way out\n     * -------------------------\n     * There is one super-simple way to solve the problem: simply promote\n     * every variable to a long integer when we load it!\n     *\n     * Run this program. Try again the input\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     a = a\n     *     a = b\n     *     a = c\n     *     b = a\n     *     b = b\n     *     b = c\n     *     c = a\n     *     c = b\n     *     c = c\n     * .\n     * ```\n     * With this version, a byte is treated as unsigned (as in Pascal and C)\n     * while a word is treated as signed.\n     */\n    var theCowardsWayOut = assignments.extend({\n\n        // Load a variable to primary register.\n        loadVar: function (name, type) {\n            if (type === 'B') {\n                this.emitLn('CLR.L D0');\n            }\n            this.move(type, name + '(PC)', 'D0');\n            if (type === 'W') {\n                this.emitLn('EXT.L D0');\n            }\n        }\n    });\n\n    /**\n     * 14.9 A more reasonable solution\n     * -------------------------------\n     * As we’ve seen, promoting every variable to long while it’s in memory\n     * solves the problem, but it can hardly be called efficient, and\n     * probably wouldn’t be acceptable even for those of us who claim\n     * be unconcerned about efficiency.\n     *\n     * All we have to do is to make the conversion at the other end...\n     * that is, we convert on the way OUT, when the data is stored,...\n     * rather than on the way in.\n     *\n     * Run the same test cases as before\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     a = a\n     *     a = b\n     *     a = c\n     *     b = a\n     *     b = b\n     *     b = c\n     *     c = a\n     *     c = b\n     *     c = c\n     * .\n     * ```\n     * You will see that all types of data are converted properly, and there\n     * are few if any wasted instructions. Only the byte-to-long conversion\n     * uses two instructions where one would do, and we could easily modify\n     * `convert` to handle this case, too.\n     */\n    var aMoreReasonableSolution = assignments.extend({\n\n        // Convert a data item from one type to another.\n        convert: function (source, dest) {\n            if (source !== dest) {\n                if (source === 'B') {\n                    this.emitLn('AND.W #$FF, D0');\n                }\n                if (dest === 'L') {\n                    this.emitLn('EXT.L D0');\n                }\n            }\n        },\n\n        // Load a variable to the primary register.\n        load: function (name) {\n            var type = this.varType(name);\n            this.loadVar(name, type);\n            return type;                                // <--\n        },\n\n        // Store a variable from the primary register.\n        store: function (name, type1) {                 // <--\n            var type2 = this.varType(name);             // <\n            this.convert(type1, type2);                 // <\n            this.storeVar(name, type2);                 // <\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            return this.load(this.getName());           // <--\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.store(name, this.expression());        // <--\n        }\n    });\n\n    /**\n     * 14.10 Literal arguments\n     * -----------------------\n     * We don’t have a proper form of a simple factor yet, because we don’t\n     * allow for loading literal constants, only variables. Let’s fix that\n     * now.\n     * ```\n     * <expression> ::= <ident> | <number>\n     * <number>     ::= (<digit>)+\n     * ```\n     *\n     * Give it a try, for example\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     a = 123\n     *     b = 12345\n     *     c = 123456789\n     * .\n     * ```\n     * You’ll see that it now works for either variables or constants as\n     * valid expressions.\n     *\n     * The code won’t be correct at this point, but the parser should\n     * handle expressions of arbitrary complexity.\n     */\n    var literalArguments = aMoreReasonableSolution.extend({\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = 0;\n            while (this.isDigit(this.look)) {\n                value = +this.look + 10 * value;\n                this.getChar();\n            }\n            this.skipWhite();\n            return value;\n        },\n\n        // Load a constant to the primary register.\n        loadNum: function (num) {\n            var type;\n\n            if (Math.abs(num) <= 127) {\n                type = 'B';\n            } else if (Math.abs(num) <= 32767) {\n                type = 'W';\n            } else {\n                type = 'L';\n            }\n            this.loadConst(num, type);\n            return type;\n        },\n\n        // Load a constant to the primary register.\n        loadConst: function (num, type) {\n            this.move(type, '#' + num, 'D0');\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            if (this.isAlpha(this.look)) {                      // <--\n                return this.load(this.getName());\n            } else if (this.isDigit(this.look)) {               // <\n                return this.loadNum(this.getNum());             // <\n            } else {                                            // <\n                this.abort('Invalid expression ' + this.look);  // <\n            }\n        }\n    });\n\n    /**\n     * 14.11 Additive expressions\n     * --------------------------\n     * We already have a pattern for dealing with more complex expressions.\n     * All we have to do is to make sure that all the procedures called\n     * by `expression` (`term`, `factor`, etc.) always return a type\n     * identifier.\n     * ```\n     * <expression> ::= <unary-op> <term> [<addop> <term>]*\n     * <term>       ::= <ident> | <number>\n     * ```\n     *\n     * Give it a try, for example\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     a = -b + 12\n     *     b = b + c\n     *     c = 25 + a + b\n     * .\n     * ```\n     * Try mixing up variables of different sizes, and also literals.\n     * As usual, it’s a good idea to try some erroneous expressions and\n     * see how the compiler handles them.\n     */\n    var additiveExpressions = literalArguments.extend({\n\n        // Parse and translate a term.\n        // Copy from previous `expression`.\n        term: function () {\n            if (this.isAlpha(this.look)) {\n                return this.load(this.getName());\n            } else if (this.isDigit(this.look)) {\n                return this.loadNum(this.getNum());\n            } else {\n                this.abort('Invalid expression ' + this.look);\n            }\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            var type;\n\n            if (this.isAddop(this.look)) {\n                type = this.unop();\n            } else {\n                type = this.term();\n            }\n            while (this.isAddop(this.look)) {\n                this.push(type);\n                switch (this.look) {\n                case '+':\n                    type = this.add(type);\n                    break;\n                case '-':\n                    type = this.subtract(type);\n                    break;\n                }\n            }\n            return type;\n        },\n\n        // Process a term with leading unary operator.\n        unop: function () {\n            this.clear();\n            return 'W';\n        },\n\n        // Clear the primary register.\n        clear: function () {\n            this.emitLn('CLR D0');\n        },\n\n        // Push primary onto stack.\n        push: function (size) {\n            this.move(size, 'D0', '-(SP)');\n        },\n\n        // Recognize and translate an add.\n        add: function (type1) {\n            this.match('+');\n            return this.popAdd(type1, this.term());\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function (type1) {\n            this.match('-');\n            return this.popSub(type1, this.term());\n        },\n\n        // Pop stack into secondary register.\n        pop: function (size) {\n            this.move(size, '(SP)+', 'D7');\n        },\n\n        // Convert a data item from one type to another.\n        convert: function (source, dest, register) {        // <--\n            if (source !== dest) {\n                if (source === 'B') {\n                    this.emitLn('AND.W #$FF, ' + register); // <\n                }\n                if (dest === 'L') {\n                    this.emitLn('EXT.L D0' + register);     // <\n                }\n            }\n        },\n\n        // Promote the size of a register value.\n        promote: function (type1, type2, register) {\n            var type = type1;\n\n            if (type1 !== type2) {\n                if (type1 === 'B' || type1 === 'W' && type2 === 'L') {\n                    this.convert(type1, type2, register);\n                    type = type2;\n                }\n            }\n            return type;\n        },\n\n        // Force both arguments to same type.\n        sameType: function (type1, type2) {\n            type1 = this.promote(type1, type2, 'D7');\n            return this.promote(type2, type1, 'D0');\n        },\n\n        // Generate code to add primary to the stack.\n        popAdd: function (type1, type2) {\n            this.pop(type1);\n            type2 = this.sameType(type1, type2);\n            this.genAdd(type2);\n            return type2;\n        },\n\n        // Generate code to subtract primary from the stack.\n        popSub: function (type1, type2) {\n            this.pop(type1);\n            type2 = this.sameType(type1, type2);\n            this.genSub(type2);\n            return type2;\n        },\n\n        // Add top of stack to primary.\n        genAdd: function (size) {\n            this.emitLn('ADD.' + size + ' D7, D0');\n        },\n\n        // Subtract primary from top of stack.\n        genSub: function (size) {\n            this.emitLn('SUB.' + size + ' D7, D0');\n            this.emitLn('NEG.' + size + ' D0');\n        }\n    });\n\n    /**\n     * 14.12 Why so many procedures?\n     * -----------------------------\n     * At this point, you may think I’ve pretty much gone off the deep\n     * end in terms of deeply nested procedures.\n     */\n\n    /**\n     * 14.13 Multiplicative expressions\n     * --------------------------------\n     * The procedure for dealing with multiplicative operators is much\n     * the same. In fact, at the first level, they are almost identical.\n     *\n     * ```\n     * <expression> ::= <unary-op> <term> [<addop> <term>]*\n     * <term>       ::= <factor> (<mulop> <factor>)*\n     * <factor>     ::= '(' expression ')' | <ident> | <number>\n     * ```\n     *\n     * Give it a try, for example\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     a = b * (a - 12) / (a * c)\n     * .\n     * ```\n     * The code won’t be correct at this point, but the parser should\n     * handle expressions of arbitrary complexity.\n     */\n    var multiplicativeExpressions = additiveExpressions.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            var type;\n\n            if (this.look === '(') {\n                this.match('(');\n                type = this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                type = this.load(this.getName());\n            } else if (this.isDigit(this.look)) {\n                type = this.loadNum(this.getNum());\n            } else {\n                this.abort('Invalid expression ' + this.look);\n            }\n            return type;\n        },\n\n        // Recognize and translate a multiply.\n        multiply: function (type1) {\n            this.match('*');\n            return this.popMul(type1, this.factor());\n        },\n\n        // Recognize and translate a divide.\n        divide: function (type1) {\n            this.match('/');\n            return this.popDiv(type1, this.factor());\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            var type = this.factor();\n\n            while (this.isMulop(this.look)) {\n                this.push(type);\n                switch (this.look) {\n                case '*':\n                    type = this.multiply(type);\n                    break;\n                case '/':\n                    type = this.divide(type);\n                    break;\n                }\n            }\n            return type;\n        },\n\n        // Generate code to multiply primary to the stack.\n        // A dummy version.\n        popMul: function (type1, type2) {\n            this.emitLn('; popMul(' + type1 + ', ' + type2 + ')');\n        },\n\n        // Generate code to devide primary from the stack.\n        // A dummy version.\n        popDiv: function (type1, type2) {\n            this.emitLn('; popDiv(' + type1 + ', ' + type2 + ')');\n        }\n    });\n\n    /**\n     * 14.14 Multiplication\n     * --------------------\n     * We need to figure out what it will take to generate the right code.\n     * This is where things begin to get a little sticky, because the\n     * rules are more complex.\n     *\n     * - The type of the product is typically not the same as that of\n     *   the two operands. For the product of two words, we get a\n     *   longword result.\n     * - The 68000 does not support a 32 x 32 multiply, so a call to a\n     *   software routine is needed. This routine will become part of\n     *   the run-time library.\n     * - It also does not support an 8 x 8 multiply, so all byte\n     *   operands must be promoted to words.\n     *\n     * The actions that we have to take are best shown as follows\n     * ```\n     *   \\ T1         B                 W                 L\n     *  T2 \\ --------------------------------------------------------\n     *      |  Convert D0 to W    Convert D0 to W    Convert D0 to L\n     *      |  Convert D7 to W\n     *  B   |        MULS               MULS            JSR MUL32\n     *      |     Result = W         Result = L         Result = L\n     * -----+--------------------------------------------------------\n     *      |  Convert D7 to W                       Convert D0 to L\n     *  W   |        MULS               MULS            JSR MUL32\n     *      |     Result = L         Result = L         Result = L\n     * -----+--------------------------------------------------------\n     *      |  Convert D7 to L    Convert D7 to L\n     *  L   |     JSR MUL32          JSR MUL32          JSR MUL32\n     *      |     Result = L         Result = L         Result = L\n     * ```\n     * There are three things to note\n     *\n     * 1. We assume a library routine MUL32 which performs a 32 x 32\n     *    multiply, leaving a `32-bit` (not `64-bit`) product.\n     * 2. The table is symmetric.\n     * 3. The product is ALWAYS a longword, except when both operands\n     *    are bytes.\n     *\n     * Go ahead and test the program, for example\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     a = b * (a - 12) / (a * c)\n     * .\n     * ```\n     * Try all combinations of operand sizes.\n     */\n    var multiplication = multiplicativeExpressions.extend({\n\n        // Multiply top of stack by primary (word).\n        genMult: function () {\n            this.emitLn('MULS D7, D0');\n        },\n\n        // Multiply top of stack by primary (long).\n        genLongMult: function () {\n            this.emitLn('JSR MUL32');\n        },\n\n        // Generate code to multiply primary by stack.\n        popMul: function (type1, type2) {\n            var type;\n\n            this.pop(type1);\n            type = this.sameType(type1, type2);\n            this.convert(type, 'W', 'D7');\n            this.convert(type, 'W', 'D0');\n            if (type === 'L') {\n                this.genLongMult();\n            } else {\n                this.genMult();\n            }\n            return type === 'B' ? 'W' : 'L';\n        }\n    });\n\n    /**\n     * 14.15 Division\n     * --------------\n     * The case of division is not nearly so symmetric.\n     * ```\n     *   \\ T1         B                 W                 L\n     *  T2 \\ --------------------------------------------------------\n     *      |  Convert D0 to W    Convert D0 to W    Convert D0 to L\n     *      |  Convert D7 to W    Convert D7 to L\n     *  B   |        DIVS               DIVS            JSR DIV32\n     *      |     Result = B         Result = W         Result = L\n     * -----+--------------------------------------------------------\n     *      |  Convert D7 to L    Convert D7 to L    Convert D0 to L\n     *  W   |        DIVS               DIVS            JSR DIV32\n     *      |     Result = B         Result = W         Result = L\n     * -----+--------------------------------------------------------\n     *      |  Convert D7 to L    Convert D7 to L\n     *  L   |     JSR DIV32          JSR DIV32          JSR DIV32\n     *      |     Result = B         Result = W         Result = L\n     * ```\n     * The implications are as follows\n     * - The type of the quotient must always be the same as that of\n     *   the dividend. It is independent of the divisor.\n     * - In spite of the fact that the CPU supports a longword dividend,\n     *   the hardware-provided instruction can only be trusted for byte\n     *   and word dividends. For longword dividends, we need another\n     *   library routine that can return a long result.\n     *\n     * Give it a whirl, for example\n     * ```\n     * b a           ; byte a\n     * w b           ; word b\n     * l c           ; long c\n     * B             ; begin\n     *     b = a / b\n     *     a = b * (a - 12) / (a * c)\n     * .\n     * ```\n     * At this point you should be able to generate code for any kind of\n     * arithmetic expression.\n     */\n    var division = multiplication.extend({\n\n        // Generate code to divide stack by the primary.\n        popDiv: function (type1, type2) {\n            this.pop(type1);\n            this.convert(type1, 'L', 'D7');\n            if (type1 === 'L' || type2 === 'L') {\n                this.convert(type2, 'L', 'D0');\n                this.genLongDiv();\n                return 'L';\n            } else {\n                this.convert(type2, 'W', 'D0');\n                this.genDiv();\n                return type1;\n            }\n        },\n\n        // Divide top of stack by primary (word).\n        genDiv: function () {\n            this.emitLn('DIVS D0, D7');\n            this.move('W', 'D7', 'D0');\n        },\n\n        // Divide top of stack by primary (long).\n        genLongDiv: function () {\n            this.emitLn('JSR DIV32');\n        }\n    });\n\n    /**\n     * 14.16 Beginning to wind down\n     * ----------------------------\n     * In the general case, we can think of every single operator as being\n     * handled by a different procedure, depending upon the type of the\n     * two operands. In Pascal, the equivalent operation would involve\n     * nested Case statements. Some of the called procedures could then be\n     * simple error routines, while others could effect whatever kind of\n     * conversion we need. As more types are added, the number of procedures\n     * goes up by a square-law rule, but that’s still not an unreasonably\n     * large number of procedures.\n     *\n     * What we’ve done here is to collapse such a jump table into far fewer\n     * procedures, simply by making use of symmetry and other simplifying\n     * rules.\n     */\n\n    /**\n     * 14.17 To coerce or not coerce\n     * -----------------------------\n     * It appears that TINY and KISS will probably NOT be strongly typed\n     * languages, because of the automatic mixing and conversion of about\n     * any type. Which brings up the next issue:\n     *\n     * Is this really what we want to do?\n     *\n     * The answer depends on what kind of language you want, and the way\n     * you’d like it to behave.\n     * What we have not addressed is the issue of when to allow and when\n     * to deny the use of operations involving different data types.\n     * In other words, what should be the SEMANTICS of our compiler?\n     * Do we want automatic type conversion for all cases, for some cases,\n     * or not at all?\n     *\n     * Let’s pause here to think about this a bit more. To do so, it will\n     * help to look at a bit of history.\n     *\n     * - **FORTRAN II** supported only two simple data types: Integer and\n     *   Real.\n     * - This was changed in **FORTRAN IV** to support \"mixed-mode\"\n     *   arithmetic.\n     * - **C** is also a weakly typed language.\n     * - The ultimate language in the direction of automatic type\n     *   conversion is **PL/I**.\n     * - **Pascal**, on the other hand, is a language which is \"strongly\n     *   typed\".\n     * - The ultimate in a strongly-typed language is **Ada**, which allows\n     *   NO implicit type conversions at all, and also will not allow\n     *   mixed-mode arithmetic.\n     *\n     * So what should we do in TINY and KISS? TINY will support only the\n     * types Char and Integer, and we’ll use the C trick of promoting Chars\n     * to Integers internally.\n     * KISS, on the other hand, will support the type Long.\n     * Should it support both signed and unsigned arithmetic?\n     */\n\n    /**\n     * 14.18 Conclusion\n     * ----------------\n     * That wraps up our session on type conversions.\n     */\n\n    return {\n\n        // 14.3\n        theSymbolTable: theSymbolTable,\n\n        // 14.4\n        addingEntries: addingEntries,\n\n        // 14.5\n        // <program>     ::= <declaration> '.'\n        // <declaration> ::= (<data decl>)*\n        // <data decl>   ::= VAR <identifier>\n        allocatingStorage: allocatingStorage,\n\n        // 14.6\n        // <data decl>   ::= <typename> <identifier>\n        // <typename>    ::= BYTE | WORD | LONG\n        declaringTypes: declaringTypes,\n\n        // 14.7\n        // <program>     ::= <declaration> BEGIN <block> '.'\n        // <declaration> ::= (<data decl>)*\n        // <data decl>   ::= VAR <identifier>\n        // <block>       ::= (<assignment>)*\n        // <assignment>  ::= <ident> = <expression>\n        // <expression>  ::= <ident>\n        assignments: assignments,\n\n        // 14.8\n        theCowardsWayOut: theCowardsWayOut,\n\n        // 14.9\n        aMoreReasonableSolution: aMoreReasonableSolution,\n\n        // 14.10\n        // <expression> ::= <ident> | <number>\n        // <number>     ::= (<digit>)+\n        literalArguments: literalArguments,\n\n        // 14.11\n        // <expression> ::= <unary-op> <term> [<addop> <term>]*\n        // <term>       ::= <ident> | <number>\n        additiveExpressions: additiveExpressions,\n\n        // 14.13\n        // <expression> ::= <unary-op> <term> [<addop> <term>]*\n        // <term>       ::= <factor> [<mulop> <factor>]*\n        // <factor>     ::= '(' expression ')' | <ident> | <number>\n        multiplicativeExpressions: multiplicativeExpressions,\n\n        // 14.14\n        multiplication: multiplication,\n\n        // 14.15\n        division: division\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 15 Back to The Future\n * =============================\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    /**\n     * 15.1 Introduction\n     * -----------------\n     *\n     * 15.2 New starts, old directions\n     * -------------------------------\n     *\n     * 15.3 Starting over?\n     * -------------------\n     */\n\n    /**\n     * 15.4 The input unit\n     * -------------------\n     */\n    //{\n    var input = {\n        look: '',   // lookahead character\n\n        // Read new character from input stream.\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Unit initialization.\n        init: function () {\n            this.getChar();\n        }\n    };\n\n    // A test program.\n    var theInputUnit = {\n\n        // Main program.\n        main: function () {\n            input.init();\n            io.writeLn(input.look);\n        }\n    };\n    //}\n\n    /**\n     * 15.5 The output unit\n     * --------------------\n     */\n    //{\n    var output = (function () {\n        var TAB = '\\t';\n\n        return {\n\n            // Emit an instruction.\n            emit: function (str) {\n                io.write(TAB, str);\n            },\n\n            // Emit an instruction, followed by a newline.\n            emitLn: function (str) {\n                this.emit(str);\n                io.writeLn();\n            }\n        };\n    }());\n\n    // A test program.\n    var theOutputUnit = {\n\n        // Main program.\n        main: function () {\n            io.writeLn('MAIN:');\n            output.emitLn('Hello, world!');\n        }\n    };\n    //}\n\n    /**\n     * 15.6 The error unit\n     * -------------------\n     *\n     */\n    //{\n    var errors = {\n\n        // Write error message and halt.\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n            io.halt();\n        },\n\n        // Write \"<something> expected\".\n        expected: function (str) {\n            this.error(str + ' expected');\n        }\n    };\n\n    // A test program.\n    var theErrorUnit = {\n\n        // Main program.\n        main: function () {\n            errors.expected('Integer');\n        }\n    };\n    //}\n\n    /**\n     * 15.7 Scanning and parsing\n     * -------------------------\n     * ```\n     * <variable>  ::= <alpha>\n     * <constant> ::= <digit>\n     * ```\n     * This code will recognize all sentences of the form\n     * ```\n     * x=0+y\n     * ```\n     * where *x* and *y* can be any single-character variable names, and\n     * *0* any digit. The code will reject all other sentences, and give\n     * a meaningful error message.\n     */\n    //{\n    var scanner1 = object.extend({\n\n        // Recognize an alpha character.\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a numeric character.\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addition operator.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a multiplication operator.\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Match one character.\n        match: function (x) {\n            if (input.look !== x) {\n                errors.expected('\"' + x + '\"');\n            }\n\n            input.getChar();\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(input.look)) {\n                errors.expected('Name');\n            }\n\n            var name = input.look.toUpperCase();\n            input.getChar();\n            return name;\n        },\n\n        // Get a number.\n        getNumber: function () {\n            if (!this.isDigit(input.look)) {\n                errors.expected('Integer');\n            }\n\n            var num = input.look;\n            input.getChar();\n            return num;\n        }\n    });\n\n    // A test program.\n    var scanningAndParsing = {\n\n        // Main program.\n        main: function () {\n            input.init();\n            io.write(scanner1.getName());\n            scanner1.match('=');\n            io.write(scanner1.getNumber());\n            scanner1.match('+');\n            io.writeLn(scanner1.getName());\n        }\n    };\n    //}\n\n    /**\n     * 15.8 The scanner unit\n     * ---------------------\n     * ```\n     * <variable>  ::= <alpha> [<alpha> | <digit>]+\n     * <constant> ::= [<digit>]+\n     * ```\n     * This code will recognize all sentences of the form\n     * ```\n     * variable1=123+variable2\n     * ```\n     */\n    //{\n    var scanner = scanner1.extend({\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(input.look)) {\n                errors.expected('Name');\n            }\n\n            var name = '';\n            while (this.isAlNum(input.look)) {\n                name += input.look.toUpperCase();\n                input.getChar();\n            }\n            return name;\n        },\n\n        // Get a number.\n        getNumber: function () {\n            if (!this.isDigit(input.look)) {\n                errors.expected('Integer');\n            }\n\n            var num = '';\n            while (this.isDigit(input.look)) {\n                num += input.look;\n                input.getChar();\n            }\n            return num;\n        }\n    });\n\n    // A test program.\n    var theScannerUnit = {\n\n        // Main program.\n        main: function () {\n            input.init();\n            io.write(scanner.getName());\n            scanner.match('=');\n            io.write(scanner.getNumber());\n            scanner.match('+');\n            io.writeLn(scanner.getName());\n        }\n    };\n    //}\n\n    /**\n     * 15.9 Decisions, decisions\n     * -------------------------\n     *\n     * ```\n     * <constant> ::= [<digit>]+\n     * ```\n     */\n    //{\n    var scannerD = scanner.extend({\n\n        // Get a number.\n        getNumber: function () {\n            if (!this.isDigit(input.look)) {\n                errors.expected('Integer');\n            }\n\n            var num = 0;                            // <--\n            while (this.isDigit(input.look)) {\n                num = +input.look + 10 * num;       // <\n                input.getChar();\n            }\n            return num;\n        }\n    });\n\n    var decisionsDecisions = {\n\n        // Main program.\n        main: function () {\n            input.init();\n            io.write(scannerD.getName());\n            scannerD.match('=');\n            io.write(scannerD.getNumber());\n            scannerD.match('+');\n            io.writeLn(scannerD.getName());\n        }\n    };\n    //}\n\n    /**\n     * 15.10 Parsing\n     * -------------\n     *\n     * ```\n     * <factor> ::= <variable> | <constant>\n     * ```\n     */\n    //{\n    var parser = object.extend({\n\n        // Parse and translate a factor.\n        factor: function () {\n            if (scannerD.isDigit(input.look)) {\n                codeGen.loadConstant(scannerD.getNumber());\n            } else if (scannerD.isAlpha(input.look)) {\n                codeGen.loadVariable(scannerD.getName());\n            } else {\n                errors.error('Unrecognized character ' + input.look);\n            }\n        }\n    });\n\n    var codeGen = object.extend({\n\n        // Load the primary register with a constant.\n        loadConstant: function (num) {\n            output.emitLn('MOVE #' + num + ', D0');\n        },\n\n        // Load a variable to the primary register.\n        loadVariable: function (name) {\n            output.emitLn('MOVE ' + name + '(PC), D0');\n        }\n    });\n\n    // A test program.\n    var parsing = {\n\n        // Main program.\n        main: function () {\n            input.init();\n            parser.factor();\n        }\n    };\n    //}\n\n    /**\n     * 15.11 References\n     * ----------------\n     * 1. Crenshaw, J. W., \"Object-Oriented Design of Assemblers and\n     *    Compilers\", *Proc. Software Development* ’91 Conference, Miller\n     *    Freeman, San Francisco, CA, Feb. 1991, pp. 143-155.\n     * 2. Crenshaw, J.W., \"A Perfect Marriage\", *Computer Language*,\n     *    **8**(6), Jun. 1991, pp. 44-55.\n     * 3. Crenshaw, J.W., \"Syntax-Driven Object-Oriented Design\", *Proc.\n     *    1991 Embedded Systems Conference*, Miller Freeman, San\n     *    Francisco, CA, Sep. 1991, pp. 45-60.\n     */\n\n\n    return {\n\n        // 15.4\n        theInputUnit: theInputUnit,\n\n        // 15.5\n        theOutputUnit: theOutputUnit,\n\n        // 15.6\n        theErrorUnit: theErrorUnit,\n\n        // 15.7\n        // <variable>  ::= <alpha>\n        // <constant> ::= <digit>\n        scanningAndParsing: scanningAndParsing,\n\n        // 15.8\n        // <variable>  ::= <alpha> [<alpha> | <digit>]+\n        // <constant> ::= [<digit>]+\n        theScannerUnit: theScannerUnit,\n\n        // 15.9\n        // <constant> ::= [<digit>]+\n        decisionsDecisions: decisionsDecisions,\n\n        // 15.10\n        // <factor> ::= <ident> | <number>\n        parsing: parsing,\n\n        // All units\n        input: input,\n        output: output,\n        errors: errors,\n        scanner: scannerD,\n        parser: parser,\n        codeGen: codeGen\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 16 Unit Construction\n * =============================\n */\n\ndefine(['./15-back-to-the-future'], function (backToTheFuture) {\n    'use strict';\n\n    var i = backToTheFuture.input,\n        o = backToTheFuture.output,\n        e = backToTheFuture.errors,\n        s = backToTheFuture.scanner;\n\n    /**\n     * 16.1 Introduction\n     * -----------------\n     * In chapter 15, we ended up with the following units\n     *\n     * - Input\n     * - Output\n     * - Errors\n     * - Scanner\n     * - Parser\n     * - CodeGen\n     */\n\n    /**\n     * 16.2 Just like classical\n     * ------------------------\n     * We got here by applying several principles that writers of\n     * commercial compilers seldom have the luxury of using. These are:\n     *\n     * - **The KISS philosophy** Never do things the hard way without a\n     *   reason.\n     * - **Lazy coding** Never put off until tomorrow what you can put of\n     *   forever (with credits to P.J. Plauger)\n     * - **Skepticism** Stubborn refusal to do something just because\n     *   that’s the way it’s always been done.\n     * - **Acceptance of inefficient code**\n     * - **Rejection of arbitrary constraints**\n     */\n\n    /**\n     * 16.3 Fleshing out the parser\n     * ----------------------------\n     *\n     * ```\n     * <signed-factor> ::= [<addop>] <factor>\n     * ```\n     */\n    //{\n    // parser\n    var p3 = backToTheFuture.parser.extend({\n\n        // Parse and translate a factor with optional sign.\n        signedFactor: function () {\n            var sign = i.look;\n\n            if (s.isAddop(i.look)) {\n                i.getChar();\n            }\n            this.factor();\n            if (sign === '-') {\n                c3.negate();\n            }\n        }\n    });\n\n    // codeGen\n    var c3 = backToTheFuture.codeGen.extend({\n\n        // Negate primary.\n        negate: function () {\n            o.emitLn('NEG D0');\n        }\n    });\n\n    // A test program.\n    var fleshingOutTheParser = {\n\n        // Main program.\n        main: function () {\n            i.init();\n            p3.signedFactor();\n        }\n    };\n    //}\n\n    /**\n     * 16.4 Terms and expressions\n     * --------------------------\n     * ```\n     * <expression>  ::= <signed-term> (<addop> <term>)*\n     * <signed-term> ::= [<addop>] <term>\n     * <term>        ::= <factor> (<mulop> <factor>)*\n     * <factor>      ::= '(' <expression> ')' | <variable> | <constant>\n     * ```\n     * At this point, your \"compiler\" should be able to handle any legal\n     * expression you can throw at it.\n     * Better yet, it should reject all illegal ones!\n     */\n    //{\n    // parser\n    var p4 = p3.extend({\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.signedTerm();\n            while (s.isAddop(i.look)) {\n                switch (i.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a factor with optional sign.\n        // Copy from `signedFactor`.\n        signedTerm: function () {\n            var sign = i.look;\n\n            if (s.isAddop(i.look)) {\n                i.getChar();\n            }\n            this.term();                            // <--\n            if (sign === '-') {\n                c4.negate();\n            }\n        },\n\n        // Parse and translate a term.\n        term: function () {\n            this.factor();\n            while (s.isMulop(i.look)) {\n                switch (i.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a factor.\n        factor: function () {\n            if (i.look === '(') {\n                s.match('(');\n                this.expression();\n                s.match(')');\n            } else if (s.isDigit(i.look)) {\n                c4.loadConstant(s.getNumber());\n            } else if (s.isAlpha(i.look)) {\n                c4.loadVariable(s.getName());\n            } else {\n                e.error('Unrecognized character ' + i.look);\n            }\n        },\n\n        // Parse and translate an addition operation.\n        add: function () {\n            s.match('+');\n            c4.push();\n            this.term();\n            c4.popAdd();\n        },\n\n        // Parse and translate a subtraction operation.\n        subtract: function () {\n            s.match('-');\n            c4.push();\n            this.term();\n            c4.popSub();\n        },\n\n        // Parse and translate an multiplication operation.\n        multiply: function () {\n            s.match('*');\n            c4.push();\n            this.factor();\n            c4.popMul();\n        },\n\n        // Parse and translate an addition operation.\n        divide: function () {\n            s.match('/');\n            c4.push();\n            this.factor();\n            c4.popDiv();\n        }\n    });\n\n    // codeGen\n    var c4 = c3.extend({\n\n        // Push primary to stack.\n        push: function () {\n            o.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Add TOS to primary.\n        popAdd: function () {\n            o.emitLn('ADD (SP)+, D0');\n        },\n\n        // Subtract TOS from primary.\n        popSub: function () {\n            o.emitLn('SUB (SP)+, D0');\n            this.negate();\n        },\n\n        // Multiply TOS by primary.\n        popMul: function () {\n            o.emitLn('MULS (SP)+, D0');\n        },\n\n        // Divide primary by TOS.\n        popDiv: function () {\n            o.emitLn('MOVE (SP)+, D7');\n            o.emitLn('EXT.L D7');\n            o.emitLn('DIVS D0, D7');\n            o.emitLn('MOVE D7, D0');\n        }\n    });\n\n    // A test program.\n    var termsAndExpressions = {\n\n        // Main program.\n        main: function () {\n            i.init();\n            p4.expression();\n        }\n    };\n    //}\n\n    /**\n     * 16.5 Assignments\n     * ----------------\n     * ```\n     * <assignment> ::= <variable> '=' <expression>\n     * ```\n     */\n    //{\n    // parser\n    var p5 = p4.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = s.getName();\n            s.match('=');\n            this.expression();\n            c5.storeVariable(name);\n        }\n    });\n\n    // codeGen\n    var c5 = c4.extend({\n\n        // Store the primary register to a variable.\n        storeVariable: function (name) {\n            o.emitLn('LEA ' + name + '(PC), A0');\n            o.emitLn('MOVE D0, (A0)');\n        }\n    });\n\n    // A test program.\n    var assignments = {\n\n        // Main program.\n        main: function () {\n            i.init();\n            p5.assignment();\n        }\n    };\n    //}\n\n    /**\n     * 16.6 Booleans\n     * -------------\n     * ```\n     * <expression>  ::= <signed-term> (<addop> <term>)*\n     * ```\n     */\n    //{\n    // scanner\n    var s6 = s.extend({\n\n        // Recognize an addition operator.\n        isAddop: function (c) {\n            return c === '+' || c === '-' ||\n                   c === '|' || c === '~';                  // <--\n        }\n    });\n\n    // parser\n    var p6 = p5.extend({\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.signedTerm();\n            while (s6.isAddop(i.look)) {\n                switch (i.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                case '|':                                   // <--\n                    this.or();\n                    break;\n                case '~':                                   // <\n                    this.xor();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean or operation.\n        or: function () {\n            s6.match('|');\n            c6.push();\n            this.term();\n            c6.popOr();\n        },\n\n        // Parse and translate a boolean xor operation.\n        xor: function () {\n            s6.match('~');\n            c6.push();\n            this.term();\n            c6.popXor();\n        }\n    });\n\n    // codeGen\n    var c6 = c5.extend({\n\n        // Or TOS with primary.\n        popOr: function () {\n            o.emitLn('OR (SP)+, D0');\n        },\n\n        // Exclusive-or TOS with primary.\n        popXor: function () {\n            o.emitLn('EOR (SP)+, D0');\n        }\n    });\n\n    // A test program.\n    var booleans = {\n\n        // Main program.\n        main: function () {\n            i.init();\n            p6.assignment();\n        }\n    };\n    //}\n\n    /**\n     * 16.7 Boolean \"AND\"\n     * ------------------\n     * If you’re keeping score on the precedence levels, this definition\n     * puts the `!` at the top of the heap. The levels become:\n     *\n     * 1. `!` (not)\n     * 2. `-` (unary)\n     * 3. `*` (multiply), `/` (divide), `&` (and)\n     * 4. `+` (add), `-` (substract), `|` (or), `~` (exclusive or)\n     *\n     * and the BNF is\n     * ```\n     * <assignment>  ::= <variable> '=' <expression>\n     * <expression>  ::= <signed-term> (<addop> <term>)*\n     * <signed-term> ::= [<addop>] <term>\n     * <term>        ::= <not-factor> (<mulop> <not-factor>)*\n     * <not-factor>  ::= ['!'] <factor>\n     * <factor>      ::= <variable> | <constant> | '(' <expression> ')'\n     * ```\n     * Try this now, with a few simple cases. In fact, try that exclusive\n     * or example\n     * ```\n     * x=a&!b|!a&b\n     * ```\n     */\n    //{\n    // scanner\n    var s7 = s6.extend({\n\n        // Recognize a multiplication operator.\n        isMulop: function (c) {\n            return c === '*' || c === '/' || c === '&';     // <--\n        }\n    });\n\n    // parser\n    var p7 = p6.extend({\n\n        // Parse and translate a term.\n        term: function () {\n            this.notFactor();                               // <--\n            while (s7.isMulop(i.look)) {\n                switch (i.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                case '&':                                   // <\n                    this.and();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate an multiplication operation.\n        multiply: function () {\n            s.match('*');\n            c4.push();\n            this.notFactor();                               // <--\n            c4.popMul();\n        },\n\n        // Parse and translate an addition operation.\n        divide: function () {\n            s.match('/');\n            c4.push();\n            this.notFactor();                               // <--\n            c4.popDiv();\n        },\n\n        // Parse and translate a boolean and operation.\n        and: function () {\n            s7.match('&');\n            c7.push();\n            this.notFactor();                               // <--\n            c7.popAnd();\n        },\n\n        // Parse and translate a factor with optional \"Not\".\n        notFactor: function () {\n            if (i.look === '!') {\n                s7.match('!');\n                this.factor();\n                c7.notIt();\n            } else {\n                this.factor();\n            }\n        }\n    });\n\n    // codeGen\n    var c7 = c6.extend({\n\n        // And TOS with primary.\n        popAnd: function () {\n            o.emitLn('AND (SP)+, D0');\n        },\n\n        // Bitwise not primary.\n        notIt: function () {\n            o.emitLn('EOR #-1, D0');\n        }\n    });\n\n    // A test program.\n    var booleanAnd = {\n\n        // Main program.\n        main: function () {\n            i.init();\n            p7.assignment();\n        }\n    };\n    //}\n\n\n    return {\n\n        // 16.3\n        // <signed-factor> ::= [<addop>] <factor>\n        fleshingOutTheParser: fleshingOutTheParser,\n\n        // 16.4\n        // <expression>  ::= <signed-term> (<addop> <term>)*\n        // <signed-term> ::= [<addop>] <term>\n        // <term>        ::= <factor> (<mulop> <factor>)*\n        // <factor>      ::= '(' <expression> ')' | <variable> | <constant>\n        termsAndExpressions: termsAndExpressions,\n\n        // 16.5\n        // <assignment> ::= <variable> '=' <expression>\n        assignments: assignments,\n\n        // 16.6\n        // <expression>  ::= <signed-term> (<addop> <term>)*\n        booleans: booleans,\n\n        // 16.7\n        // <term>       ::= <not-factor> (<mulop> <not-factor>)*\n        // <not-factor> ::= ['!'] <factor>\n        // <factor>     ::= <variable> | <constant> | '(' <expression> ')'\n        booleanAnd: booleanAnd\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 2 Expression Parsing\n * ============================\n */\n\ndefine(['./1.2-cradle'], function (cradle) {\n    'use strict';\n\n    /**\n     * 2.1 Getting started\n     * -------------------\n     * The purpose of this chapter is for us to learn how to\n     * *parse* and *translate* **mathematical expressions**.\n     * An expression is the right-hand side of an equation, as in\n     * ```\n     * x = 2 * y + 3 / (4 * z)\n     * ```\n     */\n\n    /**\n     * 2.2 Single digits\n     * -----------------\n     * Let's start with the absolutely most simple case we can think of,\n     * an expression consisting of a single digit.\n     *\n     * **In Backus-Naur Form (BNF)**\n     * ```\n     * <expression> ::= <number>\n     * <number> ::= <digit>\n     * ```\n     * Try any single-digit number, or any other character.\n     */\n    var singleDigits = cradle.extend({\n\n        // Parse and translate a math expression.\n        expression: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.expression();\n        }\n    });\n\n    /**\n     * 2.3 Binary expressions\n     * ----------------------\n     * Suppose we want to handle expressions of the form:\n     * `1 + 2` or `4 - 3`\n     *\n     * or in general,\n     * **in Backus-Naur Form (BNF)**\n     * ```\n     * <expression> ::= <term> +/- <term>\n     * <term> ::= <number>\n     * ```\n     * We want to do is have procedure `term` do what `expression` was\n     * doing before. So just RENAME procedure `expression` as `term`,\n     * and make a new version of `expression`.\n     *\n     * Try any combination of two single digits, separated by a `+`\n     * or a `-`. Try some expressions with deliberate errors in them.\n     * Does the parser catch the errors?\n     *\n     * At this point we have a parser that can recognize the sum or\n     * difference of two digits. Howerver, run the program with\n     * the single input line `1`. Didn't work, did it?\n     */\n    var binaryExpressions = singleDigits.extend({\n\n        // Parse and translate a math term.\n        term: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Recognize and translate an add.\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD D1, D0');\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB D1, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.term();\n            this.emitLn('MOVE D0, D1');\n            switch (this.look) {\n            case '+':\n                this.add();\n                break;\n            case '-':\n                this.subtract();\n                break;\n            default:\n                this.expected('Addop');\n            }\n        }\n    });\n\n    /**\n     * 2.4 General expressions\n     * -----------------------\n     * In the REAL world, an *expression* can consist of one\n     * or more *terms*, separated by *addops* (`+` or `-`).\n     *\n     * **In BNF**\n     * ```\n     * <expression> ::= <term> [<addop> <term>]*\n     * ```\n     * This version handles any number of terms,\n     * and it only cost us two extra lines of code.\n     */\n    var generalExpressions = binaryExpressions.extend({\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {  // <--\n                this.emitLn('MOVE D0, D1');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }                                                 // <--\n        }\n    });\n\n    /**\n     * 2.5 Using the stack\n     * -------------------\n     * To deal with complexity, such as\n     * ```\n     * 1 + (2 - (3 + (4 - 5)))\n     * ```\n     * we're going to run out of registers fast!\n     * The solution is to use the stack instead.\n     *\n     * For M68000 assembler langugage, a push is written as `-(SP)`,\n     * and a pop, `(SP)+`.\n     */\n    var usingTheStack = binaryExpressions.extend({\n\n        // Recognize and translate an add.\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD (SP)+, D0');    // <-- pop from stack\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB (SP)+, D0');    // <-- pop from stack\n            this.emitLn('NEG D0');\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');   // <-- push to stack\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.6 Multiplication and division\n     * -------------------------------\n     * There is an implied operator *PRECEDENCE*, or *hierarchy*,\n     * associated with expressions, so that in an expression like\n     * ```\n     * 2 + 3 * 4\n     * ```\n     * we know that we’re supposed to multiply FIRST, then add.\n     * (See why we needed the stack?)\n     *\n     * We can define a term as a PRODUCT of FACTORS.\n     * What is a factor? For now, it’s what a term used to be.\n     *\n     * **In BNF**\n     * ```\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * <factor> ::= <number>\n     * ```\n     * Notice the symmetry: a term has the same form as an expression.\n     */\n    var multiplicationAndDivision = usingTheStack.extend({\n\n        // Parse and translate a math factor.\n        // Same as term() in 2.3 binary expressions.\n        factor: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Recognize and translate a multiply.\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Recognize and translate a divide.\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');  // exchange, swap(D0, D1)\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.factor();\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.7 Parentheses\n     * ---------------\n     * Parentheses are a mechanism to force a desired operator precedence.\n     * For example:\n     * ```\n     * 2 * (3 + 4)\n     * ```\n     * They give us a mechanism for defining expressions of\n     * any degree of complexity.\n     * ```\n     * (1 + 2) / ((3 + 4) + (5 - 6))\n     * ```\n     * **In BNF**\n     * ```\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     * This is where the recursion comes in.\n     * An expression can contain a factor which contains another\n     * expression which contains a factor, etc., ad infinitum.\n     *\n     * As usual, try and make sure that it correctly parses legal sentences,\n     * and flags illegal ones with an error message.\n     */\n    var parentheses = multiplicationAndDivision.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        }\n    });\n\n    /**\n     * 2.8 Unary minus\n     * ---------------\n     * Try e.g. `-1`, `+3` or `-(3-2)`, etc. It doesn't work, does it?\n     *\n     * **Solution**\n     *\n     * The  easiest (although not necessarily the best) way is\n     * to stick an imaginary leading zero in front of expressions\n     * of this type, so that `-3` becomes `0 - 3`.\n     *\n     * **In BNF**\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * ```\n     * At this point we’re just about finished with the structure\n     * of our expression parser.\n     */\n    var unaryMinus = parentheses.extend({\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            if (this.isAddop(this.look)) {  // <--\n                this.emitLn('CLR D0');      // <--\n            } else {\n                this.term();\n            }\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.9 A word about optimization\n     * -----------------------------\n     */\n\n\n    return {\n\n        // 2.2\n        // <expression> ::= <number>\n        singleDigits: singleDigits,\n\n        // 2.3\n        // <term> ::= <number>\n        // <expression> ::= <term> <addop> <term>\n        binaryExpressions: binaryExpressions,\n\n        // 2.4\n        // <expression> ::= <term> [<addop> <term>]*\n        generalExpressions: generalExpressions,\n\n        // 2.5\n        // Use the stack instead of registers to serve for complexity\n        usingTheStack: usingTheStack,\n\n        // 2.6\n        // <factor> ::= <number>\n        // <term> ::= <factor> [<mulop> <factor>]*\n        multiplicationAndDivision: multiplicationAndDivision,\n\n        // 2.7\n        // <factor> ::= <number> | (<expression>)\n        parentheses: parentheses,\n\n        // 2.8\n        // <expression> ::= <unary op> <term> [<addop> <term>]*\n        unaryMinus: unaryMinus\n    };\n\n    /**\n     * Final results of this chapter in BNF\n     * -------------------------------------\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     */\n});\n\r\n/*global define*/\n\n/**\n * Chapter 3 More Expressions\n * ==========================\n */\n\ndefine(['./2-expression-parsing'], function (expressionParsing) {\n    'use strict';\n\n    /**\n     * 3.1 Introduction\n     * ----------------\n     * In this chapter we will extend what we've done to deal with\n     *\n     * - variables\n     * - function calls\n     * - assignment statements\n     * - multi-character tokens (variables/numbers)\n     * - white space\n     */\n\n    /**\n     * 3.2 Variables\n     * --------------\n     * Most expressions that we see in practice involve variables, such as\n     * ```\n     * b * b + 4 * a * c\n     * ```\n     * It probably won’t come as too much of a surprise that a variable is\n     * just another kind of factor.\n     *\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>) | <variable>\n     * ```\n     * The format for a load in 68000 is\n     * ```\n     * MOVE X(PC), D0\n     * ```\n     * where `X` is the variable name.\n     */\n    var variables = expressionParsing.unaryMinus.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {   // <--\n                this.emitLn('MOVE ' + this.getName() + '(PC), D0');\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        }\n    });\n\n    /**\n     * 3.3 Functions\n     * -------------\n     * We don’t yet have a mechanism for declaring types,\n     * so let’s use the **C rule** for now. We also don’t have a mechanism\n     * to deal with parameters, we can only handle empty lists,\n     * so for now our function calls will have the form `x()`.\n     *\n     * **In BNF**\n     * ```\n     * <identifier> ::= <variable> | <function>\n     * <factor> ::= <number> | (<expression>) | <identifier>\n     * ```\n     * Test this version. Does it parse all legal expressions?\n     * Does it correctly flag badly formed ones?\n     *\n     * Before going to the next section, try the input line\n     * ```\n     * 1 + 2 <space> 3 + 4\n     * ```\n     * See how the space was treated as a terminator?\n     */\n    var functions = variables.extend({\n\n        // Parse and translate an identifier.\n        identifier: function () {\n            var name = this.getName();\n            if (this.look === '(') {    // <-- <function>\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + name);\n            } else {                    // <-- <variable>\n                this.emitLn('MOVE ' + name + '(PC), D0');\n            }\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();  // <--\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ', D0');\n            }\n        }\n    });\n\n    /**\n     * 3.4 More on error handling\n     * --------------------------\n     * *Assert that the expression should end with an end-of-line.*\n     * Try again\n     * ```\n     * 1 + 2 <space> 3 + 4\n     * ```\n     * Verify that it does what it’s supposed to.\n     */\n    var moreOnErrorHandling = functions.extend({\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.expression();\n            if (this.look !== this.LF) {   // <--\n                this.expected('Newline');   // <--\n            }\n        }\n    });\n\n    /**\n     * 3.5 Assignment statements\n     * --------------------------\n     * Expressions *USUALLY* (but not always) appear in assignment statements.\n     *\n     * **In BNF**\n     * ```\n     * <assignment> ::= <ident> = <expression>\n     * ```\n     * Note again that the code below exactly parallels the BNF.\n     * And notice further that the error checking was\n     * painless, handled by `getName` and `match`.\n     */\n    var assignmentStatements = moreOnErrorHandling.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.assignment();  // <--\n            if (this.look !== this.LF) {\n                this.expected('Newline');\n            }\n        }\n    });\n\n    /**\n     * 3.6 Multi-character tokens\n     * --------------------------\n     * We can handle the multi-character tokens that we need by\n     * very slight and very local modifications to `getName`  and `getNum`.\n     */\n    var multiCharacterTokens = assignmentStatements.extend({\n\n        // Recognize and alphanumeric.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var token = '';                     // <--\n            while (this.isAlNum(this.look)) {   // <--\n                token += this.look.toUpperCase(); // <--\n                this.getChar();\n            }\n            return token;                       // <--\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = '';                     // <--\n            while (this.isDigit(this.look)) {   // <--\n                value += this.look;             // <--\n                this.getChar();\n            }\n            return value;                       // <--\n        }\n    });\n\n    /**\n     * 3.7 White space\n     * ----------------\n     * The key to easy handling of white space is to come up with a simple\n     * rule for how the parser should treat the input stream,\n     * and to enforce that rule everywhere.\n     *\n     * Fortunately, because we’ve been careful to use `getName`, `getNum`,\n     * and `match` for most of our input processing, it is only those\n     * three routines (plus `Init`) that we need to modify.\n     */\n    var whiteSpace = multiCharacterTokens.extend({\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();   // <--\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var token = '';\n            while (this.isAlNum(this.look)) {\n                token += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return token;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = '';\n            while (this.isDigit(this.look)) {\n                value += this.look;\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return value;\n        },\n\n        // Initialize.\n        init: function () {\n            this.getChar();\n            this.skipWhite();   // <--\n        }\n    });\n\n\n    return {\n\n        // 3.2\n        // <factor> ::= <number> | (<expression>) | <variable>\n        variables: variables,\n\n        // 3.3\n        // <identifier> ::= <variable> | <function>\n        // <factor> ::= <number> | (<expression>) | <identifier>\n        functions: functions,\n\n        // 3.4\n        // Assert that the expression should end with an end-of-line\n        moreOnErrorHandling: moreOnErrorHandling,\n\n        // 3.5\n        // <assignment> ::= <ident> = <expression>\n        assignmentStatements: assignmentStatements,\n\n        // 3.6\n        multiCharacterTokens: multiCharacterTokens,\n\n        // 3.7\n        whiteSpace: whiteSpace\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 4 Interpreters\n * ======================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 4.1 Introduction\n     * ----------------\n     * The approach we’ve been taking in this whole series is called\n     * \"syntax-driven translation.\"\n     *\n     * - In our *compiler* so far, every action involves\n     *   emitting object code, to be executed later at execution time.\n     * - In an *interpreter*, every action involves\n     *   something to be done immediately.\n     *\n     * the *layout* ... the *structure* ... of the parser doesn’t change.\n     * It’s only the **actions** that change.\n     */\n\n    /**\n     * 4.2 The interpreters\n     * --------------------\n     * We're going to start over with a bare cradle and build up\n     * the translator all over again.\n     */\n\n    /**\n     * ### 4.2.1 Single digits ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <number>\n     * <number> ::= <digit>\n     * ```\n     * The first thing we need to do is to change function `getNum`,\n     * which up till now has always returned a character (or string).\n     * Now, it’s better for it to return an integer.\n     */\n    var singleDigits = cradle.extend({\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = +this.look;   // <-- convert string to number\n            this.getChar();\n            return num;\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            return this.getNum();   // <--\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            io.writeLn(this.expression());  // <--\n        }\n    });\n\n    /**\n     * ### 4.2.2 Addition and subtraction ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <number> [<addop> <number>]*\n     * ```\n     */\n    var additionAndSubtraction = singleDigits.extend({\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            var value = this.isAddop(this.look) ? 0 : this.getNum();\n\n            while (this.isAddop(this.look)) {\n                switch (this.look) {\n                case '+':\n                    this.match('+');\n                    value += this.getNum();\n                    break;\n                case '-':\n                    this.match('-');\n                    value -= this.getNum();\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.3 Multiplication and division ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <term> [<addop> <term>]*\n     * <term> ::= <number> [<mulop> <number>]*\n     * ```\n     */\n    var multiplicationAndDivision = additionAndSubtraction.extend({\n\n        // Parse and translate a math term.\n        term: function () {\n            var value = this.getNum();\n\n            while (this.look === '*' || this.look === '/') {\n                switch (this.look) {\n                case '*':\n                    this.match('*');\n                    value *= this.getNum();\n                    break;\n                case '/':\n                    this.match('/');\n                    value = Math.floor(value / this.getNum());\n                    break;\n                }\n            }\n            return value;\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            var value = this.isAddop(this.look) ? 0 : this.term(); // <--\n\n            while (this.isAddop(this.look)) {\n                switch (this.look) {\n                case '+':\n                    this.match('+');\n                    value += this.term();   // <--\n                    break;\n                case '-':\n                    this.match('-');\n                    value -= this.term();   // <--\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.4 Multi-digits number ###\n     * Extend `getNum` to support multi-digit number.\n     */\n    var multiDigitsNumber = multiplicationAndDivision.extend({\n\n        // Get a Number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = 0;\n            while (this.isDigit(this.look)) {       // <--\n                value = 10 * value + (+this.look);  // <--\n                this.getChar();\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.5 Factor ###\n     * The next step is to install function `factor`,\n     * complete with parenthesized expressions.\n     *\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>)\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * ```\n     * We’re rapidly closing in on a useful interpreter.\n     */\n    var factor = multiDigitsNumber.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            var value;\n\n            if (this.look === '(') {\n                this.match('(');\n                value = this.expression();  // <--\n                this.match(')');\n            } else {\n                value = this.getNum();      // <--\n            }\n            return value;\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            var value = this.factor();      // <--\n\n            while (this.look === '*' || this.look === '/') {\n                switch (this.look) {\n                case '*':\n                    this.match('*');\n                    value *= this.factor(); // <--\n                    break;\n                case '/':\n                    this.match('/');\n                    value = Math.floor(value / this.factor());  // <--\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * 4.3 A little philosophy\n     * -----------------------\n     * Where did the precedence stacks go?\n     *\n     * The *hierarchy levels* and the *parse trees* are there, but they’re\n     * hidden within the structure of the parser, and they’re taken\n     * care of by the order with which the various procedures are called.\n     */\n\n    /**\n     * ### 4.3.1 Variables ###\n     * The next step is to add variable names.\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>) | <variable>\n     * ```\n     * We need a storage mechanism for these variables.\n     */\n    var variables = factor.extend({\n\n        table: {},\n\n        // Initialize the variable Area.\n        initTable: function () {\n            var charCodeOfA = 'A'.charCodeAt(0),\n                i,\n                name;\n\n            for (i = 0; i < 26; i += 1) {\n                name = String.fromCharCode(charCodeOfA + i);\n                this.table[name] = 0;\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.initTable();   // <--\n            this.getChar();\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            var value;\n            if (this.look === '(') {\n                this.match('(');\n                value = this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {    // <--\n                value = this.table[this.getName()];  // <--\n            } else {\n                value = this.getNum();\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.3.2 Assignment statements ###\n     * We need to do an assignment statement so we can put something\n     * INTO the variables.\n     *\n     * **In BNF notation**\n     * ```\n     * <assignment> ::= <identifier> = <expression>\n     * ```\n     */\n    var assignmentStatements = variables.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.table[name] = this.expression();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.assignment();  // <--\n            io.writeLn('A = ' + this.table.A); // <-- for testing purposes\n        }\n    });\n\n    /**\n     * ### 4.3.3 Multiple statements ###\n     * We’re going to want to handle multiple statements.\n     * This merely means putting a loop around the call to Assignment.\n     * So let’s do that now. But what should be the loop exit criterion?\n     *\n     * Try nultiple statements in the editor, however,\n     * we have no way to read data in or write it out.\n     */\n    var multipleStatements = assignmentStatements.extend({\n\n        // Recognize and skip over a newline.\n        newLine: function () {\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {                            // <--\n                this.assignment();\n                this.newLine();             // <--\n            } while (this.look !== '.');    // <--\n        }\n    });\n\n    /**\n     * ### 4.3.4 I/O routines ###\n     * Use `?` to stand for a read statement (not implemented here),\n     * and `!` for a write.\n     *\n     * We have now completed a real, working interpreter.\n     * Try the following code, for example, in the editor.\n     * ```\n     * a=10*5\n     * b=20-5*2\n     * c=2*a-a/b\n     * !c\n     * .\n     * ```\n     */\n    var ioRoutines = multipleStatements.extend({\n\n        // Input routine.\n        input: function () {\n            this.match('?');\n            // Not implemented.\n        },\n\n        // Output routine.\n        output: function () {\n            this.match('!');\n            io.writeLn(this.table[this.getName()]);\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                switch (this.look) {\n                case '?':\n                    this.input();\n                    break;\n                case '!':\n                    this.output();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.newLine();\n            } while (this.look !== '.');\n        }\n    });\n\n\n    return {\n\n        // 4.2.1\n        // <expression> ::= <number>\n        singleDigits: singleDigits,\n\n        // 4.2.2\n        // <expression> ::= <number> [<addop> <number>]*\n        additionAndSubtraction: additionAndSubtraction,\n\n        // 4.2.3\n        // <term> ::= <number> [<mulop> <number>]*\n        // <expression> ::= <term> [<addop> <term>]*\n        multiplicationAndDivision: multiplicationAndDivision,\n\n        // 4.2.4\n        // Multi-digits number\n        multiDigitsNumber: multiDigitsNumber,\n\n        // 4.2.5\n        // <factor> ::= <number> | (<expression>)\n        // <term> ::= <factor> [<mulop> <factor>]*\n        factor: factor,\n\n        // 4.3.1\n        // <factor> ::= <number> | (<expression>) | <variable>\n        variables: variables,\n\n        // 4.3.2\n        assignmentStatements: assignmentStatements,\n\n        // 4.3.3\n        multipleStatements: multipleStatements,\n\n        // 4.3.4\n        ioRoutines: ioRoutines\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 5 Control Constructs\n * ============================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 5.1 Introduction\n     * ----------------\n     * We’ll take off on a new and exciting tangent:\n     * that of parsing and translating control constructs such as\n     * IF statements.\n     */\n\n    /**\n     * 5.2 The plan\n     * -------------\n     * We’ll be starting over again with a bare cradle.\n     * We’ll also be retaining the concept of single-character tokens.\n     * This means that the \"code\" will look a little funny,\n     * with `i` for `IF`, `w` for `WHILE`, etc.\n     */\n\n    /**\n     * ### 5.2.1 One statement ###\n     * We will use an anonymous statement `other` to take the place of\n     * the non- control statements and serve as a place-holder for them.\n     *\n     * **In BNF notation**\n     * ```\n     * <program> ::= <statement>\n     * <statement> ::= <other>\n     * ```\n     * Code example: `a`\n     */\n    var oneStatement = cradle.extend({\n\n        // Recognize and translate an \"Other\".\n        // an anonymous statement serve as a place-holder.\n        other: function () {\n            this.emitLn('<block ' + this.getName() + '>');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.other();   // <--\n        }\n    });\n\n    /**\n     * ### 5.2.2 More than one statement ###\n     * The first thing we need is the ability to deal with more than\n     * one statement.\n     *\n     * **In BNF notation**\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * ```\n     * Code example: `abce`\n     */\n    var moreThanOneStatement = oneStatement.extend({\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e') {\n                this.other();\n            }\n        },\n\n        // Parse and translate a program.\n        doProgram: function () {\n            this.block();\n            if (this.look !== 'e') {\n                this.expected('End');\n            }\n            this.emitLn('END');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.doProgram();   // <--\n        }\n    });\n\n    /**\n     * 5.3 Some groundwork\n     * --------------------\n     * We’re going to need some more procedures to help us deal with\n     * branches.\n     *\n     * Prepare two routines\n     *\n     * - `newLabel` to generate label `Lnn`,\n     *    where `nn` is a label number starting from zero.\n     * - `postLabel` to output the labels at the proper place.\n     */\n    var someGroundwork = moreThanOneStatement.extend({\n\n        lCount: 0,  // label counter\n\n        // Generate a unique label.\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output.\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        // Initialize.\n        init: function () {\n            this.lCount = 0;    // <--\n            this.getChar();\n        }\n    });\n\n    /**\n     * 5.4 The IF statement\n     * ---------------------\n     * All of the constructs we’ll be dealing with here involve transfer\n     * of control, which at the assembler-language level means conditional\n     * and/or unconditional branches.\n     *\n     * **In BNF**\n     * ```\n     * <if> ::= IF <condition> <block> ENDIF\n     * ```\n     * Output should be:\n     * ```\n     *      <condition>\n     *      BEQ L1      # branch if false to L1\n     *      <block>\n     * L1:\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * IF\n     * <condition>    { condition();\n     *                  L = newLabel();\n     *                  emit(Branch False to L); }\n     * <block>\n     * ENDIF          { postLabel(L) }\n     * -------------------------------------------\n     * ```\n     * On the **68000** the condition flags are set\n     * whenever any data is moved or calculated.\n     * If the data is a 0000 (corresponding to a false condition),\n     * the zero flag will be set.\n     * The code for **branch on zero** is `BEQ`.\n     * So for our purposes here,\n     * ```\n     * BEQ <=> Branch if false\n     * BNE <=> Branch if true\n     * ```\n     * It’s the nature of the beast that most of the branches we see\n     * will be `BEQ`’s... we’ll be branching *AROUND* the code\n     * that’s supposed to be executed when the condition is true.\n     *\n     * For the **implementation**, as usual,\n     * we will be using our single-character approach,\n     * with the character `i` for `IF`, and `e` for `ENDIF`\n     * (as well as `END` ... that dual nature causes no confusion).\n     *\n     * Code example: `aibece` and nested IF's `aibicedefe`.\n     *\n     * The later stands for\n     * ```\n     * <block A>                a\n     * IF <condition>           i\n     *     <block B>            b\n     *     IF <condition>       i\n     *         <block C>        c\n     *     ENDIF                e\n     *     <block D>            d\n     * ENDIF                    e\n     * <block F>                f\n     * END                      e\n     * ```\n     * It’s starting to look real, eh?\n     */\n    var theIfStatement = someGroundwork.extend({\n\n        // Parse and translate a boolean condition.\n        // This version is a dummy.\n        condition: function () {\n            this.emitLn('<condition>');\n        },\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label;\n\n            this.match('i');\n            label = this.newLabel();\n            this.condition();\n            this.emitLn('BEQ ' + label);\n            this.block();\n            this.match('e');\n            this.postLabel(label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e') {\n                switch (this.look) {\n                case 'i':           // <--\n                    this.doIf();    // <--\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 5.4.2 Add the ELSE clause ###\n     * To add the ELSE clause to IF, the tricky part arises simply\n     * because there is an optional part, which doesn’t occur in\n     * the other constructs.\n     *\n     * **BNF of the `IF` statement**\n     * ```\n     * <if> ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * ```\n     * **Output** should be\n     * ```\n     *      <condition>\n     *      BEQ L1      # branch if false\n     *      <block>\n     *      BRA L2      # unconditional branch\n     * L1:\n     *      <block>\n     * L2:\n     * ```\n     * This leads us to the following **syntax-directed translation**\n     * ```\n     *   SYNTAX           ACTIONS\n     *   -------------------------------------------\n     *   IF\n     *   <condition>    { condition();\n     *                    L1 = newLabel();\n     *                    L2 = newLabel();\n     *                    emit(BEQ L1); }\n     *   <block>\n     *   ELSE           { emit(BRA L2);\n     *                    postLabel(L1); }\n     *   <block>\n     *   ENDIF          { postLabel(L2); }\n     *   -------------------------------------------\n     * ```\n     * Try something like `aiblcede`\n     *\n     * which stands for\n     * ```\n     * <block A>            a\n     * IF <condition>       i\n     *     <block B>        b\n     * ELSE                 l\n     *     <block C>        c\n     * ENDIF                e\n     * <block D>            d\n     * END                  e\n     * ```\n     * Did it work? Now, just to be sure we haven’t broken the ELSE-less\n     * case, try `aibece`.\n     * Now try some nested IF’s. Try anything you like, including some\n     * badly formed statements.\n     */\n    var addTheElseClause = theIfStatement.extend({\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.match('i');\n            this.condition();\n            label1 = label2 = this.newLabel();  // <--\n            this.emitLn('BEQ ' + label1);\n            this.block();\n\n            if (this.look === 'l') {            // <-- optional ELSE clause\n                this.match('l');\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);   // <-- unconditional branch\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.match('e');\n            this.postLabel(label2);             // <--\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {  // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.5 The WHILE statement\n     * ------------------------\n     * **BNF of the `WHILE` statement**\n     * ```\n     * <while> ::= WHILE <condition> <block> ENDWHILE\n     * ```\n     * Output should be:\n     * ```\n     * L1:  <condition>\n     *      BEQ L2\n     *      <block>\n     *      BRA L1\n     * L2:\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * WHILE          { L1 = newLabel;\n     *                  postLabel(L1) }\n     * <condition>    { emit(BEQ L2) }\n     * <block>\n     * ENDWHILE       { emit(BRA L1);\n     *                  PostLabel(L2) }\n     * ```\n     * OK, try the **new program**, such as `awbece` which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     * ENDWHILE                 e\n     * <block C>                c\n     * END                      e\n     * ```\n     * Note that this time, the `<condition>` code is *INSIDE* the upper label,\n     * which is just where we wanted it.\n     *\n     * Try some **nested loops**, for example `awbwcedefe` which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     *     WHILE <condition>    w\n     *         <block C>        c\n     *     ENDWHILE             e\n     *     <block D>            d\n     * ENDWHILE                 e\n     * <block F>                f\n     * END                      e\n     * ```\n     * Try some **loops within `IF`’s**, for example`aibwcedlfege`\n     * which stands for\n     * ```\n     * <block A>                a\n     * IF <condition>           i\n     *     <block B>            b\n     *     WHILE <condition>    w\n     *         <block C>        c\n     *     ENDWHILE             e\n     *     <block D>            d\n     * ELSE                     l\n     *     <block F>            f\n     * ENDIF                    e\n     * <block G>                g\n     * END                      e\n     * ```\n     * and some **`IF`’s within loops**, for example `awbicedefe`\n     * which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     *     IF <condition>       i\n     *         <block C>        c\n     *     ENDIF                e\n     *     <block D>            d\n     * ENDWHILE                 e\n     * <block F>                f\n     * END                      e\n     * ```\n     * If you get a bit confused as to what you should type,\n     * don’t be discouraged: you write *bugs* in other languages, too,\n     * don’t you?\n     */\n    var theWhileStatement = addTheElseClause.extend({\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.match('w');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.condition();\n            this.emitLn('BEQ ' + label2);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':           // <--\n                    this.doWhile();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.6 The LOOP statement\n     * -----------------------\n     * **BNF** of the `LOOP` statement\n     * ```\n     * <loop> ::= LOOP <block> ENDLOOP\n     * ```\n     * **Output** should be:\n     * ```\n     * L1:\n     *      <block>\n     *      BRA L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * LOOP           { L = newLabel();\n     *                  postLabel(L) }\n     * <block>\n     * ENDLOOP        { emit(BRA L) }\n     * ```\n     * Code example `apbece`, which stands for\n     * ```\n     * <block A>                a\n     * LOOP                     p\n     *     <block B>            b\n     * ENDLOOP                  e\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    var theLoopStatement = theWhileStatement.extend({\n\n        // Parse and translate a LOOP statement.\n        doLoop: function () {\n            var label;\n\n            this.match('p');\n            label = this.newLabel();\n            this.postLabel(label);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':           // <--\n                    this.doLoop();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.7 The Repeat-Until statement\n     * -------------------------------\n     * **BNF of the `REPEAT` statement**\n     * ```\n     * <repeat> ::= REPEAT <block> UNTIL <conditon>\n     * ```\n     * **Output** should be:\n     * ```\n     * L1:\n     *      <block>\n     *      <condition>\n     *      BEQ L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX              ACTIONS\n     * -------------------------------------------\n     * REPEAT         { L = newLabel();\n     *                  postLabel(L) }\n     * <block>\n     * UNTIL\n     * <condition>    { emit(BEQ L) }\n     * ```\n     * Code example `arbuce`\n     * which stands for\n     * ```\n     * <block A>                a\n     * REPEAT                   r\n     *     <block B>            b\n     * UNTIL                    u\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    var theRepeatUntilStatement = theLoopStatement.extend({\n\n        // Parse and translate a REPEAT statement.\n        doRepeat: function () {\n            var label;\n\n            this.match('r');\n            label = this.newLabel();\n            this.postLabel(label);\n            this.block();\n            this.match('u');\n            this.condition();\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {    // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':                   // <--\n                    this.doRepeat();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.8 The FOR loop\n     * -----------------\n     * The FOR loop is a very handy one to have around, but it’s a bear\n     * to translate, because it’s hard to implement in assembler language.\n     *\n     * **BNF of the `FOR` statement**\n     * ```\n     * <for> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * ```\n     * It gets simpler if you adopt the point of view that the construct\n     * is equivalent to:\n     * ```\n     *  <ident> = <expr1>\n     *  temp = <expr2>\n     *  WHILE <ident> <= temp\n     *      <block>\n     *  ENDWHILE\n     * ```\n     * The translated code came out like this:\n     * ```\n     *      <ident>               get name of loop counter\n     *      <expr1>               get initial value\n     *      LEA <ident>(PC), A0   address the loop counter\n     *      SUBQ #1, D0           predecrement it\n     *      MOVE D0, (A0)         save it\n     *      <expr2>               get upper limit\n     *      MOVE D0, -(SP)        save it on stack\n     * L1:\n     *      LEA <ident>(PC), A0   address loop counter\n     *      MOVE (A0), D0         fetch it to D0\n     *      ADDQ #1, D0           bump the counter\n     *      MOVE D0, (A0)         save new value\n     *      CMP (SP), D0          check for range\n     *      BLE L2                skip out if D0 > (SP)\n     *      <block>\n     *      BRA L1                loop for next pass\n     * L2:\n     *      ADDQ #2, SP           clean up the stack\n     * ```\n     * Code example `afi=bece`\n     * which stands for\n     * ```\n     * <block A>                    a\n     * FOR I = <expr1> TO <expr2>   f i =\n     *     <block B>                b\n     * ENDFOR                       e\n     * <block C>                    c\n     * END                          e\n     * ```\n     * Well, it DOES generate a lot of code, doesn’t it?\n     * But at least it’s the RIGHT code.\n     */\n    var theForLoop = theRepeatUntilStatement.extend({\n\n        // Parse and translate an expression.\n        // This version is a dummy.\n        expression: function () {\n            this.emitLn('<expression>');\n        },\n\n        // Parse and translate a FOR statement.\n        doFor: function () {\n            var label1, label2, name;\n\n            this.match('f');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n            this.expression();\n            this.emitLn('MOVE D0, -(SP)');\n\n            this.postLabel(label1);\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE (A0), D0');\n            this.emitLn('ADDQ #1, D0');\n            this.emitLn('MOVE D0, (A0)');\n            this.emitLn('CMP (SP), D0');\n            this.emitLn('BGT ' + label2);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n            this.emitLn('ADDQ #2, SP');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':           // <--\n                    this.doFor();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.9 The DO statement\n     * ----------------------\n     * This is a simpler version of the FOR loop.\n     * If all we need is a counting loop to make us go through something\n     * a specified number of times, but don’t need access to the counter\n     * itself.\n     *\n     * **BNF of the `DO` statement**\n     * ```\n     * <do> ::= DO <expr> <block> ENDDO\n     * ```\n     * translated code:\n     * ```\n     *      <expression>\n     *      SUBQ #1, D0\n     * L1:\n     *      MOVE D0, -(SP)      # push D0\n     *      <block>\n     *      MOVE (SP)+, D0      # pop D0\n     *      DBRA D0, L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * DO             { emit(SUBQ #1,D0);\n     *                  L = newLabel();\n     *                  postLabel(L)\n     *                  emit(MOVE D0,-(SP)) }\n     * <block>\n     * ENDDO          { emit(MOVE (SP)+,D0);\n     *                  emit(DBRA D0,L) }\n     * ```\n     * Code example `adbece`\n     * which stands for\n     * ```\n     * <block A>                a\n     * DO                       d\n     *     <block B>            b\n     * ENDDO                    e\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    var theDoStatement = theForLoop.extend({\n\n        // Parse and translate a DO statement.\n        doDo: function () {\n            var label;\n\n            this.match('d');\n            label = this.newLabel();\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.postLabel(label);\n            this.emitLn('MOVE D0, -(SP)');\n            this.block();\n            this.match('e');\n            this.emitLn('MOVE (SP)+, D0');\n            this.emitLn('DBRA D0, ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':           // <--\n                    this.doDo();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.10 The BREAK statement\n     * -------------------------\n     * On the face of it a BREAK seems really tricky.\n     * The secret is to note that every BREAK statement has to occur\n     * within a block ... there’s no place else for it to be.\n     * So all we have to do is to pass into Block the exit address of\n     * the innermost loop.\n     * Then it can pass the address to the routine that translates\n     * the break instruction.\n     *\n     * **In BNF**\n     * ```\n     * <break> ::= BREAK\n     * ```\n     * Code example `apcibegehe`\n     * which stands for\n     * ```\n     * <block A>                a\n     * LOOP                     p\n     *     <block C>            c\n     *     IF <condition>       i\n     *         BREAK            b\n     *     ENDIF                e\n     *     <block G>            g\n     * ENDLOOP                  e\n     * <block H>                h\n     * END                      e\n     * ```\n     */\n    var theBreakStatement = theDoStatement.extend({\n\n        // Recognize and translate an IF constructor.\n        doIf: function (label) {                // <--\n            var label1, label2;\n\n            this.match('i');\n            this.condition();\n            label1 = label2 = this.newLabel();\n            this.emitLn('BEQ ' + label1);\n            this.block(label);                  // <--\n\n            if (this.look === 'l') {\n                this.match('l');\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);\n                this.postLabel(label1);\n                this.block(label);              // <--\n            }\n\n            this.match('e');\n            this.postLabel(label2);\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.match('w');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.condition();\n            this.emitLn('BEQ ' + label2);\n            this.block(label2);                 // <--\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n        },\n\n        // Parse and translate a LOOP statement.\n        doLoop: function () {\n            var label1,\n                label2;                         // <--\n\n            this.match('p');\n            label1 = this.newLabel();\n            label2 = this.newLabel();           // <--\n            this.postLabel(label1);\n            this.block(label2);                 // <--\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);             // <--\n        },\n\n        // Parse and translate a REPEAT statement.\n        doRepeat: function () {\n            var label1,\n                label2;                         // <--\n\n            this.match('r');\n            label1 = this.newLabel();\n            label2 = this.newLabel();           // <--\n            this.postLabel(label1);\n            this.block(label2);                 // <--\n            this.match('u');\n            this.condition();\n            this.emitLn('BEQ ' + label1);\n            this.postLabel(label2);             // <--\n        },\n\n        // Parse and translate a FOR statement.\n        doFor: function () {\n            var label1, label2, name;\n\n            this.match('f');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n            this.expression();\n            this.emitLn('MOVE D0, -(SP)');\n\n            this.postLabel(label1);\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE (A0), D0');\n            this.emitLn('ADDQ #1, D0');\n            this.emitLn('MOVE D0,(A0)');\n            this.emitLn('CMP (SP), D0');\n            this.emitLn('BGT ' + label2);\n            this.block(label2);                 // <--\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n            this.emitLn('ADDQ #2, SP');\n        },\n\n        // Parse and translate a DO statement.\n        doDo: function () {\n            var label1,\n                label2;                         // <--\n\n            this.match('d');\n            label1 = this.newLabel();\n            label2 = this.newLabel();           // <--\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.postLabel(label1);\n            this.emitLn('MOVE D0, -(SP)');\n            this.block(label2);                 // <--\n            this.emitLn('MOVE (SP)+, D0');\n            this.emitLn('DBRA D0, ' + label1);\n            this.emitLn('SUBQ #2, SP');         // <--\n            this.postLabel(label2);             // <--\n            this.emitLn('ADDQ #2, SP');         // <--\n        },\n\n        // Recognize and translate a break.\n        doBreak: function (label) {\n            if (!label) {\n                this.abort('No loop to break from');\n            }\n\n            this.match('b');\n            this.emitLn('BRA ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function (label) {               // <--\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf(label);           // <--\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':\n                    this.doDo();\n                    break;\n                case 'b':                       // <--\n                    this.doBreak(label);        // <--\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n\n    /**\n     * 5.11 Conclusion\n     * ----------------\n     * Final results of this chapter in BNF\n     *\n     * **Program**\n     * ```\n     * <program>          ::= <block> END\n     * <block>            ::= [<statement>]*\n     * <statement>        ::= <if> | <while> | <loop> | <repeat> |\n     *                        <for> | <do> | <break> |\n     *                        <other>\n     * ```\n     * **Control statements**\n     * ```\n     * <if statement>     ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <while statement>  ::= WHILE <condition> <block> ENDWHILE\n     * <loop statement>   ::= LOOP <block> ENDLOOP\n     * <repeat statement> ::= REPEAT <block> UNTIL <conditon>\n     * <for statement>    ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * <do statement>     ::= DO <expression> <block> ENDDO\n     * <break statement>  ::= BREAK\n     * ```\n     * Next we’ll address *Boolean expressions*, so we can get rid of\n     * the dummy version of `<condition>` that we’ve used here.\n     */\n\n    return {\n\n        // 5.2.1\n        // <program> ::= <statement>\n        oneStatement: oneStatement,\n\n        // 5.2.2\n        // <program> ::= <block> END\n        // <block> ::= [<statement>]*\n        moreThanOneStatement: moreThanOneStatement,\n\n        // 5.3\n        someGroundwork: someGroundwork,\n\n        // 5.4\n        // <if> ::= IF <condition> <block> ENDIF\n        theIfStatement: theIfStatement,\n\n        // 5.4.2\n        // <if> ::= IF <condition> <block> [ELSE <block>] ENDIF\n        addTheElseClause: addTheElseClause,\n\n        // 5.5\n        // <while> ::= WHILE <condition> <block> ENDWHILE\n        theWhileStatement: theWhileStatement,\n\n        // 5.6\n        // <loop> ::= LOOP <block> ENDLOOP\n        theLoopStatement: theLoopStatement,\n\n        // 5.7\n        // <repeat> ::= REPEAT <block> UNTIL <conditon>\n        theRepeatUntilStatement: theRepeatUntilStatement,\n\n        // 5.8\n        // <for> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n        theForLoop: theForLoop,\n\n        // 5.9\n        // <do> ::= DO <expression> <block> ENDDO\n        theDoStatement: theDoStatement,\n\n        // 5.10\n        theBreakStatement: theBreakStatement\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 6 Boolean Expressions\n * =============================\n */\n\ndefine([\n    './1.2-cradle',\n    './3-more-expressions',\n    './5-control-constructs',\n    'jquery',\n    'io'\n], function (cradle, moreExpressions, controlConstructs, $, io) {\n    'use strict';\n\n    /**\n     * 6.1 Introduction\n     * -----------------\n     * In the previous chapter we did not address the issue of the branch\n     * **condition**. One of the things we’ll do in this session is to plug\n     * that hole by expanding condition into a true parser/translator.\n     */\n\n    /**\n     * 6.2 The plan\n     * -------------\n     * The approach we did in previous chapters is called coding without\n     * specs, and it’s usually frowned upon. We could get away with it\n     * before because the rules of arithmetic are pretty well established...\n     * The same is true for branches and loops.\n     *\n     * But the ways in which programming languages implement logic vary\n     * quite a bit from language to language. So before we begin serious\n     * coding, we’d better first make up our minds what it is we want.\n     *\n     * The way to do that is at the level of the BNF syntax rules\n     * (the GRAMMAR).\n     */\n\n    /**\n     * 6.3 The grammar\n     * ----------------\n     * **BNF syntax equations** for arithmetic expressions\n     * we have been implementing\n     * ```\n     * <expression>    ::= <unary op> <term> [<addop> <term>]*\n     * <term>          ::= <factor> [<mulop> factor]*\n     * <factor>        ::= <integer> | <variable> | (<expression>)\n     * ```\n     * The nice thing about this grammar is that it enforces the operator\n     * precedence hierarchy that we normally expect for algebra.\n     *\n     * It's better to write the *grammar* this way\n     * ```\n     * <expression>    ::= <term> [<addop> <term>]*\n     * <term>          ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>        ::= <integer> | <variable> | (<expression>)\n     * ```\n     * We can define an analogous grammar for boolean algebra\n     * ```\n     * <b-expression>  ::= <b-term> [<orop> <b-term>]*\n     * <b-term>        ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>    ::= [NOT] <b-factor>\n     * <b-factor>      ::= <b-literal> | <b-variable> | (<b-expression>)\n     * ```\n     * Notice the analogy\n     *\n     * - addop `+`, `-` <=> orop `OR`, `XOR`\n     * - mulop `*` <=> `AND`\n     * - unary minus `-` <=> `NOT`.\n     *\n     * Also notice that expression like `a * -b` or `a - -b` is not allowed.\n     * However, in boolean algebra `a AND NOT b` makes perfect sense.\n     */\n\n    /**\n     * 6.4 Relops\n     * -----------\n     * We now have syntax rules for both arithmetic and Boolean algebra.\n     * The sticky part comes in when we have to combine the two.\n     *\n     * **BNF for relational expressions**\n     * ```\n     * <relation>  ::=  <expression> <relop> <expression>\n     * ```\n     * where relops are any of `=`, `<>` (or `!=`), `<`, `>`, `<=`, and `>=`.\n     *\n     * The relation is really just another kind of factor,\n     * so we can expand the definition of a boolean factor to read\n     * ```\n     * <b-factor>  ::=   <b-literal>\n     *                 | <b-variable>\n     *                 | (<b-expression>)\n     *                 | <relation>\n     * ```\n     * THAT’s the connection! The relops and the relation they define\n     * serve to wed the two kinds of algebra.\n     * If you write out the precedence levels for all the operators,\n     * you arrive at the following list:\n     * ```\n     * Level   Syntax Element         Operator\n     * -------------------------------------------------\n     *   0        factor          literal, variable\n     *   1     signed factor         unary minus\n     *   2         term                 *, /\n     *   3      expression              +, -\n     *   4        b-factor      literal, variable, relop\n     *   5       not-factor              NOT\n     *   6         b-term                AND\n     *   7      b-expression           OR, XOR\n     * ```\n     * This grammar seems reasonable. Unfortunately, it won’t work!\n     * To see the problem, consider the code fragment:\n     * `IF ((((((A + B + C) < 0 ) AND ....`\n     * It has no way of knowing which kind of expression it’s dealing with.\n     * Compiler writers have had to make compromises so that a single parser\n     * can handle the grammar without backtracking.\n     */\n\n    /**\n     * 6.5 Fixing the grammar\n     * ----------------------\n     * The problem comes up because our definitions of both arithmetic and\n     * Boolean factors permit the use of parenthesized expressions.\n     *\n     * **In BNF**\n     * ```\n     * <b-expression>  ::= <b-term> [<orop> <b-term>]*\n     * <b-term>        ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>    ::= [NOT] <b-factor>\n     * <b-factor>      ::= <b-literal> | <b-variable> | <relation>\n     *\n     * <relation>      ::= <expression> [<relop> <expression>]\n     *\n     * <expression>    ::= <term> [<addop> <term>]*\n     * <term>          ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>        ::= <integer> | <variable> | (<b-expression>)\n     * ```\n     * The option of parenthesized b-expressions as a possible b-factor\n     * is removed, and the relation as a legal form of b-factor is added.\n     * There is one subtle but crucial difference, which is what makes\n     * the whole thing work. Notice that in `<relation>` the relop and\n     * the second expression are OPTIONAL.\n     *\n     * A strange consequence of this grammar (and one shared by C) is\n     * that EVERY expression is potentially a Boolean expression.\n     */\n\n    /**\n     * 6.6 The parser\n     * ---------------\n     * Now that we’ve gotten through the decision-making process, we can\n     * press on with development of a parser.\n     *\n     * ### 6.6.1 Boolean literal 1 ###\n     * We begin, as we did in the arithmetic case, by dealing only with\n     * Boolean literals rather than variables.\n     * We begin with a fresh copy of the cradle, and begin adding\n     * procedures one by one.\n     *\n     * Try with `t`, `f` or anything else.\n     */\n    var booleanLiteral1 = cradle.extend({\n\n        // Recognize a boolean literal.\n        isBoolean: function (c) {\n            c = c.toUpperCase();\n            return c === 'T' || c === 'F';\n        },\n\n        // Get a boolean literal.\n        getBoolean: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            var result = this.look.toUpperCase() === 'T';\n            this.getChar();\n            return result;\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            io.writeLn(this.getBoolean());  // <-- for testing purposes\n        }\n    });\n\n    /**\n     * ### 6.6.2 Boolean literal 2 ###\n     * The usual way to encode Boolean variables is to let `0` stand for\n     * `FALSE`, and some other value for `TRUE` (e.g. `1` for C).\n     * Here `FFFF` hex (or `-1`) is chosen for TRUE, because a *bitwise NOT*\n     * also becomes a *Boolean NOT*.\n     *\n     * **In BNF**\n     * ```\n     * <b-expression>  ::= <b-literal>\n     * ```\n     * Try again with `t`, `f` or anything else.\n     */\n    var booleanLiteral2 = booleanLiteral1.extend({\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');    // -1 stands for TRUE\n            } else {\n                this.emitLn('CLR D0');          // 0 stands for FALSE\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.boolExpression();              // <--\n        }\n    });\n\n    /**\n     * ### 6.6.3 OR operation ###\n     * We already have the **BNF** rule:\n     * ```\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term> ::= <b-literal>\n     * ```\n     * Here the **orop*s `OR` and `XOR` are encoded with `|` and `~`.\n     *\n     * Try some combinations such as `t|f` and `f~t`, etc.\n     * The output code is starting to look pretty good.\n     */\n    var orOperation = booleanLiteral2.extend({\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Parse and translate a boolean term.\n        // Rename from previous boolExpression().\n        boolTerm: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Recognize and translate a boolean OR.\n        boolOr: function () {\n            this.match('|');\n            this.boolTerm();\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // Recognize and translate an exclusive or (XOR).\n        boolXor: function () {\n            this.match('~');\n            this.boolTerm();\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.look)) {\n                this.emitLn('MOVE D0, -(SP)');  // push D0\n                switch (this.look) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.4 AND operation ###\n     * You’ve probably already guessed what the next step is:\n     * The Boolean version of Term.\n     *\n     * **In BNF**\n     * ```\n     * <b-term> ::= <not-factor> [AND <not-factor>]*\n     * <not-factor> :== <b-literal>\n     * ```\n     * Here the `AND` operator is encoded with `&`.\n     *\n     * Try some combinations such as `t&f` or `t|f&t`, etc.,\n     * and notice the precedence of AND and OR.\n     */\n    var andOperation = orOperation.extend({\n\n        // Parse and translate a boolean factor with NOT.\n        // Rename from previous boolTerm().\n        notFactor: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Parse and translate a boolean term.\n        boolTerm: function () {\n            this.notFactor();\n            while (this.look === '&') {\n                this.emitLn('MOVE D0, -(SP)');\n                this.match('&');\n                this.notFactor();\n                this.emitLn('AND (SP)+, D0');\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.5 NOT operation ###\n     * The next step is to allow for the NOT.\n     *\n     * **In BNF**\n     * ```\n     * <not-factor> ::= [NOT] <b-factor>\n     * <b-factor> ::= <b-literal>\n     * ```\n     * The `NOT` operator is encoded with `!`.\n     *\n     * Try some combinations as well, such as `!t`, `t&!f`, etc.\n     */\n    var notOperation = andOperation.extend({\n\n        // Parse and translate a boolean factor.\n        // Rename for previous notFactor().\n        boolFactor: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Parse and translate a boolean factor with NOT.\n        notFactor: function () {\n            if (this.look === '!') {\n                this.match('!');\n                this.boolFactor();\n                this.emitLn('EOR #-1, D0');\n            } else {\n                this.boolFactor();\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.6 Expand the factor ###\n     * It takes just a one line addition to `boolFactor` to take care\n     * of relations.\n     *\n     * **In BNF**\n     * ```\n     * <b-factor> ::= <b-literal> | <relation>\n     * ```\n     * The compiler itself can’t tell the difference between a Boolean\n     * variable or expression and an arithmetic one...\n     * all of those will be handled by Relation, either way.\n     *\n     * Now we can handle for example `a&f`, `!a|b&t`, etc.\n     */\n    var expandTheFactor = notOperation.extend({\n\n        // Parse and translate a relation.\n        // This version is a dummy.\n        relation: function () {\n            this.emitLn('<relation ' + this.getName() + '>');\n        },\n\n        // Parse and translate a boolean factor.\n        boolFactor: function () {\n            if (this.isBoolean(this.look)) {        // <--\n                if (this.getBoolean()) {\n                    this.emitLn('MOVE #-1, D0');\n                } else {\n                    this.emitLn('CLR D0');\n                }\n            } else {                                // <--\n                this.relation();                    // <--\n            }\n        }\n    });\n\n    /**\n     * ###6.6.7 Full-blown relation ###\n     * let’s move on to the full-blown version of `<relation>`.\n     * ```\n     * <relation> ::= <expression> [<relop> <expression>]\n     * ```\n     * Because of the single-character limitation, we're sticking to the\n     * four operators equals `=`, not equals `#`, less than `<` and\n     * greater than `>`.\n     *\n     * Try some code such as `a>b`, `a#b`, and `a>b&b>c`, etc.\n     */\n    var fullBlownRelation = expandTheFactor.extend({\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize and translate a relational \"equals\".\n        equals: function () {\n            this.match('=');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SEQ D0');\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEquals: function () {\n            this.match('#');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SNE D0');\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.match('<');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SGE D0');\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.match('>');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SLE D0');\n        },\n\n        // Parse and translate a relation.\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.look)) {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '=':\n                    this.equals();\n                    break;\n                case '#':\n                    this.notEquals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n                this.emitLn('TST D0');\n            }\n        },\n\n        // Parse and translate an expression.\n        // This version is a dummy.\n        expression: function () {\n            this.emitLn('<Expression ' + this.getName() + '>');\n        }\n    });\n\n    /**\n     * ### 6.6.8 Merging with expressions ###\n     * We have already generated code for Expression and its buddies in\n     * previous sessions.\n     *\n     * **After merging, the syntax in BNF**\n     * ```\n     * ----- boolean expressions -----\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term>       ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>   ::= [NOT] <b-factor>\n     * <b-factor>     ::= <b-literal> | <relation>\n     * <relation>     ::= <expression> [<relop> <expression>]\n     * ----- arithmetic expressions -----\n     * <expression>   ::= [<unary op>] <term> [<addop> <term>]*\n     * <term>         ::= <factor> |<mulop> <factor>|*\n     * <factor>       ::= <number> | (<expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     * Now we have a parser that can handle both arithmetic AND Boolean\n     * algebra, and things that combine the two through the use of relops.\n     *\n     * Try some combinations such as `1<2`, `a>1+2`, `a>b+1&a#1`, etc.\n     * Howerver, does `(t|f)` produce an error?\n     */\n    //{\n    var mergingWithExpressions = $.extend(\n        true,   // deep copy\n        {},     // empty target\n\n        // 3.5\n        moreExpressions.assignmentStatements,\n\n        // 6.6.7\n        fullBlownRelation,\n\n        // 3.5\n        {\n            expression : moreExpressions.assignmentStatements.expression\n        }\n    );\n    //}\n\n    /**\n     * ### 6.6.9 Change to latest expression syntax ###\n     * The procedures are changed a little to make them correspond to\n     * the latest version of the syntax.\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> <factor>]*\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * ```\n     */\n    var changeToLatestExpressionSyntax = mergingWithExpressions.extend({\n\n        // parse and translate an expression.\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.signedFactor();                // <--\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate the first math factor.\n        signedFactor: function () {\n            if (this.look === '+') {\n                this.getChar();\n            }\n\n            if (this.look === '-') {\n                this.getChar();\n                if (this.isDigit(this.look)) {\n                    this.emitLn('MOVE #-' + this.getNum() + ', D0');\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();              // <--\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ', D0');\n            }\n        }\n    });\n\n    /**\n     * 6.7 Merging with control constructs\n     * ------------------------------------\n     * Remember those little dummy procedures called `condition` and\n     * `expression` in the control constructs? Now we know what goes\n     * in their places.\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * <statement> ::= <control-statement> | <b-expression>\n     * ```\n     * Try `ia=bxlyeze` which stands for\n     * ```\n     * IF a=b\n     *     X\n     * ELSE\n     *     Y\n     * ENDIF\n     * Z\n     * END\n     * ```\n     * What do you think? Did it work? Try some others.\n     */\n    //{\n    var mergingWithControlConstructs = $.extend(\n        true,   // deep copy\n        {},     // empty target\n\n        // 6.6.9\n        changeToLatestExpressionSyntax,\n\n        // 5.10\n        controlConstructs.theBreakStatement,\n\n        // 6.6.9\n        {\n            condition: changeToLatestExpressionSyntax.boolExpression,\n            expression: changeToLatestExpressionSyntax.expression,\n            other: changeToLatestExpressionSyntax.boolExpression\n        }\n    );\n    //}\n\n    /**\n     * 6.8 Adding assignments\n     * -----------------------\n     * The one-line \"programs\" that we’re having to write here\n     * will really cramp our style. So we extend the parser to accept\n     * multiple-line *programs*.\n     * The only restriction here is that we can’t\n     * separate an `IF` or `WHILE` token from its predicate.\n     * ```\n     * <statement> ::= <control-statement> | <assignment>\n     * <assignment> ::= <identifier> = <b-expression>\n     * ```\n     * Note that `assignment` now calls `boolExpression`, so that we\n     * can assign Boolean variables.\n     *\n     * You should now be able to write reasonably realistic-looking\n     * programs, subject only to our limitation on single-character tokens.\n     * Try some code using the editor, for example\n     * ```\n     * c=1\n     * s=0\n     * wc<9\n     * s=s+c\n     * c=c+1\n     * e\n     * e\n     * ```\n     * which stands for\n     * ```\n     * COUNTER = 1\n     * SUM = 0\n     * WHILE COUNTER < 9\n     *     SUM = SUM + COUNTER\n     *     COUNTER = COUNTER + 1\n     * ENDWHILE\n     * END\n     * ```\n     * Try some others and remember that we have reserved **keywords**\n     * `b`, `d`, `e`, `f`, `i`, `l`, `p`, `r`, `u`, `w`\n     * which stand for BREAK, DO, END[XX], FOR, IF, ELSE,\n     * LOOP, REPEAT, UNTIL, and WHILE, respectively.\n     */\n    var addingAssignments = mergingWithControlConstructs.extend({\n\n        // Skip a CRLF.\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Recognize and translate a statement block.\n        block: function (label) {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                this.fin();             // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf(label);\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':\n                    this.doDo();\n                    break;\n                case 'b':\n                    this.doBreak(label);\n                    break;\n                default:\n                    this.assignment();  // <--\n                }\n                this.fin();             // <--\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.boolExpression();      // <--\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        }\n    });\n\n    /**\n     * 6.9 Conclusion\n     * ---------------\n     * Final results of this chapter in BNF\n     *\n     * **Program**\n     * ```\n     * <program>        ::= <block> END\n     * <block>          ::= [<statement>]*\n     * <statement>      ::= <if> | <while> | <loop> | <repeat> |<for> |\n     *                      <do> | <break> | <assignment>\n     * ```\n     * **Control statements**\n     * ```\n     * <if statement>     ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <while statement>  ::= WHILE <condition> <block> ENDWHILE\n     * <loop statement>   ::= LOOP <block> ENDLOOP\n     * <repeat statement> ::= REPEAT <block> UNTIL <conditon>\n     * <for statement>    ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * <do statement>     ::= DO <expression> <block> ENDDO\n     * <break statement>  ::= BREAK\n     * ```\n     * **Assignment statement**\n     * ```\n     * <assignment statement> ::= <identifier> = <b-expression>\n     * ```\n     * **Boolean expressions**\n     * ```\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term>       ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>   ::= [NOT] <b-factor>\n     * <b-factor>     ::= <b-literal> | <relation>\n     * <relation>     ::= <expression> [<relop> <expression>]\n     * ```\n     * **Arithmetic expressions**\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> <factor>]*\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     */\n\n    return {\n\n        // 6.6.1\n        booleanLiteral1: booleanLiteral1,\n\n        // 6.6.2\n        // <b-expression> ::= <b-literal>\n        booleanLiteral2: booleanLiteral2,\n\n        // 6.6.3\n        // <b-expression> ::= <b-term> [<orop> <b-term>]*\n        // <b-term>       ::= <b-literal>\n        orOperation: orOperation,\n\n        // 6.6.4\n        // <b-term>       ::= <not-factor> [AND <not-factor>]*\n        // <not-factor>   ::= <b-literal>\n        andOperation: andOperation,\n\n        // 6.6.5\n        // <not-factor>   ::= [NOT] <b-factor>\n        // <b-factor>     ::= <b-literal>\n        notOperation: notOperation,\n\n        // 6.6.6\n        // <b-factor>     ::= <b-literal> | <relation>\n        expandTheFactor: expandTheFactor,\n\n        //6.6.7\n        // <relation>     ::= <expression> [<relop> <expression>]\n        fullBlownRelation: fullBlownRelation,\n\n        /**\n         * 6.6.8\n         * No new codes after merging, the syntax in BNF:\n         * ----- boolean expressions -----\n         * <b-expression> ::= <b-term> [<orop> <b-term>]*\n         * <b-term>       ::= <not-factor> [AND <not-factor>]*\n         * <not-factor>   ::= [NOT] <b-factor>\n         * <b-factor>     ::= <b-literal> | <relation>\n         * <relation>     ::= <expression> [<relop> <expression>]\n         * ----- arithmetic expressions -----\n         * <expression>   ::= [<unary op>] <term> [<addop> <term>]*\n         * <term>         ::= <factor> |<mulop> <factor>|*\n         * <factor>       ::= <number> | (<expression>) | <identifier>\n         * <identifier>   ::= <variable> | <function>\n         */\n        mergingWithExpressions: mergingWithExpressions,\n\n        // 6.6.9\n        // <expression>   ::= <term> [<addop> <term>]*\n        // <term>         ::= <signed factor> [<mulop> <factor>]*\n        // <factor>       ::= <number> | (<b-expression>) | <identifier>\n        changeToLatestExpressionSyntax: changeToLatestExpressionSyntax,\n\n        // 6.7\n        // <program>      ::= <block> END\n        // <block>        ::= [<statement>]*\n        // <statement>    ::= <control-statement> | <b-expression>\n        mergingWithControlConstructs: mergingWithControlConstructs,\n\n        // 6.8\n        // <statement>    ::= <control-statement> | <assignment>\n        // <assignment>   ::= <identifier> = <b-expression>\n        addingAssignments: addingAssignments\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 7 Lexical Scanning\n * ===========================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 7.1 Introduction\n     * -----------------\n     * In the previous chapter we have a compiler that would ALMOST work,\n     * except that we were still limited to single-character tokens.\n     * To get rid of that restriction,\n     * we must deal with the concept of the *lexical scanner*.\n     *\n     * Why?\n     */\n\n    /**\n     * 7.2 Lexical scanning\n     * ----------------------\n     * **Compiler**\n     * ```\n     *  - Text editor     -> [stream of input characters]\n     * -> Lexical scanner -> [stream of input tokens]\n     * -> Parser (could be in one module) -> [object code]\n     * ```\n     *\n     * **Chomsky Hierarchy of grammars** (in 1956)\n     * ```\n     * Type 0: Unrestricted (e.g. English)\n     * Type 1: Context-Sensitive (older, e.g. Fortran)\n     * Type 2: Context-Free (modern)\n     * Type 3: Regular (modern)\n     * ```\n     *\n     * The neat part about these two types is that there are very specific ways\n     * to parse them.\n     * ```\n     * Type 3 - Regular grammar: an abstract machine called\n     *          the state machine (finite automaton)\n     * Type 2 - Context-free: push-down automaton\n     *          (a state machine augmented by a stack)\n     * ```\n     * **Regular expression** is the lower-level parts of real, practical grammars,\n     * such as\n     * ```\n     * <identifier> ::= <letter> [<letter> | <digit>]*\n     * ```\n     */\n\n    /**\n     * 7.3 State machines and alternatives\n     * ------------------------------------\n     * - **Regular expressions** can be parsed by a state machine.\n     *\n     * - **State machine:** integers (current state), table of\n     *   actions, input chars\n     *\n     * - **LEX output:** a state machine + table of actions crspd.\n     *   to input grammar\n     * - **YACC output:** a canned table-driven parser + table crspd.\n     *   to lang syntax\n     */\n\n    /**\n     * 7.4 Some experiments in scanning\n     * ---------------------------------\n     * Let’s begin with the two definitions most often seen in real programming\n     * languages:\n     * ```\n     * <identifier> ::= <letter> [<letter> | <digit>]*\n     * <number> ::= [<digit>]+\n     * ```\n     * Let’s begin (as usual) with a bare cradle.\n     */\n    var someExperimentsInScanning = cradle.extend({\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = '';\n            while (this.isAlNum(this.look)) {\n                name += this.look.toUpperCase();\n                this.getChar();\n            }\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = '';\n            while (this.isDigit(this.look)) {\n                num += this.look;\n                this.getChar();\n            }\n            return num;\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            io.writeLn(this.getName());     // <-- for testing purposes\n        }\n    });\n\n    /**\n     * 7.5 White space\n     * ----------------\n     * Run the program, and note how the input string is, indeed, separated\n     * into distinct tokens.\n     */\n    var whiteSpace = someExperimentsInScanning.extend({\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = '';\n            while (this.isAlNum(this.look)) {\n                name += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();                       // <--\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = '';\n            while (this.isDigit(this.look)) {\n                num += this.look;\n                this.getChar();\n            }\n            this.skipWhite();                       // <--\n            return num;\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            var result;\n\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n            return result;\n        },\n\n        // Main program.\n        main: function () {\n            var token;\n\n            this.init();\n            do {\n                token = this.scan();                // <--\n                io.writeLn(token);                  // <\n            } while (token !== this.LF);            // <\n        }\n    });\n\n    /**\n     * 7.6 State machines\n     * -------------------\n     * A parse routine like `getName()` does indeed implement a state machine.\n     *\n     * **Syntax diagram (railroad-track diagram)**\n     * ```\n     *          |-----> Other---------------------------> Error\n     *          |\n     *  Start -------> Letter ---------------> Other -----> Finish\n     *          ^                        V\n     *          |                        |\n     *          |<----- Letter <---------|\n     *          |                        |\n     *          |<----- Digit  <----------\n     * ```\n     * The `SkipWhite()`, `getNum()`, and `scan()` are also state machines.\n     * Little machines make big machines.\n     * This is an implicit approach opposed to table-driven (explicite) one.\n     */\n\n    /**\n     * 7.7 Newlines\n     * -------------\n     * Moving right along, let’s modify our scanner to handle more than one line.\n     *\n     * To do this, simply modify the single executable line of `isWhite`.\n     * We need to give the main program a new stop condition.\n     * Let’s just use until token = `.`.\n     *\n     * Try a couple of lines, terminated by the period.\n     */\n    var newlines = whiteSpace.extend({\n\n        // Recognize white space.\n        // isWhite: function (c) {\n        //     return c === ' ' || c === this.TAB ||\n        //            c === this.CR || c === this.LF;      // <--\n        // },\n\n        // Skip a CRLF. (copy from sec. 6.8)\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            var token;\n\n            this.init();\n            do {\n                while (this.look === this.LF) {         // <--\n                    this.fin();                         // <\n                }                                       // <\n                token = this.scan();\n                io.writeLn(token);\n            } while (token !== '.');                    // <--\n        }\n    });\n\n    /**\n     * 7.8 Operators\n     * --------------\n     * We can handle operators very much the same way as the other tokens.\n     * Try the program now.\n     * Any code fragments will be neatly broken up into individual tokens.\n     */\n    var operators = newlines.extend({\n\n        // Recognize any operator.\n        isOp: function (c) {\n            return c === '+' || c === '-' || c === '*' || c === '/' ||\n                   c === '<' || c === '>' || c === ':' || c === '=';\n        },\n\n        // Get an operator.\n        getOp: function () {\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n\n            var op = '';\n            while (this.isOp(this.look)) {\n                op += this.look;\n                this.getChar();\n            }\n            return op;\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            var result;\n\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else if (this.isOp(this.look)) {      // <--\n                result = this.getOp();              // <\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n            return result;\n        }\n    });\n\n    /**\n     * 7.9 Lists, commas and command lines\n     * ------------------------------------\n     */\n    var listsCommasAndCommandLines = operators.extend({\n\n        // Skip over a comma.\n        skipComma: function () {\n            this.skipWhite();\n            if (this.look === ',') {\n                this.getChar();\n                this.skipWhite();\n            }\n        },\n\n        // Lexical scanner.\n        // Change skipWhite() to skipComma() temporarily.\n        scan: function () {\n            var result;\n\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else if (this.isOp(this.look)) {\n                result = this.getOp();\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipComma();                   // <-- change TEMPORARILY\n            return result;\n        }\n    });\n\n    /**\n     * 7.10 Getting fancy\n     * -------------------\n     * One of the first things we’re going to need is a way to identify keywords.\n     *\n     * ### 7.10.1 ###\n     * Try `if`, `else`, `endif` `end` or anything else.\n     */\n    var gettingFancy = listsCommasAndCommandLines.extend({\n\n        // Definition of keywords and token types.\n        // { IF: 0, ELSE: 1, ... }\n        keywordType: { IF: 0, ELSE: 1, ENDIF: 2, END: 3 },\n\n        // Main program.\n        main: function () {\n            var token = io.readLn().toUpperCase();  // <-- temporarily changed\n            io.writeLn(this.keywordType[token]);    // <-- temp...\n        }\n    });\n\n    /**\n     * ### 7.10.2 Returning codes ###\n     * Now that we can recognize keywords, the next thing is to arrange to\n     * return codes for them.\n     *\n     * Try some arbitrary code finished with `end`, such as\n     * ```\n     * if test >= 25\n     *     ans1 = 35\n     * else\n     *     sum += 1\n     * endif\n     * end\n     * ```\n     */\n    var returningCodes = gettingFancy.extend({\n\n        // Type declarations.\n        symType: {\n            ifSym: 0,\n            elseSym: 1,\n            endifSym: 2,\n            endSym: 3,\n            ident: 4,\n            number: 5,\n            operator: 6\n        },\n\n        // variable declarations.\n        token: 0,   // current token (symType)\n        value: '',  // string token of look\n\n        // Lexical scanner.\n        scan: function () {\n            var k;\n\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.value = this.getName();\n                k = this.keywordType[this.value];\n                this.token = k === undefined ? this.symType.ident : k;\n            } else if (this.isDigit(this.look)) {\n                this.value = this.getNum();\n                this.token = this.symType.number;\n            } else if (this.isOp(this.look)) {\n                this.value = this.getOp();\n                this.token = this.symType.operator;\n            } else {\n                this.value = this.look;\n                this.token = this.symType.operator;\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                this.scan();\n\n                switch (this.token) {\n                case this.symType.ident:\n                    io.write('Ident    : ');\n                    break;\n                case this.symType.number:\n                    io.write('Number   : ');\n                    break;\n                case this.symType.operator:\n                    io.write('Operator : ');\n                    break;\n                case this.symType.ifSym:        // fall through\n                case this.symType.elseSym:      // fall through\n                case this.symType.endifSym:     // fall through\n                case this.symType.endSym:\n                    io.write('Keyword  : ');\n                    break;\n                }\n                io.writeLn(this.value);\n            } while (this.token !== this.symType.endSym);\n        }\n    });\n\n    /**\n     * ### 7.10.3 Cleanup with global ###\n     * We can simplify things a bit by letting\n     * `getName()`, `getNum()`, and `getOp()` becomes procedures,\n     * and use globle variables (value and token) to eliminate the local copies.\n     *\n     * This program should work the same as the previous version.\n     */\n    var cleanupWithGlobal = returningCodes.extend({\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var k;\n            this.value = '';\n\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            k = this.keywordType[this.value];  // copy from previous scan()\n            this.token = k === undefined ? this.symType.ident : k;  // copy\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            this.value = '';\n            while (this.isDigit(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = this.symType.number;   // copy from previous scan()\n        },\n\n        // Get an operator.\n        getOp: function () {\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n\n            this.value = '';\n            while (this.isOp(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = this.symType.operator; // copy from previous scan()\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else if (this.isOp(this.look)) {\n                this.getOp();\n            } else {\n                this.value = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n        }\n    });\n\n    /**\n     * 7.11 Returning a character\n     * ---------------------------\n     * There is another simple type that can be returned as a code: the character.\n     * A character is as good a variable for encoding the different token types.\n     *\n     * This program should work the same as the previous version.\n     */\n    var returningACharacter = cleanupWithGlobal.extend({\n\n        // Instead of symType, use keywordCode.\n        keywordCode: 'xilee',\n        keywordType: { IF: 1, ELSE: 2, ENDIF: 3, END: 4 },  // <--\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var index;\n            this.value = '';\n\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            index = this.keywordType[this.value] || 0;      // <--\n            this.token = this.keywordCode.charAt(index);    // <\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            this.value = '';\n            while (this.isDigit(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = '#';                               // <--\n        },\n\n        // Get an operator.\n        getOp: function () {\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n\n            this.value = '';\n            while (this.isOp(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            if (this.value.length === 1) {                  // <--\n                this.token = this.value;                    // <\n            } else {                                        // <\n                this.token = '?';                           // <\n            }\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else if (this.isOp(this.look)) {\n                this.getOp();\n            } else {\n                this.value = this.look;\n                this.token = '?';                           // <--\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                this.scan();\n\n                switch (this.token) {\n                case 'x':\n                    io.write('Ident ');\n                    break;\n                case '#':\n                    io.write('Number ');\n                    break;\n                case 'i':    // fall through\n                case 'l':    // fall through\n                case 'e':\n                    io.write('Keyword ');\n                    break;\n                default:\n                    io.write('Operator ');\n                }\n                io.writeLn(this.value);\n            } while (this.value !== 'END');\n        }\n    });\n\n    /**\n     * 7.12 Distributed vs centralized scanners\n     * -----------------------------------------\n     * The structure for the lexical scanner here is very conventional,\n     * and about 99% of all compilers use something very close to it.\n     * This is not, however, the only possible structure.\n     *\n     * The problem with the conventional approach is that the scanner has no\n     * knowledge of **context**. For example, it can’t distinguish between the\n     * assignment operator `=` and the relational operator `=`......\n     *\n     * The alternative is to seek some way to use the contextual information that\n     * comes from knowing where we are in the parser.\n     * This leads us back to the notion of a distributed scanner...\n     */\n\n    // No code for 7.12\n\n    // 7.13 Merging scanner and parser\n    // --------------------------------\n    // In file: 7.13-kiss.js\n\n\n    return {\n\n        // 7.4\n        someExperimentsInScanning: someExperimentsInScanning,\n\n        // 7.5\n        whiteSpace: whiteSpace,\n\n        // 7.7\n        newlines: newlines,\n\n        // 7.8\n        operators: operators,\n\n        // 7.9\n        listsCommasAndCommandLines: listsCommasAndCommandLines,\n\n        // 7.10.1\n        gettingFancy: gettingFancy,\n\n        // 7.10.2\n        returningCodes: returningCodes,\n\n        // 7.10.3\n        cleanupWithGlobal: cleanupWithGlobal,\n\n        // 7.11\n        returningACharacter: returningACharacter\n    };\n\n});\n\r\n/*global define*/\n\n/**\n * Chapter 7.13 Merging Scanner and Parser\n * ---------------------------------------\n * Program kiss\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    /**\n     * 7.13 Merging scanner and parser\n     * --------------------------------\n     * Now that we’ve covered all of the theory and general aspects of lexical\n     * scanning that we’ll be needing. We can accomodate multi-character tokens\n     * with minimal change to our previous work.\n     *\n     * To keep things short and simple here we allowing only one control construct\n     * (the `IF`) and no Boolean expressions. That’s enough to demonstrate the\n     * parsing of both keywords and expressions.\n     *\n     * ### 7.13.1 Judicious copying ###\n     * All the elements of the program to parse this subset, using\n     * **single-character** tokens, exist already in our previous programs.\n     *\n     * **A short list of the program KISS**\n     * ```\n     * const: TAB, CR, LF\n     * variable: look, lCount\n     * function: getChar, error, abort, expected,\n     *           isAlpha, isDigit, isAlNum, isAddop, isMulop, isWhite\n     *           skipWhite, match, fin, getName, getNum,\n     *           newLabel, postLabel, emit, emitLn\n     *           identifier, expression, signedFactor, multiply, divide\n     *           term1, term, firstTerm, add, subtract\n     *           expression, condition\n     *           doIf, assignment, block, doProgram,\n     *           init, main\n     * ```\n     *\n     * Some improvement of the arithmetic expressions is included:\n     *\n     * **in 2.8** we have\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * <term> ::= <factor> |<mulop> <factor>|*\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     * ** in 6.6.9** we have\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     * and the **improved version** here (only first term allows `<signed factor>`)\n     * ```\n     * <expression>      ::= <first term> [<addop> <term>]*\n     * <first term>      ::= <signed factor> <term 1>\n     * <term>            ::= <factor> <term 1>\n     * <term 1>          ::= [<mulop> <factor>]*\n     * <signed factor>   ::= [<addop>] <factor>\n     * <factor>          ::= <number> | (<expression>) | <identifier>\n     * <identifier>      ::= <variable> | <function>\n     * ```\n     *\n     * The structure of program looks like\n     * ```\n     * <program>         ::= <block> END\n     * <block>           ::= [<statement>]*\n     * <statement>       ::= <if> | <assignment>\n     * <if statement>    ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <assignment stmt> ::= <identifier> = <expression>\n     * ```\n     * where `<condition>` is a dummy version here.\n     *\n     * Before we proceed to adding the scanner, verify that it does indeed\n     * parse things correctly. For example\n     * ```\n     * a = 5\n     * i\n     *     b = a + 1\n     * l\n     *     b = -2 * a\n     * e\n     * e\n     * ```\n     * Don’t forget the \"codes\": `i` for IF, `l` for ELSE,\n     * and `e` for END or ENDIF.\n     */\n    var judiciousCopying = object.extend({\n\n        // Constant declarations\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations\n        look: '',   // lookahead character\n        lCount: 0,  // label counter\n\n        // Read new character from input\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Recognize an alpha character\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();                   // <--\n        },\n\n        // Skip a CRLF\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n            this.skipWhite();                   // <--\n        },\n\n        // Get an identifier\n        getName: function () {\n            while (this.look === this.LF) {     // <--\n                this.fin();                     // <\n            }                                   // <\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = this.look.toUpperCase();\n            this.getChar();\n            this.skipWhite();   // <--\n            return name;\n        },\n\n        // Get a number\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = this.look;\n            this.getChar();\n            this.skipWhite();                   // <--\n            return num;\n        },\n\n        // Generate a unique label\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n         // Output a string with tab\n        emit: function (str) {\n            io.write(this.TAB + str);\n        },\n\n        // Output a string with tab and newline\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Parse and translate an identifier\n        identifier: function () {\n            var name = this.getName();\n\n            if (this.look === '(') {\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + name);\n            } else {\n                this.emitLn('MOVE ' + name + '(PC), D0');\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        },\n\n        // Parse and translate the first math factor\n        signedFactor: function () {\n            var signed = this.look === '-';\n\n            if (this.isAddop(this.look)) {\n                this.getChar();\n                this.skipWhite();\n            }\n\n            if (signed) {\n                if (this.isDigit(this.look)) {\n                    this.emitLn('MOVE #-' + this.getNum() + ', D0');\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Recognize and translate a multiply\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Recognize and translate a divide\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Parse and translate a math term\n        term1: function () {\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            this.factor();                  // <--\n            this.term1();                   // <\n        },\n\n        // Parse and translate a math term with possible leading sing\n        firstTerm: function () {\n            this.signedFactor();            // <--\n            this.term1();                   // <\n        },\n\n        // Recognize and translate an add\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Recognize and translate a subtract\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // parse and translate an expression\n        expression: function () {\n            this.firstTerm();               // <--\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean condition\n        // This version is a dummy\n        condition: function () {\n            this.emitLn('<condition>');\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label1, label2;\n\n            this.match('i');\n            this.condition();\n            label1 = label2 = this.newLabel();\n            this.emitLn('BEQ ' + label1);\n            this.block();\n\n            if (this.look === 'l') {\n                this.match('l');\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.match('e');\n            this.postLabel(label2);\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case this.LF:\n                    while (this.look === this.LF) {\n                        this.fin();\n                    }\n                    break;\n                default:\n                    this.assignment();\n                }\n            }\n        },\n\n        // Parse and translate a program\n        doProgram: function () {\n            this.block();\n            if (this.look !== 'e') {\n                this.expected('End');\n            }\n            this.emitLn('END');\n        },\n\n        // Initialize\n        init: function () {\n            this.lCount = 0;\n            this.getChar();\n        },\n\n        // Main program\n        main: function () {\n            this.init();\n            this.doProgram();\n        }\n    });\n\n    /**\n     * ### 7.13.2 Merging scanner and parser ###\n     * Compare this program with its single-character counterpart.\n     *\n     * Now we have a compiler that can deal with code such as\n     * ```\n     * foo = 50\n     * if\n     *     bar = foo + 16\n     * else\n     *     bar = -25 * foo\n     * endif\n     * foo = foo + 10\n     * end\n     * ```\n     * We are very close to having all the elements that we need to build a real,\n     * functional compiler. There are still a few things missing, notably\n     * procedure calls and type definitions.\n     */\n    var mergingScannerAndParser = judiciousCopying.extend({\n\n        // Variable declarations\n        token: '',      // encoded token\n        value: '',      // unencoded token\n\n        //\n        keywordCode: 'xilee',\n        keywordType: { IF: 1, ELSE: 2, ENDIF: 3, END: 4 },\n\n        // Get an identifier\n        getName: function () {\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            this.value = '';\n            while (this.isAlNum(this.look)) {           // <--\n                this.value += this.look.toUpperCase();  // <\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Get a number\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            this.value = '';\n            while (this.isDigit(this.look)) {           // <--\n                this.value += this.look;                // <\n                this.getChar();\n            }\n            this.token = '#';                           // <\n            this.skipWhite();\n        },\n\n        // Get an identifier and scan it for keywords\n        scan: function () {\n            this.getName();\n            var index = this.keywordType[this.value] || 0;\n            this.token = this.keywordCode.charAt(index);\n        },\n\n        // Match a specific input string\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n        },\n\n        // Parse and translate an identifier\n        identifier: function () {\n            this.getName();                             // <--\n            if (this.look === '(') {\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + this.value);       // <--\n            } else {\n                this.emitLn('MOVE ' + this.value + '(PC), D0');   // <--\n            }\n        },\n\n        // Parse and translate the first math factor\n        signedFactor: function () {\n            var signed = this.look === '-';\n\n            if (this.isAddop(this.look)) {\n                this.getChar();\n                this.skipWhite();\n            }\n\n            if (signed) {\n                if (this.isDigit(this.look)) {\n                    this.getNum();                                // <--\n                    this.emitLn('MOVE #-' + this.value + ', D0'); // <\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.getNum();\n                this.emitLn('MOVE #' + this.value + ' ,D0');\n            }\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label1, label2;\n\n            this.condition();\n            label1 = label2 = this.newLabel();\n            this.emitLn('BEQ ' + label1);\n            this.block();\n\n            if (this.token === 'l') {                   // <--\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.matchString('ENDIF');                  // <--\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.value;                      // <--\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');    // <--\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            this.scan();                                // <--\n            while (this.token !== 'e' && this.token !== 'l') {  // <--\n                switch (this.token) {                   // <--\n                case 'i':\n                    this.doIf();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();                            // <--\n            }\n        },\n\n        // Parse and translate a program\n        doProgram: function () {\n            this.block();\n            this.matchString('END');                    // <--\n            this.emitLn('END');\n        }\n    });\n\n\n    return {\n\n        // 7.13.1\n        judiciousCopying: judiciousCopying,\n\n        // 7.13.2\n        mergingScannerAndParser: mergingScannerAndParser\n    };\n});\n\r\n/**\n * Chapter 8 A Little Philosophy\n * ==============================\n *\n * 8.1 Introduction\n * -----------------\n * About where we’re going with this series and some general thoughts\n * concerning the usefulness of what we’ve been doing.\n *\n * 8.2 The road home\n * -----------------\n * We have covered the parsing and translation of\n *\n * - arithmetic expressions\n * - Boolean expressions\n * - combinations connected by relational operators\n * - control constructs.\n *\n * We’ve leaned heavily on the use of **top-down, recursive descent**\n * parsing, **BNF** definitions of the syntax, and direct generation of\n * assembly-language code.\n *\n * To round out the series, we still have a few items to cover.\n * These include:\n *\n * - Procedure calls, with and without parameters\n * - Local and global variables\n * - Basic types, such as character and integer types\n * - Arrays\n * - Strings\n * - User-defined types and structures\n * - Tree-structured parsers and intermediate languages\n * - Optimization\n *\n * Two languages you will see in installments to come:\n *\n * - **TINY** A minimal, but usable language on the order of\n *   *Tiny BASIC* or *Tiny C*. It won’t be very practical,\n *   but it will have enough power to let you write and run real programs\n *   that do something worthwhile.\n *\n * - **KISS** intended to be a systems programming language.\n *   It won’t have strong typing or fancy data structures,\n *   but it will support most of the things to do with\n *   a higher order language (HOL).\n *\n * 8.3 Why is it so simple?\n * ------------------------\n * > Using the techniques we’ve used here, it is possible to build a\n * > production quality, working compiler without adding a lot of\n * > complexity to what we’ve already done.\n *\n * The areas that may have led to complexity in the past:\n *\n * - Limited RAM forcing multiple passes\n * - Batch processing\n * - Large programs\n * - Emphasis on efficiency\n * - Limited instruction sets\n * - Desire for generality\n *\n * 8.4 Conclusion\n * ---------------\n * So far, we’ve only looked at pieces of compilers,\n * and while we have many of the makings of a complete language,\n * we haven’t talked about how to put it all together.\n * That will be the subject of our next two installments.\n * Then we’ll press on into the new subjects listed at section 8.2.\n */\n\n// { No code }\n\r\n/*global define*/\n\n/**\n * Chapter 9 A Top View\n * =====================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 9.1 Introduction\n     * -----------------\n     * Most people regard the top-down design approach as being better than\n     * the bottom-up one. The incremental approach that we’ve been using in\n     * all these tutorials is inherently bottom-up.\n     *\n     * We’ll consider languages such as C and Pascal, and see how complete\n     * compilers can be built starting from the top.\n     */\n\n    /**\n     * 9.2 The top level\n     * -----------------\n     * One of the biggest mistakes people make in a top-down design is\n     * failing to start at the true top.\n     *\n     * **In program design language (PDL)**, this top level looks something\n     * like:\n     * ```\n     * begin\n     *     solve the problem\n     * end\n     * ```\n     * Our problem is to compile a complete program. Any definition of the\n     * language, written in BNF, begins here.\n     *\n     * What does the top level BNF look like? Well, that depends quite a bit\n     * on the language to be translated. Let’s take a look at Pascal.\n     */\n\n    /**\n     * 9.3 The structure of Pascal\n     * ----------------------------\n     * Most texts for Pascal include a **BNF** or **railroad-track**\n     * definition of the language. Here are the first few lines of one\n     * ```\n     * <program> ::= <program-header> <block> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * <block> ::= <declarations> | <statements>\n     * ```\n     * we’ll use our familiar single-character tokens to represent the\n     * input, and start with a fresh copy of the Cradle (section 1.2).\n     * We’ll use a `p` to stand for `PROGRAM`, and let's start implement\n     * ```\n     * <program> ::= <program-header> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * ```\n     * The procedures `prolog` and `epilog` perform whatever is required\n     * to let the program interface with the operating system, so that\n     * it can execute as a program.\n     *\n     * At this point, there is only one legal input: `px.`\n     * which stands for\n     * ```\n     * PROGRAM X\n     * .\n     * ```\n     * where x is any single letter, the program name.\n     *\n     * There is one important thing to note: *THE OUTPUT IS A WORKING,\n     * COMPLETE, AND EXECUTABLE PROGRAM*\n     * This is very important. The nice feature of the top-down approach\n     * is that at any stage you can compile a subset of the complete\n     * language and get a program that will run on the target machine.\n     */\n    var theStructureOfPascal = cradle.extend({\n\n        // Parse and translate a program.\n        prog: function () {\n            var name;\n\n            this.match('p');        // <-- Handles program header part.\n            name = this.getName();  // <\n            this.prolog(name);\n            this.match('.');\n            this.epilog(name);\n        },\n\n        // Write the prolog.\n        prolog: function () {\n            this.emitLn('WARMST EQU $A01E');    // for SK*DOS\n        },\n\n        // Write the epilog.\n        epilog: function (name) {\n            this.emitLn('DC WARMST');           // SK*DOS\n            this.emitLn('END ' + name);\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.prog();\n        }\n    });\n\n    /**\n     * 9.4 Fleshing it out\n     * --------------------\n     * To flesh out the compiler, we only have to deal with language\n     * features one by one.\n     * ```\n     * <program> ::= <program-header> <block> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * <block> ::= <declarations> | <statements>\n     * ```\n     * where `declarations` and `statements` are null procedures.\n     *\n     * Try again `px.`, and does the program still run the same?\n     */\n    var fleshingItOut = theStructureOfPascal.extend({\n\n        // Post a label to output (copied from ch 5.3).\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        declarations: function () {},\n\n        statements: function () {},\n\n        // Parse and translate a Pascal block.\n        doBlock: function (name) {\n            this.declarations();\n            this.postLabel(name);\n            this.statements();\n        },\n\n        // Parse and translate a program.\n        prog: function () {\n            var name;\n            this.match('p');\n            name = this.getName();\n            this.prolog(name);\n            this.doBlock(name);             // <--\n            this.match('.');\n            this.epilog(name);\n        }\n    });\n\n    /**\n     * 9.5 Declarations\n     * -----------------\n     * **The BNF for Pascal declarations** is\n     * ```\n     * <declarations> ::= ( <label list>    |\n     *                      <constant list> |\n     *                      <type list>     |\n     *                      <variable list> |\n     *                      <procedure>     |\n     *                      <function>        )*\n     * ```\n     * As usual, let’s let a single character represent each of these\n     * declaration types. The `l`, `c`, `t`, `v`, `p` and `f` stand\n     * for labels, constants, types, variables, procedure and function,\n     * respectively.\n     *\n     * **Statement part in BNF**\n     * ```\n     * <statements> ::= <compound statement>\n     * <compound statement> ::= BEGIN <statement> (';' <statement>)* END\n     * ```\n     * **Procedure statements**\n     * ```\n     * <statement> ::= <simple statement> | <structured statement>\n     * <simple statement> ::= <assignment> | <procedure call> | null\n     * <structured statement> ::= <compound statement> |\n     *                            <if statement>       |\n     *                            <case statement>     |\n     *                            <while statement>    |\n     *                            <repeat statement>   |\n     *                            <for statement>      |\n     *                            <with statement>\n     * ```\n     * This is where the *top level* meets our *bottom-up approach* of\n     * previous sessions.\n     *\n     * The simplest form of input is now `pxbe.` which stands for\n     * ```\n     * PROGRAM X\n     * BEGIN\n     * END\n     * .\n     * ```\n     * Try it. Also try some combinations of this. Make some deliberate\n     * errors and see what happens.\n     */\n    var declarations = fleshingItOut.extend({\n\n        // Process label statement.\n        labels: function () {\n            this.match('l');\n        },\n\n        // Process const statement.\n        constants: function () {\n            this.match('c');\n        },\n\n        // Process type statement.\n        types: function () {\n            this.match('t');\n        },\n\n        // Process var statement.\n        variables: function () {\n            this.match('v');\n        },\n\n        // Process procedure statement.\n        doProcedure: function () {\n            this.match('p');\n        },\n\n        // Process function statement.\n        doFunction: function () {\n            this.match('f');\n        },\n\n        // Parse and translate the declaration part.\n        declarations: function () {\n            while ((/[lctvpf]/).test(this.look)) {\n                switch (this.look) {\n                case 'l':\n                    this.labels();\n                    break;\n                case 'c':\n                    this.constants();\n                    break;\n                case 't':\n                    this.types();\n                    break;\n                case 'v':\n                    this.variables();\n                    break;\n                case 'p':\n                    this.doProcedure();\n                    break;\n                case 'f':\n                    this.doFunction();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate the statement part.\n        statements: function () {\n            this.match('b');\n            while (this.look !== 'e') {\n                this.getChar();\n            }\n            this.match('e');\n        }\n    });\n\n    /**\n     * 9.6 The structure of C\n     * -----------------------\n     * The C language is quite another matter. Texts on C rarely include\n     * a BNF definition of the language. Probably that’s because the\n     * language is quite hard to write BNF for.\n     *\n     * At the top level, everything in C is a static declaration,\n     * either of data or of a function.\n     * ```\n     * <program> ::= ( <global declaration> )*\n     * <global declaration> ::= <data declaration> |\n     *                          <function>\n     * ```\n     * **In Small C**\n     * ```\n     * <global declaration> ::= '#' <preprocessor command>  |\n     *                          'int' <data list>           |\n     *                          'char' <data list>          |\n     *                          '<ident> <function body>\n     * ```\n     * where functions can only have the default type int, which is\n     * not declared. This makes the input easy to parse: the first token\n     * is either `int`, `char`, or the `name` of a function.\n     * ```\n     * // Demonstrates the top-level structure for small C.\n     * // Parse and translate a program.\n     * prog: function () {\n     *     while (this.look !== 'Z') {   // ^Z -> the end of the source\n     *         switch (this.look) {\n     *         case '#':\n     *             this.preProc();\n     *             break;\n     *         case 'i':\n     *             this.intDecl();\n     *             break;\n     *         case 'c':\n     *             this.charDecl();\n     *             break;\n     *         default:\n     *             this.doFunction();\n     *         }\n     *     }\n     * },\n     * ```\n     *\n     * With full C, things aren’t even this easy. The problem comes\n     * about because functions can also have types.\n     *\n     * More specifically, the **BNF for full C** begins with\n     * ```\n     * <program>        ::= ( <top-level decl> )*\n     * <top-level decl> ::= <function def> | <data decl>\n     * <data decl>      ::= [<class>] <type> <decl-list>\n     * <function def>   ::= [<class>] [<type>] <function decl>\n     * ```\n     * The first two parts of the `<data decl>` and `<function def>`\n     * can be the same.\n     * Because of the **ambiguity** in the grammar above, it’s not a\n     * suitable grammar for a recursive-descent parser.\n     *\n     * Can we transform it into one that is suitable?\n     * Yes, with a little work. Suppose we write it this way:\n     * ```\n     * <top-level decl> ::= [<class>] <decl>\n     * <decl>           ::= <type> <typed decl> | <function decl>\n     * <typed decl>     ::= <data list> | <function decl>\n     * ```\n     * We can build a parsing routine for the class and type definitions,\n     * and have them store away their findings and go on,\n     * without their ever having to **know** whether a function or a data\n     * declaration is being processed.\n     *\n     * We use single-character representation as follows\n     *\n     * - **Storage classes** `a`: auto, `x`: extern, `s`: static.\n     *   Default is auto.\n     * - **Sign** `s`: signed, `u`: unsigned. Default is signed.\n     * - **Type** `l`: long, `i`: int, `c`: char. Default for unsigned is int.\n     *\n     * Try some code such as `xula;ub;ucc;ld;ig(){}sch(){}`\n     * which stands for\n     * ```\n     * extern unsigned long a;\n     * unsinged b;\n     * unsigned char c;\n     * long d;\n     * int g() {}\n     * static char h() {}\n     * ```\n     */\n    var theStructureOfC = cradle.extend({\n\n        // For full C.\n        // Main program.\n        main: function () {\n            this.init();\n            while (this.look !== this.LF) {  // ^Z (EOF) instead in real case\n                this.getClass();\n                this.getType();\n                this.topDecl();\n            }\n        },\n\n        // Global variable.\n        class: '',   // storage class: auto, extern, static, register, typedef\n        sign: '',   // signed, unsigned\n        type: '',    // long, int, char, ...\n        classMap: { a: 'auto ', x: 'extern ', s: 'static ' },\n        signMap: { s: 'signed ', u: 'unsigned ' },\n        typeMap: { l: 'long ', i: 'int ', c: 'char ' },\n\n        // Get a storage class specifier.\n        // a: auto, x: extern, s: static.\n        getClass: function () {\n            if (this.look === 'a' || this.look === 'x' || this.look === 's') {\n                this.class = this.look;\n                this.getChar();\n            } else {\n                this.class = 'a';\n            }\n        },\n\n        // Get a type specifier.\n        getType: function () {\n            this.type = ' ';\n            if (this.look === 'u') {\n                this.sign = 'u';\n                this.type = 'i';\n                this.getChar();\n            } else {\n                this.sign = 's';\n            }\n\n            if (this.look === 'i' || this.look === 'l' || this.look === 'c') {\n                this.type = this.look;\n                this.getChar();\n            }\n        },\n\n        // Process a type-level declaration.\n        topDecl: function () {\n            var name = this.getName();\n            if (this.look === '(') {\n                this.doFunc(name);\n            } else {\n                this.doData(name);\n            }\n        },\n\n        // Process a function definition.\n        doFunc: function (name) {\n            this.match('(');\n            this.match(')');\n            this.match('{');\n            this.match('}');\n            if (this.type === ' ') {\n                this.type = 'i';\n            }\n            io.writeLn(this.classMap[this.class], this.signMap[this.sign],\n                    this.typeMap[this.type], name, ' (function)');\n        },\n\n        // Process a data declaration.\n        doData: function (name) {\n            if (this.typ === ' ') {\n                this.expected('Type declaration');\n            }\n            io.writeLn(this.classMap[this.class], this.signMap[this.sign],\n                    this.typeMap[this.type], name, ' (data)');\n            this.match(';');\n        }\n    });\n\n\n    return {\n\n        // 9.3\n        theStructureOfPascal: theStructureOfPascal,\n\n        // 9.4\n        fleshingItOut: fleshingItOut,\n\n        // 9.5\n        declarations: declarations,\n\n        // 9.6\n        theStructureOfC: theStructureOfC\n    };\n});\n\r\n/*global define*/\n\ndefine([\n    './2-expression-parsing',\n    './3-more-expressions',\n    './4-interpreters',\n    './5-control-constructs',\n    './6-boolean-expressions',\n    './7-lexical-scanning',\n    './7.13-kiss',\n    './9.a-top-view',\n    './10-introducing-tiny',\n    './11-lexical-scan-revisited',\n    './11.6-tiny-1.1',\n    './12-miscellany',\n    './13-procedures',\n    './14-types',\n    './15-back-to-the-future',\n    './16-unit-construction'\n], function (\n    expressionParsing,      // 2\n    moreExpressions,        // 3\n    interpreters,           // 4\n    controlConstructs,      // 5\n    booleanExpressions,     // 6\n    lexicalScanning,        // 7\n    kiss,                   // 7.13\n    aTopView,               // 9\n    introducingTiny,        // 10\n    lexicalScanRevisited,   // 11\n    tiny11,                 // 11.6\n    miscellany,             // 12\n    procedures,             // 13\n    types,                  // 14\n    backToTheFuture,        // 15\n    unitConstruction\n) {\n    'use strict';\n\n    return {\n        expressionParsing: expressionParsing,\n        moreExpressions: moreExpressions,\n        interpreters: interpreters,\n        controlConstructs: controlConstructs,\n        booleanExpressions: booleanExpressions,\n        lexicalScanning: lexicalScanning,\n        kiss: kiss,\n        aTopView: aTopView,\n        introducingTiny: introducingTiny,\n        lexicalScanRevisited: lexicalScanRevisited,\n        tiny11: tiny11,\n        miscellany: miscellany,\n        procedures: procedures,\n        types: types,\n        backToTheFuture: backToTheFuture,\n        unitConstruction: unitConstruction\n    };\n});\n\r\n/*global define*/\n\n/**\n * Prologue\n * ========\n * This is a JavaScript port of **Let's Build a Compiler**,\n * *a non-technical introduction to compiler construction*,\n * written from 1988 to 1995 by Jack W. Crenshaw.\n * Please refer to the [original tutorial][original]\n * or alternatively a [LaTeX typeset PDF version][latex].\n *\n * [original]: http://compilers.iecc.com/crenshaw/\n * [latex]: http://www.stack.nl/~marcov/compiler.pdf\n *\n * The JavaScript code was ported section by section based on\n * *prototypal inheritance*.\n * It aims to be translated as direct as possible to the\n * [original Pascal version][original].\n * Some text is taken from the original tutorial to help you to follow\n * the context.\n * A tiny console with an editor when needed is provided\n * for user interactions.\n *\n * The base object\n * ------------\n * The base `object` provides the `object.extend` method\n * for *prototypal inheritance*.\n *\n */\n\ndefine(function () {\n    'use strict';\n\n    var object = {\n\n        // Extend the object (prototyal inheritance).\n        extend: function (obj) {\n            var newObj = Object.create(this),\n                prop;\n\n            for (prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    newObj[prop] = obj[prop];\n                }\n            }\n            return newObj;\n        }\n    };\n\n    return object;\n});\n\r\n/*global define*/\n\n/**\n * Chapter 11 Lexical Scan Revisited\n * ==================================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 11.1 Introduction\n     * ------------------\n     * A way to simplify and improve the lexical scanning part of the\n     * compiler.\n     */\n\n    /**\n     * 11.2 Background\n     * ----------------\n     */\n\n    /**\n     * 11.3 The problem\n     * -----------------\n     * The problem begins to show itself in procedure Block.\n     * At each pass through the loop, we know that we are at the beginning\n     * of a statement. We exit the block when we have scanned an `END` or\n     * an `ELSE`.\n     *\n     * But suppose that we see a semicolon instead. The procedure as it’s\n     * shown above can’t handle that, because procedure Scan only expects\n     * and can only accept tokens that begin with a letter.\n     */\n\n    /**\n     * 11.4 The solution\n     * ------------------\n     * Verify that you can separate a program into a series of tokens,\n     * and that you get the right encoding for each token.\n     *\n     * For example\n     * ```\n     * if foo>=bar\n     *     bar=10*foo\n     * endif\n     * (a+b)*(c+d)\n     * end\n     * .\n     * ```\n     * This ALMOST works, but not quite. There are two potential problems:\n     * - First, in KISS/TINY almost all of our operators are\n     * single-character operators. The only exceptions are the relops\n     * `>=`, `<=`, and `<>`.\n     * - Second, and much more important, the thing doesn’t WORK when two\n     * operators appear together, as in `(a+b)*(c+d)`. Here the string\n     * following `b` would be interpreted as a single operator `)*(`.\n     */\n    var theSolution = cradle.extend({\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Get an identifier.\n        getName: function () {\n            this.skipWhite();                           // <--\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            this.token = 'x';                           // <--\n            this.value = '';\n            do {                                        // <--\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            } while (this.isAlNum(this.look));          // <\n        },\n\n        // Get a Number.\n        getNum: function () {\n            this.skipWhite();                           // <--\n            if (!this.isDigit(this.look)) {\n                this.expected('Number');\n            }\n\n            this.token = '#';                           // <--\n            this.value = '';                            // <\n            do {                                        // <\n                this.value += this.look;                // <\n                this.getChar();\n            } while (this.isDigit(this.look));          // <\n        },\n\n        // Get an operator.\n        getOp: function () {\n            this.token = this.look;\n            this.value = '';\n            do {\n                this.value += this.look;\n                this.getChar();\n            } while (!this.isAlpha(this.look) && !this.isDigit(this.look) &&\n                     !this.isWhite(this.look));\n        },\n\n        // Get the next input token.\n        next: function () {\n            this.skipWhite();\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else {\n                this.getOp();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                this.next();\n                io.writeLn(this.token, ' ', this.value);\n            } while (this.token !== '.');\n        }\n    });\n\n    /**\n     * ### 11.4.2 Single-character operators ###\n     * Since almost all the operators are single characters, let’s just\n     * treat them that way, and let `getOp` get only one character at a time.\n     */\n    var singleCharacterOperators = theSolution.extend({\n\n        // Get an operator.\n        getOp: function () {\n            this.token = this.look;\n            this.value = this.look;\n            this.getChar();\n        },\n\n        // Scan the current identifier for keywords.\n        scan: function () {\n            if (this.token === 'x') {\n                this.token = this.keywordCode(this.value);\n            }\n        },\n\n        // Match a specific input string.\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n\n            this.next();                            // <--\n        }\n    });\n\n    /**\n     * 11.5 Fixing up the compiler\n     * ----------------------------\n     * in file: `11.6-tiny-1.1.js`\n     *\n     * 11.6 Conclusion\n     * ----------------\n     * in file: `11.6-tiny-1.1.js`\n     */\n\n\n    return {\n\n        // 11.4.1\n        theSolution: theSolution,\n\n        // 11.4.2\n        singleCharacterOperators: singleCharacterOperators\n    };\n\n});\n"
}),define("models/content",["lodash","backbone","prettify","marked","common","text!src"],function(n,t,e,i,s,o){"use strict";function a(n){var t=n.length;return"//{"===n[0]&&"//}"===n[t-1]&&(n.shift(),n.pop()),n}function r(n){var t,e,i=u(n),s=d(i);return i=p(i),t=f(s),e=m(t),{docLines:c.slice(i,s),codeLines:c.slice(t,e)}}function h(t){function e(n){var t=n.search(/\S/);return t>-1?t:Number.MAX_VALUE}return e(n.min(t,e))}function l(n,t,e){var i;return t=t||0,e=void 0===e?!0:e,i=e?h(n):0,n.map(function(n){return n.slice(i+t)})}var c=o.split("\n"),u=n.memoize(function(t){return n.findIndex(c,function(e){return n.contains(e,t)})}),p=n.memoize(function(t){var e,i;for(e=t;e>=0;e-=1)if(i=c[e]){if(!n.contains(i,"*"))break;n.contains(i,"/**")&&(t=e)}return t}),d=n.memoize(function(t){var e=n.rest(c,t);return t+n.findIndex(e,function(t){return n.contains(t," */")})}),f=n.memoize(function(n){for(var t=n+1;!c[t].trim();)t+=1;return t}),m=n.memoize(function(t){var e,i,s=c.length,o=0,a=!1,r=!1;for(e=t;s>e;e+=1)if(i=c[e],n.contains(i,"/*")&&(r=!0),n.contains(i,"*/")&&(r=!1),!r&&n.contains(i,"{")&&(o+=1,a=!0),!r&&n.contains(i,"}")&&(o-=1),a&&0===o)return e+1});i.setOptions({highlight:function(t){return e.prettyPrintOne(n.escape(t))}});var g=t.Model.extend({defaults:{doc:"",code:"",hasConsole:!1,hasEditor:!1},update:function(t,o){var h=s.getTitle(t,o),c=r(h),u=l(c.docLines,3).join("\n"),p=a(l(c.codeLines)),d=n.escape(p.join("\n"));this.set("doc",i(u)),this.set("code",e.prettyPrintOne(d))}});return g}),define("models/setting",["backbone"],function(n){"use strict";var t=n.Model.extend({defaults:{editor:!0,editorTitle:"",console:!0,consoleTitle:""},initialize:function(){this.setTitle("editor"),this.setTitle("console")},toggle:function(n){this.set(n,!this.get(n)),this.setTitle(n)},setTitle:function(n){var t=this.get(n);t?this.set(n+"Title","<div>The "+n+" is shown when available.</div><div>Uncheck to hide the "+n+".</div>"):this.set(n+"Title","<div>Check to show the "+n+"</div><div>when available.</div>")}});return t}),define("models/pagerItem",["backbone"],function(n){"use strict";var t=n.Model.extend({defaults:{className:"",href:"#",title:"Untitled",text:"Untitled",placement:""}});return t}),define("collections/pager",["lodash","backbone","models/pagerItem","data/toc"],function(n,t,e,i){"use strict";function s(t,e){var o,a,r=n.reject(i[t].sections,"disabled"),h=n.findIndex(r,{sec:e})-1,l="last"===e?n.last(r):r[h];if(l)o=l.sec,a="&sect;"+o+" "+l.title;else{if(!e)return t>0?s(t-1,"last"):null;a=(t?"Chapter "+i[t].ch+" ":"")+i[t].title}return{className:"previous",ch:t,sec:o,title:a,text:"&laquo; Previous"}}function o(t,e){var s,o,a=16,r=n.reject(i[t].sections,"disabled"),h=n.findIndex(r,{sec:e})+1,l=r[h];if(l)s=l.sec,o="&sect;"+s+" "+l.title;else{if(!(a>t))return null;t+=1,o="Chapter "+i[t].ch+" "+i[t].title}return{className:"next",ch:t,sec:s,title:o,text:"Next &raquo;",placement:"bottom"}}function a(t,e){var a,r=i[t],h=[];return a=s(t,e),a&&h.push(a),h.push({className:e?"":"disabled",ch:t,sec:null,title:(t?"Chapter "+t+" ":"")+r.title,text:t?"Ch"+t:r.title}),n(r.sections).reject("disabled").each(function(n){h.push({className:n.sec===e?"disabled":"",ch:t,sec:n.sec,title:"&sect;"+n.sec+" "+n.title,text:n.sec})}),a=o(t,e),a&&h.push(a),h}var r=t.Collection.extend({model:e,update:function(n,t){this.reset(a(n,t))}});return r}),define("views/pager",["jquery","backbone","templates"],function(n,t,e){"use strict";var i=t.View.extend({itemTemplate:e["app/scripts/templates/pagerItem.ejs"],events:{"click a":"itemClicked"},initialize:function(){this.listenTo(this.collection,"reset",this.render)},render:function(){var n=this.itemTemplate,t=this.collection.map(function(t){return n(t.attributes)}).join("");this.$el.html(t).find("a").tooltip()},itemClicked:function(t){var e=n(t.target).attr("href");return this.trigger("click:item",e),!1}});return i}),define("views/setting",["jquery","backbone","templates"],function(n,t,e){"use strict";var i=t.View.extend({className:"clearfix",template:e["app/scripts/templates/setting.ejs"],events:{"click #toggle-editor":"toggleEditorItem","click #toggle-console":"toggleConsoleItem"},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$toggleEditor=this.$("#toggle-editor"),this.$toggleConsole=this.$("#toggle-console"),this.$toggleEditor.tooltip({html:!0}),this.$toggleConsole.tooltip({html:!0}),this},toggleEditorItem:function(n){this.model.toggle("editor"),n.preventDefault(),this.$("#toggle-editor i").toggleClass("icon-ok",this.model.get("editor")),this.$toggleEditor.tooltip("destroy").tooltip({title:this.model.get("editorTitle"),html:!0})},toggleConsoleItem:function(n){this.model.toggle("console"),n.preventDefault(),this.$("#toggle-console i").toggleClass("icon-ok",this.model.get("console")),this.$toggleConsole.tooltip("destroy").tooltip({title:this.model.get("consoleTitle"),html:!0})}});return i}),define("lbac/object",[],function(){"use strict";var n={extend:function(n){var t,e=Object.create(this);for(t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e}};return n}),define("io",[],function(){"use strict";var n;return{set:function(t){n=t},read:function(){return n.read()},readLn:function(){return n.readLn()},write:function(){return n.write.apply(null,arguments)},writeLn:function(){return n.writeLn.apply(null,arguments)},halt:function(){return n.halt()}}}),define("lbac/1.2-cradle",["./object","io"],function(n,t){"use strict";var e=n.extend({TAB:"	",CR:"\r",LF:"\n",look:"",getChar:function(){this.look=t.read()},error:function(n){t.writeLn("Error: ",n,".")},abort:function(n){this.error(n),t.halt()},expected:function(n){this.abort(n+" Expected")},match:function(n){this.look!==n&&this.expected('"'+n+'"'),this.getChar()},isAlpha:function(n){return/[A-Z]/i.test(n)},isDigit:function(n){return/\d/.test(n)},getName:function(){this.isAlpha(this.look)||this.expected("Name");var n=this.look.toUpperCase();return this.getChar(),n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");var n=this.look;return this.getChar(),n},emit:function(n){t.write(this.TAB,n)},emitLn:function(n){this.emit(n),t.writeLn()},init:function(){this.getChar()},main:function(){this.init()}});return e}),define("lbac/2-expression-parsing",["./1.2-cradle"],function(n){"use strict";var t=n.extend({expression:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},main:function(){this.init(),this.expression()}}),e=t.extend({term:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},add:function(){this.match("+"),this.term(),this.emitLn("ADD D1, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB D1, D0"),this.emitLn("NEG D0")},expression:function(){switch(this.term(),this.emitLn("MOVE D0, D1"),this.look){case"+":this.add();break;case"-":this.subtract();break;default:this.expected("Addop")}}}),i=e.extend({expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, D1"),this.look){case"+":this.add();break;case"-":this.subtract()}}}),s=e.extend({add:function(){this.match("+"),this.term(),this.emitLn("ADD (SP)+, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}}}),o=s.extend({factor:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},multiply:function(){this.match("*"),this.factor(),this.emitLn("MULS (SP)+, D0")},divide:function(){this.match("/"),this.factor(),this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},term:function(){for(this.factor();"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}}}),a=o.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.emitLn("MOVE #"+this.getNum()+" ,D0")}}),r=a.extend({isAddop:function(n){return"+"===n||"-"===n},expression:function(){for(this.isAddop(this.look)?this.emitLn("CLR D0"):this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}}});return{singleDigits:t,binaryExpressions:e,generalExpressions:i,usingTheStack:s,multiplicationAndDivision:o,parentheses:a,unaryMinus:r}}),define("lbac/3-more-expressions",["./2-expression-parsing"],function(n){"use strict";var t=n.unaryMinus.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.emitLn("MOVE "+this.getName()+"(PC), D0"):this.emitLn("MOVE #"+this.getNum()+" ,D0")}}),e=t.extend({identifier:function(){var n=this.getName();"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+n)):this.emitLn("MOVE "+n+"(PC), D0")},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+", D0")}}),i=e.extend({main:function(){this.init(),this.expression(),this.look!==this.LF&&this.expected("Newline")}}),s=i.extend({assignment:function(){var n=this.getName();this.match("="),this.expression(),this.emitLn("LEA "+n+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},main:function(){this.init(),this.assignment(),this.look!==this.LF&&this.expected("Newline")}}),o=s.extend({isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var n="";this.isAlNum(this.look);)n+=this.look.toUpperCase(),this.getChar();return n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var n="";this.isDigit(this.look);)n+=this.look,this.getChar();return n}}),a=o.extend({isWhite:function(n){return" "===n||n===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},match:function(n){this.look!==n&&this.expected('"'+n+'"'),this.getChar(),this.skipWhite()},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var n="";this.isAlNum(this.look);)n+=this.look.toUpperCase(),this.getChar();return this.skipWhite(),n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var n="";this.isDigit(this.look);)n+=this.look,this.getChar();return this.skipWhite(),n},init:function(){this.getChar(),this.skipWhite()}});return{variables:t,functions:e,moreOnErrorHandling:i,assignmentStatements:s,multiCharacterTokens:o,whiteSpace:a}}),define("lbac/4-interpreters",["./1.2-cradle","io"],function(n,t){"use strict";var e=n.extend({getNum:function(){this.isDigit(this.look)||this.expected("Integer");var n=+this.look;return this.getChar(),n},expression:function(){return this.getNum()},main:function(){this.init(),t.writeLn(this.expression())}}),i=e.extend({isAddop:function(n){return"+"===n||"-"===n},expression:function(){for(var n=this.isAddop(this.look)?0:this.getNum();this.isAddop(this.look);)switch(this.look){case"+":this.match("+"),n+=this.getNum();break;case"-":this.match("-"),n-=this.getNum()}return n}}),s=i.extend({term:function(){for(var n=this.getNum();"*"===this.look||"/"===this.look;)switch(this.look){case"*":this.match("*"),n*=this.getNum();break;case"/":this.match("/"),n=Math.floor(n/this.getNum())}return n},expression:function(){for(var n=this.isAddop(this.look)?0:this.term();this.isAddop(this.look);)switch(this.look){case"+":this.match("+"),n+=this.term();break;case"-":this.match("-"),n-=this.term()}return n}}),o=s.extend({getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var n=0;this.isDigit(this.look);)n=10*n+ +this.look,this.getChar();return n}}),a=o.extend({factor:function(){var n;return"("===this.look?(this.match("("),n=this.expression(),this.match(")")):n=this.getNum(),n},term:function(){for(var n=this.factor();"*"===this.look||"/"===this.look;)switch(this.look){case"*":this.match("*"),n*=this.factor();break;case"/":this.match("/"),n=Math.floor(n/this.factor())}return n}}),r=a.extend({table:{},initTable:function(){var n,t,e="A".charCodeAt(0);for(n=0;26>n;n+=1)t=String.fromCharCode(e+n),this.table[t]=0},init:function(){this.initTable(),this.getChar()},factor:function(){var n;return"("===this.look?(this.match("("),n=this.expression(),this.match(")")):n=this.isAlpha(this.look)?this.table[this.getName()]:this.getNum(),n}}),h=r.extend({assignment:function(){var n=this.getName();this.match("="),this.table[n]=this.expression()},main:function(){this.init(),this.assignment(),t.writeLn("A = "+this.table.A)}}),l=h.extend({newLine:function(){this.look===this.LF&&this.getChar()},main:function(){this.init();do this.assignment(),this.newLine();while("."!==this.look)}}),c=l.extend({input:function(){this.match("?")},output:function(){this.match("!"),t.writeLn(this.table[this.getName()])},main:function(){this.init();do{switch(this.look){case"?":this.input();break;case"!":this.output();break;default:this.assignment()}this.newLine()}while("."!==this.look)}});return{singleDigits:e,additionAndSubtraction:i,multiplicationAndDivision:s,multiDigitsNumber:o,factor:a,variables:r,assignmentStatements:h,multipleStatements:l,ioRoutines:c}}),define("lbac/5-control-constructs",["./1.2-cradle","io"],function(n,t){"use strict";var e=n.extend({other:function(){this.emitLn("<block "+this.getName()+">")},main:function(){this.init(),this.other()}}),i=e.extend({block:function(){for(;"e"!==this.look;)this.other()},doProgram:function(){this.block(),"e"!==this.look&&this.expected("End"),this.emitLn("END")},main:function(){this.init(),this.doProgram()}}),s=i.extend({lCount:0,newLabel:function(){var n="L"+this.lCount;return this.lCount+=1,n},postLabel:function(n){t.writeLn(n+":")},init:function(){this.lCount=0,this.getChar()}}),o=s.extend({condition:function(){this.emitLn("<condition>")},doIf:function(){var n;this.match("i"),n=this.newLabel(),this.condition(),this.emitLn("BEQ "+n),this.block(),this.match("e"),this.postLabel(n)},block:function(){for(;"e"!==this.look;)switch(this.look){case"i":this.doIf();break;default:this.other()}}}),a=o.extend({doIf:function(){var n,t;this.match("i"),this.condition(),n=t=this.newLabel(),this.emitLn("BEQ "+n),this.block(),"l"===this.look&&(this.match("l"),t=this.newLabel(),this.emitLn("BRA "+t),this.postLabel(n),this.block()),this.match("e"),this.postLabel(t)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;default:this.other()}}}),r=a.extend({doWhile:function(){var n,t;this.match("w"),n=this.newLabel(),t=this.newLabel(),this.postLabel(n),this.condition(),this.emitLn("BEQ "+t),this.block(),this.match("e"),this.emitLn("BRA "+n),this.postLabel(t)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.other()}}}),h=r.extend({doLoop:function(){var n;this.match("p"),n=this.newLabel(),this.postLabel(n),this.block(),this.match("e"),this.emitLn("BRA "+n)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;default:this.other()}}}),l=h.extend({doRepeat:function(){var n;this.match("r"),n=this.newLabel(),this.postLabel(n),this.block(),this.match("u"),this.condition(),this.emitLn("BEQ "+n)},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;default:this.other()}}}),c=l.extend({expression:function(){this.emitLn("<expression>")},doFor:function(){var n,t,e;this.match("f"),n=this.newLabel(),t=this.newLabel(),e=this.getName(),this.match("="),this.expression(),this.emitLn("SUBQ #1, D0"),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE D0, (A0)"),this.expression(),this.emitLn("MOVE D0, -(SP)"),this.postLabel(n),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE (A0), D0"),this.emitLn("ADDQ #1, D0"),this.emitLn("MOVE D0, (A0)"),this.emitLn("CMP (SP), D0"),this.emitLn("BGT "+t),this.block(),this.match("e"),this.emitLn("BRA "+n),this.postLabel(t),this.emitLn("ADDQ #2, SP")},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;default:this.other()}}}),u=c.extend({doDo:function(){var n;this.match("d"),n=this.newLabel(),this.expression(),this.emitLn("SUBQ #1, D0"),this.postLabel(n),this.emitLn("MOVE D0, -(SP)"),this.block(),this.match("e"),this.emitLn("MOVE (SP)+, D0"),this.emitLn("DBRA D0, "+n)},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;default:this.other()}}}),p=u.extend({doIf:function(n){var t,e;this.match("i"),this.condition(),t=e=this.newLabel(),this.emitLn("BEQ "+t),this.block(n),"l"===this.look&&(this.match("l"),e=this.newLabel(),this.emitLn("BRA "+e),this.postLabel(t),this.block(n)),this.match("e"),this.postLabel(e)},doWhile:function(){var n,t;this.match("w"),n=this.newLabel(),t=this.newLabel(),this.postLabel(n),this.condition(),this.emitLn("BEQ "+t),this.block(t),this.match("e"),this.emitLn("BRA "+n),this.postLabel(t)},doLoop:function(){var n,t;this.match("p"),n=this.newLabel(),t=this.newLabel(),this.postLabel(n),this.block(t),this.match("e"),this.emitLn("BRA "+n),this.postLabel(t)},doRepeat:function(){var n,t;this.match("r"),n=this.newLabel(),t=this.newLabel(),this.postLabel(n),this.block(t),this.match("u"),this.condition(),this.emitLn("BEQ "+n),this.postLabel(t)},doFor:function(){var n,t,e;this.match("f"),n=this.newLabel(),t=this.newLabel(),e=this.getName(),this.match("="),this.expression(),this.emitLn("SUBQ #1, D0"),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE D0, (A0)"),this.expression(),this.emitLn("MOVE D0, -(SP)"),this.postLabel(n),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE (A0), D0"),this.emitLn("ADDQ #1, D0"),this.emitLn("MOVE D0,(A0)"),this.emitLn("CMP (SP), D0"),this.emitLn("BGT "+t),this.block(t),this.match("e"),this.emitLn("BRA "+n),this.postLabel(t),this.emitLn("ADDQ #2, SP")},doDo:function(){var n,t;this.match("d"),n=this.newLabel(),t=this.newLabel(),this.expression(),this.emitLn("SUBQ #1, D0"),this.postLabel(n),this.emitLn("MOVE D0, -(SP)"),this.block(t),this.emitLn("MOVE (SP)+, D0"),this.emitLn("DBRA D0, "+n),this.emitLn("SUBQ #2, SP"),this.postLabel(t),this.emitLn("ADDQ #2, SP")},doBreak:function(n){n||this.abort("No loop to break from"),this.match("b"),this.emitLn("BRA "+n)},block:function(n){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf(n);break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;case"b":this.doBreak(n);break;default:this.other()}}});return{oneStatement:e,moreThanOneStatement:i,someGroundwork:s,theIfStatement:o,addTheElseClause:a,theWhileStatement:r,theLoopStatement:h,theRepeatUntilStatement:l,theForLoop:c,theDoStatement:u,theBreakStatement:p}}),define("lbac/6-boolean-expressions",["./1.2-cradle","./3-more-expressions","./5-control-constructs","jquery","io"],function(n,t,e,i,s){"use strict";var o=n.extend({isBoolean:function(n){return n=n.toUpperCase(),"T"===n||"F"===n},getBoolean:function(){this.isBoolean(this.look)||this.expected("Boolean Literal");var n="T"===this.look.toUpperCase();return this.getChar(),n},main:function(){this.init(),s.writeLn(this.getBoolean())}}),a=o.extend({boolExpression:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},main:function(){this.init(),this.boolExpression()}}),r=a.extend({isOrop:function(n){return"|"===n||"~"===n},boolTerm:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},boolOr:function(){this.match("|"),this.boolTerm(),this.emitLn("OR (SP)+, D0")},boolXor:function(){this.match("~"),this.boolTerm(),this.emitLn("EOR (SP)+, D0")},boolExpression:function(){for(this.boolTerm();this.isOrop(this.look);)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"|":this.boolOr();break;case"~":this.boolXor()}}}),h=r.extend({notFactor:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},boolTerm:function(){for(this.notFactor();"&"===this.look;)this.emitLn("MOVE D0, -(SP)"),this.match("&"),this.notFactor(),this.emitLn("AND (SP)+, D0")}}),l=h.extend({boolFactor:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},notFactor:function(){"!"===this.look?(this.match("!"),this.boolFactor(),this.emitLn("EOR #-1, D0")):this.boolFactor()}}),c=l.extend({relation:function(){this.emitLn("<relation "+this.getName()+">")},boolFactor:function(){this.isBoolean(this.look)?this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0"):this.relation()}}),u=c.extend({isRelop:function(n){return"="===n||"#"===n||"<"===n||">"===n},equals:function(){this.match("="),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SEQ D0")},notEquals:function(){this.match("#"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SNE D0")},less:function(){this.match("<"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SGE D0")},greater:function(){this.match(">"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SLE D0")},relation:function(){if(this.expression(),this.isRelop(this.look)){switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"=":this.equals();break;case"#":this.notEquals();break;case"<":this.less();break;case">":this.greater()}this.emitLn("TST D0")}},expression:function(){this.emitLn("<Expression "+this.getName()+">")}}),p=i.extend(!0,{},t.assignmentStatements,u,{expression:t.assignmentStatements.expression}),d=p.extend({expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}},term:function(){for(this.signedFactor();"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}},signedFactor:function(){"+"===this.look&&this.getChar(),"-"===this.look?(this.getChar(),this.isDigit(this.look)?this.emitLn("MOVE #-"+this.getNum()+", D0"):(this.factor(),this.emitLn("NEG D0"))):this.factor()},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+", D0")}}),f=i.extend(!0,{},d,e.theBreakStatement,{condition:d.boolExpression,expression:d.expression,other:d.boolExpression}),m=f.extend({fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar()},block:function(n){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;){switch(this.fin(),this.look){case"i":this.doIf(n);break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;case"b":this.doBreak(n);break;default:this.assignment()}this.fin()}},assignment:function(){var n=this.getName();this.match("="),this.boolExpression(),this.emitLn("LEA "+n+"(PC), A0"),this.emitLn("MOVE D0, (A0)")}});return{booleanLiteral1:o,booleanLiteral2:a,orOperation:r,andOperation:h,notOperation:l,expandTheFactor:c,fullBlownRelation:u,mergingWithExpressions:p,changeToLatestExpressionSyntax:d,mergingWithControlConstructs:f,addingAssignments:m}}),define("lbac/7-lexical-scanning",["./1.2-cradle","io"],function(n,t){"use strict";var e=n.extend({isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var n="";this.isAlNum(this.look);)n+=this.look.toUpperCase(),this.getChar();return n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var n="";this.isDigit(this.look);)n+=this.look,this.getChar();return n},main:function(){this.init(),t.writeLn(this.getName())}}),i=e.extend({isWhite:function(n){return" "===n||n===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var n="";this.isAlNum(this.look);)n+=this.look.toUpperCase(),this.getChar();return this.skipWhite(),n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var n="";this.isDigit(this.look);)n+=this.look,this.getChar();return this.skipWhite(),n},scan:function(){var n;return this.isAlpha(this.look)?n=this.getName():this.isDigit(this.look)?n=this.getNum():(n=this.look,this.getChar()),this.skipWhite(),n},main:function(){var n;this.init();do n=this.scan(),t.writeLn(n);while(n!==this.LF)}}),s=i.extend({fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar()},main:function(){var n;this.init();do{for(;this.look===this.LF;)this.fin();n=this.scan(),t.writeLn(n)}while("."!==n)}}),o=s.extend({isOp:function(n){return"+"===n||"-"===n||"*"===n||"/"===n||"<"===n||">"===n||":"===n||"="===n},getOp:function(){this.isOp(this.look)||this.expected("Operator");for(var n="";this.isOp(this.look);)n+=this.look,this.getChar();return n},scan:function(){var n;return this.isAlpha(this.look)?n=this.getName():this.isDigit(this.look)?n=this.getNum():this.isOp(this.look)?n=this.getOp():(n=this.look,this.getChar()),this.skipWhite(),n}}),a=o.extend({skipComma:function(){this.skipWhite(),","===this.look&&(this.getChar(),this.skipWhite())},scan:function(){var n;return this.isAlpha(this.look)?n=this.getName():this.isDigit(this.look)?n=this.getNum():this.isOp(this.look)?n=this.getOp():(n=this.look,this.getChar()),this.skipComma(),n}}),r=a.extend({keywordType:{IF:0,ELSE:1,ENDIF:2,END:3},main:function(){var n=t.readLn().toUpperCase();t.writeLn(this.keywordType[n])}}),h=r.extend({symType:{ifSym:0,elseSym:1,endifSym:2,endSym:3,ident:4,number:5,operator:6},token:0,value:"",scan:function(){for(var n;this.look===this.LF;)this.fin();this.skipWhite(),this.isAlpha(this.look)?(this.value=this.getName(),n=this.keywordType[this.value],this.token=void 0===n?this.symType.ident:n):this.isDigit(this.look)?(this.value=this.getNum(),this.token=this.symType.number):this.isOp(this.look)?(this.value=this.getOp(),this.token=this.symType.operator):(this.value=this.look,this.token=this.symType.operator,this.getChar()),this.skipWhite()},main:function(){this.init();do{switch(this.scan(),this.token){case this.symType.ident:t.write("Ident    : ");break;case this.symType.number:t.write("Number   : ");break;case this.symType.operator:t.write("Operator : ");break;case this.symType.ifSym:case this.symType.elseSym:case this.symType.endifSym:case this.symType.endSym:t.write("Keyword  : ")}t.writeLn(this.value)}while(this.token!==this.symType.endSym)}}),l=h.extend({getName:function(){this.isAlpha(this.look)||this.expected("Name");var n;for(this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();n=this.keywordType[this.value],this.token=void 0===n?this.symType.ident:n},getNum:function(){for(this.isDigit(this.look)||this.expected("Integer"),this.value="";this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token=this.symType.number},getOp:function(){for(this.isOp(this.look)||this.expected("Operator"),this.value="";this.isOp(this.look);)this.value+=this.look,this.getChar();this.token=this.symType.operator},scan:function(){for(;this.look===this.LF;)this.fin();this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.isOp(this.look)?this.getOp():(this.value=this.look,this.getChar()),this.skipWhite()}}),c=l.extend({keywordCode:"xilee",keywordType:{IF:1,ELSE:2,ENDIF:3,END:4},getName:function(){this.isAlpha(this.look)||this.expected("Name");var n;for(this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();n=this.keywordType[this.value]||0,this.token=this.keywordCode.charAt(n)},getNum:function(){for(this.isDigit(this.look)||this.expected("Integer"),this.value="";this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token="#"},getOp:function(){for(this.isOp(this.look)||this.expected("Operator"),this.value="";this.isOp(this.look);)this.value+=this.look,this.getChar();this.token=1===this.value.length?this.value:"?"},scan:function(){for(;this.look===this.LF;)this.fin();this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.isOp(this.look)?this.getOp():(this.value=this.look,this.token="?",this.getChar()),this.skipWhite()},main:function(){this.init();do{switch(this.scan(),this.token){case"x":t.write("Ident ");break;case"#":t.write("Number ");break;case"i":case"l":case"e":t.write("Keyword ");break;default:t.write("Operator ")}t.writeLn(this.value)}while("END"!==this.value)}});return{someExperimentsInScanning:e,whiteSpace:i,newlines:s,operators:o,listsCommasAndCommandLines:a,gettingFancy:r,returningCodes:h,cleanupWithGlobal:l,returningACharacter:c}}),define("lbac/7.13-kiss",["./object","io"],function(n,t){"use strict";var e=n.extend({TAB:"	",CR:"\r",LF:"\n",look:"",lCount:0,getChar:function(){this.look=t.read()},error:function(n){t.writeLn("Error: ",n,".")},abort:function(n){this.error(n),t.halt()},expected:function(n){this.abort(n+" Expected")},isAlpha:function(n){return/[A-Z]/i.test(n)},isDigit:function(n){return/\d/.test(n)},isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},isAddop:function(n){return"+"===n||"-"===n},isMulop:function(n){return"*"===n||"/"===n},isWhite:function(n){return" "===n||n===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},match:function(n){this.look!==n&&this.expected('"'+n+'"'),this.getChar(),this.skipWhite()},fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar(),this.skipWhite()},getName:function(){for(;this.look===this.LF;)this.fin();this.isAlpha(this.look)||this.expected("Name");var n=this.look.toUpperCase();return this.getChar(),this.skipWhite(),n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");var n=this.look;return this.getChar(),this.skipWhite(),n},newLabel:function(){var n="L"+this.lCount;return this.lCount+=1,n},postLabel:function(n){t.writeLn(n+":")},emit:function(n){t.write(this.TAB+n)},emitLn:function(n){this.emit(n),t.writeLn()},identifier:function(){var n=this.getName();"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+n)):this.emitLn("MOVE "+n+"(PC), D0")},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+" ,D0")},signedFactor:function(){var n="-"===this.look;this.isAddop(this.look)&&(this.getChar(),this.skipWhite()),n?this.isDigit(this.look)?this.emitLn("MOVE #-"+this.getNum()+", D0"):(this.factor(),this.emitLn("NEG D0")):this.factor()},multiply:function(){this.match("*"),this.factor(),this.emitLn("MULS (SP)+, D0")},divide:function(){this.match("/"),this.factor(),this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},term1:function(){for(;"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}},term:function(){this.factor(),this.term1()},firstTerm:function(){this.signedFactor(),this.term1()},add:function(){this.match("+"),this.term(),this.emitLn("ADD (SP)+, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},expression:function(){for(this.firstTerm();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()
}},condition:function(){this.emitLn("<condition>")},doIf:function(){var n,t;this.match("i"),this.condition(),n=t=this.newLabel(),this.emitLn("BEQ "+n),this.block(),"l"===this.look&&(this.match("l"),t=this.newLabel(),this.emitLn("BRA "+t),this.postLabel(n),this.block()),this.match("e"),this.postLabel(t)},assignment:function(){var n=this.getName();this.match("="),this.expression(),this.emitLn("LEA "+n+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case this.LF:for(;this.look===this.LF;)this.fin();break;default:this.assignment()}},doProgram:function(){this.block(),"e"!==this.look&&this.expected("End"),this.emitLn("END")},init:function(){this.lCount=0,this.getChar()},main:function(){this.init(),this.doProgram()}}),i=e.extend({token:"",value:"",keywordCode:"xilee",keywordType:{IF:1,ELSE:2,ENDIF:3,END:4},getName:function(){for(;this.look===this.LF;)this.fin();for(this.isAlpha(this.look)||this.expected("Name"),this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();this.skipWhite()},getNum:function(){for(this.isDigit(this.look)||this.expected("Integer"),this.value="";this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token="#",this.skipWhite()},scan:function(){this.getName();var n=this.keywordType[this.value]||0;this.token=this.keywordCode.charAt(n)},matchString:function(n){this.value!==n&&this.expected('"'+n+'"')},identifier:function(){this.getName(),"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+this.value)):this.emitLn("MOVE "+this.value+"(PC), D0")},signedFactor:function(){var n="-"===this.look;this.isAddop(this.look)&&(this.getChar(),this.skipWhite()),n?this.isDigit(this.look)?(this.getNum(),this.emitLn("MOVE #-"+this.value+", D0")):(this.factor(),this.emitLn("NEG D0")):this.factor()},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():(this.getNum(),this.emitLn("MOVE #"+this.value+" ,D0"))},doIf:function(){var n,t;this.condition(),n=t=this.newLabel(),this.emitLn("BEQ "+n),this.block(),"l"===this.token&&(t=this.newLabel(),this.emitLn("BRA "+t),this.postLabel(n),this.block()),this.postLabel(t),this.matchString("ENDIF")},assignment:function(){var n=this.value;this.match("="),this.expression(),this.emitLn("LEA "+n+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;default:this.assignment()}this.scan()}},doProgram:function(){this.block(),this.matchString("END"),this.emitLn("END")}});return{judiciousCopying:e,mergingScannerAndParser:i}}),define("lbac/9.a-top-view",["./1.2-cradle","io"],function(n,t){"use strict";var e=n.extend({prog:function(){var n;this.match("p"),n=this.getName(),this.prolog(n),this.match("."),this.epilog(n)},prolog:function(){this.emitLn("WARMST EQU $A01E")},epilog:function(n){this.emitLn("DC WARMST"),this.emitLn("END "+n)},main:function(){this.init(),this.prog()}}),i=e.extend({postLabel:function(n){t.writeLn(n+":")},declarations:function(){},statements:function(){},doBlock:function(n){this.declarations(),this.postLabel(n),this.statements()},prog:function(){var n;this.match("p"),n=this.getName(),this.prolog(n),this.doBlock(n),this.match("."),this.epilog(n)}}),s=i.extend({labels:function(){this.match("l")},constants:function(){this.match("c")},types:function(){this.match("t")},variables:function(){this.match("v")},doProcedure:function(){this.match("p")},doFunction:function(){this.match("f")},declarations:function(){for(;/[lctvpf]/.test(this.look);)switch(this.look){case"l":this.labels();break;case"c":this.constants();break;case"t":this.types();break;case"v":this.variables();break;case"p":this.doProcedure();break;case"f":this.doFunction()}},statements:function(){for(this.match("b");"e"!==this.look;)this.getChar();this.match("e")}}),o=n.extend({main:function(){for(this.init();this.look!==this.LF;)this.getClass(),this.getType(),this.topDecl()},"class":"",sign:"",type:"",classMap:{a:"auto ",x:"extern ",s:"static "},signMap:{s:"signed ",u:"unsigned "},typeMap:{l:"long ",i:"int ",c:"char "},getClass:function(){"a"===this.look||"x"===this.look||"s"===this.look?(this.class=this.look,this.getChar()):this.class="a"},getType:function(){this.type=" ","u"===this.look?(this.sign="u",this.type="i",this.getChar()):this.sign="s",("i"===this.look||"l"===this.look||"c"===this.look)&&(this.type=this.look,this.getChar())},topDecl:function(){var n=this.getName();"("===this.look?this.doFunc(n):this.doData(n)},doFunc:function(n){this.match("("),this.match(")"),this.match("{"),this.match("}")," "===this.type&&(this.type="i"),t.writeLn(this.classMap[this.class],this.signMap[this.sign],this.typeMap[this.type],n," (function)")},doData:function(n){" "===this.typ&&this.expected("Type declaration"),t.writeLn(this.classMap[this.class],this.signMap[this.sign],this.typeMap[this.type],n," (data)"),this.match(";")}});return{theStructureOfPascal:e,fleshingItOut:i,declarations:s,theStructureOfC:o}}),define("lbac/10-introducing-tiny",["./1.2-cradle","io"],function(n,t){"use strict";var e=n.extend({prog:function(){this.match("p"),this.header(),this.prolog(),this.match("."),this.epilog()},header:function(){t.writeLn("WARMST",this.TAB,"EQU $A01E")},prolog:function(){this.postLabel("MAIN")},postLabel:function(n){t.writeLn(n+":")},epilog:function(){this.emitLn("DC WARMST"),this.emitLn("END MAIN")},main:function(){this.init(),this.prog(),this.look!==this.LF&&this.abort('Unexpected data after "."')}}),i=e.extend({prog:function(){this.match("p"),this.header(),this.doMain(),this.match(".")},doMain:function(){this.match("b"),this.prolog(),this.match("e"),this.epilog()}}),s=i.extend({decl:function(){this.match("v"),this.getChar()},topDecls:function(){for(;"b"!==this.look;)switch(this.look){case"v":this.decl();break;default:this.abort('Unrecognized Keyword "'+this.look+'"')}},prog:function(){this.match("p"),this.header(),this.topDecls(),this.doMain(),this.match(".")}}),o=s.extend({decl:function(){this.match("v"),this.alloc(this.getName())},alloc:function(n){t.writeLn(n,":",this.TAB,"DC 0")}}),a=o.extend({decl:function(){for(this.match("v"),this.alloc(this.getName());","===this.look;)this.getChar(),this.alloc(this.getName())}}),r=a.extend({alloc:function(n){t.write(n,":",this.TAB,"DC "),"="===this.look?(this.match("="),t.writeLn(this.getNum())):t.writeLn("0")}}),h=r.extend({getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var n=0;this.isDigit(this.look);)n=+this.look+10*n,this.getChar();return n},alloc:function(n){t.write(n,":",this.TAB,"DC "),"="===this.look?(this.match("="),"-"===this.look&&(t.write("-"),this.match("-")),t.writeLn(this.getNum())):t.writeLn("0")}}),l=h.extend({symbolTable:null,inTable:function(n){return!!this.symbolTable[n]},alloc:function(n){this.inTable(n)&&this.abort("Duplicate Variable Name "+n),this.symbolTable[n]="v",t.write(n,":",this.TAB,"DC "),"="===this.look?(this.match("="),"-"===this.look&&(t.write("-"),this.match("-")),t.writeLn(this.getNum())):t.writeLn("0")},init:function(){this.symbolTable={},this.getChar()}}),c=l.extend({assignment:function(){this.getChar()},block:function(){for(;"e"!==this.look;)this.assignment()},doMain:function(){this.match("b"),this.prolog(),this.block(),this.match("e"),this.epilog()}}),u=c.extend({clear:function(){this.emitLn("CLR D0")},negate:function(){this.emitLn("NEG D0")},loadConst:function(n){this.emitLn("MOVE #"+n+", D0")},loadVar:function(n){this.inTable(n)||this.undefined(n),this.emitLn("MOVE "+n+"(PC), D0")},push:function(){this.emitLn("MOVE D0, -(SP)")},popAdd:function(){this.emitLn("ADD (SP)+, D0")},popSub:function(){this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},popMul:function(){this.emitLn("MULS (SP)+, D0")},popDiv:function(){this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},store:function(n){this.inTable(n)||this.undefined(n),this.emitLn("LEA "+n+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},undefined:function(n){this.abort("Undefined Identifier "+n)}}),p=u.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.loadVar(this.getName()):this.loadConst(this.getNum())},negFactor:function(){this.match("-"),this.isDigit(this.look)?this.loadConst(-this.getNum()):(this.factor(),this.negate())},firstFactor:function(){switch(this.look){case"+":this.match("+"),this.factor();break;case"-":this.negFactor();break;default:this.factor()}},multiply:function(){this.match("*"),this.factor(),this.popMul()},divide:function(){this.match("/"),this.factor(),this.popDiv()},isMulop:function(n){return"*"===n||"/"===n},term1:function(){for(;this.isMulop(this.look);)switch(this.push(),this.look){case"*":this.multiply();break;case"/":this.divide()}},term:function(){this.factor(),this.term1()},firstTerm:function(){this.firstFactor(),this.term1()},add:function(){this.match("+"),this.term(),this.popAdd()},subtract:function(){this.match("-"),this.term(),this.popSub()},isAddop:function(n){return"+"===n||"-"===n},expression:function(){for(this.firstTerm();this.isAddop(this.look);)switch(this.push(),this.look){case"+":this.add();break;case"-":this.subtract()}},assignment:function(){var n=this.getName();this.match("="),this.expression(),this.store(n)}}),d=p.extend({notIt:function(){this.emitLn("NOT D0")},popAnd:function(){this.emitLn("AND (SP)+, D0")},popOr:function(){this.emitLn("OR (SP)+, D0")},popXor:function(){this.emitLn("EOR (SP)+, D0")},popCompare:function(){this.emitLn("CMP (SP)+, D0")},setEqual:function(){this.emitLn("SEQ D0"),this.emitLn("EXT D0")},setNEqual:function(){this.emitLn("SNE D0"),this.emitLn("EXT D0")},setGreater:function(){this.emitLn("SLT D0"),this.emitLn("EXT D0")},setLess:function(){this.emitLn("SGT D0"),this.emitLn("EXT D0")}}),f=d.extend({isOrop:function(n){return"|"===n||"~"===n},isRelop:function(n){return"="===n||"#"===n||"<"===n||">"===n},equals:function(){this.match("="),this.expression(),this.popCompare(),this.setEqual()},notEquals:function(){this.match("#"),this.expression(),this.popCompare(),this.setNEqual()},less:function(){this.match("<"),this.expression(),this.popCompare(),this.setLess()},greater:function(){this.match(">"),this.expression(),this.popCompare(),this.setGreater()},relation:function(){if(this.expression(),this.isRelop(this.look))switch(this.push(),this.look){case"=":this.equals();break;case"#":this.notEquals();break;case"<":this.less();break;case">":this.greater()}},notFactor:function(){"!"===this.look?(this.match("!"),this.relation(),this.notIt()):this.relation()},boolTerm:function(){for(this.notFactor();"&"===this.look;)this.push(),this.match("&"),this.notFactor(),this.popAnd()},boolOr:function(){this.match("|"),this.boolTerm(),this.popOr()},boolXor:function(){this.match("~"),this.boolTerm(),this.popXor()},boolExpression:function(){for(this.boolTerm();this.isOrop(this.look);)switch(this.push(),this.look){case"|":this.boolOr();break;case"~":this.boolXor()}},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?this.loadVar(this.getName()):this.loadConst(this.getNum())},assignment:function(){var n=this.getName();this.match("="),this.boolExpression(),this.store(n)}}),m=f.extend({branch:function(n){this.emitLn("BRA "+n)},branchFalse:function(n){this.emitLn("TST D0"),this.emitLn("BEQ "+n)},newLabel:function(){var n="L"+this.lCount;return this.lCount+=1,n},doIf:function(){var n,t;this.match("i"),this.boolExpression(),n=t=this.newLabel(),this.branchFalse(n),this.block(),"l"===this.look&&(this.match("l"),t=this.newLabel(),this.branch(t),this.postLabel(n),this.block()),this.postLabel(t),this.match("e")},doWhile:function(){var n,t;this.match("w"),n=this.newLabel(),t=this.newLabel(),this.postLabel(n),this.boolExpression(),this.branchFalse(t),this.block(),this.match("e"),this.branch(n),this.postLabel(t)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.assignment()}},init:function(){this.symbolTable={},this.lCount=0,this.getChar()}}),g=m.extend({token:"",value:"",keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",VAR:"v",BEGIN:"b",END:"e",PROGRAM:"p"},keywordCode:function(n){return this.keywordCodeTable[n]||"x"},scan:function(){this.getName(),this.token=this.keywordCode(this.value)},isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},isWhite:function(n){return" "===n||n===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},newLine:function(){for(;this.look===this.CR||this.look===this.LF;)this.getChar(),this.skipWhite()},match:function(n){this.newLine(),this.look!==n&&this.expected('"'+n+'"'),this.getChar(),this.skipWhite()},matchString:function(n){this.value!==n&&this.expected('"'+n+'"')},getName:function(){for(this.newLine(),this.isAlpha(this.look)||this.expected("Name"),this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();this.skipWhite()},getNum:function(){var n=0;for(this.newLine(),this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)n=+this.look+10*n,this.getChar();return this.skipWhite(),n},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?(this.getName(),this.loadVar(this.value)):this.loadConst(this.getNum())},decl:function(){for(this.getName(),this.alloc(this.value);","===this.look;)this.match(","),this.getName(),this.alloc(this.value)},assignment:function(){var n=this.value;this.match("="),this.boolExpression(),this.store(n)},doIf:function(){var n,t;this.boolExpression(),n=t=this.newLabel(),this.branchFalse(n),this.block(),"l"===this.token&&(t=this.newLabel(),this.branch(t),this.postLabel(n),this.block()),this.postLabel(t),this.matchString("ENDIF")},doWhile:function(){var n=this.newLabel(),t=this.newLabel();this.postLabel(n),this.boolExpression(),this.branchFalse(t),this.block(),this.matchString("ENDWHILE"),this.branch(n),this.postLabel(t)},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.assignment()}this.scan()}},topDecls:function(){for(this.scan();"b"!==this.token;){switch(this.token){case"v":this.decl();break;default:this.abort('Unrecognized Keyword "'+this.value+'"')}this.scan()}},doMain:function(){this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()},prog:function(){this.matchString("PROGRAM"),this.header(),this.topDecls(),this.doMain(),this.match(".")},init:function(){this.symbolTable={},this.lCount=0,this.getChar(),this.scan()}}),b=g.extend({setLessOrEqual:function(){this.emitLn("SGE D0"),this.emitLn("EXT D0")},setGreaterOrEqual:function(){this.emitLn("SLE D0"),this.emitLn("EXT D0")},lessOrEqual:function(){this.match("="),this.expression(),this.popCompare(),this.setLessOrEqual()},notEqual:function(){this.match(">"),this.expression(),this.popCompare(),this.setNEqual()},less:function(){switch(this.match("<"),this.look){case"=":this.lessOrEqual();break;case">":this.notEqual();break;default:this.expression(),this.popCompare(),this.setLess()}},greater:function(){this.match(">"),"="===this.look?(this.match("="),this.expression(),this.popCompare(),this.setGreaterOrEqual()):(this.expression(),this.popCompare(),this.setGreater())}}),v=b.extend({keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",READ:"R",WRITE:"W",VAR:"v",BEGIN:"b",END:"e",PROGRAM:"p"},header:function(){t.writeLn("WARMST",this.TAB,"EQU $A01E"),this.emitLn("LIB TINYLIB")},readVar:function(){this.emitLn("BSR READ"),this.store(this.value)},writeVar:function(){this.emitLn("BSR WRITE")},doRead:function(){for(this.match("("),this.getName(),this.readVar();","===this.look;)this.match(","),this.getName(),this.readVar();this.match(")")},doWrite:function(){for(this.match("("),this.expression(),this.writeVar();","===this.look;)this.match(","),this.expression(),this.writeVar();this.match(")")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;default:this.assignment()}this.scan()}}});return{firstStep:e,theMainProgram:i,declarations:s,declarationsAndSymbols:o,variableList:a,initializers:r,multiDigitInteger:h,theSymbolTable:l,executableStatements:c,codeGenerationRoutines:u,assignmentStatement:p,moreCodeGenerationRoutines:d,booleanExpressions:f,controlStructures:m,lexicalScanning:g,moreRelops:b,inputOutput:v}}),define("lbac/11-lexical-scan-revisited",["./1.2-cradle","io"],function(n,t){"use strict";var e=n.extend({isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},isWhite:function(n){return" "===n||n===this.TAB||n===this.CR||n===this.LF},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},getName:function(){this.skipWhite(),this.isAlpha(this.look)||this.expected("Name"),this.token="x",this.value="";do this.value+=this.look.toUpperCase(),this.getChar();while(this.isAlNum(this.look))},getNum:function(){this.skipWhite(),this.isDigit(this.look)||this.expected("Number"),this.token="#",this.value="";do this.value+=this.look,this.getChar();while(this.isDigit(this.look))},getOp:function(){this.token=this.look,this.value="";do this.value+=this.look,this.getChar();while(!this.isAlpha(this.look)&&!this.isDigit(this.look)&&!this.isWhite(this.look))},next:function(){this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.getOp()},main:function(){this.init();do this.next(),t.writeLn(this.token," ",this.value);while("."!==this.token)}}),i=e.extend({getOp:function(){this.token=this.look,this.value=this.look,this.getChar()},scan:function(){"x"===this.token&&(this.token=this.keywordCode(this.value))},matchString:function(n){this.value!==n&&this.expected('"'+n+'"'),this.next()}});return{theSolution:e,singleCharacterOperators:i}}),define("lbac/11.6-tiny-1.1",["./object","io"],function(n,t){"use strict";var e=n.extend({TAB:"	",CR:"\r",LF:"\n",look:"",lCount:0,token:"",value:"",symbolTable:null,keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",READ:"R",WRITE:"W",VAR:"v",END:"e"},keywordCode:function(n){return this.keywordCodeTable[n]||"x"},getChar:function(){this.look=t.read()},error:function(n){t.writeLn("Error: ",n,".")},abort:function(n){this.error(n),t.halt()},expected:function(n){this.abort(n+" Expected")},undefined:function(n){this.abort("Undefined Identifier "+n)},duplicate:function(n){this.abort("Duplicate Identifier "+n)},checkIdent:function(){"x"!==this.token&&this.expected("Identifier")},isAlpha:function(n){return/[A-Z]/i.test(n)},isDigit:function(n){return/\d/.test(n)},isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},isAddop:function(n){return"+"===n||"-"===n},isMulop:function(n){return"*"===n||"/"===n},isOrop:function(n){return"|"===n||"~"===n},isRelop:function(n){return"="===n||"#"===n||"<"===n||">"===n},isWhite:function(n){return" "===n||n===this.TAB||n===this.CR||n===this.LF},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},inTable:function(n){return!!this.symbolTable[n]},checkTable:function(n){this.inTable(n)||this.undefined(n)},checkDup:function(n){this.inTable(n)&&this.duplicate(n)},addEntry:function(n,t){this.checkDup(n),this.symbolTable[n]=t},getName:function(){this.skipWhite(),this.isAlpha(this.look)||this.expected("Identifier"),this.token="x",this.value="";do this.value+=this.look.toUpperCase(),this.getChar();while(this.isAlNum(this.look))},getNum:function(){this.skipWhite(),this.isDigit(this.look)||this.expected("Number"),this.token="#",this.value="";do this.value+=this.look,this.getChar();while(this.isDigit(this.look))},getOp:function(){this.token=this.look,this.value=this.look,this.getChar()},next:function(){this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.getOp()},scan:function(){"x"===this.token&&(this.token=this.keywordCode(this.value))},matchString:function(n){this.value!==n&&this.expected('"'+n+'"'),this.next()},emit:function(n){t.write(this.TAB+n)},emitLn:function(n){this.emit(n),t.writeLn()},newLabel:function(){var n="L"+this.lCount;return this.lCount+=1,n},postLabel:function(n){t.writeLn(n+":")},clear:function(){this.emitLn("CLR D0")},negate:function(){this.emitLn("NEG D0")},notIt:function(){this.emitLn("NOT D0")},loadConst:function(n){this.emitLn("MOVE #"+n+", D0")},loadVar:function(n){this.inTable(n)||this.undefined(n),this.emitLn("MOVE "+n+"(PC), D0")},push:function(){this.emitLn("MOVE D0, -(SP)")},popAdd:function(){this.emitLn("ADD (SP)+, D0")},popSub:function(){this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},popMul:function(){this.emitLn("MULS (SP)+, D0")},popDiv:function(){this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},popAnd:function(){this.emitLn("AND (SP)+, D0")},popOr:function(){this.emitLn("OR (SP)+, D0")},popXor:function(){this.emitLn("EOR (SP)+, D0")},popCompare:function(){this.emitLn("CMP (SP)+, D0")},setEqual:function(){this.emitLn("SEQ D0"),this.emitLn("EXT D0")},setNEqual:function(){this.emitLn("SNE D0"),this.emitLn("EXT D0")},setGreater:function(){this.emitLn("SLT D0"),this.emitLn("EXT D0")},setLess:function(){this.emitLn("SGT D0"),this.emitLn("EXT D0")},setLessOrEqual:function(){this.emitLn("SGE D0"),this.emitLn("EXT D0")},setGreaterOrEqual:function(){this.emitLn("SLE D0"),this.emitLn("EXT D0")},store:function(n){this.emitLn("LEA "+n+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},branch:function(n){this.emitLn("BRA "+n)},branchFalse:function(n){this.emitLn("TST D0"),this.emitLn("BEQ "+n)},readIt:function(){this.emitLn("BSR READ"),this.store(this.value)},writeIt:function(){this.emitLn("BSR WRITE")},header:function(){t.writeLn("WARMST",this.TAB,"EQU $A01E")},prolog:function(){this.postLabel("MAIN")},epilog:function(){this.emitLn("DC WARMST"),this.emitLn("END MAIN")},allocate:function(n,e){t.writeLn(n,":",this.TAB,"DC ",e)},factor:function(){"("===this.token?(this.next(),this.boolExpression(),this.matchString(")")):("x"===this.token?this.loadVar(this.value):"#"===this.token?this.loadConst(this.value):this.expected("Math Factor"),this.next())},multiply:function(){this.next(),this.factor(),this.popMul()},divide:function(){this.next(),this.factor(),this.popDiv()},term:function(){for(this.factor();this.isMulop(this.token);)switch(this.push(),this.token){case"*":this.multiply();break;case"/":this.divide()}},add:function(){this.next(),this.term(),this.popAdd()},subtract:function(){this.next(),this.term(),this.popSub()},expression:function(){for(this.isAddop(this.token)?this.clear():this.term();this.isAddop(this.token);)switch(this.push(),this.token){case"+":this.add();break;case"-":this.subtract()}},compareExpression:function(){this.expression(),this.popCompare()},nextExpression:function(){this.next(),this.compareExpression()},equal:function(){this.nextExpression(),this.setEqual()},lessOrEqual:function(){this.nextExpression(),this.setLessOrEqual()},notEqual:function(){this.nextExpression(),this.setNEqual()},less:function(){switch(this.next(),this.token){case"=":this.lessOrEqual();break;case">":this.notEqual();break;default:this.compareExpression(),this.setLess()}},greater:function(){this.next(),"="===this.token?(this.nextExpression(),this.setGreaterOrEqual()):(this.compareExpression(),this.setGreater())},relation:function(){if(this.expression(),this.isRelop(this.token))switch(this.push(),this.token){case"=":this.equals();break;case"<":this.less();break;case">":this.greater()}},notFactor:function(){"!"===this.token?(this.next(),this.relation(),this.notIt()):this.relation()},boolTerm:function(){for(this.notFactor();"&"===this.token;)this.push(),this.next(),this.notFactor(),this.popAnd()},boolOr:function(){this.next(),this.boolTerm(),this.popOr()},boolXor:function(){this.next(),this.boolTerm(),this.popXor()},boolExpression:function(){for(this.boolTerm();this.isOrop(this.token);)switch(this.push(),this.token){case"|":this.boolOr();break;case"~":this.boolXor()}},assignment:function(){var n;this.checkTable(this.value),n=this.value,this.next(),this.matchString("="),this.boolExpression(),this.store(n)},doIf:function(){var n,t;this.next(),this.boolExpression(),n=t=this.newLabel(),this.branchFalse(n),this.block(),"l"===this.token&&(this.next(),t=this.newLabel(),this.branch(t),this.postLabel(n),this.block()),this.postLabel(t),this.matchString("ENDIF")},doWhile:function(){var n,t;this.next(),n=this.newLabel(),t=this.newLabel(),this.postLabel(n),this.boolExpression(),this.branchFalse(t),this.block(),this.matchString("ENDWHILE"),this.branch(n),this.postLabel(t)},readVar:function(){this.checkIdent(),this.checkTable(this.value),this.readIt(this.value),this.next()},doRead:function(){for(this.next(),this.matchString("("),this.readVar();","===this.token;)this.next(),this.readVar();this.matchString(")")},doWrite:function(){for(this.next(),this.matchString("("),this.expression(),this.writeIt();","===this.token;)this.next(),this.expression(),this.writeIt();this.matchString(")")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;default:this.assignment()}this.scan()}},alloc:function(){this.next(),"x"!==this.token&&this.expected("Variable Name"),this.checkDup(this.value),this.addEntry(this.value,"v"),this.allocate(this.value,"0"),this.next()},topDecls:function(){for(this.scan();"v"===this.token;){for(this.alloc();","===this.token;)this.alloc();this.scan()}},init:function(){this.symbolTable={},this.lCount=0,this.getChar(),this.next()},main:function(){this.init(),this.matchString("PROGRAM"),this.header(),this.topDecls(),this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()}});return{object:e}}),define("lbac/12-miscellany",["./11.6-tiny-1.1","io"],function(n,t){"use strict";var e=n.object.extend({semi:function(){this.matchString(";")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;case"x":this.assignment()}this.semi(),this.scan()}},topDecls:function(){for(this.scan();"v"===this.token;){for(this.alloc();","===this.token;)this.alloc();this.semi(),this.scan()}},main:function(){this.init(),this.matchString("PROGRAM"),this.semi(),this.header(),this.topDecls(),this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()}}),i=e.extend({statement:function(){switch(this.scan(),this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;case"x":this.assignment()}},block:function(){for(this.statement();";"===this.token;)this.next(),this.statement()}}),s=e.extend({semi:function(){";"===this.token&&this.next()}}),o=s.extend({getCharX:function(){this.look=t.read()},skipComment:function(){for(;"}"!==this.look;)this.getCharX();this.getCharX()},getChar:function(){this.getCharX(),"{"===this.look&&this.skipComment()}}),a=s.extend({skipComment:function(){for(;"}"!==this.look;)this.getChar();this.getChar()},isWhite:function(n){return" "===n||n===this.TAB||n===this.CR||n===this.LF||"{"===n},skipWhite:function(){for(;this.isWhite(this.look);)"{"===this.look?this.skipComment():this.getChar()}}),r=a.extend({skipComment:function(){for(;"}"!==this.look;)this.getChar(),"{"===this.look&&this.skipComment();this.getChar()}}),h=a.extend({tempChar:" ",getCharX:function(){this.look=t.read()},getChar:function(){" "!==this.tempChar?(this.look=this.tempChar,this.tempChar=" "):(this.getCharX(),"/"===this.look&&(this.tempChar=t.read(),"*"===this.tempChar&&(this.look="{",this.tempChar=" ")))},skipComment:function(){do{do this.getCharX();while("*"!==this.look);this.getCharX()}while("/"!==this.look);this.getCharX()}}),l=s.extend({skipComment:function(){for(;this.look!==this.LF;)this.getChar();this.getChar()},isWhite:function(n){return" "===n||n===this.TAB||n===this.CR||n===this.LF||";"===n},skipWhite:function(){for(;this.isWhite(this.look);)";"===this.look?this.skipComment():this.getChar()}});return{theCVersion:e,thePascalVersion:i,aCompromise:s,stripTheCommentsOut:o,theConventionalTreatment:a,nestedComments:r,multiCharacterDelimiters:h,oneSidedComments:l}}),define("lbac/13-procedures",["./object","io"],function(n,t){"use strict";var e=n.extend({TAB:"	",CR:"\r",LF:"\n",look:"",symbolTable:null,getChar:function(){this.look=t.read()},error:function(n){t.writeLn("Error: ",n,".")},abort:function(n){this.error(n),t.halt()},expected:function(n){this.abort(n+" Expected")},undefined:function(n){this.abort("Undefined identifier "+n)},duplicate:function(n){this.abort("Duplicate identifier "+n)},typeOf:function(n){return this.symbolTable[n]},inTable:function(n){return!!this.symbolTable[n]},addEntry:function(n,t){this.inTable(n)&&this.duplicate(n),this.symbolTable[n]=t},checkVar:function(n){this.inTable(n)||this.undefined(n),"v"!==this.typeOf(n)&&this.abort(n+" is not a variable")},isAlpha:function(n){return/[A-Z]/i.test(n)},isDigit:function(n){return/\d/.test(n)},isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},isAddop:function(n){return"+"===n||"-"===n},isMulop:function(n){return"*"===n||"/"===n},isOrop:function(n){return"|"===n||"~"===n},isRelop:function(n){return"="===n||"#"===n||"<"===n||">"===n},isWhite:function(n){return" "===n||n===this.TAB||";"===n},skipWhite:function(){for(;this.isWhite(this.look);)";"===this.look?this.skipComment():this.getChar()},skipComment:function(){for(;this.look!==this.LF;)this.getChar();this.getChar()},fin:function(){this.look===this.LF&&this.getChar()},match:function(n){this.look!==n&&this.expected('"'+n+'"'),this.getChar(),this.skipWhite()},getName:function(){this.isAlpha(this.look)||this.expected("Name");var n=this.look.toUpperCase();return this.getChar(),this.skipWhite(),n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");var n=this.look;return this.getChar(),this.skipWhite(),n},emit:function(n){t.write(this.TAB,n)},emitLn:function(n){this.emit(n),t.writeLn()},postLabel:function(n){t.writeLn(n+":")},loadVar:function(n){this.checkVar(n),this.emitLn("MOVE "+n+"(PC), D0")},storeVar:function(n){this.checkVar(n),this.emitLn("LEA "+n+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},init:function(){this.symbolTable={},this.getChar(),this.skipWhite()},expression:function(){this.loadVar(this.getName())},assignment:function(){var n=this.getName();this.match("="),this.expression(),this.storeVar(n)},doBlock:function(){for(;"e"!==this.look;)this.skipWhite(),this.assignment(),this.fin()},beginBlock:function(){this.match("b"),this.fin(),this.doBlock(),this.match("e"),this.fin()},alloc:function(n){this.inTable(n)&&this.duplicate(n),this.symbolTable[n]="v",t.writeLn(n,":",this.TAB,"DC 0")},decl:function(){this.match("v"),this.alloc(this.getName())},topDecls:function(){for(;"b"!==this.look;){switch(this.look){case"v":this.decl();break;default:this.abort("Unrecognized keyword "+this.look)}this.fin()}},main:function(){this.init(),this.topDecls(),this.beginBlock()}}),i=e.extend({"return":function(){this.emitLn("RTS")},doProc:function(){var n;this.match("p"),n=this.getName(),this.fin(),this.inTable(n)&&this.duplicate(n),this.symbolTable[n]="p",this.postLabel(n),this.beginBlock(),this.return()},topDecls:function(){for(;"b"!==this.look;){switch(this.look){case"v":this.decl();break;case"p":this.doProc();break;default:this.abort("Unrecognized keyword "+this.look)}this.fin()}},prolog:function(){this.postLabel("MAIN")},epilog:function(){this.emitLn("DC WARMST"),this.emitLn("END MAIN")},doMain:function(){this.match("b"),this.fin(),this.prolog(),this.doBlock(),this.epilog()},main:function(){this.init(),this.topDecls(),this.doMain()
}}),s=i.extend({doMain:function(){var n;this.match("P"),n=this.getName(),this.fin(),this.inTable(n)&&this.duplicate(n),this.prolog(),this.beginBlock()},topDecls:function(){for(;"."!==this.look;){switch(this.look){case"v":this.decl();break;case"p":this.doProc();break;case"P":this.doMain();break;default:this.abort("Unrecognized keyword "+this.look)}this.fin()}},main:function(){this.init(),this.topDecls(),this.epilog()}}),o=s.extend({assignment:function(n){this.match("="),this.expression(),this.storeVar(n)},callProc:function(n){this.emitLn("BSR "+n)},assignOrProc:function(){var n=this.getName();switch(this.typeOf(n)){case" ":this.undefined(n);break;case"v":this.assignment(n);break;case"p":this.callProc(n);break;default:this.abort("Identifier "+n+" cannot be used here")}},doBlock:function(){for(;"e"!==this.look;)this.skipWhite(),this.assignOrProc(),this.fin()}}),a=o.extend({formalParam:function(){this.getName()},formalList:function(){if(this.match("("),")"!==this.look)for(this.formalParam();","===this.look;)this.match(","),this.formalParam();this.match(")")},doProc:function(){var n;this.match("p"),n=this.getName(),this.inTable(n)&&this.duplicate(n),this.formalList(),this.fin(),this.symbolTable[n]="p",this.postLabel(n),this.beginBlock(),this.return()},param:function(){this.getName()},paramList:function(){if(this.match("("),")"!==this.look)for(this.param();","===this.look;)this.match(","),this.param();this.match(")")},call:function(n){this.emitLn("BSR "+n)},callProc:function(n){this.paramList(),this.call(n)}}),r=a.extend({params:{},numParams:0,clearParams:function(){this.params={},this.numParams=0},init:function(){this.symbolTable={},this.clearParams(),this.getChar(),this.skipWhite()},doProc:function(){var n;this.match("p"),n=this.getName(),this.inTable(n)&&this.duplicate(n),this.formalList(),this.fin(),this.symbolTable[n]="p",this.postLabel(n),this.beginBlock(),this.return(),this.clearParams()},paramNumber:function(n){return this.params[n]},isParam:function(n){return!!this.params[n]},addParam:function(n){this.isParam(n)&&this.duplicate(n),this.numParams+=1,this.params[n]=this.numParams},loadParam:function(n){var t=4+2*(this.numParams-n);this.emitLn("MOVE "+t+"(SP), D0")},storeParam:function(n){var t=4+2*(this.numParams-n);this.emitLn("MOVE D0, "+t+"(SP)")},push:function(){this.emitLn("MOVE D0, -(SP)")},formalParam:function(){this.addParam(this.getName())},typeOf:function(n){return this.isParam(n)?"f":this.symbolTable[n]},assignOrProc:function(){var n=this.getName();switch(this.typeOf(n)){case" ":this.undefined(n);break;case"v":case"f":this.assignment(n);break;case"p":this.callProc(n);break;default:this.abort("Identifier "+n+" cannot be used here")}},expression:function(){var n=this.getName();this.isParam(n)?this.loadParam(this.paramNumber(n)):this.loadVar(n)},assignment:function(n){this.match("="),this.expression(),this.isParam(n)?this.storeParam(this.paramNumber(n)):this.storeVar(n)},param:function(){this.expression(),this.push()}}),h=r.extend({paramList:function(){var n=0;if(this.match("("),")"!==this.look)for(this.param(),n+=1;","===this.look;)this.match(","),this.param(),n+=1;return this.match(")"),2*n},callProc:function(n){var t=this.paramList();this.call(n),this.cleanStack(t)},cleanStack:function(n){n>0&&this.emitLn("ADD #"+n+", SP")}}),l=h.extend({procProlog:function(n){this.postLabel(n),this.emitLn("LINK A6, #0")},procEpilog:function(){this.emitLn("UNLK A6"),this.emitLn("RTS")},doProc:function(){var n;this.match("p"),n=this.getName(),this.inTable(n)&&this.duplicate(n),this.formalList(),this.fin(),this.symbolTable[n]="p",this.procProlog(n),this.beginBlock(),this.procEpilog(),this.clearParams()},loadParam:function(n){var t=8+2*(this.numParams-n);this.emitLn("MOVE "+t+"(A6), D0")},storeParam:function(n){var t=8+2*(this.numParams-n);this.emitLn("MOVE D0, "+t+"(A6)")}}),c=l.extend({param:function(){this.emitLn("PEA "+this.getName()+"(PC)")},loadParam:function(n){var t=8+4*(this.numParams-n);this.emitLn("MOVE.L "+t+"(A6), A0"),this.emitLn("MOVE (A0), D0")},storeParam:function(n){var t=8+4*(this.numParams-n);this.emitLn("MOVE.L "+t+"(A6), A0"),this.emitLn("MOVE D0, (A0)")},paramList:function(){var n=0;if(this.match("("),")"!==this.look)for(this.param(),n+=1;","===this.look;)this.match(","),this.param(),n+=1;return this.match(")"),4*n}}),u=l.extend({base:0,loadParam:function(n){var t=8+2*(this.base-n);this.emitLn("MOVE "+t+"(A6), D0")},storeParam:function(n){var t=8+2*(this.base-n);this.emitLn("MOVE D0, "+t+"(A6)")},formalList:function(){if(this.match("("),")"!==this.look)for(this.formalParam();","===this.look;)this.match(","),this.formalParam();this.match(")"),this.fin(),this.base=this.numParams,this.numParams+=4},locDecl:function(){this.match("v"),this.addParam(this.getName()),this.fin()},locDecls:function(){for(var n=0;"v"===this.look;)this.locDecl(),n+=1;return n},doProc:function(){var n,t;this.match("p"),n=this.getName(),this.inTable(n)&&this.duplicate(n),this.symbolTable[n]="p",this.formalList(),t=this.locDecls(),this.procProlog(n,t),this.beginBlock(),this.procEpilog(),this.clearParams()},procProlog:function(n,t){this.postLabel(n),this.emitLn("LINK A6, #"+-2*t)}});return{aBasisForExperimentation:e,declaratingAProcedure:i,theMainProgram:s,callingTheProcedure:o,passingParameters:a,passByValue:r,whatsWrong:h,theNextProblem:l,callByReference:c,localVariables:u}}),define("lbac/14-types",["./object","io"],function(n,t){"use strict";var e=n.extend({TAB:"	",CR:"\r",LF:"\n",look:"",symbolTable:null,getChar:function(){this.look=t.read()},error:function(n){t.writeLn("Error: ",n,".")},abort:function(n){this.error(n),t.halt()},expected:function(n){this.abort(n+" Expected")},dumpTable:function(){for(var n in this.symbolTable)t.writeLn(n," ",this.symbolTable[n])},isAlpha:function(n){return/[A-Z]/i.test(n)},isDigit:function(n){return/\d/.test(n)},isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},isAddop:function(n){return"+"===n||"-"===n},isMulop:function(n){return"*"===n||"/"===n},isOrop:function(n){return"|"===n||"~"===n},isRelop:function(n){return"="===n||"#"===n||"<"===n||">"===n},isWhite:function(n){return" "===n||n===this.TAB||";"===n},skipWhite:function(){for(;this.isWhite(this.look);)";"===this.look?this.skipComment():this.getChar()},skipComment:function(){for(;this.look!==this.LF;)this.getChar();this.getChar()},fin:function(){this.look===this.LF&&this.getChar()},match:function(n){this.look!==n&&this.expected('"'+n+'"'),this.getChar(),this.skipWhite()},getName:function(){this.isAlpha(this.look)||this.expected("Name");var n=this.look.toUpperCase();return this.getChar(),this.skipWhite(),n},getNum:function(){this.isDigit(this.look)||this.expected("Integer");var n=this.look;return this.getChar(),this.skipWhite(),n},emit:function(n){t.write(this.TAB,n)},emitLn:function(n){this.emit(n),t.writeLn()},init:function(){this.symbolTable={},this.getChar(),this.skipWhite()},main:function(){this.init(),this.symbolTable={A:"a",P:"b",X:"c"},this.dumpTable()}}),i=e.extend({typeOf:function(n){return this.symbolTable[n]},inTable:function(n){return!!this.symbolTable[n]},checkDup:function(n){this.inTable(n)&&this.abort("Duplicate name "+n)},addEntry:function(n,t){this.checkDup(n),this.symbolTable[n]=t},main:function(){this.init(),this.addEntry("A","a"),this.addEntry("P","b"),this.addEntry("X","c"),this.dumpTable(),this.addEntry("A","a")}}),s=i.extend({alloc:function(n){this.addEntry(n,"v"),t.writeLn(n,":",this.TAB,"DC 0")},decl:function(){this.match("v"),this.alloc(this.getName())},topDecls:function(){for(;"."!==this.look;){switch(this.look){case"v":this.decl();break;default:this.abort("Unrecognized keyword "+this.look)}this.fin()}},main:function(){this.init(),this.topDecls(),this.dumpTable()}}),o=s.extend({allocVar:function(n,e){t.writeLn(n,":",this.TAB,"DC.",e," 0")},alloc:function(n,t){this.addEntry(n,t),this.allocVar(n,t)},decl:function(){var n=this.getName();this.alloc(this.getName(),n)},topDecls:function(){for(;"."!==this.look;){switch(this.look){case"b":case"w":case"l":this.decl();break;default:this.abort("Unrecognized keyword "+this.look)}this.fin()}}}),a=o.extend({loadVar:function(n,t){this.move(t,n+"(PC)","D0")},move:function(n,t,e){this.emitLn("MOVE."+n+" "+t+", "+e)},isVarType:function(n){return"B"===n||"W"===n||"L"===n},varType:function(n){var t=this.typeOf(n);return this.isVarType(t)||this.abort("Identifier "+n+" is not a variable"),t},load:function(n){this.loadVar(n,this.varType(n))},storeVar:function(n,t){this.emitLn("LEA "+n+"(PC), A0"),this.move(t,"D0","(A0)")},store:function(n){this.storeVar(n,this.varType(n))},expression:function(){this.load(this.getName())},assignment:function(){var n=this.getName();this.match("="),this.expression(),this.store(n)},block:function(){for(;"."!==this.look;)this.skipWhite(),this.assignment(),this.fin()},topDecls:function(){for(;"B"!==this.look;){switch(this.look){case"b":case"w":case"l":this.decl();break;default:this.abort("Unrecognized keyword "+this.look)}this.fin()}},main:function(){this.init(),this.topDecls(),this.match("B"),this.fin(),this.block(),this.dumpTable()}}),r=a.extend({loadVar:function(n,t){"B"===t&&this.emitLn("CLR.L D0"),this.move(t,n+"(PC)","D0"),"W"===t&&this.emitLn("EXT.L D0")}}),h=a.extend({convert:function(n,t){n!==t&&("B"===n&&this.emitLn("AND.W #$FF, D0"),"L"===t&&this.emitLn("EXT.L D0"))},load:function(n){var t=this.varType(n);return this.loadVar(n,t),t},store:function(n,t){var e=this.varType(n);this.convert(t,e),this.storeVar(n,e)},expression:function(){return this.load(this.getName())},assignment:function(){var n=this.getName();this.match("="),this.store(n,this.expression())}}),l=h.extend({getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var n=0;this.isDigit(this.look);)n=+this.look+10*n,this.getChar();return this.skipWhite(),n},loadNum:function(n){var t;return t=127>=Math.abs(n)?"B":32767>=Math.abs(n)?"W":"L",this.loadConst(n,t),t},loadConst:function(n,t){this.move(t,"#"+n,"D0")},expression:function(){return this.isAlpha(this.look)?this.load(this.getName()):this.isDigit(this.look)?this.loadNum(this.getNum()):(this.abort("Invalid expression "+this.look),void 0)}}),c=l.extend({term:function(){return this.isAlpha(this.look)?this.load(this.getName()):this.isDigit(this.look)?this.loadNum(this.getNum()):(this.abort("Invalid expression "+this.look),void 0)},expression:function(){var n;for(n=this.isAddop(this.look)?this.unop():this.term();this.isAddop(this.look);)switch(this.push(n),this.look){case"+":n=this.add(n);break;case"-":n=this.subtract(n)}return n},unop:function(){return this.clear(),"W"},clear:function(){this.emitLn("CLR D0")},push:function(n){this.move(n,"D0","-(SP)")},add:function(n){return this.match("+"),this.popAdd(n,this.term())},subtract:function(n){return this.match("-"),this.popSub(n,this.term())},pop:function(n){this.move(n,"(SP)+","D7")},convert:function(n,t,e){n!==t&&("B"===n&&this.emitLn("AND.W #$FF, "+e),"L"===t&&this.emitLn("EXT.L D0"+e))},promote:function(n,t,e){var i=n;return n!==t&&("B"===n||"W"===n&&"L"===t)&&(this.convert(n,t,e),i=t),i},sameType:function(n,t){return n=this.promote(n,t,"D7"),this.promote(t,n,"D0")},popAdd:function(n,t){return this.pop(n),t=this.sameType(n,t),this.genAdd(t),t},popSub:function(n,t){return this.pop(n),t=this.sameType(n,t),this.genSub(t),t},genAdd:function(n){this.emitLn("ADD."+n+" D7, D0")},genSub:function(n){this.emitLn("SUB."+n+" D7, D0"),this.emitLn("NEG."+n+" D0")}}),u=c.extend({factor:function(){var n;return"("===this.look?(this.match("("),n=this.expression(),this.match(")")):this.isAlpha(this.look)?n=this.load(this.getName()):this.isDigit(this.look)?n=this.loadNum(this.getNum()):this.abort("Invalid expression "+this.look),n},multiply:function(n){return this.match("*"),this.popMul(n,this.factor())},divide:function(n){return this.match("/"),this.popDiv(n,this.factor())},term:function(){for(var n=this.factor();this.isMulop(this.look);)switch(this.push(n),this.look){case"*":n=this.multiply(n);break;case"/":n=this.divide(n)}return n},popMul:function(n,t){this.emitLn("; popMul("+n+", "+t+")")},popDiv:function(n,t){this.emitLn("; popDiv("+n+", "+t+")")}}),p=u.extend({genMult:function(){this.emitLn("MULS D7, D0")},genLongMult:function(){this.emitLn("JSR MUL32")},popMul:function(n,t){var e;return this.pop(n),e=this.sameType(n,t),this.convert(e,"W","D7"),this.convert(e,"W","D0"),"L"===e?this.genLongMult():this.genMult(),"B"===e?"W":"L"}}),d=p.extend({popDiv:function(n,t){return this.pop(n),this.convert(n,"L","D7"),"L"===n||"L"===t?(this.convert(t,"L","D0"),this.genLongDiv(),"L"):(this.convert(t,"W","D0"),this.genDiv(),n)},genDiv:function(){this.emitLn("DIVS D0, D7"),this.move("W","D7","D0")},genLongDiv:function(){this.emitLn("JSR DIV32")}});return{theSymbolTable:e,addingEntries:i,allocatingStorage:s,declaringTypes:o,assignments:a,theCowardsWayOut:r,aMoreReasonableSolution:h,literalArguments:l,additiveExpressions:c,multiplicativeExpressions:u,multiplication:p,division:d}}),define("lbac/15-back-to-the-future",["./object","io"],function(n,t){"use strict";var e={look:"",getChar:function(){this.look=t.read()},init:function(){this.getChar()}},i={main:function(){e.init(),t.writeLn(e.look)}},s=function(){var n="	";return{emit:function(e){t.write(n,e)},emitLn:function(n){this.emit(n),t.writeLn()}}}(),o={main:function(){t.writeLn("MAIN:"),s.emitLn("Hello, world!")}},a={error:function(n){t.writeLn("Error: ",n,"."),t.halt()},expected:function(n){this.error(n+" expected")}},r={main:function(){a.expected("Integer")}},h=n.extend({isAlpha:function(n){return/[A-Z]/i.test(n)},isDigit:function(n){return/\d/.test(n)},isAlNum:function(n){return this.isAlpha(n)||this.isDigit(n)},isAddop:function(n){return"+"===n||"-"===n},isMulop:function(n){return"*"===n||"/"===n},match:function(n){e.look!==n&&a.expected('"'+n+'"'),e.getChar()},getName:function(){this.isAlpha(e.look)||a.expected("Name");var n=e.look.toUpperCase();return e.getChar(),n},getNumber:function(){this.isDigit(e.look)||a.expected("Integer");var n=e.look;return e.getChar(),n}}),l={main:function(){e.init(),t.write(h.getName()),h.match("="),t.write(h.getNumber()),h.match("+"),t.writeLn(h.getName())}},c=h.extend({getName:function(){this.isAlpha(e.look)||a.expected("Name");for(var n="";this.isAlNum(e.look);)n+=e.look.toUpperCase(),e.getChar();return n},getNumber:function(){this.isDigit(e.look)||a.expected("Integer");for(var n="";this.isDigit(e.look);)n+=e.look,e.getChar();return n}}),u={main:function(){e.init(),t.write(c.getName()),c.match("="),t.write(c.getNumber()),c.match("+"),t.writeLn(c.getName())}},p=c.extend({getNumber:function(){this.isDigit(e.look)||a.expected("Integer");for(var n=0;this.isDigit(e.look);)n=+e.look+10*n,e.getChar();return n}}),d={main:function(){e.init(),t.write(p.getName()),p.match("="),t.write(p.getNumber()),p.match("+"),t.writeLn(p.getName())}},f=n.extend({factor:function(){p.isDigit(e.look)?m.loadConstant(p.getNumber()):p.isAlpha(e.look)?m.loadVariable(p.getName()):a.error("Unrecognized character "+e.look)}}),m=n.extend({loadConstant:function(n){s.emitLn("MOVE #"+n+", D0")},loadVariable:function(n){s.emitLn("MOVE "+n+"(PC), D0")}}),g={main:function(){e.init(),f.factor()}};return{theInputUnit:i,theOutputUnit:o,theErrorUnit:r,scanningAndParsing:l,theScannerUnit:u,decisionsDecisions:d,parsing:g,input:e,output:s,errors:a,scanner:p,parser:f,codeGen:m}}),define("lbac/16-unit-construction",["./15-back-to-the-future"],function(n){"use strict";var t=n.input,e=n.output,i=n.errors,s=n.scanner,o=n.parser.extend({signedFactor:function(){var n=t.look;s.isAddop(t.look)&&t.getChar(),this.factor(),"-"===n&&a.negate()}}),a=n.codeGen.extend({negate:function(){e.emitLn("NEG D0")}}),r={main:function(){t.init(),o.signedFactor()}},h=o.extend({expression:function(){for(this.signedTerm();s.isAddop(t.look);)switch(t.look){case"+":this.add();break;case"-":this.subtract()}},signedTerm:function(){var n=t.look;s.isAddop(t.look)&&t.getChar(),this.term(),"-"===n&&l.negate()},term:function(){for(this.factor();s.isMulop(t.look);)switch(t.look){case"*":this.multiply();break;case"/":this.divide()}},factor:function(){"("===t.look?(s.match("("),this.expression(),s.match(")")):s.isDigit(t.look)?l.loadConstant(s.getNumber()):s.isAlpha(t.look)?l.loadVariable(s.getName()):i.error("Unrecognized character "+t.look)},add:function(){s.match("+"),l.push(),this.term(),l.popAdd()},subtract:function(){s.match("-"),l.push(),this.term(),l.popSub()},multiply:function(){s.match("*"),l.push(),this.factor(),l.popMul()},divide:function(){s.match("/"),l.push(),this.factor(),l.popDiv()}}),l=a.extend({push:function(){e.emitLn("MOVE D0, -(SP)")},popAdd:function(){e.emitLn("ADD (SP)+, D0")},popSub:function(){e.emitLn("SUB (SP)+, D0"),this.negate()},popMul:function(){e.emitLn("MULS (SP)+, D0")},popDiv:function(){e.emitLn("MOVE (SP)+, D7"),e.emitLn("EXT.L D7"),e.emitLn("DIVS D0, D7"),e.emitLn("MOVE D7, D0")}}),c={main:function(){t.init(),h.expression()}},u=h.extend({assignment:function(){var n=s.getName();s.match("="),this.expression(),p.storeVariable(n)}}),p=l.extend({storeVariable:function(n){e.emitLn("LEA "+n+"(PC), A0"),e.emitLn("MOVE D0, (A0)")}}),d={main:function(){t.init(),u.assignment()}},f=s.extend({isAddop:function(n){return"+"===n||"-"===n||"|"===n||"~"===n}}),m=u.extend({expression:function(){for(this.signedTerm();f.isAddop(t.look);)switch(t.look){case"+":this.add();break;case"-":this.subtract();break;case"|":this.or();break;case"~":this.xor()}},or:function(){f.match("|"),g.push(),this.term(),g.popOr()},xor:function(){f.match("~"),g.push(),this.term(),g.popXor()}}),g=p.extend({popOr:function(){e.emitLn("OR (SP)+, D0")},popXor:function(){e.emitLn("EOR (SP)+, D0")}}),b={main:function(){t.init(),m.assignment()}},v=f.extend({isMulop:function(n){return"*"===n||"/"===n||"&"===n}}),k=m.extend({term:function(){for(this.notFactor();v.isMulop(t.look);)switch(t.look){case"*":this.multiply();break;case"/":this.divide();break;case"&":this.and()}},multiply:function(){s.match("*"),l.push(),this.notFactor(),l.popMul()},divide:function(){s.match("/"),l.push(),this.notFactor(),l.popDiv()},and:function(){v.match("&"),y.push(),this.notFactor(),y.popAnd()},notFactor:function(){"!"===t.look?(v.match("!"),this.factor(),y.notIt()):this.factor()}}),y=g.extend({popAnd:function(){e.emitLn("AND (SP)+, D0")},notIt:function(){e.emitLn("EOR #-1, D0")}}),w={main:function(){t.init(),k.assignment()}};return{fleshingOutTheParser:r,termsAndExpressions:c,assignments:d,booleans:b,booleanAnd:w}}),define("lbac/main",["./2-expression-parsing","./3-more-expressions","./4-interpreters","./5-control-constructs","./6-boolean-expressions","./7-lexical-scanning","./7.13-kiss","./9.a-top-view","./10-introducing-tiny","./11-lexical-scan-revisited","./11.6-tiny-1.1","./12-miscellany","./13-procedures","./14-types","./15-back-to-the-future","./16-unit-construction"],function(n,t,e,i,s,o,a,r,h,l,c,u,p,d,f,m){"use strict";return{expressionParsing:n,moreExpressions:t,interpreters:e,controlConstructs:i,booleanExpressions:s,lexicalScanning:o,kiss:a,aTopView:r,introducingTiny:h,lexicalScanRevisited:l,tiny11:c,miscellany:u,procedures:p,types:d,backToTheFuture:f,unitConstruction:m}}),define("lbac",["lbac/main"],function(n){return n}),function(n){"use strict";"function"==typeof define&&define.amd?define("tiny-console",["jquery"],n):n(jQuery)}(function(n){"use strict";function t(t){var e=[[/</g,"&lt;"],[/>/g,"&gt;"]];return n.each(e,function(n,e){t=t.replace(e[0],e[1])}),t}function e(t,e){var i,s=document.createRange(),o=window.getSelection(),a=0;t.contents().each(function(){var t=n(this).text().length;return"BR"===this.nodeName.toUpperCase()&&(t=1),t>=e?!1:(e-=t,a+=1,void 0)}),i=t[0].childNodes[a],3!==i.nodeType&&(i=i.firstChild),s.setStart(i,e),s.collapse(!0),o.removeAllRanges(),o.addRange(s)}function i(t){var e=window.getSelection().getRangeAt(0),i=e.startContainer,s=e.startOffset;return t.contents().each(function(){return this===i||this.firstChild===i?!1:(s+=n(this).text().length,void 0)}),s}function s(n){e(n,n.text().length)}function o(){function e(n){return'<span class="'+n+'">$&</span>'}function i(t){var e={};return e.index=Number.MAX_VALUE,n.each(s,function(n,i){var s=t.search(i.pattern);return s>=0&&e.index>s&&(e.index=s,e.match=t.match(i.pattern)[0],e.length=e.match.length,e.format=i.format),0===s?!1:void 0}),e.index===Number.MAX_VALUE&&(e.index=-1),e}var s=[];this.addRule=function(n){s.push({pattern:n.pattern,format:e(n["class"])})},this.addRules=function(t,i){var o=e(i);n.each(t,function(n,t){s.push({pattern:t,format:o})})},this.highlightElement=function(n){for(var e,s=t(n.text()),o=i(s),a="";o.index>=0;)e=s.substr(0,o.index+o.length),s=s.substr(o.index+o.length),a+=e.replace(o.match,o.format),o=i(s);a+=s,n.html(a)}}function a(n){var t=[/\bEND\b/,/\bMOVE(\.[BWL])?\b/,/\bADD(\.[BWL])?\w?\b/,/\bSUB(\.[BWL])?\w?\b/,/\bNEG(\.[BWL])?\b/,/\bEXG\b/,/\bEXT\.L\b/,/\bMUL\w?\b/,/\bDIV\w?\b/,/\bLEA\b/,/\bCMP\b/,/\bCLR(\.L)?\b/,/\b\w?OR\b/,/\bAND(\.W)?\b/,/\bSEQ\b/,/\bSNE\b/,/\bSGE\b/,/\bSLE\b/,/\bTST\b/],e=[/\bBEQ\b/,/\b\w?BRA\b/,/\bBGT\b/,/\bRTS\b/,/\bBSR\b/],i="m68k-keyword",s="m68k-branch",o={pattern:/\bL\d+:?/,"class":"m68k-label"},a={pattern:/Error:([\w\W]*?)\n/,"class":"m68k-error"};this.addRules(t,i),this.addRules(e,s),this.addRule(o),this.addRule(a),this.highlight=function(){this.highlightElement(n)}}function r(n){this.addRule({pattern:/[bl]/,"class":"compiler-middle"}),this.addRule({pattern:/[dfiwpr]/,"class":"compiler-start"}),this.addRule({pattern:/[eu]/,"class":"compiler-end"}),this.highlight=function(){var t=i(n);this.highlightElement(n),e(n,t)}}function h(t){"outputHighlighter"in t&&t.outputHighlighter.highlight();var e=t.$entry.clone(),i=n(".entry-input",e),o=n(".entry-output",e),a=i.html();i.attr("contenteditable","false").html(a+"<br>"),""===o.html()&&o.remove(),e.insertBefore(t.$entry),t.$output.html(""),t.$input.html(" "),t.target.scrollTop(t.target.prop("scrollHeight")),s(t.$input),t.$input.focus()}function l(t){var e=n(this).data("tinyConsole"),o=e.$input.text().length;if(13===t.keyCode){t.preventDefault(),e.stream.update(e.$input.text()+p),e.history.update();try{e.execute()}catch(a){}h(e)}else if(9===t.keyCode)try{document.execCommand("insertHtml",!1,"	"),t.preventDefault()}catch(r){}else 37!==t.keyCode&&8!==t.keyCode||1!==i(e.$input)?39===t.keyCode?i(e.$input)===o?t.preventDefault():i(e.$input)===o-1&&(t.preventDefault(),s(e.$input)):38===t.keyCode?(t.preventDefault(),e.history.scrollUp()):40===t.keyCode&&(t.preventDefault(),e.history.scrollDown()):t.preventDefault();e.$input[0].normalize()}function c(n){1>=i(n)&&e(n,1)}function u(){var t=n(this).data("tinyConsole");t.$input.focus(),c(t.$input)}var p="\n";a.prototype=new o,r.prototype=new o;var d={init:function(t){function i(t,e,i){var s=n("#"+e),o=n("#"+t);o&&s&&s.click(function(){var n=i.data("tinyConsole");n.stream.update(" "+o.val()+"\n"),n.history.update();try{n.execute()}catch(t){}h(n)})}var o=n.extend({prompt:">>>"},t);return this.each(function(){var t=n(this),h=t.data("tinyConsole");if(!h){o.width&&t.width(o.width),o.height&&t.height(o.height),t.addClass("tiny-console");var d=n("<div />").addClass("console-entry"),f=n("<pre />").addClass("entry-prompt").text(o.prompt),m=n("<pre />").addClass("entry-input").attr("contenteditable","true").html(" "),g=n("<pre />").addClass("entry-output");if(t.append(d.append(f).append(m).append(g)),"tabSize"in o){var b=""+o.tabSize;n("pre",d).css({"-moz-tab-size":b,"-o-tab-size":b,"tab-size":b})}var v=!1,k=!1;if("highlight"in o)switch(o.highlight){case"input":v=!0;break;case"output":k=!0;break;case"both":v=k=!0}m.focus(),e(m,1),m.bind("focus.tinyConsole",function(t){c(n(t.target))}),t.bind("keydown.tinyConsole",l),t.bind("click.tinyConsole",u);var y={target:t,$entry:d,$prompt:f,$input:m,$output:g,stream:{content:"",offset:1,update:function(n){this.content=n,this.offset=1},read:function(){var t=this.offset;return t===this.content.length&&n.error("End of input stream"),this.offset+=1,this.content.charAt(t)},readLn:function(){for(var n,t="";;){if(n=y.stream.read(),n===p)break;t+=n}return t}},history:{content:[],position:-1,last:function(){return this.content[this.content.length-1]},update:function(){var n=y.stream,t=n.content.substr(0,n.content.length-p.length);" "!==t&&t!==this.last()&&this.content.push(t),this.position=this.content.length,y.target.scrollTop(y.target.prop("scrollHeight"))},scrollUp:function(){0>=this.position||(this.position-=1,m.text(this.content[this.position]),s(m),y.target.scrollTop(y.target.prop("scrollHeight")))},scrollDown:function(){this.position!==this.content.length-1&&(this.position+=1,m.text(this.content[this.position]),s(m),y.target.scrollTop(y.target.prop("scrollHeight")))}}};k&&(y.outputHighlighter=new a(g)),v&&(y.inputHighlighter=new r(m),t.bind("keyup.tinyConsole",function(){y.inputHighlighter.highlight()})),t.data("tinyConsole",y),i(o.editorElement,o.runButtonElement,t)}})},destroy:function(){return this.each(function(){var t=n(this);n(window).unbind(".tinyConsole"),t.removeData("tinyConsole")})},option:function(n,t){var e=this.data("tinyConsole");"prompt"===n&&e.$prompt.text(t)},read:function(){var n,t=this.data("tinyConsole");try{n=t.stream.read()}catch(e){d.writeLn.call(this,"Error: End of Input Stream.")}return n},readLn:function(){var n=this.data("tinyConsole");return n.stream.readLn()},write:function(){var e=Array.prototype.slice.call(arguments),i="";return n.each(e,function(n,t){i+=void 0===t?"undefined":t}),this.each(function(){var e=n(this).data("tinyConsole");e.$output.append(t(i))})},writeLn:function(){var n=Array.prototype.slice.call(arguments);n.push(p),d.write.apply(this,n)},halt:function(){throw"Halt."},getFunction:function(t){return n.proxy(d[t],this)},setExecute:function(t){return this.each(function(){var e=n(this).data("tinyConsole");e.execute=t})}};n.fn.tinyConsole=function(t){return d[t]?d[t].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof t&&t?(n.error("Method "+t+" does not exist on jQuery.tinyConsole"),void 0):d.init.apply(this,arguments)}}),define("views/console",["jquery","lodash","backbone","lbac","io","common","tiny-console"],function(n,t,e,i,s,o){"use strict";function a(n){return n=n.replace(/Chapter\s*\d*\s*/,""),n=n.replace(/\d+\.\d+\.?\d?\s*/,""),n=n.replace(/-/g," "),n=n.replace(/[,\/\?"']/g,""),t.reduce(n.split(" "),function(n,t,e){return n+(e?t.substr(0,1).toUpperCase()+t.substr(1).toLowerCase():t.toLowerCase())},"")}var r=e.View.extend({render:function(){return this.$el.tinyConsole({editorElement:"editor",runButtonElement:"run-button",height:350,highlight:"output"}),s.set({read:this.$el.tinyConsole("getFunction","read"),readLn:this.$el.tinyConsole("getFunction","readLn"),write:this.$el.tinyConsole("getFunction","write"),writeLn:this.$el.tinyConsole("getFunction","writeLn"),halt:this.$el.tinyConsole("getFunction","halt")}),this},update:function(n,e){var s=o.getTitle(n),r=o.getTitle(n,e),h=a(s),l=a(r);return("judiciousCopying"===l||"mergingScannerAndParser"===l)&&(h="kiss"),"lexicalScanRevisited"===h&&"conclusion"===l&&(h="tiny11",l="object"),i[h]&&i[h][l]?(this.$el.tinyConsole("setExecute",t.bindKey(i[h][l],"main")),this.$el.tinyConsole("option","prompt",r+">"),!0):!1}});return r}),define("views/content",["jquery","lodash","backbone","templates","models/content","models/setting","collections/pager","views/pager","views/setting","views/console","data/toc"],function(n,t,e,i,s,o,a,r,h,l,c){"use strict";var u=e.View.extend({infoTemplate:i["app/scripts/templates/info.ejs"],initialize:function(){this.$info=this.$("#info"),this.$doc=this.$("#doc"),this.$editorArea=this.$("#editor-area"),this.$console=this.$("#console"),this.$codeArea=this.$("#code-area"),this.$code=this.$("#code"),this.content=new s,this.setting=new o,this.pager=new a,this.topPagerView=new r({el:"#top-pager",collection:this.pager}),this.bottomPagerView=new r({el:"#bottom-pager",collection:this.pager}),this.settingView=new h({model:this.setting}),this.consoleView=new l({el:"#console"}),this.listenTo(this.content,"change:doc",this.renderDoc),this.listenTo(this.content,"change:code",this.renderCode),this.listenTo(this.content,"change:hasEditor",this.toggleEditor),this.listenTo(this.content,"change:hasConsole",this.toggleConsole),this.listenTo(this.setting,"change:editor",this.toggleEditor),this.listenTo(this.setting,"change:console",this.toggleConsole)},render:function(){this.$info.show(),this.settingView.render(),this.consoleView.render(),this.$codeArea.show()},update:function(n,t){this.pager.update(n,t),this.$info.html(this.infoTemplate({ch:n,title:c[n].title.toUpperCase().replace(/ /g,"&nbsp;")})),this.content.update(n,t),this.updateConsole(n,t)},updateConsole:function(n,e){var i,s=!1,o=!1;e&&(i=t.find(c[n].sections,{sec:e}),s=this.consoleView.update(n,e)&&(i.console===!1?!1:!0),o=!!i.editor),this.content.set("hasConsole",s),this.content.set("hasEditor",o)},renderDoc:function(n){this.settingView.$el.detach(),this.$doc.html(n.get("doc")),this.$doc.children(":first-child").after(this.settingView.el)},renderCode:function(n){var t=n.get("code");50>t.length?this.$codeArea.hide():(this.$codeArea.show(),this.$code.html(n.get("code")))},toggleEditor:function(){var n=this.content.get("hasEditor")&&this.setting.get("editor");this.$editorArea.toggle(n)},toggleConsole:function(){var n=this.content.get("hasConsole")&&this.setting.get("console");this.$console.toggle(n)}});return u}),define("views/app",["jquery","backbone","templates","views/menu","views/content"],function(n,t,e,i,s){"use strict";var o=!0,a=t.View.extend({el:"body",initialize:function(){this.$content=n("#content"),this.menuView=new i({el:"#menu"}),this.contentView=new s({el:this.$content})},render:function(){this.menuView.render(),this.contentView.render(),this.$("#loading").remove(),this.$("#footer").show()},update:function(t,e){this.menuView.update(t,e),this.contentView.update(t,e),o?o=!1:n("html, body").scrollTop(this.$content.offset().top-20)}});return a}),!function(n){"use strict";n(function(){n.support.transition=function(){var n=function(){var n,t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(n in e)if(void 0!==t.style[n])return e[n]}();return n&&{end:n}}()})}(window.jQuery),!function(n){"use strict";var t='[data-dismiss="alert"]',e=function(e){n(e).on("click",t,this.close)};e.prototype.close=function(t){function e(){i.trigger("closed").remove()}var i,s=n(this),o=s.attr("data-target");o||(o=s.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),i=n(o),t&&t.preventDefault(),i.length||(i=s.hasClass("alert")?s:s.parent()),i.trigger(t=n.Event("close")),t.isDefaultPrevented()||(i.removeClass("in"),n.support.transition&&i.hasClass("fade")?i.on(n.support.transition.end,e):e())};var i=n.fn.alert;n.fn.alert=function(t){return this.each(function(){var i=n(this),s=i.data("alert");s||i.data("alert",s=new e(this)),"string"==typeof t&&s[t].call(i)})},n.fn.alert.Constructor=e,n.fn.alert.noConflict=function(){return n.fn.alert=i,this},n(document).on("click.alert.data-api",t,e.prototype.close)}(window.jQuery),!function(n){"use strict";var t=function(t,e){this.$element=n(t),this.options=n.extend({},n.fn.button.defaults,e)};t.prototype.setState=function(n){var t="disabled",e=this.$element,i=e.data(),s=e.is("input")?"val":"html";n+="Text",i.resetText||e.data("resetText",e[s]()),e[s](i[n]||this.options[n]),setTimeout(function(){"loadingText"==n?e.addClass(t).attr(t,t):e.removeClass(t).removeAttr(t)},0)},t.prototype.toggle=function(){var n=this.$element.closest('[data-toggle="buttons-radio"]');n&&n.find(".active").removeClass("active"),this.$element.toggleClass("active")};var e=n.fn.button;n.fn.button=function(e){return this.each(function(){var i=n(this),s=i.data("button"),o="object"==typeof e&&e;s||i.data("button",s=new t(this,o)),"toggle"==e?s.toggle():e&&s.setState(e)})},n.fn.button.defaults={loadingText:"loading..."},n.fn.button.Constructor=t,n.fn.button.noConflict=function(){return n.fn.button=e,this
},n(document).on("click.button.data-api","[data-toggle^=button]",function(t){var e=n(t.target);e.hasClass("btn")||(e=e.closest(".btn")),e.button("toggle")})}(window.jQuery),!function(n){"use strict";var t=function(t,e){this.$element=n(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,"hover"==this.options.pause&&this.$element.on("mouseenter",n.proxy(this.pause,this)).on("mouseleave",n.proxy(this.cycle,this))};t.prototype={cycle:function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(n.proxy(this.next,this),this.options.interval)),this},getActiveIndex:function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},to:function(t){var e=this.getActiveIndex(),i=this;if(!(t>this.$items.length-1||0>t))return this.sliding?this.$element.one("slid",function(){i.to(t)}):e==t?this.pause().cycle():this.slide(t>e?"next":"prev",n(this.$items[t]))},pause:function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&n.support.transition.end&&(this.$element.trigger(n.support.transition.end),this.cycle(!0)),clearInterval(this.interval),this.interval=null,this},next:function(){return this.sliding?void 0:this.slide("next")},prev:function(){return this.sliding?void 0:this.slide("prev")},slide:function(t,e){var i,s=this.$element.find(".item.active"),o=e||s[t](),a=this.interval,r="next"==t?"left":"right",h="next"==t?"first":"last",l=this;if(this.sliding=!0,a&&this.pause(),o=o.length?o:this.$element.find(".item")[h](),i=n.Event("slide",{relatedTarget:o[0],direction:r}),!o.hasClass("active")){if(this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid",function(){var t=n(l.$indicators.children()[l.getActiveIndex()]);t&&t.addClass("active")})),n.support.transition&&this.$element.hasClass("slide")){if(this.$element.trigger(i),i.isDefaultPrevented())return;o.addClass(t),o[0].offsetWidth,s.addClass(r),o.addClass(r),this.$element.one(n.support.transition.end,function(){o.removeClass([t,r].join(" ")).addClass("active"),s.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger("slid")},0)})}else{if(this.$element.trigger(i),i.isDefaultPrevented())return;s.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return a&&this.cycle(),this}}};var e=n.fn.carousel;n.fn.carousel=function(e){return this.each(function(){var i=n(this),s=i.data("carousel"),o=n.extend({},n.fn.carousel.defaults,"object"==typeof e&&e),a="string"==typeof e?e:o.slide;s||i.data("carousel",s=new t(this,o)),"number"==typeof e?s.to(e):a?s[a]():o.interval&&s.pause().cycle()})},n.fn.carousel.defaults={interval:5e3,pause:"hover"},n.fn.carousel.Constructor=t,n.fn.carousel.noConflict=function(){return n.fn.carousel=e,this},n(document).on("click.carousel.data-api","[data-slide], [data-slide-to]",function(t){var e,i,s=n(this),o=n(s.attr("data-target")||(e=s.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"")),a=n.extend({},o.data(),s.data());o.carousel(a),(i=s.attr("data-slide-to"))&&o.data("carousel").pause().to(i).cycle(),t.preventDefault()})}(window.jQuery),!function(n){"use strict";var t=function(t,e){this.$element=n(t),this.options=n.extend({},n.fn.collapse.defaults,e),this.options.parent&&(this.$parent=n(this.options.parent)),this.options.toggle&&this.toggle()};t.prototype={constructor:t,dimension:function(){var n=this.$element.hasClass("width");return n?"width":"height"},show:function(){var t,e,i,s;if(!this.transitioning&&!this.$element.hasClass("in")){if(t=this.dimension(),e=n.camelCase(["scroll",t].join("-")),i=this.$parent&&this.$parent.find("> .accordion-group > .in"),i&&i.length){if(s=i.data("collapse"),s&&s.transitioning)return;i.collapse("hide"),s||i.data("collapse",null)}this.$element[t](0),this.transition("addClass",n.Event("show"),"shown"),n.support.transition&&this.$element[t](this.$element[0][e])}},hide:function(){var t;!this.transitioning&&this.$element.hasClass("in")&&(t=this.dimension(),this.reset(this.$element[t]()),this.transition("removeClass",n.Event("hide"),"hidden"),this.$element[t](0))},reset:function(n){var t=this.dimension();return this.$element.removeClass("collapse")[t](n||"auto")[0].offsetWidth,this.$element[null!==n?"addClass":"removeClass"]("collapse"),this},transition:function(t,e,i){var s=this,o=function(){"show"==e.type&&s.reset(),s.transitioning=0,s.$element.trigger(i)};this.$element.trigger(e),e.isDefaultPrevented()||(this.transitioning=1,this.$element[t]("in"),n.support.transition&&this.$element.hasClass("collapse")?this.$element.one(n.support.transition.end,o):o())},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}};var e=n.fn.collapse;n.fn.collapse=function(e){return this.each(function(){var i=n(this),s=i.data("collapse"),o=n.extend({},n.fn.collapse.defaults,i.data(),"object"==typeof e&&e);s||i.data("collapse",s=new t(this,o)),"string"==typeof e&&s[e]()})},n.fn.collapse.defaults={toggle:!0},n.fn.collapse.Constructor=t,n.fn.collapse.noConflict=function(){return n.fn.collapse=e,this},n(document).on("click.collapse.data-api","[data-toggle=collapse]",function(t){var e,i=n(this),s=i.attr("data-target")||t.preventDefault()||(e=i.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""),o=n(s).data("collapse")?"toggle":i.data();i[n(s).hasClass("in")?"addClass":"removeClass"]("collapsed"),n(s).collapse(o)})}(window.jQuery),!function(n){"use strict";function t(){n(i).each(function(){e(n(this)).removeClass("open")})}function e(t){var e,i=t.attr("data-target");return i||(i=t.attr("href"),i=i&&/#/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,"")),e=i&&n(i),e&&e.length||(e=t.parent()),e}var i="[data-toggle=dropdown]",s=function(t){var e=n(t).on("click.dropdown.data-api",this.toggle);n("html").on("click.dropdown.data-api",function(){e.parent().removeClass("open")})};s.prototype={constructor:s,toggle:function(){var i,s,o=n(this);if(!o.is(".disabled, :disabled"))return i=e(o),s=i.hasClass("open"),t(),s||i.toggleClass("open"),o.focus(),!1},keydown:function(t){var s,o,a,r,h;if(/(38|40|27)/.test(t.keyCode)&&(s=n(this),t.preventDefault(),t.stopPropagation(),!s.is(".disabled, :disabled"))){if(a=e(s),r=a.hasClass("open"),!r||r&&27==t.keyCode)return 27==t.which&&a.find(i).focus(),s.click();o=n("[role=menu] li:not(.divider):visible a",a),o.length&&(h=o.index(o.filter(":focus")),38==t.keyCode&&h>0&&h--,40==t.keyCode&&o.length-1>h&&h++,~h||(h=0),o.eq(h).focus())}}};var o=n.fn.dropdown;n.fn.dropdown=function(t){return this.each(function(){var e=n(this),i=e.data("dropdown");i||e.data("dropdown",i=new s(this)),"string"==typeof t&&i[t].call(e)})},n.fn.dropdown.Constructor=s,n.fn.dropdown.noConflict=function(){return n.fn.dropdown=o,this},n(document).on("click.dropdown.data-api",t).on("click.dropdown.data-api",".dropdown form",function(n){n.stopPropagation()}).on("click.dropdown-menu",function(n){n.stopPropagation()}).on("click.dropdown.data-api",i,s.prototype.toggle).on("keydown.dropdown.data-api",i+", [role=menu]",s.prototype.keydown)}(window.jQuery),!function(n){"use strict";var t=function(t,e){this.options=e,this.$element=n(t).delegate('[data-dismiss="modal"]',"click.dismiss.modal",n.proxy(this.hide,this)),this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};t.prototype={constructor:t,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var t=this,e=n.Event("show");this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.escape(),this.backdrop(function(){var e=n.support.transition&&t.$element.hasClass("fade");t.$element.parent().length||t.$element.appendTo(document.body),t.$element.show(),e&&t.$element[0].offsetWidth,t.$element.addClass("in").attr("aria-hidden",!1),t.enforceFocus(),e?t.$element.one(n.support.transition.end,function(){t.$element.focus().trigger("shown")}):t.$element.focus().trigger("shown")}))},hide:function(t){t&&t.preventDefault(),t=n.Event("hide"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.escape(),n(document).off("focusin.modal"),this.$element.removeClass("in").attr("aria-hidden",!0),n.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal())},enforceFocus:function(){var t=this;n(document).on("focusin.modal",function(n){t.$element[0]===n.target||t.$element.has(n.target).length||t.$element.focus()})},escape:function(){var n=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(t){27==t.which&&n.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var t=this,e=setTimeout(function(){t.$element.off(n.support.transition.end),t.hideModal()},500);this.$element.one(n.support.transition.end,function(){clearTimeout(e),t.hideModal()})},hideModal:function(){var n=this;this.$element.hide(),this.backdrop(function(){n.removeBackdrop(),n.$element.trigger("hidden")})},removeBackdrop:function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},backdrop:function(t){var e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=n.support.transition&&e;if(this.$backdrop=n('<div class="modal-backdrop '+e+'" />').appendTo(document.body),this.$backdrop.click("static"==this.options.backdrop?n.proxy(this.$element[0].focus,this.$element[0]):n.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;i?this.$backdrop.one(n.support.transition.end,t):t()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),n.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(n.support.transition.end,t):t()):t&&t()}};var e=n.fn.modal;n.fn.modal=function(e){return this.each(function(){var i=n(this),s=i.data("modal"),o=n.extend({},n.fn.modal.defaults,i.data(),"object"==typeof e&&e);s||i.data("modal",s=new t(this,o)),"string"==typeof e?s[e]():o.show&&s.show()})},n.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0},n.fn.modal.Constructor=t,n.fn.modal.noConflict=function(){return n.fn.modal=e,this},n(document).on("click.modal.data-api",'[data-toggle="modal"]',function(t){var e=n(this),i=e.attr("href"),s=n(e.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),o=s.data("modal")?"toggle":n.extend({remote:!/#/.test(i)&&i},s.data(),e.data());t.preventDefault(),s.modal(o).one("hide",function(){e.focus()})})}(window.jQuery),!function(n){"use strict";var t=function(n,t){this.init("tooltip",n,t)};t.prototype={constructor:t,init:function(t,e,i){var s,o,a,r,h;for(this.type=t,this.$element=n(e),this.options=this.getOptions(i),this.enabled=!0,a=this.options.trigger.split(" "),h=a.length;h--;)r=a[h],"click"==r?this.$element.on("click."+this.type,this.options.selector,n.proxy(this.toggle,this)):"manual"!=r&&(s="hover"==r?"mouseenter":"focus",o="hover"==r?"mouseleave":"blur",this.$element.on(s+"."+this.type,this.options.selector,n.proxy(this.enter,this)),this.$element.on(o+"."+this.type,this.options.selector,n.proxy(this.leave,this)));this.options.selector?this._options=n.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(t){return t=n.extend({},n.fn[this.type].defaults,this.$element.data(),t),t.delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},enter:function(t){var e,i=n.fn[this.type].defaults,s={};return this._options&&n.each(this._options,function(n,t){i[n]!=t&&(s[n]=t)},this),e=n(t.currentTarget)[this.type](s).data(this.type),e.options.delay&&e.options.delay.show?(clearTimeout(this.timeout),e.hoverState="in",this.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show),void 0):e.show()},leave:function(t){var e=n(t.currentTarget)[this.type](this._options).data(this.type);return this.timeout&&clearTimeout(this.timeout),e.options.delay&&e.options.delay.hide?(e.hoverState="out",this.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide),void 0):e.hide()},show:function(){var t,e,i,s,o,a,r=n.Event("show");if(this.hasContent()&&this.enabled){if(this.$element.trigger(r),r.isDefaultPrevented())return;switch(t=this.tip(),this.setContent(),this.options.animation&&t.addClass("fade"),o="function"==typeof this.options.placement?this.options.placement.call(this,t[0],this.$element[0]):this.options.placement,t.detach().css({top:0,left:0,display:"block"}),this.options.container?t.appendTo(this.options.container):t.insertAfter(this.$element),e=this.getPosition(),i=t[0].offsetWidth,s=t[0].offsetHeight,o){case"bottom":a={top:e.top+e.height,left:e.left+e.width/2-i/2};break;case"top":a={top:e.top-s,left:e.left+e.width/2-i/2};break;case"left":a={top:e.top+e.height/2-s/2,left:e.left-i};break;case"right":a={top:e.top+e.height/2-s/2,left:e.left+e.width}}this.applyPlacement(a,o),this.$element.trigger("shown")}},applyPlacement:function(n,t){var e,i,s,o,a=this.tip(),r=a[0].offsetWidth,h=a[0].offsetHeight;a.offset(n).addClass(t).addClass("in"),e=a[0].offsetWidth,i=a[0].offsetHeight,"top"==t&&i!=h&&(n.top=n.top+h-i,o=!0),"bottom"==t||"top"==t?(s=0,0>n.left&&(s=-2*n.left,n.left=0,a.offset(n),e=a[0].offsetWidth,i=a[0].offsetHeight),this.replaceArrow(s-r+e,e,"left")):this.replaceArrow(i-h,i,"top"),o&&a.offset(n)},replaceArrow:function(n,t,e){this.arrow().css(e,n?50*(1-n/t)+"%":"")},setContent:function(){var n=this.tip(),t=this.getTitle();n.find(".tooltip-inner")[this.options.html?"html":"text"](t),n.removeClass("fade in top bottom left right")},hide:function(){function t(){var t=setTimeout(function(){e.off(n.support.transition.end).detach()},500);e.one(n.support.transition.end,function(){clearTimeout(t),e.detach()})}var e=this.tip(),i=n.Event("hide");return this.$element.trigger(i),i.isDefaultPrevented()?void 0:(e.removeClass("in"),n.support.transition&&this.$tip.hasClass("fade")?t():e.detach(),this.$element.trigger("hidden"),this)},fixTitle:function(){var n=this.$element;(n.attr("title")||"string"!=typeof n.attr("data-original-title"))&&n.attr("data-original-title",n.attr("title")||"").attr("title","")},hasContent:function(){return this.getTitle()},getPosition:function(){var t=this.$element[0];return n.extend({},"function"==typeof t.getBoundingClientRect?t.getBoundingClientRect():{width:t.offsetWidth,height:t.offsetHeight},this.$element.offset())},getTitle:function(){var n,t=this.$element,e=this.options;return n=t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},tip:function(){return this.$tip=this.$tip||n(this.options.template)},arrow:function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(t){var e=t?n(t.currentTarget)[this.type](this._options).data(this.type):this;e.tip().hasClass("in")?e.hide():e.show()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};var e=n.fn.tooltip;n.fn.tooltip=function(e){return this.each(function(){var i=n(this),s=i.data("tooltip"),o="object"==typeof e&&e;s||i.data("tooltip",s=new t(this,o)),"string"==typeof e&&s[e]()})},n.fn.tooltip.Constructor=t,n.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},n.fn.tooltip.noConflict=function(){return n.fn.tooltip=e,this}}(window.jQuery),!function(n){"use strict";var t=function(n,t){this.init("popover",n,t)};t.prototype=n.extend({},n.fn.tooltip.Constructor.prototype,{constructor:t,setContent:function(){var n=this.tip(),t=this.getTitle(),e=this.getContent();n.find(".popover-title")[this.options.html?"html":"text"](t),n.find(".popover-content")[this.options.html?"html":"text"](e),n.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var n,t=this.$element,e=this.options;return n=("function"==typeof e.content?e.content.call(t[0]):e.content)||t.attr("data-content")},tip:function(){return this.$tip||(this.$tip=n(this.options.template)),this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}});var e=n.fn.popover;n.fn.popover=function(e){return this.each(function(){var i=n(this),s=i.data("popover"),o="object"==typeof e&&e;s||i.data("popover",s=new t(this,o)),"string"==typeof e&&s[e]()})},n.fn.popover.Constructor=t,n.fn.popover.defaults=n.extend({},n.fn.tooltip.defaults,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.fn.popover.noConflict=function(){return n.fn.popover=e,this}}(window.jQuery),!function(n){"use strict";function t(t,e){var i,s=n.proxy(this.process,this),o=n(t).is("body")?n(window):n(t);this.options=n.extend({},n.fn.scrollspy.defaults,e),this.$scrollElement=o.on("scroll.scroll-spy.data-api",s),this.selector=(this.options.target||(i=n(t).attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.$body=n("body"),this.refresh(),this.process()}t.prototype={constructor:t,refresh:function(){var t,e=this;this.offsets=n([]),this.targets=n([]),t=this.$body.find(this.selector).map(function(){var t=n(this),i=t.data("target")||t.attr("href"),s=/^#\w/.test(i)&&n(i);return s&&s.length&&[[s.position().top+(!n.isWindow(e.$scrollElement.get(0))&&e.$scrollElement.scrollTop()),i]]||null}).sort(function(n,t){return n[0]-t[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},process:function(){var n,t=this.$scrollElement.scrollTop()+this.options.offset,e=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,i=e-this.$scrollElement.height(),s=this.offsets,o=this.targets,a=this.activeTarget;if(t>=i)return a!=(n=o.last()[0])&&this.activate(n);for(n=s.length;n--;)a!=o[n]&&t>=s[n]&&(!s[n+1]||s[n+1]>=t)&&this.activate(o[n])},activate:function(t){var e,i;this.activeTarget=t,n(this.selector).parent(".active").removeClass("active"),i=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',e=n(i).parent("li").addClass("active"),e.parent(".dropdown-menu").length&&(e=e.closest("li.dropdown").addClass("active")),e.trigger("activate")}};var e=n.fn.scrollspy;n.fn.scrollspy=function(e){return this.each(function(){var i=n(this),s=i.data("scrollspy"),o="object"==typeof e&&e;s||i.data("scrollspy",s=new t(this,o)),"string"==typeof e&&s[e]()})},n.fn.scrollspy.Constructor=t,n.fn.scrollspy.defaults={offset:10},n.fn.scrollspy.noConflict=function(){return n.fn.scrollspy=e,this},n(window).on("load",function(){n('[data-spy="scroll"]').each(function(){var t=n(this);t.scrollspy(t.data())})})}(window.jQuery),!function(n){"use strict";var t=function(t){this.element=n(t)};t.prototype={constructor:t,show:function(){var t,e,i,s=this.element,o=s.closest("ul:not(.dropdown-menu)"),a=s.attr("data-target");a||(a=s.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,"")),s.parent("li").hasClass("active")||(t=o.find(".active:last a")[0],i=n.Event("show",{relatedTarget:t}),s.trigger(i),i.isDefaultPrevented()||(e=n(a),this.activate(s.parent("li"),o),this.activate(e,e.parent(),function(){s.trigger({type:"shown",relatedTarget:t})})))},activate:function(t,e,i){function s(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),a?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),i&&i()}var o=e.find("> .active"),a=i&&n.support.transition&&o.hasClass("fade");a?o.one(n.support.transition.end,s):s(),o.removeClass("in")}};var e=n.fn.tab;n.fn.tab=function(e){return this.each(function(){var i=n(this),s=i.data("tab");s||i.data("tab",s=new t(this)),"string"==typeof e&&s[e]()})},n.fn.tab.Constructor=t,n.fn.tab.noConflict=function(){return n.fn.tab=e,this},n(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(t){t.preventDefault(),n(this).tab("show")})}(window.jQuery),!function(n){"use strict";var t=function(t,e){this.$element=n(t),this.options=n.extend({},n.fn.typeahead.defaults,e),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.source=this.options.source,this.$menu=n(this.options.menu),this.shown=!1,this.listen()};t.prototype={constructor:t,select:function(){var n=this.$menu.find(".active").attr("data-value");return this.$element.val(this.updater(n)).change(),this.hide()},updater:function(n){return n},show:function(){var t=n.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});return this.$menu.insertAfter(this.$element).css({top:t.top+t.height,left:t.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(){var t;return this.query=this.$element.val(),!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(t=n.isFunction(this.source)?this.source(this.query,n.proxy(this.process,this)):this.source,t?this.process(t):this)},process:function(t){var e=this;return t=n.grep(t,function(n){return e.matcher(n)}),t=this.sorter(t),t.length?this.render(t.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(n){return~n.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(n){for(var t,e=[],i=[],s=[];t=n.shift();)t.toLowerCase().indexOf(this.query.toLowerCase())?~t.indexOf(this.query)?i.push(t):s.push(t):e.push(t);return e.concat(i,s)},highlighter:function(n){var t=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return n.replace(RegExp("("+t+")","ig"),function(n,t){return"<strong>"+t+"</strong>"})},render:function(t){var e=this;return t=n(t).map(function(t,i){return t=n(e.options.item).attr("data-value",i),t.find("a").html(e.highlighter(i)),t[0]}),t.first().addClass("active"),this.$menu.html(t),this},next:function(){var t=this.$menu.find(".active").removeClass("active"),e=t.next();e.length||(e=n(this.$menu.find("li")[0])),e.addClass("active")},prev:function(){var n=this.$menu.find(".active").removeClass("active"),t=n.prev();t.length||(t=this.$menu.find("li").last()),t.addClass("active")},listen:function(){this.$element.on("focus",n.proxy(this.focus,this)).on("blur",n.proxy(this.blur,this)).on("keypress",n.proxy(this.keypress,this)).on("keyup",n.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",n.proxy(this.keydown,this)),this.$menu.on("click",n.proxy(this.click,this)).on("mouseenter","li",n.proxy(this.mouseenter,this)).on("mouseleave","li",n.proxy(this.mouseleave,this))},eventSupported:function(n){var t=n in this.$element;return t||(this.$element.setAttribute(n,"return;"),t="function"==typeof this.$element[n]),t},move:function(n){if(this.shown){switch(n.keyCode){case 9:case 13:case 27:n.preventDefault();break;case 38:n.preventDefault(),this.prev();break;case 40:n.preventDefault(),this.next()}n.stopPropagation()}},keydown:function(t){this.suppressKeyPressRepeat=~n.inArray(t.keyCode,[40,38,9,13,27]),this.move(t)},keypress:function(n){this.suppressKeyPressRepeat||this.move(n)},keyup:function(n){switch(n.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}n.stopPropagation(),n.preventDefault()},focus:function(){this.focused=!0},blur:function(){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(n){n.stopPropagation(),n.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(t){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),n(t.currentTarget).addClass("active")},mouseleave:function(){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var e=n.fn.typeahead;n.fn.typeahead=function(e){return this.each(function(){var i=n(this),s=i.data("typeahead"),o="object"==typeof e&&e;s||i.data("typeahead",s=new t(this,o)),"string"==typeof e&&s[e]()})},n.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1},n.fn.typeahead.Constructor=t,n.fn.typeahead.noConflict=function(){return n.fn.typeahead=e,this},n(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(){var t=n(this);t.data("typeahead")||t.typeahead(t.data())})}(window.jQuery),!function(n){"use strict";var t=function(t,e){this.options=n.extend({},n.fn.affix.defaults,e),this.$window=n(window).on("scroll.affix.data-api",n.proxy(this.checkPosition,this)).on("click.affix.data-api",n.proxy(function(){setTimeout(n.proxy(this.checkPosition,this),1)},this)),this.$element=n(t),this.checkPosition()};t.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t,e=n(document).height(),i=this.$window.scrollTop(),s=this.$element.offset(),o=this.options.offset,a=o.bottom,r=o.top,h="affix affix-top affix-bottom";"object"!=typeof o&&(a=r=o),"function"==typeof r&&(r=o.top()),"function"==typeof a&&(a=o.bottom()),t=null!=this.unpin&&i+this.unpin<=s.top?!1:null!=a&&s.top+this.$element.height()>=e-a?"bottom":null!=r&&r>=i?"top":!1,this.affixed!==t&&(this.affixed=t,this.unpin="bottom"==t?s.top-i:null,this.$element.removeClass(h).addClass("affix"+(t?"-"+t:"")))}};var e=n.fn.affix;n.fn.affix=function(e){return this.each(function(){var i=n(this),s=i.data("affix"),o="object"==typeof e&&e;s||i.data("affix",s=new t(this,o)),"string"==typeof e&&s[e]()})},n.fn.affix.Constructor=t,n.fn.affix.defaults={offset:0},n.fn.affix.noConflict=function(){return n.fn.affix=e,this},n(window).on("load",function(){n('[data-spy="affix"]').each(function(){var t=n(this),e=t.data();e.offset=e.offset||{},e.offsetBottom&&(e.offset.bottom=e.offsetBottom),e.offsetTop&&(e.offset.top=e.offsetTop),t.affix(e)})})}(window.jQuery),define("bootstrap",["jquery"],function(n){return function(){var t;return t||n.jquery}}(this)),define("app",["jquery","backbone","routes/router","views/app","bootstrap"],function(n,t,e,i){"use strict";n(function(){function n(n){s.navigate(n,{trigger:!0})}var s=new e,o=new i;o.render(),o.listenTo(s,"update",o.update),o.menuView.on("click:chapter",n),o.contentView.topPagerView.on("click:item",n),o.contentView.bottomPagerView.on("click:item",n),t.history.start()})}),require.config({paths:{jquery:"../components/jquery/jquery",text:"../components/requirejs-text/text",backbone:"../components/backbone-amd/backbone",localstorage:"../components/backbone.localStorage/backbone.localStorage",lodash:"../components/lodash/lodash",bootstrap:"vendor/bootstrap",prettify:"../components/google-code-prettify/src/prettify",marked:"../components/marked/lib/marked",common:"helpers/common",io:"helpers/io",src:"../../data/lbac.src.txt"},shim:{bootstrap:{deps:["jquery"],exports:"jquery"}},map:{"*":{underscore:"lodash"}},packages:["lbac"]}),require(["app"]),define("main",function(){})})();