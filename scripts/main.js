(function(){(function(t,n){function e(t){var n=t.length,e=an.type(t);return an.isWindow(t)?!1:1===t.nodeType&&n?!0:"array"===e||"function"!==e&&(0===n||"number"==typeof n&&n>0&&n-1 in t)}function i(t){var n=mn[t]={};return an.each(t.match(hn)||[],function(t,e){n[e]=!0}),n}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=an.expando+Math.random()}function o(t,e,i){var s;if(i===n&&1===t.nodeType)if(s="data-"+e.replace(kn,"-$1").toLowerCase(),i=t.getAttribute(s),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:vn.test(i)?JSON.parse(i):i}catch(o){}gn.set(t,e,i)}else i=n;return i}function a(){return!0}function r(){return!1}function h(){try{return H.activeElement}catch(t){}}function l(t,n){for(;(t=t[n])&&1!==t.nodeType;);return t}function c(t,n,e){if(an.isFunction(n))return an.grep(t,function(t,i){return!!n.call(t,i,t)!==e});if(n.nodeType)return an.grep(t,function(t){return t===n!==e});if("string"==typeof n){if(Sn.test(n))return an.filter(n,t,e);n=an.filter(n,t)}return an.grep(t,function(t){return nn.call(n,t)>=0!==e})}function u(t,n){return an.nodeName(t,"table")&&an.nodeName(1===n.nodeType?n:n.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function p(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function d(t){var n=Wn.exec(t.type);return n?t.type=n[1]:t.removeAttribute("type"),t}function f(t,n){for(var e=t.length,i=0;e>i;i++)bn.set(t[i],"globalEval",!n||bn.get(n[i],"globalEval"))}function m(t,n){var e,i,s,o,a,r,h,l;if(1===n.nodeType){if(bn.hasData(t)&&(o=bn.access(t),a=an.extend({},o),l=o.events,bn.set(n,a),l)){delete a.handle,a.events={};for(s in l)for(e=0,i=l[s].length;i>e;e++)an.event.add(n,s,l[s][e])}gn.hasData(t)&&(r=gn.access(t),h=an.extend({},r),gn.set(n,h))}}function g(t,e){var i=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return e===n||e&&an.nodeName(t,e)?an.merge([t],i):i}function b(t,n){var e=n.nodeName.toLowerCase();"input"===e&&Fn.test(t.type)?n.checked=t.checked:("input"===e||"textarea"===e)&&(n.defaultValue=t.defaultValue)}function v(t,n){if(n in t)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),i=n,s=Zn.length;s--;)if(n=Zn[s]+e,n in t)return n;return i}function k(t,n){return t=n||t,"none"===an.css(t,"display")||!an.contains(t.ownerDocument,t)}function y(n){return t.getComputedStyle(n,null)}function w(t,n){for(var e,i,s,o=[],a=0,r=t.length;r>a;a++)i=t[a],i.style&&(o[a]=bn.get(i,"olddisplay"),e=i.style.display,n?(o[a]||"none"!==e||(i.style.display=""),""===i.style.display&&k(i)&&(o[a]=bn.access(i,"olddisplay",E(i.nodeName)))):o[a]||(s=k(i),(e&&"none"!==e||!s)&&bn.set(i,"olddisplay",s?e:an.css(i,"display"))));for(a=0;r>a;a++)i=t[a],i.style&&(n&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=n?o[a]||"":"none"));return t}function x(t,n,e){var i=Gn.exec(n);return i?Math.max(0,i[1]-(e||0))+(i[2]||"px"):n}function L(t,n,e,i,s){for(var o=e===(i?"border":"content")?4:"width"===n?1:0,a=0;4>o;o+=2)"margin"===e&&(a+=an.css(t,e+Jn[o],!0,s)),i?("content"===e&&(a-=an.css(t,"padding"+Jn[o],!0,s)),"margin"!==e&&(a-=an.css(t,"border"+Jn[o]+"Width",!0,s))):(a+=an.css(t,"padding"+Jn[o],!0,s),"padding"!==e&&(a+=an.css(t,"border"+Jn[o]+"Width",!0,s)));return a}function C(t,n,e){var i=!0,s="width"===n?t.offsetWidth:t.offsetHeight,o=y(t),a=an.support.boxSizing&&"border-box"===an.css(t,"boxSizing",!1,o);if(0>=s||null==s){if(s=Vn(t,n,o),(0>s||null==s)&&(s=t.style[n]),Un.test(s))return s;i=a&&(an.support.boxSizingReliable||s===t.style[n]),s=parseFloat(s)||0}return s+L(t,n,e||(a?"border":"content"),i,o)+"px"}function E(t){var n=H,e=Qn[t];return e||(e=T(t,n),"none"!==e&&e||(qn=(qn||an("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(n.documentElement),n=(qn[0].contentWindow||qn[0].contentDocument).document,n.write("<!doctype html><html><body>"),n.close(),e=T(t,n),qn.detach()),Qn[t]=e),e}function T(t,n){var e=an(n.createElement(t)).appendTo(n.body),i=an.css(e[0],"display");return e.remove(),i}function D(t,n,e,i){var s;if(an.isArray(n))an.each(n,function(n,s){e||ne.test(t)?i(t,s):D(t+"["+("object"==typeof s?n:"")+"]",s,e,i)});else if(e||"object"!==an.type(n))i(t,n);else for(s in n)D(t+"["+s+"]",n[s],e,i)}function N(t){return function(n,e){"string"!=typeof n&&(e=n,n="*");var i,s=0,o=n.toLowerCase().match(hn)||[];if(an.isFunction(e))for(;i=o[s++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(e)):(t[i]=t[i]||[]).push(e)}}function S(t,e,i,s){function o(h){var l;return a[h]=!0,an.each(t[h]||[],function(t,h){var c=h(e,i,s);return"string"!=typeof c||r||a[c]?r?!(l=c):n:(e.dataTypes.unshift(c),o(c),!1)}),l}var a={},r=t===ve;return o(e.dataTypes[0])||!a["*"]&&o("*")}function A(t,e){var i,s,o=an.ajaxSettings.flatOptions||{};for(i in e)e[i]!==n&&((o[i]?t:s||(s={}))[i]=e[i]);return s&&an.extend(!0,t,s),t}function O(t,e,i){for(var s,o,a,r,h=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),s===n&&(s=t.mimeType||e.getResponseHeader("Content-Type"));if(s)for(o in h)if(h[o]&&h[o].test(s)){l.unshift(o);break}if(l[0]in i)a=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){a=o;break}r||(r=o)}a=a||r}return a?(a!==l[0]&&l.unshift(a),i[a]):n}function R(t,n,e,i){var s,o,a,r,h,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(e[t.responseFields[o]]=n),!h&&i&&t.dataFilter&&(n=t.dataFilter(n,t.dataType)),h=o,o=c.shift())if("*"===o)o=h;else if("*"!==h&&h!==o){if(a=l[h+" "+o]||l["* "+o],!a)for(s in l)if(r=s.split(" "),r[1]===o&&(a=l[h+" "+r[0]]||l["* "+r[0]])){a===!0?a=l[s]:l[s]!==!0&&(o=r[0],c.unshift(r[1]));break}if(a!==!0)if(a&&t["throws"])n=a(n);else try{n=a(n)}catch(u){return{state:"parsererror",error:a?u:"No conversion from "+h+" to "+o}}}return{state:"success",data:n}}function I(){return setTimeout(function(){De=n}),De=an.now()}function P(t,n){an.each(n,function(n,e){for(var i=(Ie[n]||[]).concat(Ie["*"]),s=0,o=i.length;o>s;s++)if(i[s].call(t,n,e))return})}function M(t,n,e){var i,s,o=0,a=Re.length,r=an.Deferred().always(function(){delete h.elem}),h=function(){if(s)return!1;for(var n=De||I(),e=Math.max(0,l.startTime+l.duration-n),i=e/l.duration||0,o=1-i,a=0,h=l.tweens.length;h>a;a++)l.tweens[a].run(o);return r.notifyWith(t,[l,o,e]),1>o&&h?e:(r.resolveWith(t,[l]),!1)},l=r.promise({elem:t,props:an.extend({},n),opts:an.extend(!0,{specialEasing:{}},e),originalProperties:n,originalOptions:e,startTime:De||I(),duration:e.duration,tweens:[],createTween:function(n,e){var i=an.Tween(t,l.opts,n,e,l.opts.specialEasing[n]||l.opts.easing);return l.tweens.push(i),i},stop:function(n){var e=0,i=n?l.tweens.length:0;if(s)return this;for(s=!0;i>e;e++)l.tweens[e].run(1);return n?r.resolveWith(t,[l,n]):r.rejectWith(t,[l,n]),this}}),c=l.props;for(F(c,l.opts.specialEasing);a>o;o++)if(i=Re[o].call(l,t,c,l.opts))return i;return P(l,c),an.isFunction(l.opts.start)&&l.opts.start.call(t,l),an.fx.timer(an.extend(h,{elem:t,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function F(t,n){var e,i,s,o,a;for(e in t)if(i=an.camelCase(e),s=n[i],o=t[e],an.isArray(o)&&(s=o[1],o=t[e]=o[0]),e!==i&&(t[i]=o,delete t[e]),a=an.cssHooks[i],a&&"expand"in a){o=a.expand(o),delete t[i];for(e in o)e in t||(t[e]=o[e],n[e]=s)}else n[i]=s}function B(t,e,i){var s,o,a,r,h,l,c,u,p,d=this,f=t.style,m={},g=[],b=t.nodeType&&k(t);i.queue||(u=an._queueHooks(t,"fx"),null==u.unqueued&&(u.unqueued=0,p=u.empty.fire,u.empty.fire=function(){u.unqueued||p()}),u.unqueued++,d.always(function(){d.always(function(){u.unqueued--,an.queue(t,"fx").length||u.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],"inline"===an.css(t,"display")&&"none"===an.css(t,"float")&&(f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),h=bn.get(t,"fxshow");for(s in e)if(a=e[s],Se.exec(a)){if(delete e[s],l=l||"toggle"===a,a===(b?"hide":"show")){if("show"!==a||h===n||h[s]===n)continue;b=!0}g.push(s)}if(r=g.length){h=bn.get(t,"fxshow")||bn.access(t,"fxshow",{}),"hidden"in h&&(b=h.hidden),l&&(h.hidden=!b),b?an(t).show():d.done(function(){an(t).hide()}),d.done(function(){var n;bn.remove(t,"fxshow");for(n in m)an.style(t,n,m[n])});for(s=0;r>s;s++)o=g[s],c=d.createTween(o,b?h[o]:0),m[o]=h[o]||an.style(t,o),o in h||(h[o]=c.start,b&&(c.end=c.start,c.start="width"===o||"height"===o?1:0))}}function _(t,n,e,i,s){return new _.prototype.init(t,n,e,i,s)}function W(t,n){var e,i={height:t},s=0;for(n=n?1:0;4>s;s+=2-n)e=Jn[s],i["margin"+e]=i["padding"+e]=t;return n&&(i.opacity=i.width=t),i}function $(t){return an.isWindow(t)?t:9===t.nodeType&&t.defaultView}var j,V,q=typeof n,z=t.location,H=t.document,G=H.documentElement,U=t.jQuery,X=t.$,Q={},Y=[],K="2.0.0",J=Y.concat,Z=Y.push,tn=Y.slice,nn=Y.indexOf,en=Q.toString,sn=Q.hasOwnProperty,on=K.trim,an=function(t,n){return new an.fn.init(t,n,j)},rn=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,hn=/\S+/g,ln=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,cn=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,un=/^-ms-/,pn=/-([\da-z])/gi,dn=function(t,n){return n.toUpperCase()},fn=function(){H.removeEventListener("DOMContentLoaded",fn,!1),t.removeEventListener("load",fn,!1),an.ready()};an.fn=an.prototype={jquery:K,constructor:an,init:function(t,e,i){var s,o;if(!t)return this;if("string"==typeof t){if(s="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:ln.exec(t),!s||!s[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(s[1]){if(e=e instanceof an?e[0]:e,an.merge(this,an.parseHTML(s[1],e&&e.nodeType?e.ownerDocument||e:H,!0)),cn.test(s[1])&&an.isPlainObject(e))for(s in e)an.isFunction(this[s])?this[s](e[s]):this.attr(s,e[s]);return this}return o=H.getElementById(s[2]),o&&o.parentNode&&(this.length=1,this[0]=o),this.context=H,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):an.isFunction(t)?i.ready(t):(t.selector!==n&&(this.selector=t.selector,this.context=t.context),an.makeArray(t,this))},selector:"",length:0,toArray:function(){return tn.call(this)},get:function(t){return null==t?this.toArray():0>t?this[this.length+t]:this[t]},pushStack:function(t){var n=an.merge(this.constructor(),t);return n.prevObject=this,n.context=this.context,n},each:function(t,n){return an.each(this,t,n)},ready:function(t){return an.ready.promise().done(t),this},slice:function(){return this.pushStack(tn.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var n=this.length,e=+t+(0>t?n:0);return this.pushStack(e>=0&&n>e?[this[e]]:[])},map:function(t){return this.pushStack(an.map(this,function(n,e){return t.call(n,e,n)}))},end:function(){return this.prevObject||this.constructor(null)},push:Z,sort:[].sort,splice:[].splice},an.fn.init.prototype=an.fn,an.extend=an.fn.extend=function(){var t,e,i,s,o,a,r=arguments[0]||{},h=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[1]||{},h=2),"object"==typeof r||an.isFunction(r)||(r={}),l===h&&(r=this,--h);l>h;h++)if(null!=(t=arguments[h]))for(e in t)i=r[e],s=t[e],r!==s&&(c&&s&&(an.isPlainObject(s)||(o=an.isArray(s)))?(o?(o=!1,a=i&&an.isArray(i)?i:[]):a=i&&an.isPlainObject(i)?i:{},r[e]=an.extend(c,a,s)):s!==n&&(r[e]=s));return r},an.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),noConflict:function(n){return t.$===an&&(t.$=X),n&&t.jQuery===an&&(t.jQuery=U),an},isReady:!1,readyWait:1,holdReady:function(t){t?an.readyWait++:an.ready(!0)},ready:function(t){(t===!0?--an.readyWait:an.isReady)||(an.isReady=!0,t!==!0&&--an.readyWait>0||(V.resolveWith(H,[an]),an.fn.trigger&&an(H).trigger("ready").off("ready")))},isFunction:function(t){return"function"===an.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!isNaN(parseFloat(t))&&isFinite(t)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?Q[en.call(t)]||"object":typeof t},isPlainObject:function(t){if("object"!==an.type(t)||t.nodeType||an.isWindow(t))return!1;try{if(t.constructor&&!sn.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}return!0},isEmptyObject:function(t){var n;for(n in t)return!1;return!0},error:function(t){throw Error(t)},parseHTML:function(t,n,e){if(!t||"string"!=typeof t)return null;"boolean"==typeof n&&(e=n,n=!1),n=n||H;var i=cn.exec(t),s=!e&&[];return i?[n.createElement(i[1])]:(i=an.buildFragment([t],n,s),s&&an(s).remove(),an.merge([],i.childNodes))},parseJSON:JSON.parse,parseXML:function(t){var e,i;if(!t||"string"!=typeof t)return null;try{i=new DOMParser,e=i.parseFromString(t,"text/xml")}catch(s){e=n}return(!e||e.getElementsByTagName("parsererror").length)&&an.error("Invalid XML: "+t),e},noop:function(){},globalEval:function(t){var n,e=eval;t=an.trim(t),t&&(1===t.indexOf("use strict")?(n=H.createElement("script"),n.text=t,H.head.appendChild(n).parentNode.removeChild(n)):e(t))},camelCase:function(t){return t.replace(un,"ms-").replace(pn,dn)},nodeName:function(t,n){return t.nodeName&&t.nodeName.toLowerCase()===n.toLowerCase()},each:function(t,n,i){var s,o=0,a=t.length,r=e(t);if(i){if(r)for(;a>o&&(s=n.apply(t[o],i),s!==!1);o++);else for(o in t)if(s=n.apply(t[o],i),s===!1)break}else if(r)for(;a>o&&(s=n.call(t[o],o,t[o]),s!==!1);o++);else for(o in t)if(s=n.call(t[o],o,t[o]),s===!1)break;return t},trim:function(t){return null==t?"":on.call(t)},makeArray:function(t,n){var i=n||[];return null!=t&&(e(Object(t))?an.merge(i,"string"==typeof t?[t]:t):Z.call(i,t)),i},inArray:function(t,n,e){return null==n?-1:nn.call(n,t,e)},merge:function(t,e){var i=e.length,s=t.length,o=0;if("number"==typeof i)for(;i>o;o++)t[s++]=e[o];else for(;e[o]!==n;)t[s++]=e[o++];return t.length=s,t},grep:function(t,n,e){var i,s=[],o=0,a=t.length;for(e=!!e;a>o;o++)i=!!n(t[o],o),e!==i&&s.push(t[o]);return s},map:function(t,n,i){var s,o=0,a=t.length,r=e(t),h=[];if(r)for(;a>o;o++)s=n(t[o],o,i),null!=s&&(h[h.length]=s);else for(o in t)s=n(t[o],o,i),null!=s&&(h[h.length]=s);return J.apply([],h)},guid:1,proxy:function(t,e){var i,s,o;return"string"==typeof e&&(i=t[e],e=t,t=i),an.isFunction(t)?(s=tn.call(arguments,2),o=function(){return t.apply(e||this,s.concat(tn.call(arguments)))},o.guid=t.guid=t.guid||an.guid++,o):n},access:function(t,e,i,s,o,a,r){var h=0,l=t.length,c=null==i;if("object"===an.type(i)){o=!0;for(h in i)an.access(t,e,h,i[h],!0,a,r)}else if(s!==n&&(o=!0,an.isFunction(s)||(r=!0),c&&(r?(e.call(t,s),e=null):(c=e,e=function(t,n,e){return c.call(an(t),e)})),e))for(;l>h;h++)e(t[h],i,r?s:s.call(t[h],h,e(t[h],i)));return o?t:c?e.call(t):l?e(t[0],i):a},now:Date.now,swap:function(t,n,e,i){var s,o,a={};for(o in n)a[o]=t.style[o],t.style[o]=n[o];s=e.apply(t,i||[]);for(o in n)t.style[o]=a[o];return s}}),an.ready.promise=function(n){return V||(V=an.Deferred(),"complete"===H.readyState?setTimeout(an.ready):(H.addEventListener("DOMContentLoaded",fn,!1),t.addEventListener("load",fn,!1))),V.promise(n)},an.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,n){Q["[object "+n+"]"]=n.toLowerCase()}),j=an(H),function(t,n){function e(t){return yn.test(t+"")}function i(){var t,n=[];return t=function(e,i){return n.push(e+=" ")>T.cacheLength&&delete t[n.shift()],t[e]=i}}function s(t){return t[$]=!0,t}function o(t){var n=I.createElement("div");try{return!!t(n)}catch(e){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function a(t,n,e,i){var s,o,a,r,h,l,c,u,p,m;if((n?n.ownerDocument||n:j)!==I&&R(n),n=n||I,e=e||[],!t||"string"!=typeof t)return e;if(1!==(r=n.nodeType)&&9!==r)return[];if(M&&!i){if(s=wn.exec(t))if(a=s[1]){if(9===r){if(o=n.getElementById(a),!o||!o.parentNode)return e;if(o.id===a)return e.push(o),e}else if(n.ownerDocument&&(o=n.ownerDocument.getElementById(a))&&W(n,o)&&o.id===a)return e.push(o),e}else{if(s[2])return nn.apply(e,n.getElementsByTagName(t)),e;if((a=s[3])&&V.getElementsByClassName&&n.getElementsByClassName)return nn.apply(e,n.getElementsByClassName(a)),e}if(V.qsa&&(!F||!F.test(t))){if(u=c=$,p=n,m=9===r&&t,1===r&&"object"!==n.nodeName.toLowerCase()){for(l=d(t),(c=n.getAttribute("id"))?u=c.replace(Cn,"\\$&"):n.setAttribute("id",u),u="[id='"+u+"'] ",h=l.length;h--;)l[h]=u+f(l[h]);p=mn.test(t)&&n.parentNode||n,m=l.join(",")}if(m)try{return nn.apply(e,p.querySelectorAll(m)),e}catch(g){}finally{c||n.removeAttribute("id")}}}return x(t.replace(pn,"$1"),n,e,i)}function r(t,n){var e=n&&t,i=e&&(~n.sourceIndex||K)-(~t.sourceIndex||K);if(i)return i;if(e)for(;e=e.nextSibling;)if(e===n)return-1;return t?1:-1}function h(t,e,i){var s;return i?n:(s=t.getAttributeNode(e))&&s.specified?s.value:t[e]===!0?e.toLowerCase():null}function l(t,e,i){var s;return i?n:s=t.getAttribute(e,"type"===e.toLowerCase()?1:2)}function c(t){return function(n){var e=n.nodeName.toLowerCase();return"input"===e&&n.type===t}}function u(t){return function(n){var e=n.nodeName.toLowerCase();return("input"===e||"button"===e)&&n.type===t}}function p(t){return s(function(n){return n=+n,s(function(e,i){for(var s,o=t([],e.length,n),a=o.length;a--;)e[s=o[a]]&&(e[s]=!(i[s]=e[s]))})})}function d(t,n){var e,i,s,o,r,h,l,c=G[t+" "];if(c)return n?0:c.slice(0);for(r=t,h=[],l=T.preFilter;r;){(!e||(i=dn.exec(r)))&&(i&&(r=r.slice(i[0].length)||r),h.push(s=[])),e=!1,(i=fn.exec(r))&&(e=i.shift(),s.push({value:e,type:i[0].replace(pn," ")}),r=r.slice(e.length));for(o in T.filter)!(i=kn[o].exec(r))||l[o]&&!(i=l[o](i))||(e=i.shift(),s.push({value:e,type:o,matches:i}),r=r.slice(e.length));if(!e)break}return n?r.length:r?a.error(t):G(t,h).slice(0)}function f(t){for(var n=0,e=t.length,i="";e>n;n++)i+=t[n].value;return i}function m(t,n,e){var i=n.dir,s=e&&"parentNode"===i,o=z++;return n.first?function(n,e,o){for(;n=n[i];)if(1===n.nodeType||s)return t(n,e,o)}:function(n,e,a){var r,h,l,c=q+" "+o;if(a){for(;n=n[i];)if((1===n.nodeType||s)&&t(n,e,a))return!0}else for(;n=n[i];)if(1===n.nodeType||s)if(l=n[$]||(n[$]={}),(h=l[i])&&h[0]===c){if((r=h[1])===!0||r===E)return r===!0}else if(h=l[i]=[c],h[1]=t(n,e,a)||E,h[1]===!0)return!0}}function g(t){return t.length>1?function(n,e,i){for(var s=t.length;s--;)if(!t[s](n,e,i))return!1;return!0}:t[0]}function b(t,n,e,i,s){for(var o,a=[],r=0,h=t.length,l=null!=n;h>r;r++)(o=t[r])&&(!e||e(o,i,s))&&(a.push(o),l&&n.push(r));return a}function v(t,n,e,i,o,a){return i&&!i[$]&&(i=v(i)),o&&!o[$]&&(o=v(o,a)),s(function(s,a,r,h){var l,c,u,p=[],d=[],f=a.length,m=s||w(n||"*",r.nodeType?[r]:r,[]),g=!t||!s&&n?m:b(m,p,t,r,h),v=e?o||(s?t:f||i)?[]:a:g;if(e&&e(g,v,r,h),i)for(l=b(v,d),i(l,[],r,h),c=l.length;c--;)(u=l[c])&&(v[d[c]]=!(g[d[c]]=u));if(s){if(o||t){if(o){for(l=[],c=v.length;c--;)(u=v[c])&&l.push(g[c]=u);o(null,v=[],l,h)}for(c=v.length;c--;)(u=v[c])&&(l=o?sn.call(s,u):p[c])>-1&&(s[l]=!(a[l]=u))}}else v=b(v===a?v.splice(f,v.length):v),o?o(null,a,v,h):nn.apply(a,v)})}function k(t){for(var n,e,i,s=t.length,o=T.relative[t[0].type],a=o||T.relative[" "],r=o?1:0,h=m(function(t){return t===n},a,!0),l=m(function(t){return sn.call(n,t)>-1},a,!0),c=[function(t,e,i){return!o&&(i||e!==A)||((n=e).nodeType?h(t,e,i):l(t,e,i))}];s>r;r++)if(e=T.relative[t[r].type])c=[m(g(c),e)];else{if(e=T.filter[t[r].type].apply(null,t[r].matches),e[$]){for(i=++r;s>i&&!T.relative[t[i].type];i++);return v(r>1&&g(c),r>1&&f(t.slice(0,r-1)).replace(pn,"$1"),e,i>r&&k(t.slice(r,i)),s>i&&k(t=t.slice(i)),s>i&&f(t))}c.push(e)}return g(c)}function y(t,n){var e=0,i=n.length>0,o=t.length>0,r=function(s,r,h,l,c){var u,p,d,f=[],m=0,g="0",v=s&&[],k=null!=c,y=A,w=s||o&&T.find.TAG("*",c&&r.parentNode||r),x=q+=null==y?1:Math.random()||.1;for(k&&(A=r!==I&&r,E=e);null!=(u=w[g]);g++){if(o&&u){for(p=0;d=t[p++];)if(d(u,r,h)){l.push(u);break}k&&(q=x,E=++e)}i&&((u=!d&&u)&&m--,s&&v.push(u))}if(m+=g,i&&g!==m){for(p=0;d=n[p++];)d(v,f,r,h);if(s){if(m>0)for(;g--;)v[g]||f[g]||(f[g]=Z.call(l));f=b(f)}nn.apply(l,f),k&&!s&&f.length>0&&m+n.length>1&&a.uniqueSort(l)}return k&&(q=x,A=y),v};return i?s(r):r}function w(t,n,e){for(var i=0,s=n.length;s>i;i++)a(t,n[i],e);return e}function x(t,n,e,i){var s,o,a,r,h,l=d(t);if(!i&&1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===n.nodeType&&M&&T.relative[o[1].type]){if(n=(T.find.ID(a.matches[0].replace(En,Tn),n)||[])[0],!n)return e;t=t.slice(o.shift().value.length)}for(s=kn.needsContext.test(t)?0:o.length;s--&&(a=o[s],!T.relative[r=a.type]);)if((h=T.find[r])&&(i=h(a.matches[0].replace(En,Tn),mn.test(o[0].type)&&n.parentNode||n))){if(o.splice(s,1),t=i.length&&f(o),!t)return nn.apply(e,i),e;break}}return S(t,l)(i,n,!M,e,mn.test(t)),e}function L(){}var C,E,T,D,N,S,A,O,R,I,P,M,F,B,_,W,$="sizzle"+-new Date,j=t.document,V={},q=0,z=0,H=i(),G=i(),U=i(),X=!1,Q=function(){return 0},Y=typeof n,K=1<<31,J=[],Z=J.pop,tn=J.push,nn=J.push,en=J.slice,sn=J.indexOf||function(t){for(var n=0,e=this.length;e>n;n++)if(this[n]===t)return n;return-1},on="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",rn="[\\x20\\t\\r\\n\\f]",hn="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ln=hn.replace("w","w#"),cn="\\["+rn+"*("+hn+")"+rn+"*(?:([*^$|!~]?=)"+rn+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+ln+")|)|)"+rn+"*\\]",un=":("+hn+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+cn.replace(3,8)+")*)|.*)\\)|)",pn=RegExp("^"+rn+"+|((?:^|[^\\\\])(?:\\\\.)*)"+rn+"+$","g"),dn=RegExp("^"+rn+"*,"+rn+"*"),fn=RegExp("^"+rn+"*([>+~]|"+rn+")"+rn+"*"),mn=RegExp(rn+"*[+~]"),gn=RegExp("="+rn+"*([^\\]'\"]*)"+rn+"*\\]","g"),bn=RegExp(un),vn=RegExp("^"+ln+"$"),kn={ID:RegExp("^#("+hn+")"),CLASS:RegExp("^\\.("+hn+")"),TAG:RegExp("^("+hn.replace("w","w*")+")"),ATTR:RegExp("^"+cn),PSEUDO:RegExp("^"+un),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+rn+"*(even|odd|(([+-]|)(\\d*)n|)"+rn+"*(?:([+-]|)"+rn+"*(\\d+)|))"+rn+"*\\)|)","i"),"boolean":RegExp("^(?:"+on+")$","i"),needsContext:RegExp("^"+rn+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+rn+"*((?:-\\d)?\\d*)"+rn+"*\\)|)(?=[^-]|$)","i")},yn=/^[^{]+\{\s*\[native \w/,wn=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,xn=/^(?:input|select|textarea|button)$/i,Ln=/^h\d$/i,Cn=/'|\\/g,En=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,Tn=function(t,n){var e="0x"+n-65536;return e!==e?n:0>e?String.fromCharCode(e+65536):String.fromCharCode(55296|e>>10,56320|1023&e)};try{nn.apply(J=en.call(j.childNodes),j.childNodes),J[j.childNodes.length].nodeType}catch(Dn){nn={apply:J.length?function(t,n){tn.apply(t,en.call(n))}:function(t,n){for(var e=t.length,i=0;t[e++]=n[i++];);t.length=e-1}}}N=a.isXML=function(t){var n=t&&(t.ownerDocument||t).documentElement;return n?"HTML"!==n.nodeName:!1},R=a.setDocument=function(t){var i=t?t.ownerDocument||t:j;return i!==I&&9===i.nodeType&&i.documentElement?(I=i,P=i.documentElement,M=!N(i),V.getElementsByTagName=o(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),V.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),V.getElementsByClassName=o(function(t){return t.innerHTML="<div class='a'></div><div class='a i'></div>",t.firstChild.className="i",2===t.getElementsByClassName("i").length}),V.sortDetached=o(function(t){return 1&t.compareDocumentPosition(I.createElement("div"))}),V.getById=o(function(t){return P.appendChild(t).id=$,!i.getElementsByName||!i.getElementsByName($).length}),V.getById?(T.find.ID=function(t,n){if(typeof n.getElementById!==Y&&M){var e=n.getElementById(t);return e&&e.parentNode?[e]:[]}},T.filter.ID=function(t){var n=t.replace(En,Tn);return function(t){return t.getAttribute("id")===n}}):(T.find.ID=function(t,e){if(typeof e.getElementById!==Y&&M){var i=e.getElementById(t);return i?i.id===t||typeof i.getAttributeNode!==Y&&i.getAttributeNode("id").value===t?[i]:n:[]}},T.filter.ID=function(t){var n=t.replace(En,Tn);return function(t){var e=typeof t.getAttributeNode!==Y&&t.getAttributeNode("id");return e&&e.value===n}}),T.find.TAG=V.getElementsByTagName?function(t,e){return typeof e.getElementsByTagName!==Y?e.getElementsByTagName(t):n}:function(t,n){var e,i=[],s=0,o=n.getElementsByTagName(t);if("*"===t){for(;e=o[s++];)1===e.nodeType&&i.push(e);return i}return o},T.find.CLASS=V.getElementsByClassName&&function(t,e){return typeof e.getElementsByClassName!==Y&&M?e.getElementsByClassName(t):n},B=[],F=[],(V.qsa=e(i.querySelectorAll))&&(o(function(t){t.innerHTML="<select><option selected=''></option></select>",t.querySelectorAll("[selected]").length||F.push("\\["+rn+"*(?:value|"+on+")"),t.querySelectorAll(":checked").length||F.push(":checked")}),o(function(t){var n=I.createElement("input");n.setAttribute("type","hidden"),t.appendChild(n).setAttribute("t",""),t.querySelectorAll("[t^='']").length&&F.push("[*^$]="+rn+"*(?:''|\"\")"),t.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),F.push(",.*:")})),(V.matchesSelector=e(_=P.webkitMatchesSelector||P.mozMatchesSelector||P.oMatchesSelector||P.msMatchesSelector))&&o(function(t){V.disconnectedMatch=_.call(t,"div"),_.call(t,"[s!='']:x"),B.push("!=",un)}),F=F.length&&RegExp(F.join("|")),B=B.length&&RegExp(B.join("|")),W=e(P.contains)||P.compareDocumentPosition?function(t,n){var e=9===t.nodeType?t.documentElement:t,i=n&&n.parentNode;return t===i||!(!i||1!==i.nodeType||!(e.contains?e.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,n){if(n)for(;n=n.parentNode;)if(n===t)return!0;return!1},Q=P.compareDocumentPosition?function(t,n){if(t===n)return X=!0,0;var e=n.compareDocumentPosition&&t.compareDocumentPosition&&t.compareDocumentPosition(n);return e?1&e||!V.sortDetached&&n.compareDocumentPosition(t)===e?t===i||W(j,t)?-1:n===i||W(j,n)?1:O?sn.call(O,t)-sn.call(O,n):0:4&e?-1:1:t.compareDocumentPosition?-1:1}:function(t,n){var e,s=0,o=t.parentNode,a=n.parentNode,h=[t],l=[n];if(t===n)return X=!0,0;if(!o||!a)return t===i?-1:n===i?1:o?-1:a?1:O?sn.call(O,t)-sn.call(O,n):0;if(o===a)return r(t,n);for(e=t;e=e.parentNode;)h.unshift(e);for(e=n;e=e.parentNode;)l.unshift(e);for(;h[s]===l[s];)s++;return s?r(h[s],l[s]):h[s]===j?-1:l[s]===j?1:0},I):I},a.matches=function(t,n){return a(t,null,null,n)},a.matchesSelector=function(t,n){if((t.ownerDocument||t)!==I&&R(t),n=n.replace(gn,"='$1']"),!(!V.matchesSelector||!M||B&&B.test(n)||F&&F.test(n)))try{var e=_.call(t,n);if(e||V.disconnectedMatch||t.document&&11!==t.document.nodeType)return e}catch(i){}return a(n,I,null,[t]).length>0},a.contains=function(t,n){return(t.ownerDocument||t)!==I&&R(t),W(t,n)},a.attr=function(t,e){(t.ownerDocument||t)!==I&&R(t);var i=T.attrHandle[e.toLowerCase()],s=i&&i(t,e,!M);return s===n?V.attributes||!M?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null:s},a.error=function(t){throw Error("Syntax error, unrecognized expression: "+t)},a.uniqueSort=function(t){var n,e=[],i=0,s=0;if(X=!V.detectDuplicates,O=!V.sortStable&&t.slice(0),t.sort(Q),X){for(;n=t[s++];)n===t[s]&&(i=e.push(s));for(;i--;)t.splice(e[i],1)}return t},D=a.getText=function(t){var n,e="",i=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)e+=D(t)}else if(3===s||4===s)return t.nodeValue}else for(;n=t[i];i++)e+=D(n);return e},T=a.selectors={cacheLength:50,createPseudo:s,match:kn,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(En,Tn),t[3]=(t[4]||t[5]||"").replace(En,Tn),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||a.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&a.error(t[0]),t},PSEUDO:function(t){var n,e=!t[5]&&t[2];return kn.CHILD.test(t[0])?null:(t[4]?t[2]=t[4]:e&&bn.test(e)&&(n=d(e,!0))&&(n=e.indexOf(")",e.length-n)-e.length)&&(t[0]=t[0].slice(0,n),t[2]=e.slice(0,n)),t.slice(0,3))}},filter:{TAG:function(t){var n=t.replace(En,Tn).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===n}},CLASS:function(t){var n=H[t+" "];return n||(n=RegExp("(^|"+rn+")"+t+"("+rn+"|$)"))&&H(t,function(t){return n.test("string"==typeof t.className&&t.className||typeof t.getAttribute!==Y&&t.getAttribute("class")||"")})},ATTR:function(t,n,e){return function(i){var s=a.attr(i,t);return null==s?"!="===n:n?(s+="","="===n?s===e:"!="===n?s!==e:"^="===n?e&&0===s.indexOf(e):"*="===n?e&&s.indexOf(e)>-1:"$="===n?e&&s.slice(-e.length)===e:"~="===n?(" "+s+" ").indexOf(e)>-1:"|="===n?s===e||s.slice(0,e.length+1)===e+"-":!1):!0}},CHILD:function(t,n,e,i,s){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),r="of-type"===n;return 1===i&&0===s?function(t){return!!t.parentNode}:function(n,e,h){var l,c,u,p,d,f,m=o!==a?"nextSibling":"previousSibling",g=n.parentNode,b=r&&n.nodeName.toLowerCase(),v=!h&&!r;if(g){if(o){for(;m;){for(u=n;u=u[m];)if(r?u.nodeName.toLowerCase()===b:1===u.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[a?g.firstChild:g.lastChild],a&&v){for(c=g[$]||(g[$]={}),l=c[t]||[],d=l[0]===q&&l[1],p=l[0]===q&&l[2],u=d&&g.childNodes[d];u=++d&&u&&u[m]||(p=d=0)||f.pop();)if(1===u.nodeType&&++p&&u===n){c[t]=[q,d,p];break}}else if(v&&(l=(n[$]||(n[$]={}))[t])&&l[0]===q)p=l[1];else for(;(u=++d&&u&&u[m]||(p=d=0)||f.pop())&&((r?u.nodeName.toLowerCase()!==b:1!==u.nodeType)||!++p||(v&&((u[$]||(u[$]={}))[t]=[q,p]),u!==n)););return p-=s,p===i||0===p%i&&p/i>=0}}},PSEUDO:function(t,n){var e,i=T.pseudos[t]||T.setFilters[t.toLowerCase()]||a.error("unsupported pseudo: "+t);return i[$]?i(n):i.length>1?(e=[t,t,"",n],T.setFilters.hasOwnProperty(t.toLowerCase())?s(function(t,e){for(var s,o=i(t,n),a=o.length;a--;)s=sn.call(t,o[a]),t[s]=!(e[s]=o[a])}):function(t){return i(t,0,e)}):i}},pseudos:{not:s(function(t){var n=[],e=[],i=S(t.replace(pn,"$1"));return i[$]?s(function(t,n,e,s){for(var o,a=i(t,null,s,[]),r=t.length;r--;)(o=a[r])&&(t[r]=!(n[r]=o))}):function(t,s,o){return n[0]=t,i(n,null,o,e),!e.pop()}}),has:s(function(t){return function(n){return a(t,n).length>0}}),contains:s(function(t){return function(n){return(n.textContent||n.innerText||D(n)).indexOf(t)>-1}}),lang:s(function(t){return vn.test(t||"")||a.error("unsupported lang: "+t),t=t.replace(En,Tn).toLowerCase(),function(n){var e;do if(e=M?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return e=e.toLowerCase(),e===t||0===e.indexOf(t+"-");while((n=n.parentNode)&&1===n.nodeType);return!1}}),target:function(n){var e=t.location&&t.location.hash;return e&&e.slice(1)===n.id},root:function(t){return t===P},focus:function(t){return t===I.activeElement&&(!I.hasFocus||I.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&!!t.checked||"option"===n&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeName>"@"||3===t.nodeType||4===t.nodeType)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return Ln.test(t.nodeName)},input:function(t){return xn.test(t.nodeName)},button:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&"button"===t.type||"button"===n},text:function(t){var n;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(n=t.getAttribute("type"))||n.toLowerCase()===t.type)},first:p(function(){return[0]}),last:p(function(t,n){return[n-1]}),eq:p(function(t,n,e){return[0>e?e+n:e]}),even:p(function(t,n){for(var e=0;n>e;e+=2)t.push(e);return t}),odd:p(function(t,n){for(var e=1;n>e;e+=2)t.push(e);return t}),lt:p(function(t,n,e){for(var i=0>e?e+n:e;--i>=0;)t.push(i);return t}),gt:p(function(t,n,e){for(var i=0>e?e+n:e;n>++i;)t.push(i);
return t})}};for(C in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[C]=c(C);for(C in{submit:!0,reset:!0})T.pseudos[C]=u(C);S=a.compile=function(t,n){var e,i=[],s=[],o=U[t+" "];if(!o){for(n||(n=d(t)),e=n.length;e--;)o=k(n[e]),o[$]?i.push(o):s.push(o);o=U(t,y(s,i))}return o},T.pseudos.nth=T.pseudos.eq,L.prototype=T.filters=T.pseudos,T.setFilters=new L,V.sortStable=$.split("").sort(Q).join("")===$,R(),[0,0].sort(Q),V.detectDuplicates=X,o(function(t){if(t.innerHTML="<a href='#'></a>","#"!==t.firstChild.getAttribute("href"))for(var n="type|href|height|width".split("|"),e=n.length;e--;)T.attrHandle[n[e]]=l}),o(function(t){if(null!=t.getAttribute("disabled"))for(var n=on.split("|"),e=n.length;e--;)T.attrHandle[n[e]]=h}),an.find=a,an.expr=a.selectors,an.expr[":"]=an.expr.pseudos,an.unique=a.uniqueSort,an.text=a.getText,an.isXMLDoc=a.isXML,an.contains=a.contains}(t);var mn={};an.Callbacks=function(t){t="string"==typeof t?mn[t]||i(t):an.extend({},t);var e,s,o,a,r,h,l=[],c=!t.once&&[],u=function(n){for(e=t.memory&&n,s=!0,h=a||0,a=0,r=l.length,o=!0;l&&r>h;h++)if(l[h].apply(n[0],n[1])===!1&&t.stopOnFalse){e=!1;break}o=!1,l&&(c?c.length&&u(c.shift()):e?l=[]:p.disable())},p={add:function(){if(l){var n=l.length;(function i(n){an.each(n,function(n,e){var s=an.type(e);"function"===s?t.unique&&p.has(e)||l.push(e):e&&e.length&&"string"!==s&&i(e)})})(arguments),o?r=l.length:e&&(a=n,u(e))}return this},remove:function(){return l&&an.each(arguments,function(t,n){for(var e;(e=an.inArray(n,l,e))>-1;)l.splice(e,1),o&&(r>=e&&r--,h>=e&&h--)}),this},has:function(t){return t?an.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],r=0,this},disable:function(){return l=c=e=n,this},disabled:function(){return!l},lock:function(){return c=n,e||p.disable(),this},locked:function(){return!c},fireWith:function(t,n){return n=n||[],n=[t,n.slice?n.slice():n],!l||s&&!c||(o?c.push(n):u(n)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!s}};return p},an.extend({Deferred:function(t){var n=[["resolve","done",an.Callbacks("once memory"),"resolved"],["reject","fail",an.Callbacks("once memory"),"rejected"],["notify","progress",an.Callbacks("memory")]],e="pending",i={state:function(){return e},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var t=arguments;return an.Deferred(function(e){an.each(n,function(n,o){var a=o[0],r=an.isFunction(t[n])&&t[n];s[o[1]](function(){var t=r&&r.apply(this,arguments);t&&an.isFunction(t.promise)?t.promise().done(e.resolve).fail(e.reject).progress(e.notify):e[a+"With"](this===i?e.promise():this,r?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?an.extend(t,i):i}},s={};return i.pipe=i.then,an.each(n,function(t,o){var a=o[2],r=o[3];i[o[1]]=a.add,r&&a.add(function(){e=r},n[1^t][2].disable,n[2][2].lock),s[o[0]]=function(){return s[o[0]+"With"](this===s?i:this,arguments),this},s[o[0]+"With"]=a.fireWith}),i.promise(s),t&&t.call(s,s),s},when:function(t){var n,e,i,s=0,o=tn.call(arguments),a=o.length,r=1!==a||t&&an.isFunction(t.promise)?a:0,h=1===r?t:an.Deferred(),l=function(t,e,i){return function(s){e[t]=this,i[t]=arguments.length>1?tn.call(arguments):s,i===n?h.notifyWith(e,i):--r||h.resolveWith(e,i)}};if(a>1)for(n=Array(a),e=Array(a),i=Array(a);a>s;s++)o[s]&&an.isFunction(o[s].promise)?o[s].promise().done(l(s,i,o)).fail(h.reject).progress(l(s,e,n)):--r;return r||h.resolveWith(i,o),h.promise()}}),an.support=function(n){var e=H.createElement("input"),i=H.createDocumentFragment(),s=H.createElement("div"),o=H.createElement("select"),a=o.appendChild(H.createElement("option"));return e.type?(e.type="checkbox",n.checkOn=""!==e.value,n.optSelected=a.selected,n.reliableMarginRight=!0,n.boxSizingReliable=!0,n.pixelPosition=!1,e.checked=!0,n.noCloneChecked=e.cloneNode(!0).checked,o.disabled=!0,n.optDisabled=!a.disabled,e=H.createElement("input"),e.value="t",e.type="radio",n.radioValue="t"===e.value,e.setAttribute("checked","t"),e.setAttribute("name","t"),i.appendChild(e),n.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,n.focusinBubbles="onfocusin"in t,s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",n.clearCloneStyle="content-box"===s.style.backgroundClip,an(function(){var e,i,o="padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",a=H.getElementsByTagName("body")[0];a&&(e=H.createElement("div"),e.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",a.appendChild(e).appendChild(s),s.innerHTML="",s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",an.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){n.boxSizing=4===s.offsetWidth}),t.getComputedStyle&&(n.pixelPosition="1%"!==(t.getComputedStyle(s,null)||{}).top,n.boxSizingReliable="4px"===(t.getComputedStyle(s,null)||{width:"4px"}).width,i=s.appendChild(H.createElement("div")),i.style.cssText=s.style.cssText=o,i.style.marginRight=i.style.width="0",s.style.width="1px",n.reliableMarginRight=!parseFloat((t.getComputedStyle(i,null)||{}).marginRight)),a.removeChild(e))}),n):n}({});var gn,bn,vn=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,kn=/([A-Z])/g;s.uid=1,s.accepts=function(t){return t.nodeType?1===t.nodeType||9===t.nodeType:!0},s.prototype={key:function(t){if(!s.accepts(t))return 0;var n={},e=t[this.expando];if(!e){e=s.uid++;try{n[this.expando]={value:e},Object.defineProperties(t,n)}catch(i){n[this.expando]=e,an.extend(t,n)}}return this.cache[e]||(this.cache[e]={}),e},set:function(t,n,e){var i,s=this.key(t),o=this.cache[s];if("string"==typeof n)o[n]=e;else if(an.isEmptyObject(o))this.cache[s]=n;else for(i in n)o[i]=n[i]},get:function(t,e){var i=this.cache[this.key(t)];return e===n?i:i[e]},access:function(t,e,i){return e===n||e&&"string"==typeof e&&i===n?this.get(t,e):(this.set(t,e,i),i!==n?i:e)},remove:function(t,e){var i,s,o=this.key(t),a=this.cache[o];if(e===n)this.cache[o]={};else{an.isArray(e)?s=e.concat(e.map(an.camelCase)):e in a?s=[e]:(s=an.camelCase(e),s=s in a?[s]:s.match(hn)||[]),i=s.length;for(;i--;)delete a[s[i]]}},hasData:function(t){return!an.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){delete this.cache[this.key(t)]}},gn=new s,bn=new s,an.extend({acceptData:s.accepts,hasData:function(t){return gn.hasData(t)||bn.hasData(t)},data:function(t,n,e){return gn.access(t,n,e)},removeData:function(t,n){gn.remove(t,n)},_data:function(t,n,e){return bn.access(t,n,e)},_removeData:function(t,n){bn.remove(t,n)}}),an.fn.extend({data:function(t,e){var i,s,a=this[0],r=0,h=null;if(t===n){if(this.length&&(h=gn.get(a),1===a.nodeType&&!bn.get(a,"hasDataAttrs"))){for(i=a.attributes;i.length>r;r++)s=i[r].name,0===s.indexOf("data-")&&(s=an.camelCase(s.substring(5)),o(a,s,h[s]));bn.set(a,"hasDataAttrs",!0)}return h}return"object"==typeof t?this.each(function(){gn.set(this,t)}):an.access(this,function(e){var i,s=an.camelCase(t);if(a&&e===n){if(i=gn.get(a,t),i!==n)return i;if(i=gn.get(a,s),i!==n)return i;if(i=o(a,s,n),i!==n)return i}else this.each(function(){var i=gn.get(this,s);gn.set(this,s,e),-1!==t.indexOf("-")&&i!==n&&gn.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){gn.remove(this,t)})}}),an.extend({queue:function(t,e,i){var s;return t?(e=(e||"fx")+"queue",s=bn.get(t,e),i&&(!s||an.isArray(i)?s=bn.access(t,e,an.makeArray(i)):s.push(i)),s||[]):n},dequeue:function(t,n){n=n||"fx";var e=an.queue(t,n),i=e.length,s=e.shift(),o=an._queueHooks(t,n),a=function(){an.dequeue(t,n)};"inprogress"===s&&(s=e.shift(),i--),o.cur=s,s&&("fx"===n&&e.unshift("inprogress"),delete o.stop,s.call(t,a,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,n){var e=n+"queueHooks";return bn.get(t,e)||bn.access(t,e,{empty:an.Callbacks("once memory").add(function(){bn.remove(t,[n+"queue",e])})})}}),an.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),i>arguments.length?an.queue(this[0],t):e===n?this:this.each(function(){var n=an.queue(this,t,e);an._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&an.dequeue(this,t)})},dequeue:function(t){return this.each(function(){an.dequeue(this,t)})},delay:function(t,n){return t=an.fx?an.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,e){var i=setTimeout(n,t);e.stop=function(){clearTimeout(i)}})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,s=1,o=an.Deferred(),a=this,r=this.length,h=function(){--s||o.resolveWith(a,[a])};for("string"!=typeof t&&(e=t,t=n),t=t||"fx";r--;)i=bn.get(a[r],t+"queueHooks"),i&&i.empty&&(s++,i.empty.add(h));return h(),o.promise(e)}});var yn,wn,xn=/[\t\r\n]/g,Ln=/\r/g,Cn=/^(?:input|select|textarea|button)$/i;an.fn.extend({attr:function(t,n){return an.access(this,an.attr,t,n,arguments.length>1)},removeAttr:function(t){return this.each(function(){an.removeAttr(this,t)})},prop:function(t,n){return an.access(this,an.prop,t,n,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[an.propFix[t]||t]})},addClass:function(t){var n,e,i,s,o,a=0,r=this.length,h="string"==typeof t&&t;if(an.isFunction(t))return this.each(function(n){an(this).addClass(t.call(this,n,this.className))});if(h)for(n=(t||"").match(hn)||[];r>a;a++)if(e=this[a],i=1===e.nodeType&&(e.className?(" "+e.className+" ").replace(xn," "):" ")){for(o=0;s=n[o++];)0>i.indexOf(" "+s+" ")&&(i+=s+" ");e.className=an.trim(i)}return this},removeClass:function(t){var n,e,i,s,o,a=0,r=this.length,h=0===arguments.length||"string"==typeof t&&t;if(an.isFunction(t))return this.each(function(n){an(this).removeClass(t.call(this,n,this.className))});if(h)for(n=(t||"").match(hn)||[];r>a;a++)if(e=this[a],i=1===e.nodeType&&(e.className?(" "+e.className+" ").replace(xn," "):"")){for(o=0;s=n[o++];)for(;i.indexOf(" "+s+" ")>=0;)i=i.replace(" "+s+" "," ");e.className=t?an.trim(i):""}return this},toggleClass:function(t,n){var e=typeof t,i="boolean"==typeof n;return an.isFunction(t)?this.each(function(e){an(this).toggleClass(t.call(this,e,this.className,n),n)}):this.each(function(){if("string"===e)for(var s,o=0,a=an(this),r=n,h=t.match(hn)||[];s=h[o++];)r=i?r:!a.hasClass(s),a[r?"addClass":"removeClass"](s);else(e===q||"boolean"===e)&&(this.className&&bn.set(this,"__className__",this.className),this.className=this.className||t===!1?"":bn.get(this,"__className__")||"")})},hasClass:function(t){for(var n=" "+t+" ",e=0,i=this.length;i>e;e++)if(1===this[e].nodeType&&(" "+this[e].className+" ").replace(xn," ").indexOf(n)>=0)return!0;return!1},val:function(t){var e,i,s,o=this[0];{if(arguments.length)return s=an.isFunction(t),this.each(function(i){var o,a=an(this);1===this.nodeType&&(o=s?t.call(this,i,a.val()):t,null==o?o="":"number"==typeof o?o+="":an.isArray(o)&&(o=an.map(o,function(t){return null==t?"":t+""})),e=an.valHooks[this.type]||an.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&e.set(this,o,"value")!==n||(this.value=o))});if(o)return e=an.valHooks[o.type]||an.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&(i=e.get(o,"value"))!==n?i:(i=o.value,"string"==typeof i?i.replace(Ln,""):null==i?"":i)}}}),an.extend({valHooks:{option:{get:function(t){var n=t.attributes.value;return!n||n.specified?t.value:t.text}},select:{get:function(t){for(var n,e,i=t.options,s=t.selectedIndex,o="select-one"===t.type||0>s,a=o?null:[],r=o?s+1:i.length,h=0>s?r:o?s:0;r>h;h++)if(e=i[h],!(!e.selected&&h!==s||(an.support.optDisabled?e.disabled:null!==e.getAttribute("disabled"))||e.parentNode.disabled&&an.nodeName(e.parentNode,"optgroup"))){if(n=an(e).val(),o)return n;a.push(n)}return a},set:function(t,n){for(var e,i,s=t.options,o=an.makeArray(n),a=s.length;a--;)i=s[a],(i.selected=an.inArray(an(i).val(),o)>=0)&&(e=!0);return e||(t.selectedIndex=-1),o}}},attr:function(t,e,i){var s,o,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return typeof t.getAttribute===q?an.prop(t,e,i):(1===a&&an.isXMLDoc(t)||(e=e.toLowerCase(),s=an.attrHooks[e]||(an.expr.match.boolean.test(e)?wn:yn)),i===n?s&&"get"in s&&null!==(o=s.get(t,e))?o:(o=an.find.attr(t,e),null==o?n:o):null!==i?s&&"set"in s&&(o=s.set(t,i,e))!==n?o:(t.setAttribute(e,i+""),i):(an.removeAttr(t,e),n))},removeAttr:function(t,n){var e,i,s=0,o=n&&n.match(hn);if(o&&1===t.nodeType)for(;e=o[s++];)i=an.propFix[e]||e,an.expr.match.boolean.test(e)&&(t[i]=!1),t.removeAttribute(e)},attrHooks:{type:{set:function(t,n){if(!an.support.radioValue&&"radio"===n&&an.nodeName(t,"input")){var e=t.value;return t.setAttribute("type",n),e&&(t.value=e),n}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,i){var s,o,a,r=t.nodeType;if(t&&3!==r&&8!==r&&2!==r)return a=1!==r||!an.isXMLDoc(t),a&&(e=an.propFix[e]||e,o=an.propHooks[e]),i!==n?o&&"set"in o&&(s=o.set(t,i,e))!==n?s:t[e]=i:o&&"get"in o&&null!==(s=o.get(t,e))?s:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||Cn.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),wn={set:function(t,n,e){return n===!1?an.removeAttr(t,e):t.setAttribute(e,e),e}},an.each(an.expr.match.boolean.source.match(/\w+/g),function(t,e){var i=an.expr.attrHandle[e]||an.find.attr;an.expr.attrHandle[e]=function(t,e,s){var o=an.expr.attrHandle[e],a=s?n:(an.expr.attrHandle[e]=n)!=i(t,e,s)?e.toLowerCase():null;return an.expr.attrHandle[e]=o,a}}),an.support.optSelected||(an.propHooks.selected={get:function(t){var n=t.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null}}),an.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){an.propFix[this.toLowerCase()]=this}),an.each(["radio","checkbox"],function(){an.valHooks[this]={set:function(t,e){return an.isArray(e)?t.checked=an.inArray(an(t).val(),e)>=0:n}},an.support.checkOn||(an.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var En=/^key/,Tn=/^(?:mouse|contextmenu)|click/,Dn=/^(?:focusinfocus|focusoutblur)$/,Nn=/^([^.]*)(?:\.(.+)|)$/;an.event={global:{},add:function(t,e,i,s,o){var a,r,h,l,c,u,p,d,f,m,g,b=bn.get(t);if(b){for(i.handler&&(a=i,i=a.handler,o=a.selector),i.guid||(i.guid=an.guid++),(l=b.events)||(l=b.events={}),(r=b.handle)||(r=b.handle=function(t){return typeof an===q||t&&an.event.triggered===t.type?n:an.event.dispatch.apply(r.elem,arguments)},r.elem=t),e=(e||"").match(hn)||[""],c=e.length;c--;)h=Nn.exec(e[c])||[],f=g=h[1],m=(h[2]||"").split(".").sort(),f&&(p=an.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=an.event.special[f]||{},u=an.extend({type:f,origType:g,data:s,handler:i,guid:i.guid,selector:o,needsContext:o&&an.expr.match.needsContext.test(o),namespace:m.join(".")},a),(d=l[f])||(d=l[f]=[],d.delegateCount=0,p.setup&&p.setup.call(t,s,m,r)!==!1||t.addEventListener&&t.addEventListener(f,r,!1)),p.add&&(p.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),o?d.splice(d.delegateCount++,0,u):d.push(u),an.event.global[f]=!0);t=null}},remove:function(t,n,e,i,s){var o,a,r,h,l,c,u,p,d,f,m,g=bn.hasData(t)&&bn.get(t);if(g&&(h=g.events)){for(n=(n||"").match(hn)||[""],l=n.length;l--;)if(r=Nn.exec(n[l])||[],d=m=r[1],f=(r[2]||"").split(".").sort(),d){for(u=an.event.special[d]||{},d=(i?u.delegateType:u.bindType)||d,p=h[d]||[],r=r[2]&&RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)c=p[o],!s&&m!==c.origType||e&&e.guid!==c.guid||r&&!r.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,u.remove&&u.remove.call(t,c));a&&!p.length&&(u.teardown&&u.teardown.call(t,f,g.handle)!==!1||an.removeEvent(t,d,g.handle),delete h[d])}else for(d in h)an.event.remove(t,d+n[l],e,i,!0);an.isEmptyObject(h)&&(delete g.handle,bn.remove(t,"events"))}},trigger:function(e,i,s,o){var a,r,h,l,c,u,p,d=[s||H],f=sn.call(e,"type")?e.type:e,m=sn.call(e,"namespace")?e.namespace.split("."):[];if(r=h=s=s||H,3!==s.nodeType&&8!==s.nodeType&&!Dn.test(f+an.event.triggered)&&(f.indexOf(".")>=0&&(m=f.split("."),f=m.shift(),m.sort()),c=0>f.indexOf(":")&&"on"+f,e=e[an.expando]?e:new an.Event(f,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=m.join("."),e.namespace_re=e.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=n,e.target||(e.target=s),i=null==i?[e]:an.makeArray(i,[e]),p=an.event.special[f]||{},o||!p.trigger||p.trigger.apply(s,i)!==!1)){if(!o&&!p.noBubble&&!an.isWindow(s)){for(l=p.delegateType||f,Dn.test(l+f)||(r=r.parentNode);r;r=r.parentNode)d.push(r),h=r;h===(s.ownerDocument||H)&&d.push(h.defaultView||h.parentWindow||t)}for(a=0;(r=d[a++])&&!e.isPropagationStopped();)e.type=a>1?l:p.bindType||f,u=(bn.get(r,"events")||{})[e.type]&&bn.get(r,"handle"),u&&u.apply(r,i),u=c&&r[c],u&&an.acceptData(r)&&u.apply&&u.apply(r,i)===!1&&e.preventDefault();return e.type=f,o||e.isDefaultPrevented()||p._default&&p._default.apply(d.pop(),i)!==!1||!an.acceptData(s)||c&&an.isFunction(s[f])&&!an.isWindow(s)&&(h=s[c],h&&(s[c]=null),an.event.triggered=f,s[f](),an.event.triggered=n,h&&(s[c]=h)),e.result}},dispatch:function(t){t=an.event.fix(t);var e,i,s,o,a,r=[],h=tn.call(arguments),l=(bn.get(this,"events")||{})[t.type]||[],c=an.event.special[t.type]||{};if(h[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(r=an.event.handlers.call(this,t,l),e=0;(o=r[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,i=0;(a=o.handlers[i++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(a.namespace))&&(t.handleObj=a,t.data=a.data,s=((an.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,h),s!==n&&(t.result=s)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,s,o,a,r=[],h=e.delegateCount,l=t.target;if(h&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(s=[],i=0;h>i;i++)a=e[i],o=a.selector+" ",s[o]===n&&(s[o]=a.needsContext?an(o,this).index(l)>=0:an.find(o,this,null,[l]).length),s[o]&&s.push(a);s.length&&r.push({elem:l,handlers:s})}return e.length>h&&r.push({elem:this,handlers:e.slice(h)}),r},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,n){return null==t.which&&(t.which=null!=n.charCode?n.charCode:n.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,s,o,a=e.button;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||H,s=i.documentElement,o=i.body,t.pageX=e.clientX+(s&&s.scrollLeft||o&&o.scrollLeft||0)-(s&&s.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(s&&s.scrollTop||o&&o.scrollTop||0)-(s&&s.clientTop||o&&o.clientTop||0)),t.which||a===n||(t.which=1&a?1:2&a?3:4&a?2:0),t}},fix:function(t){if(t[an.expando])return t;var n,e,i,s=t.type,o=t,a=this.fixHooks[s];for(a||(this.fixHooks[s]=a=Tn.test(s)?this.mouseHooks:En.test(s)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,t=new an.Event(o),n=i.length;n--;)e=i[n],t[e]=o[e];return 3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==h()&&this.focus?(this.focus(),!1):n},delegateType:"focusin"},blur:{trigger:function(){return this===h()&&this.blur?(this.blur(),!1):n},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&an.nodeName(this,"input")?(this.click(),!1):n},_default:function(t){return an.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){t.result!==n&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,n,e,i){var s=an.extend(new an.Event,e,{type:t,isSimulated:!0,originalEvent:{}});i?an.event.trigger(s,null,n):an.event.dispatch.call(n,s),s.isDefaultPrevented()&&e.preventDefault()}},an.removeEvent=function(t,n,e){t.removeEventListener&&t.removeEventListener(n,e,!1)},an.Event=function(t,e){return this instanceof an.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||t.getPreventDefault&&t.getPreventDefault()?a:r):this.type=t,e&&an.extend(this,e),this.timeStamp=t&&t.timeStamp||an.now(),this[an.expando]=!0,n):new an.Event(t,e)},an.Event.prototype={isDefaultPrevented:r,isPropagationStopped:r,isImmediatePropagationStopped:r,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=a,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=a,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=a,this.stopPropagation()}},an.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(t,n){an.event.special[t]={delegateType:n,bindType:n,handle:function(t){var e,i=this,s=t.relatedTarget,o=t.handleObj;return(!s||s!==i&&!an.contains(i,s))&&(t.type=o.origType,e=o.handler.apply(this,arguments),t.type=n),e}}}),an.support.focusinBubbles||an.each({focus:"focusin",blur:"focusout"},function(t,n){var e=0,i=function(t){an.event.simulate(n,t.target,an.event.fix(t),!0)};an.event.special[n]={setup:function(){0===e++&&H.addEventListener(t,i,!0)},teardown:function(){0===--e&&H.removeEventListener(t,i,!0)}}}),an.fn.extend({on:function(t,e,i,s,o){var a,h;if("object"==typeof t){"string"!=typeof e&&(i=i||e,e=n);for(h in t)this.on(h,e,i,t[h],o);return this}if(null==i&&null==s?(s=e,i=e=n):null==s&&("string"==typeof e?(s=i,i=n):(s=i,i=e,e=n)),s===!1)s=r;else if(!s)return this;return 1===o&&(a=s,s=function(t){return an().off(t),a.apply(this,arguments)},s.guid=a.guid||(a.guid=an.guid++)),this.each(function(){an.event.add(this,t,s,i,e)})},one:function(t,n,e,i){return this.on(t,n,e,i,1)},off:function(t,e,i){var s,o;if(t&&t.preventDefault&&t.handleObj)return s=t.handleObj,an(t.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return(e===!1||"function"==typeof e)&&(i=e,e=n),i===!1&&(i=r),this.each(function(){an.event.remove(this,t,i,e)})},trigger:function(t,n){return this.each(function(){an.event.trigger(t,n,this)})},triggerHandler:function(t,e){var i=this[0];return i?an.event.trigger(t,e,i,!0):n}});var Sn=/^.[^:#\[\.,]*$/,An=an.expr.match.needsContext,On={children:!0,contents:!0,next:!0,prev:!0};an.fn.extend({find:function(t){var n,e,i,s=this.length;if("string"!=typeof t)return n=this,this.pushStack(an(t).filter(function(){for(i=0;s>i;i++)if(an.contains(n[i],this))return!0}));for(e=[],i=0;s>i;i++)an.find(t,this[i],e);return e=this.pushStack(s>1?an.unique(e):e),e.selector=(this.selector?this.selector+" ":"")+t,e},has:function(t){var n=an(t,this),e=n.length;return this.filter(function(){for(var t=0;e>t;t++)if(an.contains(this,n[t]))return!0})},not:function(t){return this.pushStack(c(this,t||[],!0))},filter:function(t){return this.pushStack(c(this,t||[],!1))},is:function(t){return!!t&&("string"==typeof t?An.test(t)?an(t,this.context).index(this[0])>=0:an.filter(t,this).length>0:this.filter(t).length>0)},closest:function(t,n){for(var e,i=0,s=this.length,o=[],a=An.test(t)||"string"!=typeof t?an(t,n||this.context):0;s>i;i++)for(e=this[i];e&&e!==n;e=e.parentNode)if(11>e.nodeType&&(a?a.index(e)>-1:1===e.nodeType&&an.find.matchesSelector(e,t))){e=o.push(e);break}return this.pushStack(o.length>1?an.unique(o):o)},index:function(t){return t?"string"==typeof t?nn.call(an(t),this[0]):nn.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,n){var e="string"==typeof t?an(t,n):an.makeArray(t&&t.nodeType?[t]:t),i=an.merge(this.get(),e);return this.pushStack(an.unique(i))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),an.each({parent:function(t){var n=t.parentNode;return n&&11!==n.nodeType?n:null},parents:function(t){return an.dir(t,"parentNode")},parentsUntil:function(t,n,e){return an.dir(t,"parentNode",e)},next:function(t){return l(t,"nextSibling")},prev:function(t){return l(t,"previousSibling")},nextAll:function(t){return an.dir(t,"nextSibling")},prevAll:function(t){return an.dir(t,"previousSibling")},nextUntil:function(t,n,e){return an.dir(t,"nextSibling",e)},prevUntil:function(t,n,e){return an.dir(t,"previousSibling",e)},siblings:function(t){return an.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return an.sibling(t.firstChild)},contents:function(t){return an.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:an.merge([],t.childNodes)}},function(t,n){an.fn[t]=function(e,i){var s=an.map(this,n,e);return"Until"!==t.slice(-5)&&(i=e),i&&"string"==typeof i&&(s=an.filter(i,s)),this.length>1&&(On[t]||an.unique(s),"p"===t[0]&&s.reverse()),this.pushStack(s)}}),an.extend({filter:function(t,n,e){var i=n[0];return e&&(t=":not("+t+")"),1===n.length&&1===i.nodeType?an.find.matchesSelector(i,t)?[i]:[]:an.find.matches(t,an.grep(n,function(t){return 1===t.nodeType}))},dir:function(t,e,i){for(var s=[],o=i!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&an(t).is(i))break;s.push(t)}return s},sibling:function(t,n){for(var e=[];t;t=t.nextSibling)1===t.nodeType&&t!==n&&e.push(t);return e}});var Rn=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,In=/<([\w:]+)/,Pn=/<|&#?\w+;/,Mn=/<(?:script|style|link)/i,Fn=/^(?:checkbox|radio)$/i,Bn=/checked\s*(?:[^=]|=\s*.checked.)/i,_n=/^$|\/(?:java|ecma)script/i,Wn=/^true\/(.*)/,$n=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,jn={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};jn.optgroup=jn.option,jn.tbody=jn.tfoot=jn.colgroup=jn.caption=jn.col=jn.thead,jn.th=jn.td,an.fn.extend({text:function(t){return an.access(this,function(t){return t===n?an.text(this):this.empty().append((this[0]&&this[0].ownerDocument||H).createTextNode(t))},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=u(this,t);n.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=u(this,t);n.insertBefore(t,n.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,n){for(var e,i=t?an.filter(t,this):this,s=0;null!=(e=i[s]);s++)n||1!==e.nodeType||an.cleanData(g(e)),e.parentNode&&(n&&an.contains(e.ownerDocument,e)&&f(g(e,"script")),e.parentNode.removeChild(e));return this},empty:function(){for(var t,n=0;null!=(t=this[n]);n++)1===t.nodeType&&(an.cleanData(g(t,!1)),t.textContent="");return this},clone:function(t,n){return t=null==t?!1:t,n=null==n?t:n,this.map(function(){return an.clone(this,t,n)})},html:function(t){return an.access(this,function(t){var e=this[0]||{},i=0,s=this.length;if(t===n&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mn.test(t)&&!jn[(In.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Rn,"<$1></$2>");try{for(;s>i;i++)e=this[i]||{},1===e.nodeType&&(an.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=an.map(this,function(t){return[t.nextSibling,t.parentNode]}),n=0;return this.domManip(arguments,function(e){var i=t[n++],s=t[n++];s&&(an(this).remove(),s.insertBefore(e,i))},!0),n?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,n,e){t=J.apply([],t);var i,s,o,a,r,h,l=0,c=this.length,u=this,f=c-1,m=t[0],b=an.isFunction(m);if(b||!(1>=c||"string"!=typeof m||an.support.checkClone)&&Bn.test(m))return this.each(function(i){var s=u.eq(i);b&&(t[0]=m.call(this,i,s.html())),s.domManip(t,n,e)});if(c&&(i=an.buildFragment(t,this[0].ownerDocument,!1,!e&&this),s=i.firstChild,1===i.childNodes.length&&(i=s),s)){for(o=an.map(g(i,"script"),p),a=o.length;c>l;l++)r=i,l!==f&&(r=an.clone(r,!0,!0),a&&an.merge(o,g(r,"script"))),n.call(this[l],r,l);if(a)for(h=o[o.length-1].ownerDocument,an.map(o,d),l=0;a>l;l++)r=o[l],_n.test(r.type||"")&&!bn.access(r,"globalEval")&&an.contains(h,r)&&(r.src?an._evalUrl(r.src):an.globalEval(r.textContent.replace($n,"")))}return this}}),an.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,n){an.fn[t]=function(t){for(var e,i=[],s=an(t),o=s.length-1,a=0;o>=a;a++)e=a===o?this:this.clone(!0),an(s[a])[n](e),Z.apply(i,e.get());return this.pushStack(i)}}),an.extend({clone:function(t,n,e){var i,s,o,a,r=t.cloneNode(!0),h=an.contains(t.ownerDocument,t);if(!(an.support.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||an.isXMLDoc(t)))for(a=g(r),o=g(t),i=0,s=o.length;s>i;i++)b(o[i],a[i]);if(n)if(e)for(o=o||g(t),a=a||g(r),i=0,s=o.length;s>i;i++)m(o[i],a[i]);else m(t,r);return a=g(r,"script"),a.length>0&&f(a,!h&&g(t,"script")),r},buildFragment:function(t,n,e,i){for(var s,o,a,r,h,l,c=0,u=t.length,p=n.createDocumentFragment(),d=[];u>c;c++)if(s=t[c],s||0===s)if("object"===an.type(s))an.merge(d,s.nodeType?[s]:s);else if(Pn.test(s)){for(o=o||p.appendChild(n.createElement("div")),a=(In.exec(s)||["",""])[1].toLowerCase(),r=jn[a]||jn._default,o.innerHTML=r[1]+s.replace(Rn,"<$1></$2>")+r[2],l=r[0];l--;)o=o.firstChild;an.merge(d,o.childNodes),o=p.firstChild,o.textContent=""}else d.push(n.createTextNode(s));for(p.textContent="",c=0;s=d[c++];)if((!i||-1===an.inArray(s,i))&&(h=an.contains(s.ownerDocument,s),o=g(p.appendChild(s),"script"),h&&f(o),e))for(l=0;s=o[l++];)_n.test(s.type||"")&&e.push(s);return p},cleanData:function(t){for(var n,e,i,s=t.length,o=0,a=an.event.special;s>o;o++){if(e=t[o],an.acceptData(e)&&(n=bn.access(e)))for(i in n.events)a[i]?an.event.remove(e,i):an.removeEvent(e,i,n.handle);gn.discard(e),bn.discard(e)}},_evalUrl:function(t){return an.ajax({url:t,type:"GET",dataType:"text",async:!1,global:!1,success:an.globalEval})}}),an.fn.extend({wrapAll:function(t){var n;return an.isFunction(t)?this.each(function(n){an(this).wrapAll(t.call(this,n))}):(this[0]&&(n=an(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return an.isFunction(t)?this.each(function(n){an(this).wrapInner(t.call(this,n))}):this.each(function(){var n=an(this),e=n.contents();e.length?e.wrapAll(t):n.append(t)})},wrap:function(t){var n=an.isFunction(t);return this.each(function(e){an(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(){return this.parent().each(function(){an.nodeName(this,"body")||an(this).replaceWith(this.childNodes)}).end()}});var Vn,qn,zn=/^(none|table(?!-c[ea]).+)/,Hn=/^margin/,Gn=RegExp("^("+rn+")(.*)$","i"),Un=RegExp("^("+rn+")(?!px)[a-z%]+$","i"),Xn=RegExp("^([+-])=("+rn+")","i"),Qn={BODY:"block"},Yn={position:"absolute",visibility:"hidden",display:"block"},Kn={letterSpacing:0,fontWeight:400},Jn=["Top","Right","Bottom","Left"],Zn=["Webkit","O","Moz","ms"];an.fn.extend({css:function(t,e){return an.access(this,function(t,e,i){var s,o,a={},r=0;if(an.isArray(e)){for(s=y(t),o=e.length;o>r;r++)a[e[r]]=an.css(t,e[r],!1,s);return a}return i!==n?an.style(t,e,i):an.css(t,e)},t,e,arguments.length>1)},show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(t){var n="boolean"==typeof t;return this.each(function(){(n?t:k(this))?an(this).show():an(this).hide()})}}),an.extend({cssHooks:{opacity:{get:function(t,n){if(n){var e=Vn(t,"opacity");return""===e?"1":e}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,i,s){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,a,r,h=an.camelCase(e),l=t.style;
return e=an.cssProps[h]||(an.cssProps[h]=v(l,h)),r=an.cssHooks[e]||an.cssHooks[h],i===n?r&&"get"in r&&(o=r.get(t,!1,s))!==n?o:l[e]:(a=typeof i,"string"===a&&(o=Xn.exec(i))&&(i=(o[1]+1)*o[2]+parseFloat(an.css(t,e)),a="number"),null==i||"number"===a&&isNaN(i)||("number"!==a||an.cssNumber[h]||(i+="px"),an.support.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),r&&"set"in r&&(i=r.set(t,i,s))===n||(l[e]=i)),n)}},css:function(t,e,i,s){var o,a,r,h=an.camelCase(e);return e=an.cssProps[h]||(an.cssProps[h]=v(t.style,h)),r=an.cssHooks[e]||an.cssHooks[h],r&&"get"in r&&(o=r.get(t,!0,i)),o===n&&(o=Vn(t,e,s)),"normal"===o&&e in Kn&&(o=Kn[e]),""===i||i?(a=parseFloat(o),i===!0||an.isNumeric(a)?a||0:o):o}}),Vn=function(t,e,i){var s,o,a,r=i||y(t),h=r?r.getPropertyValue(e)||r[e]:n,l=t.style;return r&&(""!==h||an.contains(t.ownerDocument,t)||(h=an.style(t,e)),Un.test(h)&&Hn.test(e)&&(s=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=h,h=r.width,l.width=s,l.minWidth=o,l.maxWidth=a)),h},an.each(["height","width"],function(t,e){an.cssHooks[e]={get:function(t,i,s){return i?0===t.offsetWidth&&zn.test(an.css(t,"display"))?an.swap(t,Yn,function(){return C(t,e,s)}):C(t,e,s):n},set:function(t,n,i){var s=i&&y(t);return x(t,n,i?L(t,e,i,an.support.boxSizing&&"border-box"===an.css(t,"boxSizing",!1,s),s):0)}}}),an(function(){an.support.reliableMarginRight||(an.cssHooks.marginRight={get:function(t,e){return e?an.swap(t,{display:"inline-block"},Vn,[t,"marginRight"]):n}}),!an.support.pixelPosition&&an.fn.position&&an.each(["top","left"],function(t,e){an.cssHooks[e]={get:function(t,i){return i?(i=Vn(t,e),Un.test(i)?an(t).position()[e]+"px":i):n}}})}),an.expr&&an.expr.filters&&(an.expr.filters.hidden=function(t){return 0>=t.offsetWidth&&0>=t.offsetHeight},an.expr.filters.visible=function(t){return!an.expr.filters.hidden(t)}),an.each({margin:"",padding:"",border:"Width"},function(t,n){an.cssHooks[t+n]={expand:function(e){for(var i=0,s={},o="string"==typeof e?e.split(" "):[e];4>i;i++)s[t+Jn[i]+n]=o[i]||o[i-2]||o[0];return s}},Hn.test(t)||(an.cssHooks[t+n].set=x)});var te=/%20/g,ne=/\[\]$/,ee=/\r?\n/g,ie=/^(?:submit|button|image|reset|file)$/i,se=/^(?:input|select|textarea|keygen)/i;an.fn.extend({serialize:function(){return an.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=an.prop(this,"elements");return t?an.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!an(this).is(":disabled")&&se.test(this.nodeName)&&!ie.test(t)&&(this.checked||!Fn.test(t))}).map(function(t,n){var e=an(this).val();return null==e?null:an.isArray(e)?an.map(e,function(t){return{name:n.name,value:t.replace(ee,"\r\n")}}):{name:n.name,value:e.replace(ee,"\r\n")}}).get()}}),an.param=function(t,e){var i,s=[],o=function(t,n){n=an.isFunction(n)?n():null==n?"":n,s[s.length]=encodeURIComponent(t)+"="+encodeURIComponent(n)};if(e===n&&(e=an.ajaxSettings&&an.ajaxSettings.traditional),an.isArray(t)||t.jquery&&!an.isPlainObject(t))an.each(t,function(){o(this.name,this.value)});else for(i in t)D(i,t[i],e,o);return s.join("&").replace(te,"+")},an.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,n){an.fn[n]=function(t,e){return arguments.length>0?this.on(n,null,t,e):this.trigger(n)}}),an.fn.extend({hover:function(t,n){return this.mouseenter(t).mouseleave(n||t)},bind:function(t,n,e){return this.on(t,null,n,e)},unbind:function(t,n){return this.off(t,null,n)},delegate:function(t,n,e,i){return this.on(n,t,e,i)},undelegate:function(t,n,e){return 1===arguments.length?this.off(t,"**"):this.off(n,t||"**",e)}});var oe,ae,re=an.now(),he=/\?/,le=/#.*$/,ce=/([?&])_=[^&]*/,ue=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,de=/^(?:GET|HEAD)$/,fe=/^\/\//,me=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,ge=an.fn.load,be={},ve={},ke="*/".concat("*");try{ae=z.href}catch(ye){ae=H.createElement("a"),ae.href="",ae=ae.href}oe=me.exec(ae.toLowerCase())||[],an.fn.load=function(t,e,i){if("string"!=typeof t&&ge)return ge.apply(this,arguments);var s,o,a,r=this,h=t.indexOf(" ");return h>=0&&(s=t.slice(h),t=t.slice(0,h)),an.isFunction(e)?(i=e,e=n):e&&"object"==typeof e&&(o="POST"),r.length>0&&an.ajax({url:t,type:o,dataType:"html",data:e}).done(function(t){a=arguments,r.html(s?an("<div>").append(an.parseHTML(t)).find(s):t)}).complete(i&&function(t,n){r.each(i,a||[t.responseText,n,t])}),this},an.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,n){an.fn[n]=function(t){return this.on(n,t)}}),an.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ae,type:"GET",isLocal:pe.test(oe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ke,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":an.parseJSON,"text xml":an.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,n){return n?A(A(t,an.ajaxSettings),n):A(an.ajaxSettings,t)},ajaxPrefilter:N(be),ajaxTransport:N(ve),ajax:function(t,e){function i(t,e,i,r){var l,u,v,k,w,L=e;2!==y&&(y=2,h&&clearTimeout(h),s=n,a=r||"",x.readyState=t>0?4:0,l=t>=200&&300>t||304===t,i&&(k=O(p,x,i)),k=R(p,k,x,l),l?(p.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(an.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(an.etag[o]=w)),204===t?L="nocontent":304===t?L="notmodified":(L=k.state,u=k.data,v=k.error,l=!v)):(v=L,(t||!L)&&(L="error",0>t&&(t=0))),x.status=t,x.statusText=(e||L)+"",l?m.resolveWith(d,[u,L,x]):m.rejectWith(d,[x,L,v]),x.statusCode(b),b=n,c&&f.trigger(l?"ajaxSuccess":"ajaxError",[x,p,l?u:v]),g.fireWith(d,[x,L]),c&&(f.trigger("ajaxComplete",[x,p]),--an.active||an.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=n),e=e||{};var s,o,a,r,h,l,c,u,p=an.ajaxSetup({},e),d=p.context||p,f=p.context&&(d.nodeType||d.jquery)?an(d):an.event,m=an.Deferred(),g=an.Callbacks("once memory"),b=p.statusCode||{},v={},k={},y=0,w="canceled",x={readyState:0,getResponseHeader:function(t){var n;if(2===y){if(!r)for(r={};n=ue.exec(a);)r[n[1].toLowerCase()]=n[2];n=r[t.toLowerCase()]}return null==n?null:n},getAllResponseHeaders:function(){return 2===y?a:null},setRequestHeader:function(t,n){var e=t.toLowerCase();return y||(t=k[e]=k[e]||t,v[t]=n),this},overrideMimeType:function(t){return y||(p.mimeType=t),this},statusCode:function(t){var n;if(t)if(2>y)for(n in t)b[n]=[b[n],t[n]];else x.always(t[x.status]);return this},abort:function(t){var n=t||w;return s&&s.abort(n),i(0,n),this}};if(m.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,p.url=((t||p.url||ae)+"").replace(le,"").replace(fe,oe[1]+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=an.trim(p.dataType||"*").toLowerCase().match(hn)||[""],null==p.crossDomain&&(l=me.exec(p.url.toLowerCase()),p.crossDomain=!(!l||l[1]===oe[1]&&l[2]===oe[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(oe[3]||("http:"===oe[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=an.param(p.data,p.traditional)),S(be,p,e,x),2===y)return x;c=p.global,c&&0===an.active++&&an.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!de.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(he.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=ce.test(o)?o.replace(ce,"$1_="+re++):o+(he.test(o)?"&":"?")+"_="+re++)),p.ifModified&&(an.lastModified[o]&&x.setRequestHeader("If-Modified-Since",an.lastModified[o]),an.etag[o]&&x.setRequestHeader("If-None-Match",an.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",p.contentType),x.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ke+"; q=0.01":""):p.accepts["*"]);for(u in p.headers)x.setRequestHeader(u,p.headers[u]);if(p.beforeSend&&(p.beforeSend.call(d,x,p)===!1||2===y))return x.abort();w="abort";for(u in{success:1,error:1,complete:1})x[u](p[u]);if(s=S(ve,p,e,x)){x.readyState=1,c&&f.trigger("ajaxSend",[x,p]),p.async&&p.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},p.timeout));try{y=1,s.send(v,i)}catch(L){if(!(2>y))throw L;i(-1,L)}}else i(-1,"No Transport");return x},getJSON:function(t,n,e){return an.get(t,n,e,"json")},getScript:function(t,e){return an.get(t,n,e,"script")}}),an.each(["get","post"],function(t,e){an[e]=function(t,i,s,o){return an.isFunction(i)&&(o=o||s,s=i,i=n),an.ajax({url:t,type:e,dataType:o,data:i,success:s})}}),an.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return an.globalEval(t),t}}}),an.ajaxPrefilter("script",function(t){t.cache===n&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),an.ajaxTransport("script",function(t){if(t.crossDomain){var n,e;return{send:function(i,s){n=an("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",e=function(t){n.remove(),e=null,t&&s("error"===t.type?404:200,t.type)}),H.head.appendChild(n[0])},abort:function(){e&&e()}}}});var we=[],xe=/(=)\?(?=&|$)|\?\?/;an.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=we.pop()||an.expando+"_"+re++;return this[t]=!0,t}}),an.ajaxPrefilter("json jsonp",function(e,i,s){var o,a,r,h=e.jsonp!==!1&&(xe.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&xe.test(e.data)&&"data");return h||"jsonp"===e.dataTypes[0]?(o=e.jsonpCallback=an.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,h?e[h]=e[h].replace(xe,"$1"+o):e.jsonp!==!1&&(e.url+=(he.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return r||an.error(o+" was not called"),r[0]},e.dataTypes[0]="json",a=t[o],t[o]=function(){r=arguments},s.always(function(){t[o]=a,e[o]&&(e.jsonpCallback=i.jsonpCallback,we.push(o)),r&&an.isFunction(a)&&a(r[0]),r=a=n}),"script"):n}),an.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Le=an.ajaxSettings.xhr(),Ce={0:200,1223:204},Ee=0,Te={};t.ActiveXObject&&an(t).on("unload",function(){for(var t in Te)Te[t]();Te=n}),an.support.cors=!!Le&&"withCredentials"in Le,an.support.ajax=Le=!!Le,an.ajaxTransport(function(t){var e;return an.support.cors||Le&&!t.crossDomain?{send:function(i,s){var o,a,r=t.xhr();if(r.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)r[o]=t.xhrFields[o];t.mimeType&&r.overrideMimeType&&r.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)r.setRequestHeader(o,i[o]);e=function(t){return function(){e&&(delete Te[a],e=r.onload=r.onerror=null,"abort"===t?r.abort():"error"===t?s(r.status||404,r.statusText):s(Ce[r.status]||r.status,r.statusText,"string"==typeof r.responseText?{text:r.responseText}:n,r.getAllResponseHeaders()))}},r.onload=e(),r.onerror=e("error"),e=Te[a=Ee++]=e("abort"),r.send(t.hasContent&&t.data||null)},abort:function(){e&&e()}}:n});var De,Ne,Se=/^(?:toggle|show|hide)$/,Ae=RegExp("^(?:([+-])=|)("+rn+")([a-z%]*)$","i"),Oe=/queueHooks$/,Re=[B],Ie={"*":[function(t,n){var e,i,s=this.createTween(t,n),o=Ae.exec(n),a=s.cur(),r=+a||0,h=1,l=20;if(o){if(e=+o[2],i=o[3]||(an.cssNumber[t]?"":"px"),"px"!==i&&r){r=an.css(s.elem,t,!0)||e||1;do h=h||".5",r/=h,an.style(s.elem,t,r+i);while(h!==(h=s.cur()/a)&&1!==h&&--l)}s.unit=i,s.start=r,s.end=o[1]?r+(o[1]+1)*e:e}return s}]};an.Animation=an.extend(M,{tweener:function(t,n){an.isFunction(t)?(n=t,t=["*"]):t=t.split(" ");for(var e,i=0,s=t.length;s>i;i++)e=t[i],Ie[e]=Ie[e]||[],Ie[e].unshift(n)},prefilter:function(t,n){n?Re.unshift(t):Re.push(t)}}),an.Tween=_,_.prototype={constructor:_,init:function(t,n,e,i,s,o){this.elem=t,this.prop=e,this.easing=s||"swing",this.options=n,this.start=this.now=this.cur(),this.end=i,this.unit=o||(an.cssNumber[e]?"":"px")},cur:function(){var t=_.propHooks[this.prop];return t&&t.get?t.get(this):_.propHooks._default.get(this)},run:function(t){var n,e=_.propHooks[this.prop];return this.pos=n=this.options.duration?an.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):t,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),e&&e.set?e.set(this):_.propHooks._default.set(this),this}},_.prototype.init.prototype=_.prototype,_.propHooks={_default:{get:function(t){var n;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(n=an.css(t.elem,t.prop,""),n&&"auto"!==n?n:0):t.elem[t.prop]},set:function(t){an.fx.step[t.prop]?an.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[an.cssProps[t.prop]]||an.cssHooks[t.prop])?an.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},_.propHooks.scrollTop=_.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},an.each(["toggle","show","hide"],function(t,n){var e=an.fn[n];an.fn[n]=function(t,i,s){return null==t||"boolean"==typeof t?e.apply(this,arguments):this.animate(W(n,!0),t,i,s)}}),an.fn.extend({fadeTo:function(t,n,e,i){return this.filter(k).css("opacity",0).show().end().animate({opacity:n},t,e,i)},animate:function(t,n,e,i){var s=an.isEmptyObject(t),o=an.speed(n,e,i),a=function(){var n=M(this,an.extend({},t),o);a.finish=function(){n.stop(!0)},(s||bn.get(this,"finish"))&&n.stop(!0)};return a.finish=a,s||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(t,e,i){var s=function(t){var n=t.stop;delete t.stop,n(i)};return"string"!=typeof t&&(i=e,e=t,t=n),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var n=!0,e=null!=t&&t+"queueHooks",o=an.timers,a=bn.get(this);if(e)a[e]&&a[e].stop&&s(a[e]);else for(e in a)a[e]&&a[e].stop&&Oe.test(e)&&s(a[e]);for(e=o.length;e--;)o[e].elem!==this||null!=t&&o[e].queue!==t||(o[e].anim.stop(i),n=!1,o.splice(e,1));(n||!i)&&an.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var n,e=bn.get(this),i=e[t+"queue"],s=e[t+"queueHooks"],o=an.timers,a=i?i.length:0;for(e.finish=!0,an.queue(this,t,[]),s&&s.cur&&s.cur.finish&&s.cur.finish.call(this),n=o.length;n--;)o[n].elem===this&&o[n].queue===t&&(o[n].anim.stop(!0),o.splice(n,1));for(n=0;a>n;n++)i[n]&&i[n].finish&&i[n].finish.call(this);delete e.finish})}}),an.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,n){an.fn[t]=function(t,e,i){return this.animate(n,t,e,i)}}),an.speed=function(t,n,e){var i=t&&"object"==typeof t?an.extend({},t):{complete:e||!e&&n||an.isFunction(t)&&t,duration:t,easing:e&&n||n&&!an.isFunction(n)&&n};return i.duration=an.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in an.fx.speeds?an.fx.speeds[i.duration]:an.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){an.isFunction(i.old)&&i.old.call(this),i.queue&&an.dequeue(this,i.queue)},i},an.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},an.timers=[],an.fx=_.prototype.init,an.fx.tick=function(){var t,e=an.timers,i=0;for(De=an.now();e.length>i;i++)t=e[i],t()||e[i]!==t||e.splice(i--,1);e.length||an.fx.stop(),De=n},an.fx.timer=function(t){t()&&an.timers.push(t)&&an.fx.start()},an.fx.interval=13,an.fx.start=function(){Ne||(Ne=setInterval(an.fx.tick,an.fx.interval))},an.fx.stop=function(){clearInterval(Ne),Ne=null},an.fx.speeds={slow:600,fast:200,_default:400},an.fx.step={},an.expr&&an.expr.filters&&(an.expr.filters.animated=function(t){return an.grep(an.timers,function(n){return t===n.elem}).length}),an.fn.offset=function(t){if(arguments.length)return t===n?this:this.each(function(n){an.offset.setOffset(this,t,n)});var e,i,s=this[0],o={top:0,left:0},a=s&&s.ownerDocument;if(a)return e=a.documentElement,an.contains(e,s)?(typeof s.getBoundingClientRect!==q&&(o=s.getBoundingClientRect()),i=$(a),{top:o.top+i.pageYOffset-e.clientTop,left:o.left+i.pageXOffset-e.clientLeft}):o},an.offset={setOffset:function(t,n,e){var i,s,o,a,r,h,l,c=an.css(t,"position"),u=an(t),p={};"static"===c&&(t.style.position="relative"),r=u.offset(),o=an.css(t,"top"),h=an.css(t,"left"),l=("absolute"===c||"fixed"===c)&&(o+h).indexOf("auto")>-1,l?(i=u.position(),a=i.top,s=i.left):(a=parseFloat(o)||0,s=parseFloat(h)||0),an.isFunction(n)&&(n=n.call(t,e,r)),null!=n.top&&(p.top=n.top-r.top+a),null!=n.left&&(p.left=n.left-r.left+s),"using"in n?n.using.call(t,p):u.css(p)}},an.fn.extend({position:function(){if(this[0]){var t,n,e=this[0],i={top:0,left:0};return"fixed"===an.css(e,"position")?n=e.getBoundingClientRect():(t=this.offsetParent(),n=this.offset(),an.nodeName(t[0],"html")||(i=t.offset()),i.top+=an.css(t[0],"borderTopWidth",!0),i.left+=an.css(t[0],"borderLeftWidth",!0)),{top:n.top-i.top-an.css(e,"marginTop",!0),left:n.left-i.left-an.css(e,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||G;t&&!an.nodeName(t,"html")&&"static"===an.css(t,"position");)t=t.offsetParent;return t||G})}}),an.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var s="pageYOffset"===i;an.fn[e]=function(o){return an.access(this,function(e,o,a){var r=$(e);return a===n?r?r[i]:e[o]:(r?r.scrollTo(s?t.pageXOffset:a,s?a:t.pageYOffset):e[o]=a,n)},e,o,arguments.length,null)}}),an.each({Height:"height",Width:"width"},function(t,e){an.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,s){an.fn[s]=function(s,o){var a=arguments.length&&(i||"boolean"!=typeof s),r=i||(s===!0||o===!0?"margin":"border");return an.access(this,function(e,i,s){var o;return an.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):s===n?an.css(e,i,r):an.style(e,i,s,r)},e,a?s:n,a,null)}})}),an.fn.size=function(){return this.length},an.fn.andSelf=an.fn.addBack,"object"==typeof module&&"object"==typeof module.exports?module.exports=an:"function"==typeof define&&define.amd&&define("jquery",[],function(){return an}),"object"==typeof t&&"object"==typeof t.document&&(t.jQuery=t.$=an)})(window),function(t){function n(i){function o(t){return t&&"object"==typeof t&&!Ei(t)&&ei.call(t,"__wrapped__")?t:new G(t)}function _(t){var n=t.length,e=n>=l;if(e)for(var i={},s=-1;n>++s;){var o=h+t[s];(i[o]||(i[o]=[])).push(t[s])}return function(n){if(e){var s=h+n;return i[s]&&Qn(i[s],n)>-1}return Qn(t,n)>-1}}function W(t){return t.charCodeAt(0)}function $(t,n){var i=t.index,s=n.index;if(t=t.criteria,n=n.criteria,t!==n){if(t>n||t===e)return 1;if(n>t||n===e)return-1}return s>i?-1:1}function j(t,n,e,i){function s(){var i=arguments,l=a?this:n;if(o||(t=n[r]),e.length&&(i=i.length?(i=gi.call(i),h?i.concat(e):e.concat(i)):e),this instanceof s){U.prototype=t.prototype,l=new U,U.prototype=null;var c=t.apply(l,i);return pn(c)?c:l}return t.apply(l,i)}var o=un(t),a=!e,r=n;if(a){var h=i;e=n}else if(!o){if(!i)throw new Ge;n=t}return s}function V(){for(var t,n={shadowedProps:L,support:yi,arrays:"isArray(iterable)",bottom:"",init:"iterable",loop:"",top:"",useHas:!0,useKeys:!!Di},e=0;t=arguments[e];e++)for(var i in t)n[i]=t[i];var s=n.args;n.firstArg=/^[^,]+/.exec(s)[0];var a=$e("hasOwnProperty, isArguments, isArray, isString, keys, lodash, objectTypes","return function("+s+") {\n"+wi(n)+"\n}");return a(ei,K,Ei,bn,Di,o,M)}function q(t){return"\\"+F[t]}function z(t){return Si[t]}function H(t){return"function"!=typeof t.toString&&"string"==typeof(t+"")}function G(t){this.__wrapped__=t}function U(){}function X(t){var n=!1;if(!t||ai.call(t)!=O||!yi.argsClass&&K(t))return n;var e=t.constructor;return(un(e)?e instanceof e:yi.nodeClass||!H(t))?yi.ownLast?(Ii(t,function(t,e,i){return n=ei.call(i,e),!1}),n===!0):(Ii(t,function(t,e){n=e}),n===!1||ei.call(t,n)):n}function Q(t,n,i){n||(n=0),i===e&&(i=t?t.length:0);for(var s=-1,o=i-n||0,a=Be(0>o?0:o);o>++s;)a[s]=t[n+s];return a}function Y(t){return Ai[t]}function K(t){return ai.call(t)==E}function J(t,n,i,s,a,r){var h=t;if("function"==typeof n&&(s=i,i=n,n=!1),"function"==typeof i){if(i=s===e?i:o.createCallback(i,s,1),h=i(h),h!==e)return h;h=t}var l=pn(h);if(l){var c=ai.call(h);if(!P[c]||!yi.nodeClass&&H(h))return h;var u=Ei(h)}if(!l||!n)return l?u?Q(h):Oi({},h):h;var p=ki[c];switch(c){case D:case N:return new p(+h);case A:case I:return new p(h);case R:return p(h.source,m.exec(h))}a||(a=[]),r||(r=[]);for(var d=a.length;d--;)if(a[d]==t)return r[d];return h=u?p(h.length):{},u&&(ei.call(t,"index")&&(h.index=t.index),ei.call(t,"input")&&(h.input=t.input)),a.push(t),r.push(h),(u?An:Pi)(t,function(t,s){h[s]=J(t,n,i,e,a,r)}),h}function Z(t,n,e){return J(t,!0,n,e)}function tn(t,n,i){var s;return n=o.createCallback(n,i),Pi(t,function(t,i,o){return n(t,i,o)?(s=i,!1):e}),s}function nn(t){var n=[];return Ii(t,function(t,e){un(t)&&n.push(e)}),n.sort()}function en(t,n){return t?ei.call(t,n):!1}function sn(t){for(var n=-1,e=Di(t),i=e.length,s={};i>++n;){var o=e[n];s[t[o]]=o}return s}function on(t){return t===!0||t===!1||ai.call(t)==D}function an(t){return t?"object"==typeof t&&ai.call(t)==N:!1}function rn(t){return t?1===t.nodeType:!1}function hn(t){var n=!0;if(!t)return n;var e=ai.call(t),i=t.length;return e==T||e==I||(yi.argsClass?e==E:K(t))||e==O&&"number"==typeof i&&un(t.splice)?!i:(Pi(t,function(){return n=!1}),n)}function ln(t,n,i,s,a,h){var l=i===r;if("function"==typeof i&&!l){i=o.createCallback(i,s,2);var c=i(t,n);if(c!==e)return!!c}if(t===n)return 0!==t||1/t==1/n;var u=typeof t,p=typeof n;if(t===t&&(!t||"function"!=u&&"object"!=u)&&(!n||"function"!=p&&"object"!=p))return!1;if(null==t||null==n)return t===n;var d=ai.call(t),f=ai.call(n);if(d==E&&(d=O),f==E&&(f=O),d!=f)return!1;switch(d){case D:case N:return+t==+n;case A:return t!=+t?n!=+n:0==t?1/t==1/n:t==+n;case R:case I:return t==He(n)}var m=d==T;if(!m){if(ei.call(t,"__wrapped__ ")||ei.call(n,"__wrapped__"))return ln(t.__wrapped__||t,n.__wrapped__||n,i,s,a,h);if(d!=O||!yi.nodeClass&&(H(t)||H(n)))return!1;var g=!yi.argsObject&&K(t)?qe:t.constructor,b=!yi.argsObject&&K(n)?qe:n.constructor;if(g!=b&&!(un(g)&&g instanceof g&&un(b)&&b instanceof b))return!1}a||(a=[]),h||(h=[]);for(var v=a.length;v--;)if(a[v]==t)return h[v]==n;var k=0;if(c=!0,a.push(t),h.push(n),m){if(v=t.length,k=n.length,c=k==t.length,!c&&!l)return c;for(;k--;){var y=v,w=n[k];if(l)for(;y--&&!(c=ln(t[y],w,i,s,a,h)););else if(!(c=ln(t[k],w,i,s,a,h)))break}return c}return Ii(n,function(n,o,r){return ei.call(r,o)?(k++,c=ei.call(t,o)&&ln(t[o],n,i,s,a,h)):e}),c&&!l&&Ii(t,function(t,n,i){return ei.call(i,n)?c=--k>-1:e}),c}function cn(t){return li(t)&&!ci(parseFloat(t))}function un(t){return"function"==typeof t}function pn(t){return t?M[typeof t]:!1}function dn(t){return mn(t)&&t!=+t}function fn(t){return null===t}function mn(t){return"number"==typeof t||ai.call(t)==A}function gn(t){return t?M[typeof t]&&ai.call(t)==R:!1}function bn(t){return"string"==typeof t||ai.call(t)==I}function vn(t){return t===e}function kn(t,n,i){var s=arguments,a=0,h=2;if(!pn(t))return t;if(i===r)var l=s[3],c=s[4],u=s[5];else c=[],u=[],"number"!=typeof i&&(h=s.length),h>3&&"function"==typeof s[h-2]?l=o.createCallback(s[--h-1],s[h--],2):h>2&&"function"==typeof s[h-1]&&(l=s[--h]);for(;h>++a;)(Ei(s[a])?An:Pi)(s[a],function(n,i){var s,o,a=n,h=t[i];if(n&&((o=Ei(n))||Mi(n))){for(var p=c.length;p--;)if(s=c[p]==n){h=u[p];break}if(!s){var d;l&&(a=l(h,n),(d=a!==e)&&(h=a)),d||(h=o?Ei(h)?h:[]:Mi(h)?h:{}),c.push(n),u.push(h),d||(h=kn(h,n,r,l,c,u))}}else l&&(a=l(h,n),a===e&&(a=n)),a!==e&&(h=a);t[i]=h});return t}function yn(t,n,e){var i="function"==typeof n,s={};if(i)n=o.createCallback(n,e);else var a=Ze.apply(Ue,gi.call(arguments,1));return Ii(t,function(t,e,o){(i?!n(t,e,o):0>Qn(a,e))&&(s[e]=t)}),s}function wn(t){for(var n=-1,e=Di(t),i=e.length,s=Be(i);i>++n;){var o=e[n];s[n]=[o,t[o]]}return s}function xn(t,n,e){var i={};if("function"!=typeof n)for(var s=-1,a=Ze.apply(Ue,gi.call(arguments,1)),r=pn(t)?a.length:0;r>++s;){var h=a[s];h in t&&(i[h]=t[h])}else n=o.createCallback(n,e),Ii(t,function(t,e,s){n(t,e,s)&&(i[e]=t)});return i}function Ln(t){for(var n=-1,e=Di(t),i=e.length,s=Be(i);i>++n;)s[n]=t[e[n]];return s}function Cn(t){var n=-1,e=Ze.apply(Ue,gi.call(arguments,1)),i=e.length,s=Be(i);for(yi.unindexedChars&&bn(t)&&(t=t.split(""));i>++n;)s[n]=t[e[n]];return s}function En(t,n,i){var s=-1,o=t?t.length:0,a=!1;return i=(0>i?pi(0,o+i):i)||0,"number"==typeof o?a=(bn(t)?t.indexOf(n,i):Qn(t,n,i))>-1:Ni(t,function(t){return++s>=i?!(a=t===n):e}),a}function Tn(t,n,e){var i={};return n=o.createCallback(n,e),An(t,function(t,e,s){e=He(n(t,e,s)),ei.call(i,e)?i[e]++:i[e]=1}),i}function Dn(t,n,e){var i=!0;if(n=o.createCallback(n,e),Ei(t))for(var s=-1,a=t.length;a>++s&&(i=!!n(t[s],s,t)););else Ni(t,function(t,e,s){return i=!!n(t,e,s)});return i}function Nn(t,n,e){var i=[];if(n=o.createCallback(n,e),Ei(t))for(var s=-1,a=t.length;a>++s;){var r=t[s];n(r,s,t)&&i.push(r)}else Ni(t,function(t,e,s){n(t,e,s)&&i.push(t)});return i}function Sn(t,n,i){if(n=o.createCallback(n,i),!Ei(t)){var s;return Ni(t,function(t,i,o){return n(t,i,o)?(s=t,!1):e}),s}for(var a=-1,r=t.length;r>++a;){var h=t[a];if(n(h,a,t))return h}}function An(t,n,i){if(n&&i===e&&Ei(t))for(var s=-1,o=t.length;o>++s&&n(t[s],s,t)!==!1;);else Ni(t,n,i);return t}function On(t,n,e){var i={};return n=o.createCallback(n,e),An(t,function(t,e,s){e=He(n(t,e,s)),(ei.call(i,e)?i[e]:i[e]=[]).push(t)}),i}function Rn(t,n){var e=gi.call(arguments,2),i=-1,s="function"==typeof n,o=t?t.length:0,a=Be("number"==typeof o?o:0);return An(t,function(t){a[++i]=(s?n:t[n]).apply(t,e)}),a}function In(t,n,e){var i=-1,s=t?t.length:0,a=Be("number"==typeof s?s:0);if(n=o.createCallback(n,e),Ei(t))for(;s>++i;)a[i]=n(t[i],i,t);else Ni(t,function(t,e,s){a[++i]=n(t,e,s)});return a}function Pn(t,n,e){var i=-1/0,s=i;if(!n&&Ei(t))for(var a=-1,r=t.length;r>++a;){var h=t[a];h>s&&(s=h)}else n=!n&&bn(t)?W:o.createCallback(n,e),Ni(t,function(t,e,o){var a=n(t,e,o);a>i&&(i=a,s=t)});return s}function Mn(t,n,e){var i=1/0,s=i;if(!n&&Ei(t))for(var a=-1,r=t.length;r>++a;){var h=t[a];s>h&&(s=h)}else n=!n&&bn(t)?W:o.createCallback(n,e),Ni(t,function(t,e,o){var a=n(t,e,o);i>a&&(i=a,s=t)});return s}function Fn(t,n,e,i){var s=3>arguments.length;if(n=o.createCallback(n,i,4),Ei(t)){var a=-1,r=t.length;for(s&&(e=t[++a]);r>++a;)e=n(e,t[a],a,t)}else Ni(t,function(t,i,o){e=s?(s=!1,t):n(e,t,i,o)});return e}function Bn(t,n,e,i){var s=t,a=t?t.length:0,r=3>arguments.length;if("number"!=typeof a){var h=Di(t);a=h.length}else yi.unindexedChars&&bn(t)&&(s=t.split(""));return n=o.createCallback(n,i,4),An(t,function(t,i,o){i=h?h[--a]:--a,e=r?(r=!1,s[i]):n(e,s[i],i,o)}),e}function _n(t,n,e){return n=o.createCallback(n,e),Nn(t,function(t,e,i){return!n(t,e,i)})}function Wn(t){var n=-1,e=t?t.length:0,i=Be("number"==typeof e?e:0);return An(t,function(t){var e=ti(mi()*(++n+1));i[n]=i[e],i[e]=t}),i}function $n(t){var n=t?t.length:0;return"number"==typeof n?n:Di(t).length}function jn(t,n,e){var i;if(n=o.createCallback(n,e),Ei(t))for(var s=-1,a=t.length;a>++s&&!(i=n(t[s],s,t)););else Ni(t,function(t,e,s){return!(i=n(t,e,s))});return!!i}function Vn(t,n,e){var i=-1,s=t?t.length:0,a=Be("number"==typeof s?s:0);for(n=o.createCallback(n,e),An(t,function(t,e,s){a[++i]={criteria:n(t,e,s),index:i,value:t}}),s=a.length,a.sort($);s--;)a[s]=a[s].value;return a}function qn(t){return t&&"number"==typeof t.length?yi.unindexedChars&&bn(t)?t.split(""):Q(t):Ln(t)}function zn(t){for(var n=-1,e=t?t.length:0,i=[];e>++n;){var s=t[n];s&&i.push(s)}return i}function Hn(t){for(var n=-1,e=t?t.length:0,i=Ze.apply(Ue,gi.call(arguments,1)),s=_(i),o=[];e>++n;){var a=t[n];s(a)||o.push(a)}return o}function Gn(t,n,e){var i=-1,s=t?t.length:0;for(n=o.createCallback(n,e);s>++i;)if(n(t[i],i,t))return i;return-1}function Un(t,n,e){if(t){var i=0,s=t.length;if("number"!=typeof n&&null!=n){var a=-1;for(n=o.createCallback(n,e);s>++a&&n(t[a],a,t);)i++}else if(i=n,null==i||e)return t[0];return Q(t,0,di(pi(0,i),s))}}function Xn(t,n,e,i){var s=-1,a=t?t.length:0,r=[];for("boolean"!=typeof n&&null!=n&&(i=e,e=n,n=!1),null!=e&&(e=o.createCallback(e,i));a>++s;){var h=t[s];e&&(h=e(h,s,t)),Ei(h)?ii.apply(r,n?h:Xn(h)):r.push(h)}return r}function Qn(t,n,e){var i=-1,s=t?t.length:0;if("number"==typeof e)i=(0>e?pi(0,s+e):e||0)-1;else if(e)return i=ee(t,n),t[i]===n?i:-1;for(;s>++i;)if(t[i]===n)return i;return-1}function Yn(t,n,e){if(!t)return[];var i=0,s=t.length;if("number"!=typeof n&&null!=n){var a=s;for(n=o.createCallback(n,e);a--&&n(t[a],a,t);)i++}else i=null==n||e?1:n||i;return Q(t,0,di(pi(0,s-i),s))}function Kn(t){var n=arguments,e=n.length,i={0:{}},s=-1,o=t?t.length:0,a=o>=l,r=[],c=r;t:for(;o>++s;){var u=t[s];if(a)var p=h+u,d=i[0][p]?!(c=i[0][p]):c=i[0][p]=[];if(d||0>Qn(c,u)){a&&c.push(u);for(var f=e;--f;)if(!(i[f]||(i[f]=_(n[f])))(u))continue t;r.push(u)}}return r}function Jn(t,n,e){if(t){var i=0,s=t.length;if("number"!=typeof n&&null!=n){var a=s;for(n=o.createCallback(n,e);a--&&n(t[a],a,t);)i++}else if(i=n,null==i||e)return t[s-1];return Q(t,pi(0,s-i))}}function Zn(t,n,e){var i=t?t.length:0;for("number"==typeof e&&(i=(0>e?pi(0,i+e):di(e,i-1))+1);i--;)if(t[i]===n)return i;return-1}function te(t,n,e){t=+t||0,e=+e||1,null==n&&(n=t,t=0);for(var i=-1,s=pi(0,Ke((n-t)/e)),o=Be(s);s>++i;)o[i]=t,t+=e;return o}function ne(t,n,e){if("number"!=typeof n&&null!=n){var i=0,s=-1,a=t?t.length:0;for(n=o.createCallback(n,e);a>++s&&n(t[s],s,t);)i++}else i=null==n||e?1:pi(0,n);return Q(t,i)}function ee(t,n,e,i){var s=0,a=t?t.length:s;for(e=e?o.createCallback(e,i,1):Ee,n=e(n);a>s;){var r=s+a>>>1;n>e(t[r])?s=r+1:a=r}return s}function ie(t){return Ei(t)||(arguments[0]=t?gi.call(t):Ue),se(Ze.apply(Ue,arguments))}function se(t,n,e,i){var s=-1,a=t?t.length:0,r=[],c=r;"boolean"!=typeof n&&null!=n&&(i=e,e=n,n=!1);var u=!n&&a>=l;if(u)var p={};for(null!=e&&(c=[],e=o.createCallback(e,i));a>++s;){var d=t[s],f=e?e(d,s,t):d;if(u)var m=h+f,g=p[m]?!(c=p[m]):c=p[m]=[];(n?!s||c[c.length-1]!==f:g||0>Qn(c,f))&&((e||u)&&c.push(f),r.push(d))}return r}function oe(t){for(var n=-1,e=t?t.length:0,i=e?Pn(Fi(t,"length")):0,s=Be(i);e>++n;)for(var o=-1,a=t[n];i>++o;)(s[o]||(s[o]=Be(e)))[n]=a[o];return s}function ae(t){return Hn(t,gi.call(arguments,1))}function re(t){for(var n=-1,e=t?Pn(Fi(arguments,"length")):0,i=Be(e);e>++n;)i[n]=Fi(arguments,n);return i}function he(t,n){for(var e=-1,i=t?t.length:0,s={};i>++e;){var o=t[e];n?s[o]=n[e]:s[o[0]]=o[1]}return s}function le(t,n){return 1>t?n():function(){return 1>--t?n.apply(this,arguments):e}}function ce(t,n){return yi.fastBind||ri&&arguments.length>2?ri.call.apply(ri,arguments):j(t,n,gi.call(arguments,2))}function ue(t){for(var n=arguments.length>1?Ze.apply(Ue,gi.call(arguments,1)):nn(t),e=-1,i=n.length;i>++e;){var s=n[e];t[s]=ce(t[s],t)}return t}function pe(t,n){return j(t,n,gi.call(arguments,2),r)}function de(){var t=arguments;return function(){for(var n=arguments,e=t.length;e--;)n=[t[e].apply(this,n)];return n[0]}}function fe(t,n,i){if(null==t)return Ee;var s=typeof t;if("function"!=s){if("object"!=s)return function(n){return n[t]};var o=Di(t);return function(n){for(var e=o.length,i=!1;e--&&(i=ln(n[o[e]],t[o[e]],r)););return i}}return n!==e?1===i?function(e){return t.call(n,e)}:2===i?function(e,i){return t.call(n,e,i)}:4===i?function(e,i,s,o){return t.call(n,e,i,s,o)}:function(e,i,s){return t.call(n,e,i,s)}:t}function me(t,n,e){function i(){o=h=null,l&&(a=t.apply(r,s))}var s,o,a,r,h,l=!0;if(e===!0){var c=!0;l=!1}else e&&M[typeof e]&&(c=e.leading,l="trailing"in e?e.trailing:l);return function(){return s=arguments,r=this,Je(h),!o&&c?(o=!0,a=t.apply(r,s)):h=oi(i,n),a}}function ge(t){var n=gi.call(arguments,1);return oi(function(){t.apply(e,n)},1)}function be(t,n){var i=gi.call(arguments,2);return oi(function(){t.apply(e,i)
},n)}function ve(t,n){var e={};return function(){var i=h+(n?n.apply(this,arguments):arguments[0]);return ei.call(e,i)?e[i]:e[i]=t.apply(this,arguments)}}function ke(t){var n,e;return function(){return n?e:(n=!0,e=t.apply(this,arguments),t=null,e)}}function ye(t){return j(t,gi.call(arguments,1))}function we(t){return j(t,gi.call(arguments,1),null,r)}function xe(t,n,e){function i(){r=null,c&&(h=new We,o=t.apply(a,s))}var s,o,a,r,h=0,l=!0,c=!0;return e===!1?l=!1:e&&M[typeof e]&&(l="leading"in e?e.leading:l,c="trailing"in e?e.trailing:c),function(){var e=new We;r||l||(h=e);var c=n-(e-h);return s=arguments,a=this,0>=c?(Je(r),r=null,h=e,o=t.apply(a,s)):r||(r=oi(i,c)),o}}function Le(t,n){return function(){var e=[t];return ii.apply(e,arguments),n.apply(this,e)}}function Ce(t){return null==t?"":He(t).replace(y,z)}function Ee(t){return t}function Te(t){An(nn(t),function(n){var e=o[n]=t[n];o.prototype[n]=function(){var t=this.__wrapped__,n=[t];ii.apply(n,arguments);var i=e.apply(o,n);return t&&"object"==typeof t&&t==i?this:new G(i)}})}function De(){return i._=Qe,this}function Ne(t,n){return null==t&&null==n&&(n=1),t=+t||0,null==n&&(n=t,t=0),t+ti(mi()*((+n||0)-t+1))}function Se(t,n){var i=t?t[n]:e;return un(i)?t[n]():i}function Ae(t,n,i){var s=o.templateSettings;t||(t=""),i=wi?Ri({},i,s):s;var a,r=wi&&Ri({},i.imports,s.imports),h=wi?Di(r):["_"],l=wi?Ln(r):[o],d=0,m=i.interpolate||k,b="__p += '",v=ze((i.escape||k).source+"|"+m.source+"|"+(m===g?f:k).source+"|"+(i.evaluate||k).source+"|$","g");t.replace(v,function(n,e,i,s,o,r){return i||(i=s),b+=t.slice(d,r).replace(w,q),e&&(b+="' +\n__e("+e+") +\n'"),o&&(a=!0,b+="';\n"+o+";\n__p += '"),i&&(b+="' +\n((__t = ("+i+")) == null ? '' : __t) +\n'"),d=r+n.length,n}),b+="';\n";var y=i.variable,x=y;x||(y="obj",b="with ("+y+") {\n"+b+"\n}\n"),b=(a?b.replace(c,""):b).replace(u,"$1").replace(p,"$1;"),b="function("+y+") {\n"+(x?"":y+" || ("+y+" = {});\n")+"var __t, __p = '', __e = _.escape"+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+b+"return __p\n}";var L="\n/*\n//@ sourceURL="+(i.sourceURL||"/lodash/template/source["+C++ +"]")+"\n*/";try{var E=$e(h,"return "+b+L).apply(e,l)}catch(T){throw T.source=b,T}return n?E(n):(E.source=b,E)}function Oe(t,n,e){t=(t=+t)>-1?t:0;var i=-1,s=Be(t);for(n=o.createCallback(n,e,1);t>++i;)s[i]=n(i);return s}function Re(t){return null==t?"":He(t).replace(d,Y)}function Ie(t){var n=++a;return He(null==t?"":t)+n}function Pe(t,n){return n(t),t}function Me(){return He(this.__wrapped__)}function Fe(){return this.__wrapped__}i=i?B.defaults(t.Object(),i,B.pick(t,x)):t;var Be=i.Array,_e=i.Boolean,We=i.Date,$e=i.Function,je=i.Math,Ve=i.Number,qe=i.Object,ze=i.RegExp,He=i.String,Ge=i.TypeError,Ue=Be(),Xe=qe(),Qe=i._,Ye=ze("^"+He(Xe.valueOf).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/valueOf|for [^\]]+/g,".+?")+"$"),Ke=je.ceil,Je=i.clearTimeout,Ze=Ue.concat,ti=je.floor,ni=Ye.test(ni=qe.getPrototypeOf)&&ni,ei=Xe.hasOwnProperty,ii=Ue.push,si=i.setImmediate,oi=i.setTimeout,ai=Xe.toString,ri=Ye.test(ri=ai.bind)&&ri,hi=Ye.test(hi=Be.isArray)&&hi,li=i.isFinite,ci=i.isNaN,ui=Ye.test(ui=qe.keys)&&ui,pi=je.max,di=je.min,fi=i.parseInt,mi=je.random,gi=Ue.slice,bi=Ye.test(i.attachEvent),vi=ri&&!/\n|true/.test(ri+bi),ki={};ki[T]=Be,ki[D]=_e,ki[N]=We,ki[O]=qe,ki[A]=Ve,ki[R]=ze,ki[I]=He;var yi=o.support={};(function(){var t=function(){this.x=1},n={0:1,length:1},e=[];t.prototype={valueOf:1,y:1};for(var i in new t)e.push(i);for(i in arguments);yi.argsObject=arguments.constructor==qe&&!(arguments instanceof Be),yi.argsClass=K(arguments),yi.enumPrototypes=t.propertyIsEnumerable("prototype"),yi.fastBind=ri&&!vi,yi.ownLast="x"!=e[0],yi.nonEnumArgs=0!=i,yi.nonEnumShadows=!/valueOf/.test(e),yi.spliceObjects=(Ue.splice.call(n,0,1),!n[0]),yi.unindexedChars="xx"!="x"[0]+qe("x")[0];try{yi.nodeClass=!(ai.call(document)==O&&!({toString:0}+""))}catch(s){yi.nodeClass=!0}})(1),o.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:g,variable:"",imports:{_:o}};var wi=Ae("var index, iterable = <%= firstArg %>, result = <%= init %>;\nif (!iterable) return result;\n<%= top %>;\n<% if (arrays) { %>var length = iterable.length; index = -1;\nif (<%= arrays %>) {  <% if (support.unindexedChars) { %>\n  if (isString(iterable)) {\n    iterable = iterable.split('')\n  }  <% } %>\n  while (++index < length) {\n    <%= loop %>\n  }\n}\nelse {  <%  } else if (support.nonEnumArgs) { %>\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += '';\n      <%= loop %>\n    }\n  } else {  <% } %>  <% if (support.enumPrototypes) { %>\n  var skipProto = typeof iterable == 'function';\n  <% } %>  <% if (useHas && useKeys) { %>\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] ? keys(iterable) : [],\n      length = ownProps.length;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n    <% if (support.enumPrototypes) { %>if (!(skipProto && index == 'prototype')) {\n  <% } %>    <%= loop %>\n    <% if (support.enumPrototypes) { %>}\n<% } %>  }  <% } else { %>\n  for (index in iterable) {<%    if (support.enumPrototypes || useHas) { %>\n    if (<%      if (support.enumPrototypes) { %>!(skipProto && index == 'prototype')<% }      if (support.enumPrototypes && useHas) { %> && <% }      if (useHas) { %>hasOwnProperty.call(iterable, index)<% }    %>) {    <% } %>\n    <%= loop %>;    <% if (support.enumPrototypes || useHas) { %>\n    }<% } %>\n  }    <% if (support.nonEnumShadows) { %>\n\n  var ctor = iterable.constructor;\n      <% for (var k = 0; k < 7; k++) { %>\n  index = '<%= shadowedProps[k] %>';\n  if (<%      if (shadowedProps[k] == 'constructor') {        %>!(ctor && ctor.prototype === iterable) && <%      } %>hasOwnProperty.call(iterable, index)) {\n    <%= loop %>\n  }      <% } %>    <% } %>  <% } %>  <% if (arrays || support.nonEnumArgs) { %>\n}<% } %>\n<%= bottom %>;\nreturn result"),xi={args:"object, source, guard",top:"var args = arguments,\n    argsIndex = 0,\n    argsLength = typeof guard == 'number' ? 2 : args.length;\nwhile (++argsIndex < argsLength) {\n  iterable = args[argsIndex];\n  if (iterable && objectTypes[typeof iterable]) {",loop:"if (typeof result[index] == 'undefined') result[index] = iterable[index]",bottom:"  }\n}"},Li={args:"collection, callback, thisArg",top:"callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg)",arrays:"typeof length == 'number'",loop:"if (callback(iterable[index], index, collection) === false) return result"},Ci={top:"if (!objectTypes[typeof iterable]) return result;\n"+Li.top,arrays:!1};G.prototype=o.prototype,yi.argsClass||(K=function(t){return t?ei.call(t,"callee"):!1});var Ei=hi||function(t){return t?"object"==typeof t&&ai.call(t)==T:!1},Ti=V({args:"object",init:"[]",top:"if (!(objectTypes[typeof object])) return result",loop:"result.push(index)",arrays:!1}),Di=ui?function(t){return pn(t)?yi.enumPrototypes&&"function"==typeof t||yi.nonEnumArgs&&t.length&&K(t)?Ti(t):ui(t):[]}:Ti,Ni=V(Li),Si={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},Ai=sn(Si),Oi=V(xi,{top:xi.top.replace(";",";\nif (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n  var callback = lodash.createCallback(args[--argsLength - 1], args[argsLength--], 2);\n} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n  callback = args[--argsLength];\n}"),loop:"result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]"}),Ri=V(xi),Ii=V(Li,Ci,{useHas:!1}),Pi=V(Li,Ci);un(/x/)&&(un=function(t){return"function"==typeof t&&ai.call(t)==S});var Mi=ni?function(t){if(!t||ai.call(t)!=O||!yi.argsClass&&K(t))return!1;var n=t.valueOf,e="function"==typeof n&&(e=ni(n))&&ni(e);return e?t==e||ni(t)==e:X(t)}:X,Fi=In,Bi=Nn;vi&&s&&"function"==typeof si&&(ge=ce(si,i));var _i=8==fi(b+"08")?fi:function(t,n){return fi(bn(t)?t.replace(v,""):t,n||0)};return o.after=le,o.assign=Oi,o.at=Cn,o.bind=ce,o.bindAll=ue,o.bindKey=pe,o.compact=zn,o.compose=de,o.countBy=Tn,o.createCallback=fe,o.debounce=me,o.defaults=Ri,o.defer=ge,o.delay=be,o.difference=Hn,o.filter=Nn,o.flatten=Xn,o.forEach=An,o.forIn=Ii,o.forOwn=Pi,o.functions=nn,o.groupBy=On,o.initial=Yn,o.intersection=Kn,o.invert=sn,o.invoke=Rn,o.keys=Di,o.map=In,o.max=Pn,o.memoize=ve,o.merge=kn,o.min=Mn,o.omit=yn,o.once=ke,o.pairs=wn,o.partial=ye,o.partialRight=we,o.pick=xn,o.pluck=Fi,o.range=te,o.reject=_n,o.rest=ne,o.shuffle=Wn,o.sortBy=Vn,o.tap=Pe,o.throttle=xe,o.times=Oe,o.toArray=qn,o.union=ie,o.uniq=se,o.unzip=oe,o.values=Ln,o.where=Bi,o.without=ae,o.wrap=Le,o.zip=re,o.zipObject=he,o.collect=In,o.drop=ne,o.each=An,o.extend=Oi,o.methods=nn,o.object=he,o.select=Nn,o.tail=ne,o.unique=se,Te(o),o.clone=J,o.cloneDeep=Z,o.contains=En,o.escape=Ce,o.every=Dn,o.find=Sn,o.findIndex=Gn,o.findKey=tn,o.has=en,o.identity=Ee,o.indexOf=Qn,o.isArguments=K,o.isArray=Ei,o.isBoolean=on,o.isDate=an,o.isElement=rn,o.isEmpty=hn,o.isEqual=ln,o.isFinite=cn,o.isFunction=un,o.isNaN=dn,o.isNull=fn,o.isNumber=mn,o.isObject=pn,o.isPlainObject=Mi,o.isRegExp=gn,o.isString=bn,o.isUndefined=vn,o.lastIndexOf=Zn,o.mixin=Te,o.noConflict=De,o.parseInt=_i,o.random=Ne,o.reduce=Fn,o.reduceRight=Bn,o.result=Se,o.runInContext=n,o.size=$n,o.some=jn,o.sortedIndex=ee,o.template=Ae,o.unescape=Re,o.uniqueId=Ie,o.all=Dn,o.any=jn,o.detect=Sn,o.foldl=Fn,o.foldr=Bn,o.include=En,o.inject=Fn,Pi(o,function(t,n){o.prototype[n]||(o.prototype[n]=function(){var n=[this.__wrapped__];return ii.apply(n,arguments),t.apply(o,n)})}),o.first=Un,o.last=Jn,o.take=Un,o.head=Un,Pi(o,function(t,n){o.prototype[n]||(o.prototype[n]=function(n,e){var i=t(this.__wrapped__,n,e);return null==n||e&&"function"!=typeof n?i:new G(i)})}),o.VERSION="1.2.1",o.prototype.toString=Me,o.prototype.value=Fe,o.prototype.valueOf=Fe,Ni(["join","pop","shift"],function(t){var n=Ue[t];o.prototype[t]=function(){return n.apply(this.__wrapped__,arguments)}}),Ni(["push","reverse","sort","unshift"],function(t){var n=Ue[t];o.prototype[t]=function(){return n.apply(this.__wrapped__,arguments),this}}),Ni(["concat","slice","splice"],function(t){var n=Ue[t];o.prototype[t]=function(){return new G(n.apply(this.__wrapped__,arguments))}}),yi.spliceObjects||Ni(["pop","shift","splice"],function(t){var n=Ue[t],e="splice"==t;o.prototype[t]=function(){var t=this.__wrapped__,i=n.apply(t,arguments);return 0===t.length&&delete t[0],e?new G(i):i}}),o._each=Ni,o._iteratorTemplate=wi,o._shimKeys=Ti,o}var e,i="object"==typeof exports&&exports,s="object"==typeof module&&module&&module.exports==i&&module,o="object"==typeof global&&global;(o.global===o||o.window===o)&&(t=o);var a=0,r={},h=+new Date+"",l=200,c=/\b__p \+= '';/g,u=/\b(__p \+=) '' \+/g,p=/(__e\(.*?\)|\b__t\)) \+\n'';/g,d=/&(?:amp|lt|gt|quot|#39);/g,f=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,m=/\w*$/,g=/<%=([\s\S]+?)%>/g,b=" 	\f ﻿\n\r\u2028\u2029 ᠎             　",v=RegExp("^["+b+"]*0+(?=.$)"),k=/($^)/,y=/[&<>"']/g,w=/['\n\r\t\u2028\u2029\\]/g,x=["Array","Boolean","Date","Function","Math","Number","Object","RegExp","String","_","attachEvent","clearTimeout","isFinite","isNaN","parseInt","setImmediate","setTimeout"],L=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],C=0,E="[object Arguments]",T="[object Array]",D="[object Boolean]",N="[object Date]",S="[object Function]",A="[object Number]",O="[object Object]",R="[object RegExp]",I="[object String]",P={};P[S]=!1,P[E]=P[T]=P[D]=P[N]=P[A]=P[O]=P[R]=P[I]=!0;var M={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},F={"\\":"\\","'":"'","\n":"n","\r":"r","	":"t","\u2028":"u2028","\u2029":"u2029"},B=n();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(t._=B,define("lodash",[],function(){return B})):i&&!i.nodeType?s?(s.exports=B)._=B:i._=B:t._=B}(this),function(t,n){"undefined"!=typeof exports?n(t,exports,require("underscore")):"function"==typeof define&&define.amd?define("backbone",["underscore","jquery","exports"],function(e,i,s){t.Backbone=n(t,s,e,i)}):t.Backbone=n(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}(this,function(t,n,e,i){var s=t.Backbone,o=[],a=o.push,r=o.slice,h=o.splice;n.VERSION="1.0.0",n.$=i,n.noConflict=function(){return t.Backbone=s,this},n.emulateHTTP=!1,n.emulateJSON=!1;var l=n.Events={on:function(t,n,e){if(!u(this,"on",t,[n,e])||!n)return this;this._events||(this._events={});var i=this._events[t]||(this._events[t]=[]);return i.push({callback:n,context:e,ctx:e||this}),this},once:function(t,n,i){if(!u(this,"once",t,[n,i])||!n)return this;var s=this,o=e.once(function(){s.off(t,o),n.apply(this,arguments)});return o._callback=n,this.on(t,o,i)},off:function(t,n,i){var s,o,a,r,h,l,c,p;if(!this._events||!u(this,"off",t,[n,i]))return this;if(!t&&!n&&!i)return this._events={},this;for(r=t?[t]:e.keys(this._events),h=0,l=r.length;l>h;h++)if(t=r[h],a=this._events[t]){if(this._events[t]=s=[],n||i)for(c=0,p=a.length;p>c;c++)o=a[c],(n&&n!==o.callback&&n!==o.callback._callback||i&&i!==o.context)&&s.push(o);s.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var n=r.call(arguments,1);if(!u(this,"trigger",t,n))return this;var e=this._events[t],i=this._events.all;return e&&p(e,n),i&&p(i,arguments),this},stopListening:function(t,n,e){var i=this._listeners;if(!i)return this;var s=!n&&!e;"object"==typeof n&&(e=this),t&&((i={})[t._listenerId]=t);for(var o in i)i[o].off(n,e,this),s&&delete this._listeners[o];return this}},c=/\s+/,u=function(t,n,e,i){if(!e)return!0;if("object"==typeof e){for(var s in e)t[n].apply(t,[s,e[s]].concat(i));return!1}if(c.test(e)){for(var o=e.split(c),a=0,r=o.length;r>a;a++)t[n].apply(t,[o[a]].concat(i));return!1}return!0},p=function(t,n){var e,i=-1,s=t.length,o=n[0],a=n[1],r=n[2];switch(n.length){case 0:for(;s>++i;)(e=t[i]).callback.call(e.ctx);return;case 1:for(;s>++i;)(e=t[i]).callback.call(e.ctx,o);return;case 2:for(;s>++i;)(e=t[i]).callback.call(e.ctx,o,a);return;case 3:for(;s>++i;)(e=t[i]).callback.call(e.ctx,o,a,r);return;default:for(;s>++i;)(e=t[i]).callback.apply(e.ctx,n)}},d={listenTo:"on",listenToOnce:"once"};e.each(d,function(t,n){l[n]=function(n,i,s){var o=this._listeners||(this._listeners={}),a=n._listenerId||(n._listenerId=e.uniqueId("l"));return o[a]=n,"object"==typeof i&&(s=this),n[t](i,s,this),this}}),l.bind=l.on,l.unbind=l.off,e.extend(n,l);var f=n.Model=function(t,n){var i,s=t||{};n||(n={}),this.cid=e.uniqueId("c"),this.attributes={},e.extend(this,e.pick(n,m)),n.parse&&(s=this.parse(s,n)||{}),(i=e.result(this,"defaults"))&&(s=e.defaults({},s,i)),this.set(s,n),this.changed={},this.initialize.apply(this,arguments)},m=["url","urlRoot","collection"];e.extend(f.prototype,l,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(){return e.clone(this.attributes)},sync:function(){return n.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return e.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,n,i){var s,o,a,r,h,l,c,u;if(null==t)return this;if("object"==typeof t?(o=t,i=n):(o={})[t]=n,i||(i={}),!this._validate(o,i))return!1;a=i.unset,h=i.silent,r=[],l=this._changing,this._changing=!0,l||(this._previousAttributes=e.clone(this.attributes),this.changed={}),u=this.attributes,c=this._previousAttributes,this.idAttribute in o&&(this.id=o[this.idAttribute]);for(s in o)n=o[s],e.isEqual(u[s],n)||r.push(s),e.isEqual(c[s],n)?delete this.changed[s]:this.changed[s]=n,a?delete u[s]:u[s]=n;if(!h){r.length&&(this._pending=!0);for(var p=0,d=r.length;d>p;p++)this.trigger("change:"+r[p],this,u[r[p]],i)}if(l)return this;if(!h)for(;this._pending;)this._pending=!1,this.trigger("change",this,i);return this._pending=!1,this._changing=!1,this},unset:function(t,n){return this.set(t,void 0,e.extend({},n,{unset:!0}))},clear:function(t){var n={};for(var i in this.attributes)n[i]=void 0;return this.set(n,e.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!e.isEmpty(this.changed):e.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?e.clone(this.changed):!1;var n,i=!1,s=this._changing?this._previousAttributes:this.attributes;for(var o in t)e.isEqual(s[o],n=t[o])||((i||(i={}))[o]=n);return i},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return e.clone(this._previousAttributes)},fetch:function(t){t=t?e.clone(t):{},void 0===t.parse&&(t.parse=!0);var n=this,i=t.success;return t.success=function(e){return n.set(n.parse(e,t),t)?(i&&i(n,e,t),n.trigger("sync",n,e,t),void 0):!1},_(this,t),this.sync("read",this,t)},save:function(t,n,i){var s,o,a,r=this.attributes;if(null==t||"object"==typeof t?(s=t,i=n):(s={})[t]=n,!(!s||i&&i.wait||this.set(s,i)))return!1;if(i=e.extend({validate:!0},i),!this._validate(s,i))return!1;s&&i.wait&&(this.attributes=e.extend({},r,s)),void 0===i.parse&&(i.parse=!0);var h=this,l=i.success;return i.success=function(t){h.attributes=r;var n=h.parse(t,i);return i.wait&&(n=e.extend(s||{},n)),e.isObject(n)&&!h.set(n,i)?!1:(l&&l(h,t,i),h.trigger("sync",h,t,i),void 0)},_(this,i),o=this.isNew()?"create":i.patch?"patch":"update","patch"===o&&(i.attrs=s),a=this.sync(o,this,i),s&&i.wait&&(this.attributes=r),a},destroy:function(t){t=t?e.clone(t):{};var n=this,i=t.success,s=function(){n.trigger("destroy",n,n.collection,t)};if(t.success=function(e){(t.wait||n.isNew())&&s(),i&&i(n,e,t),n.isNew()||n.trigger("sync",n,e,t)},this.isNew())return t.success(),!1;_(this,t);var o=this.sync("delete",this,t);return t.wait||s(),o},url:function(){var t=e.result(this,"urlRoot")||e.result(this.collection,"url")||B();return this.isNew()?t:t+("/"===t.charAt(t.length-1)?"":"/")+encodeURIComponent(this.id)},parse:function(t){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return null==this.id},isValid:function(t){return this._validate({},e.extend(t||{},{validate:!0}))},_validate:function(t,n){if(!n.validate||!this.validate)return!0;t=e.extend({},this.attributes,t);var i=this.validationError=this.validate(t,n)||null;return i?(this.trigger("invalid",this,i,e.extend(n||{},{validationError:i})),!1):!0}});var g=["keys","values","pairs","invert","pick","omit"];e.each(g,function(t){f.prototype[t]=function(){var n=r.call(arguments);return n.unshift(this.attributes),e[t].apply(e,n)}});var b=n.Collection=function(t,n){n||(n={}),n.url&&(this.url=n.url),n.model&&(this.model=n.model),void 0!==n.comparator&&(this.comparator=n.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,e.extend({silent:!0},n))},v={add:!0,remove:!0,merge:!0},k={add:!0,merge:!1,remove:!1};e.extend(b.prototype,l,{model:f,initialize:function(){},toJSON:function(t){return this.map(function(n){return n.toJSON(t)})},sync:function(){return n.sync.apply(this,arguments)},add:function(t,n){return this.set(t,e.defaults(n||{},k))},remove:function(t,n){t=e.isArray(t)?t.slice():[t],n||(n={});var i,s,o,a;for(i=0,s=t.length;s>i;i++)a=this.get(t[i]),a&&(delete this._byId[a.id],delete this._byId[a.cid],o=this.indexOf(a),this.models.splice(o,1),this.length--,n.silent||(n.index=o,a.trigger("remove",a,this,n)),this._removeReference(a));return this},set:function(t,n){n=e.defaults(n||{},v),n.parse&&(t=this.parse(t,n)),e.isArray(t)||(t=t?[t]:[]);var i,s,o,r,l,c=n.at,u=this.comparator&&null==c&&n.sort!==!1,p=e.isString(this.comparator)?this.comparator:null,d=[],f=[],m={};for(i=0,s=t.length;s>i;i++)(o=this._prepareModel(t[i],n))&&((r=this.get(o))?(n.remove&&(m[r.cid]=!0),n.merge&&(r.set(o.attributes,n),u&&!l&&r.hasChanged(p)&&(l=!0))):n.add&&(d.push(o),o.on("all",this._onModelEvent,this),this._byId[o.cid]=o,null!=o.id&&(this._byId[o.id]=o)));if(n.remove){for(i=0,s=this.length;s>i;++i)m[(o=this.models[i]).cid]||f.push(o);f.length&&this.remove(f,n)}if(d.length&&(u&&(l=!0),this.length+=d.length,null!=c?h.apply(this.models,[c,0].concat(d)):a.apply(this.models,d)),l&&this.sort({silent:!0}),n.silent)return this;for(i=0,s=d.length;s>i;i++)(o=d[i]).trigger("add",o,this,n);return l&&this.trigger("sort",this,n),this},reset:function(t,n){n||(n={});for(var i=0,s=this.models.length;s>i;i++)this._removeReference(this.models[i]);return n.previousModels=this.models,this._reset(),this.add(t,e.extend({silent:!0},n)),n.silent||this.trigger("reset",this,n),this},push:function(t,n){return t=this._prepareModel(t,n),this.add(t,e.extend({at:this.length},n)),t},pop:function(t){var n=this.at(this.length-1);return this.remove(n,t),n},unshift:function(t,n){return t=this._prepareModel(t,n),this.add(t,e.extend({at:0},n)),t},shift:function(t){var n=this.at(0);return this.remove(n,t),n},slice:function(t,n){return this.models.slice(t,n)},get:function(t){return null==t?void 0:this._byId[null!=t.id?t.id:t.cid||t]},at:function(t){return this.models[t]},where:function(t,n){return e.isEmpty(t)?n?void 0:[]:this[n?"find":"filter"](function(n){for(var e in t)if(t[e]!==n.get(e))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw Error("Cannot sort a set without a comparator");return t||(t={}),e.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(e.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},sortedIndex:function(t,n,i){n||(n=this.comparator);var s=e.isFunction(n)?n:function(t){return t.get(n)};return e.sortedIndex(this.models,t,s,i)},pluck:function(t){return e.invoke(this.models,"get",t)},fetch:function(t){t=t?e.clone(t):{},void 0===t.parse&&(t.parse=!0);var n=t.success,i=this;return t.success=function(e){var s=t.reset?"reset":"set";i[s](e,t),n&&n(i,e,t),i.trigger("sync",i,e,t)},_(this,t),this.sync("read",this,t)},create:function(t,n){if(n=n?e.clone(n):{},!(t=this._prepareModel(t,n)))return!1;n.wait||this.add(t,n);var i=this,s=n.success;return n.success=function(e){n.wait&&i.add(t,n),s&&s(t,e,n)},t.save(null,n),t},parse:function(t){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,n){if(t instanceof f)return t.collection||(t.collection=this),t;n||(n={}),n.collection=this;var e=new this.model(t,n);return e._validate(t,n)?e:(this.trigger("invalid",this,t,n),!1)},_removeReference:function(t){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,n,e,i){("add"!==t&&"remove"!==t||e===this)&&("destroy"===t&&this.remove(n,i),n&&t==="change:"+n.idAttribute&&(delete this._byId[n.previous(n.idAttribute)],null!=n.id&&(this._byId[n.id]=n)),this.trigger.apply(this,arguments))}});var y=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain"];e.each(y,function(t){b.prototype[t]=function(){var n=r.call(arguments);return n.unshift(this.models),e[t].apply(e,n)}});var w=["groupBy","countBy","sortBy"];e.each(w,function(t){b.prototype[t]=function(n,i){var s=e.isFunction(n)?n:function(t){return t.get(n)};return e[t](this.models,s,i)}});var x=n.View=function(t){this.cid=e.uniqueId("view"),this._configure(t||{}),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},L=/^(\S+)\s*(.*)$/,C=["model","collection","el","id","attributes","className","tagName","events"];e.extend(x.prototype,l,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,e){return this.$el&&this.undelegateEvents(),this.$el=t instanceof n.$?t:n.$(t),this.el=this.$el[0],e!==!1&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=e.result(this,"events")))return this;this.undelegateEvents();for(var n in t){var i=t[n];if(e.isFunction(i)||(i=this[t[n]]),i){var s=n.match(L),o=s[1],a=s[2];i=e.bind(i,this),o+=".delegateEvents"+this.cid,""===a?this.$el.on(o,i):this.$el.on(o,a,i)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_configure:function(t){this.options&&(t=e.extend({},e.result(this,"options"),t)),e.extend(this,e.pick(t,C)),this.options=t},_ensureElement:function(){if(this.el)this.setElement(e.result(this,"el"),!1);else{var t=e.extend({},e.result(this,"attributes"));this.id&&(t.id=e.result(this,"id")),this.className&&(t["class"]=e.result(this,"className"));var i=n.$("<"+e.result(this,"tagName")+">").attr(t);this.setElement(i,!1)}}}),n.sync=function(t,i,s){var o=E[t];e.defaults(s||(s={}),{emulateHTTP:n.emulateHTTP,emulateJSON:n.emulateJSON});var a={type:o,dataType:"json"};if(s.url||(a.url=e.result(i,"url")||B()),null!=s.data||!i||"create"!==t&&"update"!==t&&"patch"!==t||(a.contentType="application/json",a.data=JSON.stringify(s.attrs||i.toJSON(s))),s.emulateJSON&&(a.contentType="application/x-www-form-urlencoded",a.data=a.data?{model:a.data}:{}),s.emulateHTTP&&("PUT"===o||"DELETE"===o||"PATCH"===o)){a.type="POST",s.emulateJSON&&(a.data._method=o);var r=s.beforeSend;s.beforeSend=function(t){return t.setRequestHeader("X-HTTP-Method-Override",o),r?r.apply(this,arguments):void 0}}"GET"===a.type||s.emulateJSON||(a.processData=!1),"PATCH"!==a.type||!window.ActiveXObject||window.external&&window.external.msActiveXFilteringEnabled||(a.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var h=s.xhr=n.ajax(e.extend(a,s));return i.trigger("request",i,h,s),h};var E={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};n.ajax=function(){return n.$.ajax.apply(n.$,arguments)};var T=n.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},D=/\((.*?)\)/g,N=/(\(\?)?:\w+/g,S=/\*\w+/g,A=/[\-{}\[\]+?.,\\\^$|#\s]/g;e.extend(T.prototype,l,{initialize:function(){},route:function(t,i,s){e.isRegExp(t)||(t=this._routeToRegExp(t)),e.isFunction(i)&&(s=i,i=""),s||(s=this[i]);var o=this;return n.history.route(t,function(e){var a=o._extractParameters(t,e);s&&s.apply(o,a),o.trigger.apply(o,["route:"+i].concat(a)),o.trigger("route",i,a),n.history.trigger("route",o,i,a)}),this},navigate:function(t,e){return n.history.navigate(t,e),this},_bindRoutes:function(){if(this.routes){this.routes=e.result(this,"routes");for(var t,n=e.keys(this.routes);null!=(t=n.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(A,"\\$&").replace(D,"(?:$1)?").replace(N,function(t,n){return n?t:"([^/]+)"}).replace(S,"(.*?)"),RegExp("^"+t+"$")},_extractParameters:function(t,n){var i=t.exec(n).slice(1);return e.map(i,function(t){return t?decodeURIComponent(t):null})}});var O=n.History=function(){this.handlers=[],e.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},R=/^[#\/]|\s+$/g,I=/^\/+|\/+$/g,P=/msie [\w.]+/,M=/\/$/;O.started=!1,e.extend(O.prototype,l,{interval:50,getHash:function(t){var n=(t||this).location.href.match(/#(.*)$/);return n?n[1]:""},getFragment:function(t,n){if(null==t)if(this._hasPushState||!this._wantsHashChange||n){t=this.location.pathname;var e=this.root.replace(M,"");t.indexOf(e)||(t=t.substr(e.length))}else t=this.getHash();return t.replace(R,"")},start:function(t){if(O.started)throw Error("Backbone.history has already been started");O.started=!0,this.options=e.extend({},{root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var i=this.getFragment(),s=document.documentMode,o=P.exec(navigator.userAgent.toLowerCase())&&(!s||7>=s);this.root=("/"+this.root+"/").replace(I,"/"),o&&this._wantsHashChange&&(this.iframe=n.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow,this.navigate(i)),this._hasPushState?n.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!o?n.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=i;var a=this.location,r=a.pathname.replace(/[^\/]$/,"$&/")===this.root;return this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!r?(this.fragment=this.getFragment(null,!0),this.location.replace(this.root+this.location.search+"#"+this.fragment),!0):(this._wantsPushState&&this._hasPushState&&r&&a.hash&&(this.fragment=this.getHash().replace(R,""),this.history.replaceState({},document.title,this.root+this.fragment+a.search)),this.options.silent?void 0:this.loadUrl())},stop:function(){n.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),clearInterval(this._checkUrlInterval),O.started=!1},route:function(t,n){this.handlers.unshift({route:t,callback:n})},checkUrl:function(){var t=this.getFragment();return t===this.fragment&&this.iframe&&(t=this.getFragment(this.getHash(this.iframe))),t===this.fragment?!1:(this.iframe&&this.navigate(t),this.loadUrl()||this.loadUrl(this.getHash()),void 0)},loadUrl:function(t){var n=this.fragment=this.getFragment(t),i=e.any(this.handlers,function(t){return t.route.test(n)?(t.callback(n),!0):void 0});return i},navigate:function(t,n){if(!O.started)return!1;if(n&&n!==!0||(n={trigger:n}),t=this.getFragment(t||""),this.fragment!==t){this.fragment=t;var e=this.root+t;if(this._hasPushState)this.history[n.replace?"replaceState":"pushState"]({},document.title,e);else{if(!this._wantsHashChange)return this.location.assign(e);this._updateHash(this.location,t,n.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(n.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,n.replace))}n.trigger&&this.loadUrl(t)}},_updateHash:function(t,n,e){if(e){var i=t.href.replace(/(javascript:|#).*$/,"");t.replace(i+"#"+n)}else t.hash="#"+n}}),n.history=new O;var F=function(t,n){var i,s=this;i=t&&e.has(t,"constructor")?t.constructor:function(){return s.apply(this,arguments)},e.extend(i,s,n);var o=function(){this.constructor=i};return o.prototype=s.prototype,i.prototype=new o,t&&e.extend(i.prototype,t),i.__super__=s.prototype,i};f.extend=b.extend=T.extend=x.extend=O.extend=F;var B=function(){throw Error('A "url" property or function must be specified')},_=function(t,n){var e=n.error;n.error=function(i){e&&e(t,i,n),t.trigger("error",t,i,n)}};return n}),define("data/toc",["lodash"],function(t){"use strict";var n=[{ch:0,title:"Prologue",sections:[{sec:"",title:"The base object",disabled:!0}]},{ch:1,title:"Introduction",sections:[{sec:"1.1",title:"Introduction",disabled:!0},{sec:"1.2",title:"The cradle",disabled:!0}]},{ch:2,title:"Expression Parsing",sections:[{sec:"2.1",title:"Getting started",disabled:!0},{sec:"2.2",title:"Single digits"},{sec:"2.3",title:"Binary expressions"},{sec:"2.4",title:"General expressions"},{sec:"2.5",title:"Using the stack"},{sec:"2.6",title:"Multiplication and division"},{sec:"2.7",title:"Parentheses"},{sec:"2.8",title:"Unary minus"},{sec:"2.9",title:"A word about optimization",disabled:!0}]},{ch:3,title:"More Expressions",sections:[{sec:"3.1",title:"Introduction",disabled:!0},{sec:"3.2",title:"Variables"},{sec:"3.3",title:"Functions"},{sec:"3.4",title:"More on error handling"},{sec:"3.5",title:"Assignment statements"},{sec:"3.6",title:"Multi-character tokens"},{sec:"3.7",title:"White space"}]},{ch:4,title:"Interpreters",sections:[{sec:"4.1",title:"Introduction",disabled:!0},{sec:"4.2",title:"The interpreters",disabled:!0},{sec:"4.2.1",title:"Single digits"},{sec:"4.2.2",title:"Addition and subtraction"},{sec:"4.2.3",title:"Multiplication and division"},{sec:"4.2.4",title:"Multi-digits number"},{sec:"4.2.5",title:"Factor"},{sec:"4.3",title:"A little philosophy",disabled:!0},{sec:"4.3.1",title:"Variables"},{sec:"4.3.2",title:"Assignment statements"},{sec:"4.3.3",title:"Multiple statements",editor:!0},{sec:"4.3.4",title:"I/O routines",editor:!0}]},{ch:5,title:"Control Constructs",sections:[{sec:"5.1",title:"Introduction",disabled:!0},{sec:"5.2",title:"The plan",disabled:!0},{sec:"5.2.1",title:"One statement"},{sec:"5.2.2",title:"More than one statement"},{sec:"5.3",title:"Some groundwork",console:!1},{sec:"5.4",title:"The IF statement"},{sec:"5.4.2",title:"Add the ELSE clause"},{sec:"5.5",title:"The WHILE statement"},{sec:"5.6",title:"The LOOP statement"},{sec:"5.7",title:"The Repeat-Until statement"},{sec:"5.8",title:"The FOR loop"},{sec:"5.9",title:"The DO statement"},{sec:"5.10",title:"The BREAK statement"},{sec:"5.11",title:"Conclusion"}]},{ch:6,title:"Boolean Expressions",sections:[{sec:"6.1",title:"Introduction",disabled:!0},{sec:"6.2",title:"The plan",disabled:!0},{sec:"6.3",title:"The grammar",disabled:!0},{sec:"6.4",title:"Relops",disabled:!0},{sec:"6.5",title:"Fixing the grammar",disabled:!0},{sec:"6.6",title:"The parser",disabled:!0},{sec:"6.6.1",title:"Boolean literal 1"},{sec:"6.6.2",title:"Boolean literal 2"},{sec:"6.6.3",title:"OR operation"},{sec:"6.6.4",title:"AND operation"},{sec:"6.6.5",title:"NOT operation"},{sec:"6.6.6",title:"Expand the factor"},{sec:"6.6.7",title:"Full-blown relation"},{sec:"6.6.8",title:"Merging with expressions"},{sec:"6.6.9",title:"Change to latest expression syntax"},{sec:"6.7",title:"Merging with control constructs"},{sec:"6.8",title:"Adding assignments",editor:!0},{sec:"6.9",title:"Conclusion"}]},{ch:7,title:"Lexical Scanning",sections:[{sec:"7.1",title:"Introduction",disabled:!0},{sec:"7.2",title:"Lexical scanning",disabled:!0},{sec:"7.3",title:"State machines and alternatives",disabled:!0},{sec:"7.4",title:"Some experiments in scanning"},{sec:"7.5",title:"White space"},{sec:"7.6",title:"State machines",disabled:!0},{sec:"7.7",title:"Newlines",editor:!0},{sec:"7.8",title:"Operators",editor:!0},{sec:"7.9",title:"Lists, commas and command lines",editor:!0},{sec:"7.10",title:"Getting fancy"},{sec:"7.10.2",title:"Returning codes",editor:!0},{sec:"7.10.3",title:"Cleanup with global",editor:!0},{sec:"7.11",title:"Returning a character",editor:!0},{sec:"7.12",title:"Distributed vs centralized scanners",console:!1},{sec:"7.13",title:"Merging scanner and parser",disabled:!0},{sec:"7.13.1",title:"Judicious copying",editor:!0},{sec:"7.13.2",title:"Merging scanner and parser",editor:!0},{sec:"7.14",title:"Conclusion",disabled:!0}]},{ch:8,title:"A Little Philosophy",sections:[{sec:"8.1",title:"Introduction",disabled:!0},{sec:"8.2",title:"The road home",disabled:!0},{sec:"8.3",title:"Why is it so simple",disabled:!0},{sec:"8.4",title:"Conclusion",disabled:!0}]},{ch:9,title:"A Top View",sections:[{sec:"9.1",title:"Introduction",disabled:!0},{sec:"9.2",title:"The top level",disabled:!0},{sec:"9.3",title:"The structure of Pascal"},{sec:"9.4",title:"Fleshing it out"},{sec:"9.5",title:"Declarations"},{sec:"9.6",title:"The structure of C"}]},{ch:10,title:'Introducing "Tiny"',sections:[{sec:"10.1",title:"Introduction",disabled:!0},{sec:"10.2",title:"Getting started",disabled:!0},{sec:"10.2.1",title:"First step"},{sec:"10.2.2",title:"The main program"},{sec:"10.3",title:"Declarations"},{sec:"10.4",title:"Declarations and symbols"},{sec:"10.4.2",title:"Variable list"},{sec:"10.5",title:"Initializers"},{sec:"10.5.2",title:"Multi-digit integer"},{sec:"10.6",title:"The symbol table"},{sec:"10.7",title:"Executable statements"},{sec:"10.7.2",title:"Code generation routines",console:!1},{sec:"10.7.3",title:"Assignment statement"},{sec:"10.8",title:"Booleans",disabled:!0},{sec:"10.8.1",title:"More code generation routines",console:!1},{sec:"10.8.2",title:"Boolean expressions"},{sec:"10.9",title:"Control structures"},{sec:"10.10",title:"Lexical scanning",editor:!0},{sec:"10.11",title:"Multi-character variable names",disabled:!0},{sec:"10.12",title:"More relops",editor:!0},{sec:"10.13",title:"Input / Output",editor:!0},{sec:"10.14",title:"Conclusion",console:!1}]},{ch:11,title:"Lexical Scan Revisited",sections:[{sec:"11.1",title:"Introduction",disabled:!0},{sec:"11.2",title:"Background",disabled:!0},{sec:"11.3",title:"The problem",disabled:!0},{sec:"11.4",title:"The solution",editor:!0},{sec:"11.4.2",title:"Single-character operators",console:!1},{sec:"11.5",title:"Fixing up the compiler",disabled:!0},{sec:"11.6",title:"Conclusion",editor:!0}]},{ch:12,title:"Miscellany",sections:[{sec:"12.1",title:"Introduction",disabled:!0},{sec:"12.2",title:"Semicolons",disabled:!0},{sec:"12.3",title:"Syntatic sugar",disabled:!0},{sec:"12.4",title:"Dealing with semicolons",disabled:!0},{sec:"12.4.1",title:"The C version",editor:!0},{sec:"12.4.2",title:"The Pascal version",editor:!0},{sec:"12.5",title:"A compromise",editor:!0},{sec:"12.6",title:"Comments",disabled:!0},{sec:"12.7",title:"Single character delimiters",disabled:!0},{sec:"12.7.1",title:"Strip the comments out",editor:!0},{sec:"12.7.2",title:"The conventional treatment",editor:!0},{sec:"12.7.3",title:"Nested comments",editor:!0},{sec:"12.8",title:"Multi character delimiters",editor:!0},{sec:"12.9",title:"One sided comments",editor:!0},{sec:"12.10",title:"Conclusion",console:!1}]},{ch:13,title:"Procedures",sections:[{sec:"13.1",title:"Introduction",disabled:!0},{sec:"13.2",title:"One last digression",disabled:!0},{sec:"13.3",title:"The basics",disabled:!0},{sec:"13.4",title:"A basis for experimentation"},{sec:"13.5",title:"Declarating a procedure"},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]},{ch:14,title:"Types",sections:[{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]},{ch:15,title:"Back to The Future",sections:[{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]},{ch:16,title:"Unit Construction",sections:[{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]}];
return t.each(n,function(n){t.each(n.sections,function(t){t.ch=n.ch,t.disabled=t.disabled||!1})})}),function(t,n){"function"==typeof define&&define.amd?define("localstorage",["underscore","backbone"],function(e,i){return n(e||t._,i||t.Backbone)}):n(_,Backbone)}(this,function(t,n){function e(){return(0|65536*(1+Math.random())).toString(16).substring(1)}function i(){return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}return n.LocalStorage=window.Store=function(t){this.name=t;var n=this.localStorage().getItem(this.name);this.records=n&&n.split(",")||[]},t.extend(n.LocalStorage.prototype,{save:function(){this.localStorage().setItem(this.name,this.records.join(","))},create:function(t){return t.id||(t.id=i(),t.set(t.idAttribute,t.id)),this.localStorage().setItem(this.name+"-"+t.id,JSON.stringify(t)),this.records.push(""+t.id),this.save(),this.find(t)},update:function(n){return this.localStorage().setItem(this.name+"-"+n.id,JSON.stringify(n)),t.include(this.records,""+n.id)||this.records.push(""+n.id),this.save(),this.find(n)},find:function(t){return this.jsonData(this.localStorage().getItem(this.name+"-"+t.id))},findAll:function(){return t(this.records).chain().map(function(t){return this.jsonData(this.localStorage().getItem(this.name+"-"+t))},this).compact().value()},destroy:function(n){return n.isNew()?!1:(this.localStorage().removeItem(this.name+"-"+n.id),this.records=t.reject(this.records,function(t){return t===""+n.id}),this.save(),n)},localStorage:function(){return localStorage},jsonData:function(t){return t&&JSON.parse(t)}}),n.LocalStorage.sync=window.Store.sync=n.localSync=function(t,e,i){var s,o,a=e.localStorage||e.collection.localStorage,r=$.Deferred&&$.Deferred();try{switch(t){case"read":s=void 0!=e.id?a.find(e):a.findAll();break;case"create":s=a.create(e);break;case"update":s=a.update(e);break;case"delete":s=a.destroy(e)}}catch(h){o=h.code===DOMException.QUOTA_EXCEEDED_ERR&&0===window.localStorage.length?"Private browsing is unsupported":h.message}return s?(i&&i.success&&("0.9.10"===n.VERSION?i.success(e,s,i):i.success(s)),r&&r.resolve(s)):(o=o?o:"Record Not Found",i&&i.error&&("0.9.10"===n.VERSION?i.error(e,o,i):i.error(o)),r&&r.reject(o)),i&&i.complete&&i.complete(s),r&&r.promise()},n.ajaxSync=n.sync,n.getSyncMethod=function(t){return t.localStorage||t.collection&&t.collection.localStorage?n.localSync:n.ajaxSync},n.sync=function(t,e,i){return n.getSyncMethod(e).apply(this,[t,e,i])},n.LocalStorage}),define("models/app",["lodash","backbone","data/toc","localstorage"],function(t,n,e){"use strict";var i=n.Model.extend({localStorage:new n.LocalStorage("lbac-app"),defaults:{ch:0,sec:""},validate:function(n){var i=n.ch,s=n.sec;return i===""+t.parseInt(i)&&e[i]?s&&!t.any(e[i].sections,{sec:s})?"Invalid section: "+s:void 0:"Invalid chapter: "+i}});return i}),define("routes/router",["jquery","lodash","backbone","models/app"],function(t,n,e,i){"use strict";var s=e.Router.extend({routes:{"ch/:ch(/:sec)":"saveState","*any":"restorePage"},initialize:function(){this.model=new i({id:1}),this.listenTo(this.model,"sync",this.triggerUpdate),this.listenTo(this.model,"invalid",this.restorePage)},saveState:function(t,n){this.model.save({ch:t,sec:n})},restorePage:function(){this.model.fetch();var t="ch/"+this.model.get("ch");this.model.get("sec")&&(t+="/"+this.model.get("sec")),this.navigate(t,{replace:!0})},triggerUpdate:function(){var t=n.parseInt(this.model.get("ch")),e=this.model.get("sec");this.trigger("update",t,e)}});return s}),define("templates",[],function(){return this.JST=this.JST||{},this.JST["app/scripts/templates/chapterItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<div class="accordion-group">\n    <div class="accordion-heading">\n        <a id="chapter'+(null==(__t=ch)?"":__t)+'" class="accordion-toggle btn" href="#ch/'+(null==(__t=ch)?"":__t)+'">'+(null==(__t=ch?"Chapter "+ch+" ":"")?"":__t)+(null==(__t=title)?"":__t)+'</a>\n    </div>\n    <div id="ch'+(null==(__t=ch)?"":__t)+'" class="accordion-body collapse">\n        <ul class="accordion-inner nav nav-tabs nav-stacked">\n        '+(null==(__t=_.map(sections,function(t){return sectionTemplate(t)}).join(""))?"":__t)+"\n        </ul>\n    </div>\n</div>\n";return __p},this.JST["app/scripts/templates/info.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<button type="button" class="close" data-dismiss="alert">&times;</button>\n<b>NOTICE:</b> You are highly recommanded to read the original article:\n<a href="http://compilers.iecc.com/crenshaw/'+(null==(__t=ch?"tutor"+ch+".txt":"")?"":__t)+'" target="_blank">\n    <b>'+(null==(__t=(ch?"PART&nbsp;"+ch+":&nbsp;"+title:"Let's Build a Compiler")+", by&nbsp;Jack&nbsp;Crenshaw.")?"":__t)+"\n    </b>\n</a>\n";return __p},this.JST["app/scripts/templates/pagerItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+="<li"+(null==(__t=className?' class="'+className+'"':"")?"":__t)+'>\n    <a href="#ch/'+(null==(__t=ch)?"":__t)+(null==(__t=sec?"/"+sec:"")?"":__t)+'" data-title="'+(null==(__t=title)?"":__t)+'" '+(null==(__t=placement?'data-placement="'+placement+'"':"")?"":__t)+">"+(null==(__t=text)?"":__t)+"</a>\n</li>\n";return __p},this.JST["app/scripts/templates/sectionItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+="<li"+(null==(__t=disabled?' class="disabled"':"")?"":__t)+'>\n    <a id="sec'+(null==(__t=sec.replace(/\./g,"-"))?"":__t)+'" href="#ch/'+(null==(__t=ch)?"":__t)+"/"+(null==(__t=sec)?"":__t)+'">'+(null==(__t=sec)?"":__t)+" "+(null==(__t=title)?"":__t)+"</a>\n</li>\n";return __p},this.JST["app/scripts/templates/setting.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<div id="setting" class="btn-group">\n\n<a class="btn dropdown-toggle" data-toggle="dropdown">\n    Setting&nbsp;&nbsp;&nbsp;<span class="caret"></span>\n</a>\n\n<ul class="dropdown-menu pull-right">\n    <li>\n        <a id="toggle-editor" tabindex="-1" data-toggle="tooltip" data-placement="left" data-title="'+(null==(__t=editorTitle)?"":__t)+'"><i'+(null==(__t=editor?' class="icon-ok"':"")?"":__t)+'></i>Editor</a>\n    </li>\n    <li>\n        <a id="toggle-console" tabindex="-1" data-toggle="tooltip" data-placement="left" data-title="'+(null==(__t=consoleTitle)?"":__t)+'"><i'+(null==(__t=console?' class="icon-ok"':"")?"":__t)+"></i>Console</a>\n    </li>\n</ul>\n\n</div>\n";return __p},this.JST}),define("models/menu",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{ch:-1,active:""}});return n}),define("views/menu",["jquery","lodash","backbone","templates","models/menu","data/toc"],function(t,n,e,i,s,o){"use strict";var a=e.View.extend({chapterTemplate:i["app/scripts/templates/chapterItem.ejs"],sectionTemplate:i["app/scripts/templates/sectionItem.ejs"],events:{"click .disabled a":function(){return!1},"click .accordion-toggle":"chapterClicked"},initialize:function(){this.model=new s,this.listenTo(this.model,"change:ch",this.toggleCh),this.listenTo(this.model,"change:active",this.toggleActive)},render:function(){var t=this.chapterTemplate,e=this.sectionTemplate,i=n.map(o,function(n){return n.sectionTemplate=e,t(n)}).join("");this.$el.html(i)},update:function(t,n){this.model.set("ch",t),n?this.model.set("active","#sec"+n.replace(/\./g,"-")):this.model.set("active","#chapter"+t)},chapterClicked:function(n){var e=t(n.target).attr("href");this.trigger("click:chapter",e),n.preventDefault()},toggleCh:function(t,n){this.$("#ch"+t.previous("ch")).collapse("hide"),this.$("#ch"+n).collapse("show")},toggleActive:function(t,n){this.$(t.previous("active")).removeClass("btn-primary"),this.$(n).addClass("btn-primary")}});return a}),window.PR_SHOULD_USE_CONTINUATION=!0,function(){function t(t){function n(t){var n=t.charCodeAt(0);if(92!==n)return n;var e=t.charAt(1);return n=u[e],n?n:e>="0"&&"7">=e?parseInt(t.substring(1),8):"u"===e||"x"===e?parseInt(t.substring(2),16):t.charCodeAt(1)}function e(t){if(32>t)return(16>t?"\\x0":"\\x")+t.toString(16);var n=String.fromCharCode(t);return"\\"===n||"-"===n||"]"===n||"^"===n?"\\"+n:n}function i(t){var i=t.substring(1,t.length-1).match(RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g")),s=[],o="^"===i[0],a=["["];o&&a.push("^");for(var r=o?1:0,h=i.length;h>r;++r){var l=i[r];if(/\\[bdsw]/i.test(l))a.push(l);else{var c,u=n(l);h>r+2&&"-"===i[r+1]?(c=n(i[r+2]),r+=2):c=u,s.push([u,c]),65>c||u>122||(65>c||u>90||s.push([32|Math.max(65,u),32|Math.min(c,90)]),97>c||u>122||s.push([-33&Math.max(97,u),-33&Math.min(c,122)]))}}s.sort(function(t,n){return t[0]-n[0]||n[1]-t[1]});for(var p=[],d=[],r=0;s.length>r;++r){var f=s[r];f[0]<=d[1]+1?d[1]=Math.max(d[1],f[1]):p.push(d=f)}for(var r=0;p.length>r;++r){var f=p[r];a.push(e(f[0])),f[1]>f[0]&&(f[1]+1>f[0]&&a.push("-"),a.push(e(f[1])))}return a.push("]"),a.join("")}function s(t){for(var n=t.source.match(RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g")),s=n.length,r=[],h=0,l=0;s>h;++h){var c=n[h];if("("===c)++l;else if("\\"===c.charAt(0)){var u=+c.substring(1);u&&(l>=u?r[u]=-1:n[h]=e(u))}}for(var h=1;r.length>h;++h)-1===r[h]&&(r[h]=++o);for(var h=0,l=0;s>h;++h){var c=n[h];if("("===c)++l,r[l]||(n[h]="(?:");else if("\\"===c.charAt(0)){var u=+c.substring(1);u&&l>=u&&(n[h]="\\"+r[u])}}for(var h=0;s>h;++h)"^"===n[h]&&"^"!==n[h+1]&&(n[h]="");if(t.ignoreCase&&a)for(var h=0;s>h;++h){var c=n[h],p=c.charAt(0);c.length>=2&&"["===p?n[h]=i(c):"\\"!==p&&(n[h]=c.replace(/[a-zA-Z]/g,function(t){var n=t.charCodeAt(0);return"["+String.fromCharCode(-33&n,32|n)+"]"}))}return n.join("")}for(var o=0,a=!1,r=!1,h=0,l=t.length;l>h;++h){var c=t[h];if(c.ignoreCase)r=!0;else if(/[a-z]/i.test(c.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){a=!0,r=!1;break}}for(var u={b:8,t:9,n:10,v:11,f:12,r:13},p=[],h=0,l=t.length;l>h;++h){var c=t[h];if(c.global||c.multiline)throw Error(""+c);p.push("(?:"+s(c)+")")}return RegExp(p.join("|"),r?"gi":"g")}function n(t,n){function e(t){switch(t.nodeType){case 1:if(i.test(t.className))return;for(var h=t.firstChild;h;h=h.nextSibling)e(h);var l=t.nodeName.toLowerCase();("br"===l||"li"===l)&&(s[r]="\n",a[r<<1]=o++,a[1|r++<<1]=t);break;case 3:case 4:var c=t.nodeValue;c.length&&(c=n?c.replace(/\r\n?/g,"\n"):c.replace(/[ \t\r\n]+/g," "),s[r]=c,a[r<<1]=o,o+=c.length,a[1|r++<<1]=t)}}var i=/(?:^|\s)nocode(?:\s|$)/,s=[],o=0,a=[],r=0;return e(t),{sourceCode:s.join("").replace(/\n$/,""),spans:a}}function e(t,n,e,i){if(n){var s={sourceCode:n,basePos:t};e(s),i.push.apply(i,s.decorations)}}function i(t){for(var n=void 0,e=t.firstChild;e;e=e.nextSibling){var i=e.nodeType;n=1===i?n?t:e:3===i?V.test(e.nodeValue)?t:n:n}return n===t?void 0:n}function s(n,i){var s,o={};(function(){for(var e=n.concat(i),a=[],r={},h=0,l=e.length;l>h;++h){var c=e[h],u=c[3];if(u)for(var p=u.length;--p>=0;)o[u.charAt(p)]=c;var d=c[1],f=""+d;r.hasOwnProperty(f)||(a.push(d),r[f]=null)}a.push(/[\0-\uffff]/),s=t(a)})();var a=i.length,r=function(t){for(var n=t.sourceCode,h=t.basePos,c=[h,P],u=0,p=n.match(s)||[],d={},f=0,m=p.length;m>f;++f){var g,b=p[f],v=d[b],k=void 0;if("string"==typeof v)g=!1;else{var y=o[b.charAt(0)];if(y)k=b.match(y[1]),v=y[0];else{for(var w=0;a>w;++w)if(y=i[w],k=b.match(y[1])){v=y[0];break}k||(v=P)}g=v.length>=5&&"lang-"===v.substring(0,5),!g||k&&"string"==typeof k[1]||(g=!1,v=B),g||(d[b]=v)}var x=u;if(u+=b.length,g){var L=k[1],C=b.indexOf(L),E=C+L.length;k[2]&&(E=b.length-k[2].length,C=E-L.length);var T=v.substring(5);e(h+x,b.substring(0,C),r,c),e(h+x+C,L,l(T,L),c),e(h+x+E,b.substring(E),r,c)}else c.push(h+x,v)}t.decorations=c};return r}function o(t){var n=[],e=[];t.tripleQuotedStrings?n.push([N,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""]):t.multiLineStrings?n.push([N,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"]):n.push([N,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"]),t.verbatimStrings&&e.push([N,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null]);var i=t.hashComments;if(i&&(t.cStyleComments?(i>1?n.push([A,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"]):n.push([A,/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"]),e.push([N,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,null])):n.push([A,/^#[^\r\n]*/,null,"#"])),t.cStyleComments&&(e.push([A,/^\/\/[^\r\n]*/,null]),e.push([A,/^\/\*[\s\S]*?(?:\*\/|$)/,null])),t.regexLiterals){var o="/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/";e.push(["lang-regex",RegExp("^"+j+"("+o+")")])}var a=t.types;a&&e.push([O,a]);var r=(""+t.keywords).replace(/^ | $/g,"");r.length&&e.push([S,RegExp("^(?:"+r.replace(/[\s,]+/g,"|")+")\\b"),null]),n.push([P,/^\s+/,null," \r\n	 "]);var h=/^.[^\s\w\.$@\'\"\`\/\\]*/;return e.push([R,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[P,/^[a-z_$][a-z_$@0-9]*/i,null],[R,RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[P,/^\\[\s\S]?/,null],[I,h,null]),s(n,e)}function a(t,n,e){function i(t){switch(t.nodeType){case 1:if(o.test(t.className))break;if("br"===t.nodeName)s(t),t.parentNode&&t.parentNode.removeChild(t);else for(var n=t.firstChild;n;n=n.nextSibling)i(n);break;case 3:case 4:if(e){var h=t.nodeValue,l=h.match(a);if(l){var c=h.substring(0,l.index);t.nodeValue=c;var u=h.substring(l.index+l[0].length);if(u){var p=t.parentNode;p.insertBefore(r.createTextNode(u),t.nextSibling)}s(t),c||t.parentNode.removeChild(t)}}}}function s(t){function n(t,e){var i=e?t.cloneNode(!1):t,s=t.parentNode;if(s){var o=n(s,1),a=t.nextSibling;o.appendChild(i);for(var r=a;r;r=a)a=r.nextSibling,o.appendChild(r)}return i}for(;!t.nextSibling;)if(t=t.parentNode,!t)return;for(var e,i=n(t.nextSibling,0);(e=i.parentNode)&&1===e.nodeType;)i=e;l.push(i)}for(var o=/(?:^|\s)nocode(?:\s|$)/,a=/\r\n?|\n/,r=t.ownerDocument,h=r.createElement("li");t.firstChild;)h.appendChild(t.firstChild);for(var l=[h],c=0;l.length>c;++c)i(l[c]);n===(0|n)&&l[0].setAttribute("value",n);var u=r.createElement("ol");u.className="linenums";for(var p=Math.max(0,0|n-1)||0,c=0,d=l.length;d>c;++c)h=l[c],h.className="L"+(c+p)%10,h.firstChild||h.appendChild(r.createTextNode(" ")),u.appendChild(h);t.appendChild(u)}function r(t){var n=/\bMSIE\s(\d+)/.exec(navigator.userAgent);n=n&&8>=+n[1];var e=/\n/g,i=t.sourceCode,s=i.length,o=0,a=t.spans,r=a.length,h=0,l=t.decorations,c=l.length,u=0;l[c]=s;var p,d;for(d=p=0;c>d;)l[d]!==l[d+2]?(l[p++]=l[d++],l[p++]=l[d++]):d+=2;for(c=p,d=p=0;c>d;){for(var f=l[d],m=l[d+1],g=d+2;c>=g+2&&l[g+1]===m;)g+=2;l[p++]=f,l[p++]=m,d=g}c=l.length=p;var b,v=t.sourceNode;v&&(b=v.style.display,v.style.display="none");try{for(;r>h;){a[h];var k,y=a[h+2]||s,w=l[u+2]||s,g=Math.min(y,w),x=a[h+1];if(1!==x.nodeType&&(k=i.substring(o,g))){n&&(k=k.replace(e,"\r")),x.nodeValue=k;var L=x.ownerDocument,C=L.createElement("span");C.className=l[u+1];var E=x.parentNode;E.replaceChild(C,x),C.appendChild(x),y>o&&(a[h+1]=x=L.createTextNode(i.substring(g,y)),E.insertBefore(x,C.nextSibling))}o=g,o>=y&&(h+=2),o>=w&&(u+=2)}}finally{v&&(v.style.display=b)}}function h(t,n){for(var e=n.length;--e>=0;){var i=n[e];z.hasOwnProperty(i)?d.console&&console.warn("cannot override language handler %s",i):z[i]=t}}function l(t,n){return t&&z.hasOwnProperty(t)||(t=/^\s*</.test(n)?"default-markup":"default-code"),z[t]}function c(t){var e=t.langExtension;try{var i=n(t.sourceNode,t.pre),s=i.sourceCode;t.sourceCode=s,t.spans=i.spans,t.basePos=0,l(e,s)(t),r(t)}catch(o){d.console&&console.log(o&&o.stack?o.stack:o)}}function u(t,n,e){var i=document.createElement("pre");i.innerHTML=t,e&&a(i,e,!0);var s={langExtension:n,numberLines:e,sourceNode:i,pre:1};return c(s),i.innerHTML}function p(t){function n(t){return document.getElementsByTagName(t)}function e(){for(var n=d.PR_SHOULD_USE_CONTINUATION?u.now()+250:1/0;o.length>f&&n>u.now();f++){var s=o[f],r=s.className;if(g.test(r)&&!b.test(r)){for(var h=!1,l=s.parentNode;l;l=l.parentNode){var w=l.tagName;if(y.test(w)&&l.className&&g.test(l.className)){h=!0;break}}if(!h){s.className+=" prettyprinted";var x,L=r.match(m);!L&&(x=i(s))&&k.test(x.tagName)&&(L=x.className.match(m)),L&&(L=L[1]);var C;if(v.test(s.tagName))C=1;else{var E=s.currentStyle,T=E?E.whiteSpace:document.defaultView&&document.defaultView.getComputedStyle?document.defaultView.getComputedStyle(s,null).getPropertyValue("white-space"):0;C=T&&"pre"===T.substring(0,3)}var D=s.className.match(/\blinenums\b(?::(\d+))?/);D=D?D[1]&&D[1].length?+D[1]:!0:!1,D&&a(s,D,C),p={langExtension:L,sourceNode:s,numberLines:D,pre:C},c(p)}}}o.length>f?setTimeout(e,250):t&&t()}for(var s=[n("pre"),n("code"),n("xmp")],o=[],r=0;s.length>r;++r)for(var h=0,l=s[r].length;l>h;++h)o.push(s[r][h]);s=null;var u=Date;u.now||(u={now:function(){return+new Date}});var p,f=0,m=/\blang(?:uage)?-([\w.]+)(?!\S)/,g=/\bprettyprint\b/,b=/\bprettyprinted\b/,v=/pre|xmp/i,k=/^code$/i,y=/^(?:pre|code|xmp)$/i;e()}var d=window,f=["break,continue,do,else,for,if,return,while"],m=[f,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],g=[m,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],b=[g,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],v=[g,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"],k=[v,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],y="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",w=[g,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],x="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",L=[f,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],C=[f,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],E=[f,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],T=[b,k,w,x+L,C,E],D=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/,N="str",S="kwd",A="com",O="typ",R="lit",I="pun",P="pln",M="tag",F="dec",B="src",_="atn",W="atv",$="nocode",j="(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*",V=/\S/,q=o({keywords:T,hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),z={};h(q,["default-code"]),h(s([],[[P,/^[^<?]+/],[F,/^<!\w[^>]*(?:>|$)/],[A,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[I,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]),h(s([[P,/^[\s]+/,null," 	\r\n"],[W,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[M,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[_,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[I,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]),h(s([],[[W,/^[\s\S]+/]]),["uq.val"]),h(o({keywords:b,hashComments:!0,cStyleComments:!0,types:D}),["c","cc","cpp","cxx","cyc","m"]),h(o({keywords:"null,true,false"}),["json"]),h(o({keywords:k,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:D}),["cs"]),h(o({keywords:v,cStyleComments:!0}),["java"]),h(o({keywords:E,hashComments:!0,multiLineStrings:!0}),["bsh","csh","sh"]),h(o({keywords:L,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py"]),h(o({keywords:x,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["perl","pl","pm"]),h(o({keywords:C,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb"]),h(o({keywords:w,cStyleComments:!0,regexLiterals:!0}),["js"]),h(o({keywords:y,hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]),h(s([],[[N,/^[\s\S]+/]]),["regex"]);var H=d.PR={createSimpleLexer:s,registerLangHandler:h,sourceDecorator:o,PR_ATTRIB_NAME:_,PR_ATTRIB_VALUE:W,PR_COMMENT:A,PR_DECLARATION:F,PR_KEYWORD:S,PR_LITERAL:R,PR_NOCODE:$,PR_PLAIN:P,PR_PUNCTUATION:I,PR_SOURCE:B,PR_STRING:N,PR_TAG:M,PR_TYPE:O,prettyPrintOne:d.prettyPrintOne=u,prettyPrint:d.prettyPrint=p};"function"==typeof define&&define.amd&&define("prettify",[],function(){return H})}(),function(){function t(t){this.tokens=[],this.tokens.links={},this.options=t||r.defaults,this.rules=h.normal,this.options.gfm&&(this.rules=this.options.tables?h.tables:h.gfm)}function n(t,n){if(this.options=n||r.defaults,this.links=t,this.rules=l.normal,!this.links)throw Error("Tokens array requires a `links` property.");this.options.gfm?this.rules=this.options.breaks?l.breaks:l.gfm:this.options.pedantic&&(this.rules=l.pedantic)}function e(t){this.tokens=[],this.token=null,this.options=t||r.defaults}function i(t,n){return t.replace(n?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function s(t,n){return t=t.source,n=n||"",function e(i,s){return i?(s=s.source||s,s=s.replace(/(^|[^\[])\^/g,"$1"),t=t.replace(i,s),e):RegExp(t,n)}}function o(){}function a(t){for(var n,e,i=1;arguments.length>i;i++){n=arguments[i];for(e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])}return t}function r(n,s){try{return s&&(s=a({},r.defaults,s)),e.parse(t.lex(n,s),s)}catch(o){if(o.message+="\nPlease report this to https://github.com/chjj/marked.",(s||r.defaults).silent)return"<p>An error occured:</p><pre>"+i(o.message+"",!0)+"</pre>";throw o}}var h={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:o,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:o,lheading:/^([^\n]+)\n *(=|-){3,} *\n*/,blockquote:/^( *>[^\n]+(\n[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment|closed|closing) *(?:\n{2,}|\s*$)/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:o,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};h.bullet=/(?:[*+-]|\d+\.)/,h.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,h.item=s(h.item,"gm")(/bull/g,h.bullet)(),h.list=s(h.list)(/bull/g,h.bullet)("hr",/\n+(?=(?: *[-*_]){3,} *(?:\n+|$))/)(),h._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|@)\\b",h.html=s(h.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,h._tag)(),h.paragraph=s(h.paragraph)("hr",h.hr)("heading",h.heading)("lheading",h.lheading)("blockquote",h.blockquote)("tag","<"+h._tag)("def",h.def)(),h.normal=a({},h),h.gfm=a({},h.normal,{fences:/^ *(`{3,}|~{3,}) *(\w+)? *\n([\s\S]+?)\s*\1 *(?:\n+|$)/,paragraph:/^/}),h.gfm.paragraph=s(h.paragraph)("(?!","(?!"+h.gfm.fences.source.replace("\\1","\\2")+"|")(),h.tables=a({},h.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),t.rules=h,t.lex=function(n,e){var i=new t(e);return i.lex(n)},t.prototype.lex=function(t){return t=t.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(t,!0)},t.prototype.token=function(t,n){for(var e,i,s,o,a,r,l,c,u,t=t.replace(/^ +$/gm,"");t;)if((s=this.rules.newline.exec(t))&&(t=t.substring(s[0].length),s[0].length>1&&this.tokens.push({type:"space"})),s=this.rules.code.exec(t))t=t.substring(s[0].length),s=s[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?s:s.replace(/\n+$/,"")});else if(s=this.rules.fences.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"code",lang:s[2],text:s[3]});else if(s=this.rules.heading.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"heading",depth:s[1].length,text:s[2]});else if(n&&(s=this.rules.nptable.exec(t))){for(t=t.substring(s[0].length),r={type:"table",header:s[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3].replace(/\n$/,"").split("\n")},c=0;r.align.length>c;c++)r.align[c]=/^ *-+: *$/.test(r.align[c])?"right":/^ *:-+: *$/.test(r.align[c])?"center":/^ *:-+ *$/.test(r.align[c])?"left":null;for(c=0;r.cells.length>c;c++)r.cells[c]=r.cells[c].split(/ *\| */);this.tokens.push(r)}else if(s=this.rules.lheading.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"heading",depth:"="===s[2]?1:2,text:s[1]});else if(s=this.rules.hr.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"hr"});else if(s=this.rules.blockquote.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"blockquote_start"}),s=s[0].replace(/^ *> ?/gm,""),this.token(s,n),this.tokens.push({type:"blockquote_end"});else if(s=this.rules.list.exec(t)){for(t=t.substring(s[0].length),this.tokens.push({type:"list_start",ordered:isFinite(s[2])}),s=s[0].match(this.rules.item),this.options.smartLists&&(o=h.bullet.exec(s[0])[0]),e=!1,u=s.length,c=0;u>c;c++)r=s[c],l=r.length,r=r.replace(/^ *([*+-]|\d+\.) +/,""),~r.indexOf("\n ")&&(l-=r.length,r=this.options.pedantic?r.replace(/^ {1,4}/gm,""):r.replace(RegExp("^ {1,"+l+"}","gm"),"")),this.options.smartLists&&c!==u-1&&(a=h.bullet.exec(s[c+1])[0],o===a||"."===o[1]&&"."===a[1]||(t=s.slice(c+1).join("\n")+t,c=u-1)),i=e||/\n\n(?!\s*$)/.test(r),c!==u-1&&(e="\n"===r[r.length-1],i||(i=e)),this.tokens.push({type:i?"loose_item_start":"list_item_start"}),this.token(r,!1),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(s=this.rules.html.exec(t))t=t.substring(s[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:"pre"===s[1],text:s[0]});else if(n&&(s=this.rules.def.exec(t)))t=t.substring(s[0].length),this.tokens.links[s[1].toLowerCase()]={href:s[2],title:s[3]};else if(n&&(s=this.rules.table.exec(t))){for(t=t.substring(s[0].length),r={type:"table",header:s[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3].replace(/(?: *\| *)?\n$/,"").split("\n")},c=0;r.align.length>c;c++)r.align[c]=/^ *-+: *$/.test(r.align[c])?"right":/^ *:-+: *$/.test(r.align[c])?"center":/^ *:-+ *$/.test(r.align[c])?"left":null;for(c=0;r.cells.length>c;c++)r.cells[c]=r.cells[c].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(r)}else if(n&&(s=this.rules.paragraph.exec(t)))t=t.substring(s[0].length),this.tokens.push({type:"paragraph",text:"\n"===s[1][s[1].length-1]?s[1].slice(0,-1):s[1]});else if(s=this.rules.text.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"text",text:s[0]});else if(t)throw Error("Infinite loop on byte: "+t.charCodeAt(0));return this.tokens};var l={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:o,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:o,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};l._inside=/(?:\[[^\]]*\]|[^\]]|\](?=[^\[]*\]))*/,l._href=/\s*<?([^\s]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,l.link=s(l.link)("inside",l._inside)("href",l._href)(),l.reflink=s(l.reflink)("inside",l._inside)(),l.normal=a({},l),l.pedantic=a({},l.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),l.gfm=a({},l.normal,{escape:s(l.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:s(l.text)("]|","~]|")("|","|https?://|")()}),l.breaks=a({},l.gfm,{br:s(l.br)("{2,}","*")(),text:s(l.gfm.text)("{2,}","*")()}),n.rules=l,n.output=function(t,e,i){var s=new n(e,i);return s.output(t)},n.prototype.output=function(t){for(var n,e,s,o,a="";t;)if(o=this.rules.escape.exec(t))t=t.substring(o[0].length),a+=o[1];else if(o=this.rules.autolink.exec(t))t=t.substring(o[0].length),"@"===o[2]?(e=":"===o[1][6]?this.mangle(o[1].substring(7)):this.mangle(o[1]),s=this.mangle("mailto:")+e):(e=i(o[1]),s=e),a+='<a href="'+s+'">'+e+"</a>";else if(o=this.rules.url.exec(t))t=t.substring(o[0].length),e=i(o[1]),s=e,a+='<a href="'+s+'">'+e+"</a>";else if(o=this.rules.tag.exec(t))t=t.substring(o[0].length),a+=this.options.sanitize?i(o[0]):o[0];else if(o=this.rules.link.exec(t))t=t.substring(o[0].length),a+=this.outputLink(o,{href:o[2],title:o[3]});else if((o=this.rules.reflink.exec(t))||(o=this.rules.nolink.exec(t))){if(t=t.substring(o[0].length),n=(o[2]||o[1]).replace(/\s+/g," "),n=this.links[n.toLowerCase()],!n||!n.href){a+=o[0][0],t=o[0].substring(1)+t;continue}a+=this.outputLink(o,n)}else if(o=this.rules.strong.exec(t))t=t.substring(o[0].length),a+="<strong>"+this.output(o[2]||o[1])+"</strong>";else if(o=this.rules.em.exec(t))t=t.substring(o[0].length),a+="<em>"+this.output(o[2]||o[1])+"</em>";else if(o=this.rules.code.exec(t))t=t.substring(o[0].length),a+="<code>"+i(o[2],!0)+"</code>";else if(o=this.rules.br.exec(t))t=t.substring(o[0].length),a+="<br>";else if(o=this.rules.del.exec(t))t=t.substring(o[0].length),a+="<del>"+this.output(o[1])+"</del>";else if(o=this.rules.text.exec(t))t=t.substring(o[0].length),a+=i(o[0]);else if(t)throw Error("Infinite loop on byte: "+t.charCodeAt(0));return a},n.prototype.outputLink=function(t,n){return"!"!==t[0][0]?'<a href="'+i(n.href)+'"'+(n.title?' title="'+i(n.title)+'"':"")+">"+this.output(t[1])+"</a>":'<img src="'+i(n.href)+'" alt="'+i(t[1])+'"'+(n.title?' title="'+i(n.title)+'"':"")+">"},n.prototype.mangle=function(t){for(var n,e="",i=t.length,s=0;i>s;s++)n=t.charCodeAt(s),Math.random()>.5&&(n="x"+n.toString(16)),e+="&#"+n+";";return e},e.parse=function(t,n){var i=new e(n);return i.parse(t)},e.prototype.parse=function(t){this.inline=new n(t.links,this.options),this.tokens=t.reverse();for(var e="";this.next();)e+=this.tok();return e},e.prototype.next=function(){return this.token=this.tokens.pop()},e.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},e.prototype.parseText=function(){for(var t=this.token.text;"text"===this.peek().type;)t+="\n"+this.next().text;return this.inline.output(t)},e.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return"<hr>\n";case"heading":return"<h"+this.token.depth+">"+this.inline.output(this.token.text)+"</h"+this.token.depth+">\n";
case"code":if(this.options.highlight){var t=this.options.highlight(this.token.text,this.token.lang);null!=t&&t!==this.token.text&&(this.token.escaped=!0,this.token.text=t)}return this.token.escaped||(this.token.text=i(this.token.text,!0)),"<pre><code"+(this.token.lang?' class="'+this.options.langPrefix+this.token.lang+'"':"")+">"+this.token.text+"</code></pre>\n";case"table":var n,e,s,o,a,r="";for(r+="<thead>\n<tr>\n",e=0;this.token.header.length>e;e++)n=this.inline.output(this.token.header[e]),r+=this.token.align[e]?'<th align="'+this.token.align[e]+'">'+n+"</th>\n":"<th>"+n+"</th>\n";for(r+="</tr>\n</thead>\n",r+="<tbody>\n",e=0;this.token.cells.length>e;e++){for(s=this.token.cells[e],r+="<tr>\n",a=0;s.length>a;a++)o=this.inline.output(s[a]),r+=this.token.align[a]?'<td align="'+this.token.align[a]+'">'+o+"</td>\n":"<td>"+o+"</td>\n";r+="</tr>\n"}return r+="</tbody>\n","<table>\n"+r+"</table>\n";case"blockquote_start":for(var r="";"blockquote_end"!==this.next().type;)r+=this.tok();return"<blockquote>\n"+r+"</blockquote>\n";case"list_start":for(var h=this.token.ordered?"ol":"ul",r="";"list_end"!==this.next().type;)r+=this.tok();return"<"+h+">\n"+r+"</"+h+">\n";case"list_item_start":for(var r="";"list_item_end"!==this.next().type;)r+="text"===this.token.type?this.parseText():this.tok();return"<li>"+r+"</li>\n";case"loose_item_start":for(var r="";"list_item_end"!==this.next().type;)r+=this.tok();return"<li>"+r+"</li>\n";case"html":return this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);case"paragraph":return"<p>"+this.inline.output(this.token.text)+"</p>\n";case"text":return"<p>"+this.parseText()+"</p>\n"}},o.exec=o,r.options=r.setOptions=function(t){return a(r.defaults,t),r},r.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-"},r.Parser=e,r.parser=e.parse,r.Lexer=t,r.lexer=t.lex,r.InlineLexer=n,r.inlineLexer=n.output,r.parse=r,"object"==typeof exports?module.exports=r:"function"==typeof define&&define.amd?define("marked",[],function(){return r}):this.marked=r}.call(function(){return this||("undefined"!=typeof window?window:global)}()),define("common",["lodash","data/toc"],function(t,n){"use strict";function e(e,i){var s,o=n[e];return i?(s=t.find(o.sections,{sec:i}),i+" "+s.title):(o.ch?"Chapter "+o.ch+" ":"")+o.title}return{getTitle:e}}),define("text",["module"],function(t){"use strict";var n,e,i,s,o=["Msxml2.XMLHTTP","Microsoft.XMLHTTP","Msxml2.XMLHTTP.4.0"],a=/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,r=/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,h="undefined"!=typeof location&&location.href,l=h&&location.protocol&&location.protocol.replace(/\:/,""),c=h&&location.hostname,u=h&&(location.port||void 0),p=[],d=t.config&&t.config()||{};return n={version:"2.0.6",strip:function(t){if(t){t=t.replace(a,"");var n=t.match(r);n&&(t=n[1])}else t="";return t},jsEscape:function(t){return t.replace(/(['\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r").replace(/[\u2028]/g,"\\u2028").replace(/[\u2029]/g,"\\u2029")},createXhr:d.createXhr||function(){var t,n,e;if("undefined"!=typeof XMLHttpRequest)return new XMLHttpRequest;if("undefined"!=typeof ActiveXObject)for(n=0;3>n;n+=1){e=o[n];try{t=new ActiveXObject(e)}catch(i){}if(t){o=[e];break}}return t},parseName:function(t){var n,e,i,s=!1,o=t.indexOf("."),a=0===t.indexOf("./")||0===t.indexOf("../");return-1!==o&&(!a||o>1)?(n=t.substring(0,o),e=t.substring(o+1,t.length)):n=t,i=e||n,o=i.indexOf("!"),-1!==o&&(s="strip"===i.substring(o+1),i=i.substring(0,o),e?e=i:n=i),{moduleName:n,ext:e,strip:s}},xdRegExp:/^((\w+)\:)?\/\/([^\/\\]+)/,useXhr:function(t,e,i,s){var o,a,r,h=n.xdRegExp.exec(t);return h?(o=h[2],a=h[3],a=a.split(":"),r=a[1],a=a[0],!(o&&o!==e||a&&a.toLowerCase()!==i.toLowerCase()||(r||a)&&r!==s)):!0},finishLoad:function(t,e,i,s){i=e?n.strip(i):i,d.isBuild&&(p[t]=i),s(i)},load:function(t,e,i,s){if(s.isBuild&&!s.inlineText)return i(),void 0;d.isBuild=s.isBuild;var o=n.parseName(t),a=o.moduleName+(o.ext?"."+o.ext:""),r=e.toUrl(a),p=d.useXhr||n.useXhr;!h||p(r,l,c,u)?n.get(r,function(e){n.finishLoad(t,o.strip,e,i)},function(t){i.error&&i.error(t)}):e([a],function(t){n.finishLoad(o.moduleName+"."+o.ext,o.strip,t,i)})},write:function(t,e,i){if(p.hasOwnProperty(e)){var s=n.jsEscape(p[e]);i.asModule(t+"!"+e,"define(function () { return '"+s+"';});\n")}},writeFile:function(t,e,i,s,o){var a=n.parseName(e),r=a.ext?"."+a.ext:"",h=a.moduleName+r,l=i.toUrl(a.moduleName+r)+".js";n.load(h,i,function(){var e=function(t){return s(l,t)};e.asModule=function(t,n){return s.asModule(t,l,n)},n.write(t,h,e,o)},o)}},"node"===d.env||!d.env&&"undefined"!=typeof process&&process.versions&&process.versions.node?(e=require.nodeRequire("fs"),n.get=function(t,n){var i=e.readFileSync(t,"utf8");0===i.indexOf("﻿")&&(i=i.substring(1)),n(i)}):"xhr"===d.env||!d.env&&n.createXhr()?n.get=function(t,e,i,s){var o,a=n.createXhr();if(a.open("GET",t,!0),s)for(o in s)s.hasOwnProperty(o)&&a.setRequestHeader(o.toLowerCase(),s[o]);d.onXhr&&d.onXhr(a,t),a.onreadystatechange=function(){var n,s;4===a.readyState&&(n=a.status,n>399&&600>n?(s=Error(t+" HTTP status: "+n),s.xhr=a,i(s)):e(a.responseText),d.onXhrComplete&&d.onXhrComplete(a,t))},a.send(null)}:"rhino"===d.env||!d.env&&"undefined"!=typeof Packages&&"undefined"!=typeof java?n.get=function(t,n){var e,i,s="utf-8",o=new java.io.File(t),a=java.lang.System.getProperty("line.separator"),r=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(o),s)),h="";try{for(e=new java.lang.StringBuffer,i=r.readLine(),i&&i.length()&&65279===i.charAt(0)&&(i=i.substring(1)),e.append(i);null!==(i=r.readLine());)e.append(a),e.append(i);h=""+e+""}finally{r.close()}n(h)}:("xpconnect"===d.env||!d.env&&"undefined"!=typeof Components&&Components.classes&&Components.interfaces)&&(i=Components.classes,s=Components.interfaces,Components.utils["import"]("resource://gre/modules/FileUtils.jsm"),n.get=function(t,n){var e,o,a={},r=new FileUtils.File(t);try{e=i["@mozilla.org/network/file-input-stream;1"].createInstance(s.nsIFileInputStream),e.init(r,1,0,!1),o=i["@mozilla.org/intl/converter-input-stream;1"].createInstance(s.nsIConverterInputStream),o.init(e,"utf-8",e.available(),s.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER),o.readString(e.available(),a),o.close(),e.close(),n(a.value)}catch(h){throw Error((r&&r.path||"")+": "+h)}}),n}),define("text!src",[],function(){return"/*global define*/\n\n/**\n * Chapter 1 Introduction\n * ======================\n * 1.1 Introduction\n * ----------------\n * This series of articles is a tutorial on the theory and\n * practice of developing language parsers and compilers.\n * Before we are finished, we will have covered every aspect of\n * compiler construction, designed a new programming language,\n * and built a working compiler.\n *\n * 1.2 The cradle\n * --------------\n * The `cradle` is a boiler plate that consists of some *I/O routines*,\n * an *error-handling routine* and a *skeleton, null main program*.\n *\n * **A short list of the cradle**\n * ```\n * const:    TAB, CR, LF\n * variable: look\n * function: getChar, error, abort, expected,\n *           match, isAlpha, isDigit, getName, getNum\n *           emit, emitLn, init, main\n * ```\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var cradle = object.extend({\n\n        // Constant declarations.\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations.\n        look: '',   // lookahead character\n\n        // Read new character from input.\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error.\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt.\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected.\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n        },\n\n        // Recognize an alpha character.\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit.\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = this.look.toUpperCase();\n            this.getChar();\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = this.look;\n            this.getChar();\n            return num;\n        },\n\n        // Output a string with tab.\n        emit: function (str) {\n            io.write(this.TAB, str);\n        },\n\n        // Output a string with tab and newline.\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Initialize.\n        init: function () {\n            this.getChar();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n        }\n    });\n\n    return cradle;\n});\n\r\n/*global define*/\n\n/**\n * Chapter 10 Introducing \"Tiny\"\n * ==============================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 10.1 Introduction\n     * ------------------\n     * We’re going to do is call TINY, a subset of KISS.\n     * We’ll be doing a top-down development of BOTH the **language**\n     * and its **compiler**.\n     * The BNF description will grow along with the compiler.\n     *\n     * Why bother starting over from scratch?\n     *\n     * We had a working subset of KISS in chapter 7 lexical scanning.\n     * Why not just extend it as needed? The answer is threefold.\n     *\n     * - changes like encapsulating the code generation procedures,\n     *   so that we can convert to a different target machine more easily.\n     * - development from the top down as outlined in the last installment.\n     * - We both need the practice to get it better.\n     */\n\n    /**\n     * 10.2 Getting started\n     * ---------------------\n     * Top-level definition for TINY (similar to Pascal):\n     * ```\n     * <program> ::= PROGRAM <top-level decl> <main> '.'\n     * ```\n     *\n     * ### 10.2.1 First step ###\n     * We start with the cradle again.\n     * ```\n     * <program> ::= PROGRAM .\n     * ```\n     * At this point TINY will only accept code: `p.`, a null program\n     * ```\n     * PROGRAM.\n     * ```\n     * Note that the compiler DOES generate correct code for this program.\n     */\n    var firstStep = cradle.extend({\n\n        // Parse and translate a program.\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.prolog();\n            this.match('.');\n            this.epilog();\n        },\n\n        // Write header info.\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n        },\n\n        // Write the prolog.\n        prolog: function () {\n            this.postLabel('MAIN');\n        },\n\n        // Post a label to output (ch 5.3).\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        // Write the epilog.\n        epilog: function () {\n            this.emitLn('DC WARMST');\n            this.emitLn('END MAIN');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.prog();\n            if (this.look !== this.LF) {\n                this.abort('Unexpected data after \".\"');\n            }\n        }\n    });\n\n    /**\n     * ### 10.2.2 The main program ###\n     * The next step is to process the code for the main program.\n     * The Pascal BEGIN-block is chosen\n     * ```\n     * <program> ::= PROGRAM BEGIN END '.'\n     * ```\n     * and the TINY now only accept code: `pbe.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * You might try some deliberate errors, like omitting the `b` or the\n     * `e`, and see what happens.\n     * As always, the compiler should flag all illegal inputs.\n     */\n    var theMainProgram = firstStep.extend({\n\n        // Parse and translate a program.\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.doMain();\n            this.match('.');\n        },\n\n        // Main program.\n        doMain: function () {\n            this.match('b');\n            this.prolog();\n            this.match('e');\n            this.epilog();\n        }\n    });\n\n    /**\n     * 10.3 Declarations\n     * ------------------\n     * The next step is to decide what we mean by a declaration.\n     * At the top level, only global declarations are allowed, as in C.\n     *\n     * For now, there can only be variable declarations, identified by\n     * the keyword **VAR** (abbreviated `v`):\n     * ```\n     * <program>          ::= PROGRAM <top-level decls> BEGIN END '.'\n     * <top-level decls>  ::= (<data declaration>)*\n     * <data declaration> ::= VAR <var-list>\n     * ```\n     *\n     * Code example: `pbe.` or `pvxvybe.`\n     * which, the later, stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * VAR Y                    vy\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * Try a few cases and see what happens.\n     */\n    var declarations = theMainProgram.extend({\n\n        // Process a data declaration.\n        // A stub, it generates no code, and it doesn’t process a list.\n        decl: function () {\n            this.match('v');\n            this.getChar();\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            while (this.look !== 'b') {\n                switch (this.look) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized Keyword \"' + this.look + '\"');\n                }\n            }\n        },\n\n        // Parse and translate a program.\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.topDecls();\n            this.doMain();\n            this.match('.');\n        }\n    });\n\n    /**\n     * 10.4 Declarations and symbols\n     * ------------------------------\n     * A real compiler would issue assembler directives\n     * to allocate storage for the variables.\n     * It’s about time we actually produced some code.\n     *\n     * The **BNF** is the same as the previous section.\n     * ```\n     * <data declaration> ::= VAR <var-list>\n     * <var-list> ::= <ident>\n     * ```\n     * Try again the code example: `pvxvyvzbe.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * VAR Y                    vy\n     * VAR Z                    yz\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * See how the storage is allocated? Simple, huh?\n     */\n    var declarationsAndSymbols = declarations.extend({\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            io.writeLn(name, ':', this.TAB, 'DC 0');\n        }\n    });\n\n    /**\n     * ### 10.4.2 Variable list ###\n     * We haven’t really parsed the correct syntax for a data declaration,\n     * since it involves a variable list.\n     * Our version only permits a single variable. That’s easy to fix\n     * ```\n     * <var-list> ::= <indent> (, <ident>)*\n     * ```\n     * Code example: `pvx,y,zbe.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X, Y, Z              vx,y,z\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * Try a number of VAR declarations, try a list of several\n     * variables, and try combinations of the two. Does it work?\n     */\n    var variableList = declarationsAndSymbols.extend({\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n            while (this.look === ',') {         // <--\n                this.getChar();\n                this.alloc(this.getName());\n            }\n        }\n    });\n\n    /**\n     * 10.5 Initializers\n     * ------------------\n     * The feature allows initializing data items in the declaration.\n     * ```\n     * <var-list> ::= <var> (, <var>)*\n     * <var>      ::= <ident> [= <integer>]\n     * ```\n     *\n     * ### 10.5.1 ###\n     * Code example: `pva=1vx=5,y=3,zbe.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR A = 1                va=1\n     * VAR X = 5,               vx=5,\n     *     Y = 3,               y=3,\n     *     Z                    z\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * Try this version of TINY and verify that you can.\n     * By golly, this thing is starting to look real!\n     */\n    var initializers = variableList.extend({\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        }\n    });\n\n    /**\n     * ### 10.5.2 Multi-digit integer ###\n     * Use multi-digit version of `getNum` and\n     * now we should be able to initialize variables\n     * with negative and/or multi-digit values.\n     *\n     * Try some code for example: `pvx=15,y,z=-23be.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X = 15, Y, Z = -23   vx=15,y,z=-23\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * We should be able to initialize variables with negative and/or\n     * multi-digit values.\n     *\n     * There’s one problem: the compiler doesn’t record a variable\n     * when we declare it. So it is perfectly content to allocate storage\n     * for several variables with the same name.\n     *\n     * Verify this with an input like `pvavavabe.`\n     * Here we’ve declared the variable A three times.\n     * As you can see, the compiler accept that, and generate three\n     * identical labels. Not good.\n     */\n    var multiDigitInteger = initializers.extend({\n\n        // Get a Number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = 0;\n            while (this.isDigit(this.look)) {\n                value = +this.look + 10 * value;\n                this.getChar();\n            }\n            return value;\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                if (this.look === '-') {\n                    io.write('-');\n                    this.match('-');\n                }\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        }\n    });\n\n    /**\n     * 10.6 The symbol table\n     * ----------------------\n     * The compiler will now catch duplicate declarations. Later, we can\n     * also use InTable when generating references to the variables.\n     *\n     * Verify again this with the input `pvavavabe.`\n     * The compiler will now catch duplicate declarations.\n     * Later, we can also use `inTable` when generating references to\n     * the variables.\n     */\n    var theSymbolTable = multiDigitInteger.extend({\n\n        symbolTable: null,\n\n        // Look for symbol in table.\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Allocate storage for a variable.\n        alloc: function (name) {\n            if (this.inTable(name)) {                          // <--\n                this.abort('Duplicate Variable Name ' + name); // <\n            }\n\n            this.symbolTable[name] = 'v';                      // <--\n\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                if (this.look === '-') {\n                    io.write('-');\n                    this.match('-');\n                }\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};                              // <--\n            this.getChar();\n        }\n    });\n\n    /**\n     * 10.7 Executable statements\n     * ---------------------------\n     * At this point, we can generate a null program that has some data\n     * variables declared and possibly initialized.\n     * But so far we haven’t arranged to generate the first line of\n     * executable code.\n     *\n     * The BNF definition given earlier for the main program included\n     * a statement block, which we have so far ignored\n     * ```\n     * <main> ::= BEGIN <block> END\n     * ```\n     * For now, we can just consider a block to be\n     * a series of assignment statements\n     * ```\n     * <block> ::= (<assignment>)*\n     * ```\n     * ### 10.7.1 ###\n     * Null assignment\n     *\n     * Code example `pvxbxye.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * BEGIN                    b\n     *     X                    x\n     *     Y                    y\n     * END                      e\n     * .                        .\n     * ```\n     * This version still won’t generate any code for the \"assignment\n     * statements\"...\n     * The next step, of course, is to flesh out the code for an\n     * assignment statement.\n     */\n    var executableStatements = theSymbolTable.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            this.getChar();\n        },\n\n        // Parse and translate a block of statement.\n        block: function () {\n            while (this.look !== 'e') {\n                this.assignment();\n            }\n        },\n\n        // Main program.\n        doMain: function () {\n            this.match('b');\n            this.prolog();\n            this.block();           // <--\n            this.match('e');\n            this.epilog();\n        }\n    });\n\n    /**\n     * ### 10.7.2 Code generation routines ###\n     * Can the CPU-dependent code be collected into one spot where it\n     * would be easier to retarget to another CPU?\n     *\n     * The answer, of course, is yes.\n     * To accomplish this, insert the following *code generation* routines\n     */\n    var codeGenerationRoutines = executableStatements.extend({\n\n        // Clear the primary register.\n        clear: function () {\n            this.emitLn('CLR D0');\n        },\n\n        // Negate the primary register.\n        negate: function () {\n            this.emitLn('NEG D0');\n        },\n\n        // Load a constant value to primary register.\n        loadConst: function (number) {\n            this.emitLn('MOVE #' + number + ', D0');\n        },\n\n        // Load a variable to primary register.\n        loadVar: function (name) {\n            if (!this.inTable(name)) {\n                this.undefined(name);\n            }\n\n            this.emitLn('MOVE ' + name + '(PC), D0');\n        },\n\n        // Push primary onto stack.\n        push: function () {\n            this.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Add top of stack to primary.\n        popAdd: function () {\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Subtract primary from top of stack.\n        popSub: function () {\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Multiply top of stack to primary.\n        popMul: function () {\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Divide top of stack by primary.\n        popDiv: function () {\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Store primary to variable.\n        store: function (name) {\n            if (!this.inTable(name)) {\n                this.undefined(name);\n            }\n\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Report an undefined identifier.\n        undefined: function (name) {\n            this.abort('Undefined Identifier ' + name);\n        }\n    });\n\n    /**\n     * ### 10.7.3 Assignment statement ###\n     * We are ready to begin processing executable code, by replacing the\n     * stub version of procedure Assignment.\n     * ```\n     * <assignment>   ::= <ident> = <expression>\n     * <expression>   ::= <first term> (<addop> <term>)*\n     * <first term>   ::= <first factor> <rest>\n     * <term>         ::= <factor> <rest>\n     * <rest>         ::= (<mulop> <factor>)*\n     * <first factor> ::= [<addop>] <factor>\n     * <factor>       ::= <var> | <number> | (<expression>)\n     * ```\n     * This version of the BNF is a bit different than we’ve used before.\n     * It lets us handle negative constant values efficiently.\n     *\n     * Try, for example `pvx,y=-1bx=-22*(3-8)y=x+15e.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X,                   vx,\n     *     Y = -1               y=-1\n     * BEGIN                    b\n     *     X = -22 * (3 - 8)    x=-22*(3-8)\n     *     Y = X + 15           y=x+15\n     * END                      e\n     * .                        .\n     * ```\n     * We have a compiler!\n     */\n    var assignmentStatement = codeGenerationRoutines.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.loadVar(this.getName());\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate a negative factor.\n        negFactor: function () {\n            this.match('-');\n            if (this.isDigit(this.look)) {\n                this.loadConst(-this.getNum());\n            } else {\n                this.factor();\n                this.negate();\n            }\n        },\n\n        // Parse and translate a leading factor.\n        firstFactor: function () {\n            switch (this.look) {\n            case '+':\n                this.match('+');\n                this.factor();\n                break;\n            case '-':\n                this.negFactor();\n                break;\n            default:\n                this.factor();\n            }\n        },\n\n        // Recognize and translate a multiply.\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.popMul();\n        },\n\n        // Recognize and translate a divide.\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.popDiv();\n        },\n\n        // Recognize an addop.\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Common code used by term() and firstTerm().\n        term1: function () {\n            while (this.isMulop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.factor();\n            this.term1();\n        },\n\n        // Parse and translate a math term with possible leading sing.\n        firstTerm: function () {\n            this.firstFactor();\n            this.term1();\n        },\n\n        // Recognize and translate an add.\n        add: function () {\n            this.match('+');\n            this.term();\n            this.popAdd();\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.popSub();\n        },\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // parse and translate an expression.\n        expression: function () {\n            this.firstTerm();\n            while (this.isAddop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.store(name);\n        }\n    });\n\n    /**\n     * 10.8 Booleans\n     * --------------\n     * We must add Boolean expressions and relational operations.\n     */\n\n    /**\n     * ### 10.8.1 More code generation routines ###\n     * To begin, we’re going to need some more code generation routines.\n     */\n    var moreCodeGenerationRoutines = assignmentStatement.extend({\n\n        // Complement the primary register.\n        notIt: function () {\n            this.emitLn('NOT D0');\n        },\n\n        // AND top of stack with primary.\n        popAnd: function () {\n            this.emitLn('AND (SP)+, D0');\n        },\n\n        // OR top of stack with primary.\n        popOr: function () {\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // XOR top of stack with primary.\n        popXor: function () {\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Compare top of stack with primary.\n        popCompare: function () {\n            this.emitLn('CMP (SP)+, D0');\n        },\n\n        // Set D0 If compare was `=`.\n        setEqual: function () {\n            this.emitLn('SEQ D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `!=`.\n        setNEqual: function () {\n            this.emitLn('SNE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `>`.\n        setGreater: function () {\n            this.emitLn('SLT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `<`.\n        setLess: function () {\n            this.emitLn('SGT D0');\n            this.emitLn('EXT D0');\n        }\n    });\n\n    /**\n     * ### 10.8.2 Boolean expressions ###\n     * The **BNF for the boolean expressions** is\n     * ```\n     * <bool-expr>  ::= <bool-term> (<orop> <bool-term>)*\n     * <bool-term>  ::= <not-factor> (<andop> <not-factor>)*\n     * <not-factor> ::= ['!'] <relation>\n     * <relation>   ::= <expression> [<relop> <expression>]\n     * ```\n     *\n     * Try, for example `pvx,y,zbx=z>ye.`\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X, Y, Z              vx,y,z\n     * BEGIN                    b\n     *     X = Z > Y            x=z>y\n     * END                      e\n     * .                        .\n     * ```\n     * See how this assigns a Boolean value to X?\n     */\n    var booleanExpressions = moreCodeGenerationRoutines.extend({\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize and translate a relational \"equals\".\n        equals: function () {\n            this.match('=');\n            this.expression();\n            this.popCompare();\n            this.setEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEquals: function () {\n            this.match('#');\n            this.expression();\n            this.popCompare();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.match('<');\n            this.expression();\n            this.popCompare();\n            this.setLess();\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.match('>');\n            this.expression();\n            this.popCompare();\n            this.setGreater();\n        },\n\n        // Parse and translate a relation.\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '=':\n                    this.equals();\n                    break;\n                case '#':\n                    this.notEquals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean factor with leading NOT.\n        notFactor: function () {\n            if (this.look === '!') {\n                this.match('!');\n                this.relation();\n                this.notIt();\n            } else {\n                this.relation();\n            }\n        },\n\n        // Parse and translate a boolean term.\n        boolTerm: function () {\n            this.notFactor();\n            while (this.look === '&') {\n                this.push();\n                this.match('&');\n                this.notFactor();\n                this.popAnd();\n            }\n        },\n\n        // Recognize and translate a boolean OR.\n        boolOr: function () {\n            this.match('|');\n            this.boolTerm();\n            this.popOr();\n        },\n\n        // Recognize and translate an exclusive or (XOR).\n        boolXor: function () {\n            this.match('~');\n            this.boolTerm();\n            this.popXor();\n        },\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();      // <--\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.loadVar(this.getName());\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.boolExpression();          // <--\n            this.store(name);\n        }\n    });\n\n    /**\n     * 10.9 Control structures\n     * ------------------------\n     * We’re almost home. With Boolean expressions in place, it’s a\n     * simple matter to add control structures.\n     * For **TINY**, we’ll only allow two kinds of them,\n     * the `IF` and the `WHILE`\n     * ```\n     * <block>     ::= (<statement>)*\n     * <statement> ::= <if> | <while> | <assignment>\n     * <if>        ::= IF <bool-expression> <block> [ELSE <block>] ENDIF\n     * <while>     ::= WHILE <bool-expression> <block> ENDWHILE\n     * ```\n     *\n     * Code example `pvc=1,sbwc<11s=s+cc=c+1ee.`\n     * which stands for\n     * ```\n     * PROGRAM                      p\n     * VAR COUNT = 1,               vc=1\n     *     SUM                      s\n     * BEGIN                        b\n     *     WHILE COUNT < 11         wc<11\n     *         SUM = SUM + COUNT    s=s+c\n     *         COUNT = COUNT + 1    c=c+1\n     *     ENDWHILE                 e\n     * END                          e\n     * .\n     * ```\n     * You should be able to parse the single-character versions of any\n     * of the control constructs. It’s looking pretty good!\n     *\n     * So far, we have **TINY version 0.1**.\n     */\n    var controlStructures = booleanExpressions.extend({\n\n        // Add two new code generation routines `branch` and `branchFalse`.\n\n        // Branch uncoditional.\n        branch: function (label) {\n            this.emitLn('BRA ' + label);\n        },\n\n        // Branch false.\n        branchFalse: function (label) {\n            this.emitLn('TST D0');\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Generate a unique label.\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.match('i');\n            this.boolExpression();\n            label1 = label2 = this.newLabel();\n            this.branchFalse(label1);\n            this.block();\n\n            if (this.look === 'l') {\n                this.match('l');\n                label2 = this.newLabel();\n                this.branch(label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.match('e');\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.match('w');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.boolExpression();\n            this.branchFalse(label2);\n            this.block();\n            this.match('e');\n            this.branch(label1);\n            this.postLabel(label2);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':                   // <--\n                    this.doIf();\n                    break;\n                case 'w':                   // <--\n                    this.doWhile();\n                    break;\n                default:\n                    this.assignment();\n                }\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n        }\n    });\n\n    /**\n     * 10.10 Lexical scanning\n     * -----------------------\n     * Next we have to convert the program so that it can deal with\n     * multicharacter keywords, newlines, and whitespace.\n     *\n     * Now we can complile the previous code\n     * ```\n     * program\n     * var count = 1,\n     *     sum\n     * begin\n     *     while count < 11\n     *     count = count + 1\n     * endwhile\n     * end\n     * .\n     * ```\n     * Did it work? We’re just about home. In fact, with a few minor\n     * exceptions we’ve already got a compiler that’s usable.\n     */\n    var lexicalScanning = controlStructures.extend({\n\n        // Variable declarations.\n        token: '',      // encoded token\n        value: '',      // unencoded token\n\n        keywordCodeTable: {\n            IF:       'i',\n            ELSE:     'l',\n            ENDIF:    'e',\n            WHILE:    'w',\n            ENDWHILE: 'e',\n            VAR:      'v',\n            BEGIN:    'b',\n            END:      'e',\n            PROGRAM:  'p'\n        },\n\n        keywordCode: function (val) {\n            return this.keywordCodeTable[val] || 'x';\n        },\n\n        // Get an identifier and scan it for keywords.\n        scan: function () {\n            this.getName();\n            this.token = this.keywordCode(this.value);\n        },\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Skip over an end-of-line.\n        newLine: function () {\n            while (this.look === this.CR || this.look === this.LF) {\n                this.getChar();\n                this.skipWhite();\n            }\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            this.newLine();                     // <--\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();                   // <--\n        },\n\n        // Match a specific input string.\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n        },\n\n        // Get an identifier.\n        getName: function () {\n            this.newLine();                     // <--\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            this.value = '';\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();                   // <--\n        },\n\n        // Get a Number.\n        getNum: function () {\n            var value = 0;\n            this.newLine();                     // <--\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            while (this.isDigit(this.look)) {\n                value = +this.look + 10 * value;\n                this.getChar();\n            }\n            this.skipWhite();                   // <--\n            return value;\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.getName();\n                this.loadVar(this.value);\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate a data declaration.\n        decl: function () {\n            this.getName();\n            this.alloc(this.value);\n            while (this.look === ',') {         // <--\n                this.match(',');\n                this.getName();\n                this.alloc(this.value);\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.value;\n            this.match('=');\n            this.boolExpression();\n            this.store(name);\n        },\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.boolExpression();\n            label1 = label2 = this.newLabel();\n            this.branchFalse(label1);\n            this.block();\n\n            if (this.token === 'l') {\n                label2 = this.newLabel();\n                this.branch(label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.matchString('ENDIF');\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1 = this.newLabel(),\n                label2 = this.newLabel();\n\n            this.postLabel(label1);\n            this.boolExpression();\n            this.branchFalse(label2);\n            this.block();\n            this.matchString('ENDWHILE');\n            this.branch(label1);\n            this.postLabel(label2);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {  // <-- token\n                switch (this.token) {                           // <\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            this.scan();\n            while (this.token !== 'b') {\n                switch (this.token) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized Keyword \"' + this.value + '\"');\n                }\n                this.scan();\n            }\n        },\n\n        // Main program.\n        doMain: function () {\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        },\n\n        // Parse and translate a program.\n        prog: function () {\n            this.matchString('PROGRAM');\n            this.header();\n            this.topDecls();\n            this.doMain();\n            this.match('.');\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n            this.scan();\n        }\n    });\n\n    /**\n     * 10.11 Multi-character variable names\n     * ------------------------------------\n     * Skipped (Already supported).\n     */\n\n    /**\n     * 10.12 More relops\n     * ------------------\n     * We still have one remaining single-character restriction, **relops**.\n     * Some of the relops are indeed single characters,\n     * but others require two, such as `<=` and `>=`.\n     *\n     * We extend the relop set to include\n     * `<`, `<=`, `=`, `<>`, `#`, `>`, and `>=`.\n     *\n     * Now you can process all the relops.\n     * For example\n     * ```\n     * program\n     * var foo, bar, answer\n     * begin\n     * if foo >= bar + 20\n     *     answer = 10 * foo\n     * else\n     *     answer = -12 / bar\n     * endif\n     * foo = foo - 1\n     * end\n     * .\n     * ```\n     *  Try it.\n     */\n    var moreRelops = lexicalScanning.extend({\n\n        // TODO: double check the Scc command!\n\n        // Set D0 if compare was `<=`.\n        setLessOrEqual: function () {\n            this.emitLn('SGE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was `>=`.\n        setGreaterOrEqual: function () {\n            this.emitLn('SLE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Recognize and translate a relational \"less than or equal\".\n        lessOrEqual: function () {\n            this.match('=');\n            this.expression();\n            this.popCompare();\n            this.setLessOrEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEqual: function () {\n            this.match('>');\n            this.expression();\n            this.popCompare();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.match('<');\n            switch (this.look) {\n            case '=':   // <=  less or equal\n                this.lessOrEqual();\n                break;\n            case '>':   // <>  not equal\n                this.notEqual();\n                break;\n            default:    // <  less\n                this.expression();\n                this.popCompare();\n                this.setLess();\n            }\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.match('>');\n            if (this.look === '=') {   // >=  greater or equal\n                this.match('=');\n                this.expression();\n                this.popCompare();\n                this.setGreaterOrEqual();\n            } else {        // >  greater\n                this.expression();\n                this.popCompare();\n                this.setGreater();\n            }\n        }\n    });\n\n    /**\n     * 10.13 Input / Output\n     * ---------------------\n     * We now have a complete, working language, except we have no way\n     * to get data in or out. We need some I/O.\n     *\n     * Assuming a library call `TINYLIB.LIB` exists.\n     *\n     * Try, for example\n     * ```\n     * program\n     * var foo, bar\n     * begin\n     * read(foo, bar)\n     * if foo >= bar\n     *     bar = 10 * foo\n     * endif\n     * write(foo * 2, bar)\n     * end\n     * .\n     * ```\n     * That’s all there is to it. NOW we have a language!\n     */\n    var inputOutput = moreRelops.extend({\n\n        keywordCodeTable: {\n            IF:       'i',\n            ELSE:     'l',\n            ENDIF:    'e',\n            WHILE:    'w',\n            ENDWHILE: 'e',\n            READ:     'R',                              // <--\n            WRITE:    'W',                              // <--\n            VAR:      'v',\n            BEGIN:    'b',\n            END:      'e',\n            PROGRAM:  'p'\n        },\n\n        // Write header info.\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n            this.emitLn('LIB TINYLIB');                 // <--\n        },\n\n        // Read variable to primary register.\n        readVar: function () {\n            this.emitLn('BSR READ');\n            this.store(this.value);\n        },\n\n        // Write variable from primary register.\n        writeVar: function () {\n            this.emitLn('BSR WRITE');\n        },\n\n        // Process a read statement.\n        doRead: function () {\n            this.match('(');\n            this.getName();\n            this.readVar();\n            while (this.look === ',') {\n                this.match(',');\n                this.getName();\n                this.readVar();\n            }\n            this.match(')');\n        },\n\n        // Process a write statement.\n        doWrite: function () {\n            this.match('(');\n            this.expression();\n            this.writeVar();\n            while (this.look === ',') {\n                this.match(',');\n                this.expression();\n                this.writeVar();\n            }\n            this.match(')');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':                               // <--\n                    this.doRead();\n                    break;\n                case 'W':                               // <--\n                    this.doWrite();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        }\n    });\n    /**\n     * 10.14 Conclusion\n     * -----------------\n     * At this point we have **TINY Version 1.0** completely defined.\n     * It has only one data type and no subroutines...,\n     * but it’s a complete, usable language. Not too bad for a toy.\n     */\n\n\n    return {\n\n        // 10.2.1\n        // <program> ::= PROGRAM .\n        firstStep: firstStep,\n\n        // 10.2.2\n        // <program> ::= PROGRAM BEGIN END '.'\n        theMainProgram: theMainProgram,\n\n        // 10.3\n        // <program>          ::= PROGRAM <top-level decls> BEGIN END '.'\n        // <top-level decls>  ::= (<data declaration>)*\n        // <data declaration> ::= VAR <var-list>\n        declarations: declarations,\n\n        // 10.4.1\n        // <data declaration> ::= VAR <var-list>\n        // <var-list> ::= <ident>\n        declarationsAndSymbols: declarationsAndSymbols,\n\n        // 10.4.2\n        // <var-list> ::= <indent> (, <ident>)*\n        variableList: variableList,\n\n        // 10.5.1\n        // <var-list> ::= <var> (, <var>)*\n        // <var>      ::= <ident> [= <integer>]\n        initializers: initializers,\n\n        // 10.5.2\n        multiDigitInteger: multiDigitInteger,\n\n        // 10.6\n        theSymbolTable: theSymbolTable,\n\n        // 10.7.1\n        // <main> ::= BEGIN <block> END\n        // <block> ::= (<assignment>)*\n        executableStatements: executableStatements,\n\n        // 10.7.2\n        codeGenerationRoutines: codeGenerationRoutines,\n\n        // 10.7.3\n        // <assignment>   ::= <ident> = <expression>\n        // <expression>   ::= <first term> (<addop> <term>)*\n        // <first term>   ::= <first factor> <rest>\n        // <term>         ::= <factor> <rest>\n        // <rest>         ::= (<mulop> <factor>)*\n        // <first factor> ::= [<addop>] <factor>\n        // <factor>       ::= <var> | <number> | (<expression>)\n        assignmentStatement: assignmentStatement,\n\n        // 10.8.1\n        moreCodeGenerationRoutines: moreCodeGenerationRoutines,\n\n        // 10.8.2\n        // <bool-expr>  ::= <bool-term> (<orop> <bool-term>)*\n        // <bool-term>  ::= <not-factor> (<andop> <not-factor>)*\n        // <not-factor> ::= ['!'] <relation>\n        // <relation>   ::= <expression> [<relop> <expression>]\n        booleanExpressions: booleanExpressions,\n\n        // 10.9\n        // <block>     ::= (<statement>)*\n        // <statement> ::= <if> | <while> | <assignment>\n        // <if>        ::= IF <bool-expression> <block> [ELSE <block>] ENDIF\n        // <while>     ::= WHILE <bool-expression> <block> ENDWHILE\n        controlStructures: controlStructures,\n\n        //10.10\n        lexicalScanning: lexicalScanning,\n\n        // 10.12\n        moreRelops: moreRelops,\n\n        // 10.13\n        inputOutput: inputOutput\n    };\n});\n\r\n/*global define*/\n\n/**\n * 11.5 Fixing up the compiler\n * ----------------------------\n * Armed with these new scanner procedures, we can now begin to fix\n * the compiler to use them properly.\n *\n * The new version of `scan` doesn’t advance the input stream, it only\n * scans for keywords.\n * The input stream must be advanced by each procedure that `block` calls.\n *\n * Optional *improvements* in TINY Version 1.1:\n *\n * 1. Delete `prog` and `doMain` and combined them into the `main` program.\n * 2. Delete keywords *PROGRAM* and *BEGIN* from the keyword list.\n * 3. Replace the fancy handling of unary minus with the dumbest one.\n * 4. Added some error-checking routines such as `checkTable` and `checkDup`,\n * and replaced in-line code by calls to them.\n * 5. Take the error checking out of code generation routines like `store`,\n * and put it in the parser where it belongs. See `assignment`, for example.\n * 6. Skipped.\n * 7. Procedure `addEntry` now has two arguments, which helps to make things\n * a bit more modular.\n * 8. Clean up the code for the relational operators by the addition of\n * the new procedures `compareExpression` and `nextExpression`.\n * 9. Fix an error in the Read routine ... the earlier value did not check\n * for a valid variable name.\n */\n\n\n/**\n * 11.6 Conclusion\n * ----------------\n * The resulting compiler is **TINY VERSION 1.1**. Other than the removal\n * of the keyword PROGRAM, it parses the same language as before.\n * It’s just a bit cleaner, and more importantly it’s considerably\n * more robust.\n *\n * Try some program, for example\n * ```\n * program\n * var num, fact, count\n * begin\n *     read(num)\n *     fact = 1\n *     count = 1\n *     while count <= num\n *         fact = fact * count\n *         count = count + 1\n *     endwhile\n *     write(fact)\n * end\n * .\n * ```\n * We’re getting very close to being able to write a serious compiler.\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var tiny11 = object.extend({\n\n        // Constant declarations.\n        TAB: '\\t',\n        CR:  '\\r',\n        LF:  '\\n',\n\n        // Variable declarations.\n        look: '',           // lookahead character\n        lCount: 0,          // label counter\n        token: '',          // encoded token\n        value: '',          // unencoded token\n        symbolTable: null,\n\n        keywordCodeTable: {\n            IF:       'i',\n            ELSE:     'l',\n            ENDIF:    'e',\n            WHILE:    'w',\n            ENDWHILE: 'e',\n            READ:     'R',\n            WRITE:    'W',\n            VAR:      'v',\n            END:      'e'\n        },\n\n        keywordCode: function (val) {\n            return this.keywordCodeTable[val] || 'x';\n        },\n\n        // Read new character from input.\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error.\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt.\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected.\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Report an undefined identifier.\n        undef: function (name) {\n            this.abort('Undefined Identifier ' + name);\n        },\n\n        // Report a duplicate identifier.\n        duplicate: function (name) {\n            this.abort('Duplicate Identifier ' + name);\n        },\n\n        // Check to make sure the current token is an identifier.\n        checkIdent: function () {\n            if (this.token !== 'x') {\n                this.expected('Identifier');\n            }\n        },\n\n        // Recognize an alpha character.\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit.\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop.\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Look for symbol in table.\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Check to see if an identifier is in the symbol table.\n        // Report an error if it's not.\n        checkTable: function (name) {\n            if (!this.inTable(name)) {\n                this.undef(name);\n            }\n        },\n\n        // Check the symbol table for a duplicate identifier.\n        // Report an error if identifier is already in table.\n        checkDup: function (name) {\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n        },\n\n        // Add a new entry to symbol table.\n        addEntry: function (name, type) {\n            this.checkDup(name);\n            this.symbolTable[name] = type;\n        },\n\n        // Get an identifier.\n        getName: function () {\n            this.skipWhite();\n            if (!this.isAlpha(this.look)) {\n                this.expected('Identifier');\n            }\n\n            this.token = 'x';\n            this.value = '';\n            do {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            } while (this.isAlNum(this.look));\n        },\n\n        // Get a Number.\n        getNum: function () {\n            this.skipWhite();\n            if (!this.isDigit(this.look)) {\n                this.expected('Number');\n            }\n\n            this.token = '#';\n            this.value = '';\n            do {\n                this.value += this.look;\n                this.getChar();\n            } while (this.isDigit(this.look));\n        },\n\n        // Get an operator.\n        getOp: function () {\n            this.token = this.look;\n            this.value = this.look;\n            this.getChar();\n        },\n\n        // Get the next input token.\n        next: function () {\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else {\n                this.getOp();\n            }\n        },\n\n        // Scan the current identifier for keywords.\n        scan: function () {\n            if (this.token === 'x') {\n                this.token = this.keywordCode(this.value);\n            }\n        },\n\n        // Match a specific input string.\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n            this.next();                            // <--\n        },\n\n         // Output a string with tab.\n        emit: function (str) {\n            io.write(this.TAB + str);\n        },\n\n        // Output a string with tab and newline.\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Generate a unique label.\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output.\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        /**\n         * Code generation routines\n         */\n\n         // Clear the primary register.\n        clear: function () {\n            this.emitLn('CLR D0');\n        },\n\n        // Negate the primary register.\n        negate: function () {\n            this.emitLn('NEG D0');\n        },\n\n        // Complement the primary register.\n        notIt: function () {\n            this.emitLn('NOT D0');\n        },\n\n        // Load a constant value to primary register.\n        loadConst: function (number) {\n            this.emitLn('MOVE #' + number + ', D0');\n        },\n\n        // Load a variable to primary register.\n        loadVar: function (name) {\n            if (!this.inTable(name)) {\n                this.undef(name);\n            }\n            this.emitLn('MOVE ' + name + '(PC), D0');\n        },\n\n        // Push primary onto stack.\n        push: function () {\n            this.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Add top of stack to primary.\n        popAdd: function () {\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Subtract primary from top of stack.\n        popSub: function () {\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Multiply top of stack to primary.\n        popMul: function () {\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Divide top of stack by primary.\n        popDiv: function () {\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // AND top of stack with primary.\n        popAnd: function () {\n            this.emitLn('AND (SP)+, D0');\n        },\n\n        // OR top of stack with primary.\n        popOr: function () {\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // XOR top of stack with primary.\n        popXor: function () {\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Compare top of stack with primary\n        popCompare: function () {\n            this.emitLn('CMP (SP)+, D0');\n        },\n\n        // Set D0 If compare was `=`.\n        setEqual: function () {\n            this.emitLn('SEQ D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `!=`.\n        setNEqual: function () {\n            this.emitLn('SNE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `>`.\n        setGreater: function () {\n            this.emitLn('SLT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was `<`.\n        setLess: function () {\n            this.emitLn('SGT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was `<=`.\n        setLessOrEqual: function () {\n            this.emitLn('SGE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was `>=`.\n        setGreaterOrEqual: function () {\n            this.emitLn('SLE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Store primary to variable.\n        store: function (name) {\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Branch uncoditional.\n        branch: function (label) {\n            this.emitLn('BRA ' + label);\n        },\n\n        // Branch false.\n        branchFalse: function (label) {\n            this.emitLn('TST D0');\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Read variable to primary register.\n        readIt: function () {\n            this.emitLn('BSR READ');\n            this.store(this.value);\n        },\n\n        // Write variable from primary register.\n        writeIt: function () {\n            this.emitLn('BSR WRITE');\n        },\n\n        // Write header info.\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n        },\n\n        // Write the prolog.\n        prolog: function () {\n            this.postLabel('MAIN');\n        },\n\n        // Write the epilog.\n        epilog: function () {\n            this.emitLn('DC WARMST');\n            this.emitLn('END MAIN');\n        },\n\n        // Allocate storage for a static variable.\n        allocate: function (name, value) {\n            io.writeLn(name, ':', this.TAB, 'DC ', value);\n        },\n\n        /**\n         * ```\n         * <expression> ::= <term> [<addop> <term>]*\n         * <term> ::= <factor> [<mulop> <factor>]*\n         * <factor> ::= <number> | (<b-expression>) | <variable>\n         * ```\n         */\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.token === '(') {\n                this.next();                        // <--\n                this.boolExpression();\n                this.matchString(')');\n            } else {\n                if (this.token === 'x') {\n                    this.loadVar(this.value);\n                } else if (this.token === '#') {\n                    this.loadConst(this.value);\n                } else {\n                    this.expected('Math Factor');\n                }\n                this.next();                        // <--\n            }\n        },\n\n        // Recognize and translate a multiply.\n        multiply: function () {\n            this.next();                            // <--\n            this.factor();\n            this.popMul();\n        },\n\n        // Recognize and translate a divide.\n        divide: function () {\n            this.next();                            // <--\n            this.factor();\n            this.popDiv();\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.factor();\n            while (this.isMulop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Recognize and translate an add.\n        add: function () {\n            this.next();                            // <--\n            this.term();\n            this.popAdd();\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.next();                            // <--\n            this.term();\n            this.popSub();\n        },\n\n        // parse and translate an expression.\n        expression: function () {\n            if (this.isAddop(this.token)) {\n                this.clear();\n            } else {\n                this.term();\n            }\n            while (this.isAddop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Get another expression and compare.\n        compareExpression: function () {\n            this.expression();\n            this.popCompare();\n        },\n\n        // Get the next expression and compare.\n        nextExpression: function () {\n            this.next();                            // <--\n            this.compareExpression();\n        },\n\n        // Recognize and translate a relational \"equal\".\n        equal: function () {\n            this.nextExpression();\n            this.setEqual();\n        },\n\n        // Recognize and translate a relational \"less than or equal\".\n        lessOrEqual: function () {\n            this.nextExpression();\n            this.setLessOrEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEqual: function () {\n            this.nextExpression();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.next();                            // <--\n            switch (this.token) {\n            case '=':                               // for `<=`\n                this.lessOrEqual();\n                break;\n            case '>':                               // for `<>`\n                this.notEqual();\n                break;\n            default:                                // for `<`\n                this.compareExpression();\n                this.setLess();\n            }\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.next();                            // <--\n            if (this.token === '=') {               // for `>=`\n                this.nextExpression();\n                this.setGreaterOrEqual();\n            } else {                                // fpr `>`\n                this.compareExpression();\n                this.setGreater();\n            }\n        },\n\n        // Parse and translate a relation.\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '=':\n                    this.equals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean factor with leading NOT.\n        notFactor: function () {\n            if (this.token === '!') {\n                this.next();                        // <--\n                this.relation();\n                this.notIt();\n            } else {\n                this.relation();\n            }\n        },\n\n        // Parse and translate a boolean term.\n        boolTerm: function () {\n            this.notFactor();\n            while (this.token === '&') {\n                this.push();\n                this.next();                        // <--\n                this.notFactor();\n                this.popAnd();\n            }\n        },\n\n        // Recognize and translate a boolean OR.\n        boolOr: function () {\n            this.next();                            // <--\n            this.boolTerm();\n            this.popOr();\n        },\n\n        // Recognize and translate an exclusive or (XOR).\n        boolXor: function () {\n            this.next();                            // <--\n            this.boolTerm();\n            this.popXor();\n        },\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name;\n\n            this.checkTable(this.value);\n            name = this.value;\n            this.next();                            // <--\n            this.matchString('=');\n            this.boolExpression();\n            this.store(name);\n        },\n\n        /**\n         * ```\n         * <program> ::= <block> END\n         * <block> ::= [<statement>]*\n         * <statement> ::= <if> | <assignment>\n         * <if stmt> ::= IF <condition> <block> [ELSE <block>] ENDIF\n         * <assignment> ::= <identifier> = <expression>\n         * ```\n         */\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.next();                            // <--\n            this.boolExpression();\n            label1 = label2 = this.newLabel();\n            this.branchFalse(label1);\n            this.block();\n\n            if (this.token === 'l') {\n                this.next();                        // <--\n                label2 = this.newLabel();\n                this.branch(label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.matchString('ENDIF');\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.next();                            // <--\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.boolExpression();\n            this.branchFalse(label2);\n            this.block();\n            this.matchString('ENDWHILE');\n            this.branch(label1);\n            this.postLabel(label2);\n        },\n\n        // Read variable to primary register.\n        readVar: function () {\n            this.checkIdent();\n            this.checkTable(this.value);\n            this.readIt(this.value);\n            this.next();                            // <--\n        },\n\n        // Process a read statement.\n        doRead: function () {\n            this.next();                            // <--\n            this.matchString('(');\n            this.readVar();\n            while (this.token === ',') {\n                this.next();                        // <--\n                this.readVar();\n            }\n            this.matchString(')');\n        },\n\n        // Process a write statement.\n        doWrite: function () {\n            this.next();                            // <--\n            this.matchString('(');\n            this.expression();\n            this.writeIt();\n            while (this.token === ',') {\n                this.next();                        // <--\n                this.expression();\n                this.writeIt();\n            }\n            this.matchString(')');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':\n                    this.doRead();\n                    break;\n                case 'W':\n                    this.doWrite();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        },\n\n        // Allocate storage for a variable.\n        alloc: function () {\n            this.next();                            // <--\n            if (this.token !== 'x') {\n                this.expected('Variable Name');\n            }\n\n            this.checkDup(this.value);\n            this.addEntry(this.value, 'v');\n            this.allocate(this.value, '0');\n            this.next();                            // <--\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            this.scan();\n            while (this.token === 'v') {\n                this.alloc();\n                while (this.token === ',') {\n                    this.alloc();\n                }\n                this.scan();                        // <--\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n            this.next();                            // <--\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.matchString('PROGRAM');\n            this.header();\n            this.topDecls();\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        }\n    });\n\n    return {\n        object: tiny11\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 12 Miscellany\n * ======================\n */\n\ndefine(['./11.6-tiny-1.1', 'io'], function (tiny11, io) {\n    'use strict';\n\n    /**\n     * 12.1 Introduction\n     * ------------------\n     * This installment is another one of those excursions into side alleys\n     * that don’t seem to fit into the mainstream of this tutorial series.\n     * Perhaps you’ve wondered about **semicolons** and **comments**, and\n     * wondered how things would change if we had to deal with them.\n     */\n\n    /**\n     * 12.2 Semicolons\n     * ----------------\n     * Ever since the introduction of Algol, semicolons have been a part of\n     * almost every modern language.\n     *\n     * To understand the role of the semicolon, you have to look at a little\n     * history. When the fathers of Algol introduced that language, they\n     * wanted to get away from *line-oriented* programs like FORTRAN and\n     * BASIC, and allow for *free-form* input. This included the possibility\n     * of stringing multiple statements on a single line, as in\n     * ```\n     * a = b ; c = d ; e = e + 1;\n     * ```\n     * The same line, without the semicolons, just looks \"funny\":\n     * ```\n     * a = b c= d e = e + 1\n     * ```\n     * This is the major, perhaps ONLY, reason for semicolons: to keep\n     * programs from looking funny.\n     * Howerver, the TINY compiler is perfectly happy to parse the most\n     * complicated statement, spread over any number of lines,\n     * **without** semicolons.\n     */\n\n    /**\n     * 12.3 Syntactic sugar\n     * ---------------------\n     * This whole discussion brings up the issue of \"syntactic sugar\"...\n     * constructs that are added to a language, not because they are needed,\n     * but because they help make the programs look right to the programmer.\n     *\n     * The best example of useful sugar is the semicolon itself.\n     * Consider the code fragment:\n     * ```\n     * a = 1 + (2 * b + c)   b...\n     * ```\n     * Since there is no operator connecting the token `b` with the rest of\n     * the statement, the compiler will conclude that the expression ends\n     * with the `)`, and the `b` is the beginning of a new statement.\n     * But suppose I have simply left out the intended operator, and I\n     * really want to say:\n     * ```\n     * a = 1 + (2 * b + c) * b...\n     * ```\n     * In this case the compiler will get an error, all right, but it won’t\n     * be very meaningful since it will be expecting an `=` sign after the\n     * `b` that really shouldn’t be there.\n     *\n     * If, on the other hand, I include a semicolon after the `b`, THEN\n     * there can be no doubt where I intend the statement to end.\n     * Syntactic sugar, then, can serve a very useful purpose by providing\n     * some additional insurance that we remain on track.\n     */\n\n    /**\n     * 12.4 Dealing with semicolons\n     * -----------------------------\n     * There are two distinct ways in which semicolons are used in popular\n     * languages.\n     * In **Pascal**, semicolon is a statement *SEPARATOR*.\n     * No semicolon is required after the last statement in a block.\n     * ```\n     * <block> ::= <statement> (';' <statement>)*\n     * <statement> ::= <assignment> | <if> | <while> ... | null\n     * ```\n     * In **C** and **Ada**, semicolon is a statement *TERMINATOR*,\n     * and follows all statements\n     * ```\n     * <block> ::= (<statement> ';')*\n     * ```\n     *\n     * ### 12.4.1 The C version ###\n     * Let’s take the last case first, since it’s simpler.\n     * ```\n     * <program>          ::= PROGRAM';' <top-level decls> BEGIN END '.'\n     * <top-level decls>  ::= (<data declaration> ';')*\n     * <data declaration> ::= VAR <var-list>\n     * <block>            ::= (<statement> ';')*\n     * <statement>        ::= <assignment> | <if> | <while> ... | null\n     * ```\n     * Try to write a program in the editor, for example\n     * ```\n     * program;\n     * var num, fact;\n     * var count;\n     * begin\n     *     fact = 1; count = 1;\n     *     read(num);\n     *     while count <= num\n     *         fact = fact * count;\n     *         count = count + 1;\n     *     endwhile;\n     *     write(fact);\n     * end\n     * .\n     * ```\n     */\n    var theCVersion = tiny11.object.extend({\n\n        // Match a semicolon.\n        semi: function () {\n            this.matchString(';');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':\n                    this.doRead();\n                    break;\n                case 'W':\n                    this.doWrite();\n                    break;\n                case 'x':                           // <--\n                    this.assignment();\n                    break;\n                }\n                this.semi();                        // <--\n                this.scan();\n            }\n        },\n\n        // Parse and translate global declarations.\n        topDecls: function () {\n            this.scan();\n            while (this.token === 'v') {\n                this.alloc();\n                while (this.token === ',') {\n                    this.alloc();\n                }\n                this.semi();                        // <--\n                this.scan();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.matchString('PROGRAM');\n            this.semi();                            // <--\n            this.header();\n            this.topDecls();\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        }\n    });\n\n    /**\n     * ### 12.4.2 The Pascal version ###\n     * The Pascal version is a little trickier, but it still only requires\n     * minor changes, and those only to procedure Block.\n     * ```\n     * <block> ::= <statement> (';' <statement>)*\n     * <statement> ::= <assignment> | <if> | <while> ... | null\n     * ```\n     *\n     * Try some code, for example\n     * ```\n     * program;\n     * var num, fact;\n     * var count;\n     * begin\n     *     fact = 1; count = 1;\n     *     read(num);\n     *     while count <= num\n     *         fact = fact * count;\n     *         count = count + 1\n     *     endwhile;\n     *     write(fact);\n     *     if fact > 100\n     *         fact = 100\n     *     endif\n     * end\n     * .\n     * ```\n     * Note that the semicolon for statement at each end of block,\n     * `count = count + 1` within **while**, `fact = 100` whithin **if**,\n     * or `if...endif` in **main** block is now optional.\n     */\n    var thePascalVersion = theCVersion.extend({\n\n        // Recognize and translate a single statement.\n        statement: function () {\n            this.scan();\n            switch (this.token) {\n            case 'i':\n                this.doIf();\n                break;\n            case 'w':\n                this.doWhile();\n                break;\n            case 'R':\n                this.doRead();\n                break;\n            case 'W':\n                this.doWrite();\n                break;\n            case 'x':\n                this.assignment();\n                break;\n            }\n        },\n\n        // Parse and translate a block of statement.\n        block: function () {\n            this.statement();\n            while (this.token === ';') {\n                this.next();\n                this.statement();\n            }\n        }\n    });\n\n    /**\n     * 12.5 A compromise\n     * ------------------\n     * Make all the semicolon optional\n     * ```\n     * <program>          ::= PROGRAM [';'] <top-level decls> BEGIN END '.'\n     * <top-level decls>  ::= (<data declaration> [';'])*\n     * <data declaration> ::= VAR <var-list>\n     * <block>            ::= (<statement> [';'])*\n     * <statement>        ::= <assignment> | <if> | <while> ... | null\n     * ```\n     * We have TINY Version 1.2.\n     */\n    var aCompromise = theCVersion.extend({\n\n        // Match a semicolon.\n        semi: function () {\n            if (this.token === ';') {               // <--\n                this.next();                        // <\n            }\n        }\n    });\n\n    /**\n     * 12.6 Comments\n     * -------------\n     * At one extreme, comments can be intercepted almost the instant\n     * they enter the compiler. At the other, we can treat them as\n     * lexical elements.\n     * Things tend to get interesting when you consider things like\n     * comment delimiters contained in quoted strings.\n     */\n\n    /**\n     * 12.7 Single character delimiters\n     * --------------------------------\n     * Here’s an example. Suppose we assume the Turbo Pascal standard and\n     * use curly braces for comments.\n     * In this case we have single-character delimiters, so our parsing is\n     * a little easier.\n     *\n     * ### 12.7.1 Strip the comments out ###\n     * One approach is to strip the comments out the instant we encounter\n     * them in the input stream; that is, right in procedure `getChar`.\n     *\n     * Give it a try, for example\n     * ```\n     * program\n     * var num, ans\n     * begin\n     *     read(num)\n     *     { Calculate the absolute value of num }\n     *     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     * You’ll find that you can, indeed, bury comments\n     * anywhere you like. The comments never even get into the parser.\n     *\n     * Problems: first, this version doesn’t care WHERE you put comments.\n     * Try to replace `ans = num` by\n     * `a{ in the middle of a name }ns = nu{again}m`.\n     * Second, the rest of the parser can’t receive a `{` character, you\n     * will not be allowed to put one in a quoted string.\n     */\n    var stripTheCommentsOut = aCompromise.extend({\n\n        // Read new character from input.\n        // Renamed from `getChar` (temporarily).\n        getCharX: function () {\n            this.look = io.read();\n        },\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== '}') {\n                this.getCharX();\n            }\n            this.getCharX();\n        },\n\n        // Get character from input stream.\n        // Skip any comments.\n        getChar: function () {\n            this.getCharX();\n            if (this.look === '{') {\n                this.skipComment();\n            }\n        }\n\n    });\n\n    /**\n     * ### 12.7.2 The conventional treatment ###\n     * If you want to the conventional treatment, we need to move the\n     * interception point downstream a little further.\n     *\n     * Try again\n     * ```\n     * program\n     * var num, ans\n     * var{The comment is now treated as whitespace}test\n     * begin\n     *     read(num)\n     *     { Calculate the absolute value of num. }\n     *     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     * and also try to replace `ans = num` by\n     * `a{ in the middle of a name }ns = nu{again}m`. Does it still work?\n     * Now the comments are treated as whitespace.\n     */\n    var theConventionalTreatment = aCompromise.extend({\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== '}') {\n                this.getChar();                     // <-- original `getChar`\n            }\n            this.getChar();                         // <\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF ||\n                   c === '{';                       // <--\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                if (this.look === '{') {            // <--\n                    this.skipComment();             // <\n                } else {\n                    this.getChar();\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 12.7.3 Nested comments ###\n     * There’s one last item to deal with: Nested comments.\n     * Some programmers like the idea of nesting comments, since it allows\n     * you to comment out code during debugging.\n     * Give it a try, for example\n     * ```\n     * program\n     * var num, ans\n     * begin\n     * { Comment out the code, with a nested comment.\n     *     read(num)\n     *     { Calculate the absolute value of num. }\n     *     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * }\n     * end\n     * .\n     * ```\n     * That does it. As sophisticated a comment-handler as you’ll ever need.\n     */\n    var nestedComments = theConventionalTreatment.extend({\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== '}') {\n                this.getChar();\n                if (this.look === '{') {            // <--\n                    this.skipComment();             // <\n                }\n            }\n            this.getChar();\n        }\n    });\n\n    /**\n     * 12.8 Multi character delimiters\n     * -------------------------------\n     * What about the cases such as C or standard Pascal, where two\n     * characters are required?\n     *\n     * The easiest thing to do is to intercept the left delimiter back at\n     * the `getChar` stage. We can *tokenize* it right there, replacing it\n     * by a single character.\n     *\n     * Give it a try, for example\n     * ```\n     * /* This is a program to demonstrate\n     *    the C comment.*/\n    /* program\n     * var num, ans\n     * begin\n     *     read(num)\n     *     /* Calculate the absolute value of num.*/\n    /*     if num < 0\n     *         ans = -num\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     */\n    var multiCharacterDelimiters = theConventionalTreatment.extend({\n\n        tempChar: ' ',\n\n        // Read new character from input.\n        // Renamed from `getChar` (temporarily).\n        getCharX: function () {\n            this.look = io.read();\n        },\n\n        // Read new character. Intercept `/*`.\n        getChar: function () {\n            if (this.tempChar !== ' ') {\n                this.look = this.tempChar;\n                this.tempChar = ' ';\n            } else {\n                this.getCharX();\n                if (this.look === '/') {\n                    this.tempChar = io.read();\n                    if (this.tempChar === '*') {\n                        this.look = '{';\n                        this.tempChar = ' ';\n                    }\n                }\n            }\n        },\n\n        // Skip a comment field. Until `*/`.\n        skipComment: function () {\n            do {\n                do {\n                    this.getCharX();\n                } while (this.look !== '*');\n                this.getCharX();\n            } while (this.look !== '/');\n            this.getCharX();\n        }\n    });\n\n    /**\n     * 12.9 One sided comments\n     * ----------------------\n     * The one-sided comments are like those in assembler language or\n     * in Ada, that are terminated by the end of the line.\n     *\n     * Give it a try, for example\n     * ```\n     * ; This is a program to demonstrate\n     * ; the comment of assembly language.\n     * program\n     * var num, ans\n     * begin\n     *     read(num)\n     *     ; Calculate the absolute value of num.\n     *     if num < 0\n     *         ans = -num   ; negate the value\n     *     else\n     *         ans = num\n     *     endif\n     * end\n     * .\n     * ```\n     */\n    var oneSidedComments = aCompromise.extend({\n\n        // Skip a comment field.\n        skipComment: function () {\n            while (this.look !== this.LF) {         // <--\n                this.getChar();\n            }\n            this.getChar();\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF ||\n                   c === ';';                       // <--\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                if (this.look === ';') {            // <-- asm comment\n                    this.skipComment();\n                } else {\n                    this.getChar();\n                }\n            }\n        }\n    });\n\n    /**\n     * 12.10 Conclusion\n     * ----------------\n     * At this point we now have the ability to deal with both comments\n     * and semicolons, as well as other kinds of syntactic sugar.\n     *\n     * The conventions we we use in KISS/TINY will be\n     *\n     * 1. Semicolons are *TERMINATORS*, not separators\n     * 2. Semicolons are *OPTIONAL*\n     * 3. Comments are delimited by *curly braces*\n     * 4. Comments *MAY* be nested\n     *\n     * which is the version in section 12.7.3.\n     */\n\n\n    return {\n\n        // 12.4.1\n        // <program>          ::= PROGRAM';' <top-level decls> BEGIN END '.'\n        // <top-level decls>  ::= (<data declaration> ';')*\n        // <data declaration> ::= VAR <var-list>\n        // <block>            ::= (<statement> ';')*\n        // <statement>        ::= <assignment> | <if> | <while> ... | null\n        theCVersion: theCVersion,\n\n        // 12.4.2\n        // <block> ::= <statement> (';' <statement>)*\n        // <statement> ::= <assignment> | <if> | <while> ... | null\n        thePascalVersion: thePascalVersion,\n\n        // 12.5\n        // <program>          ::= PROGRAM [';'] <top-level decls> BEGIN END '.'\n        // <top-level decls>  ::= (<data declaration> [';'])*\n        // <data declaration> ::= VAR <var-list>\n        // <block>            ::= (<statement> [';'])*\n        // <statement>        ::= <assignment> | <if> | <while> ... | null\n        aCompromise: aCompromise,\n\n        // 12.7.1\n        stripTheCommentsOut: stripTheCommentsOut,\n\n        // 12.7.2\n        theConventionalTreatment: theConventionalTreatment,\n\n        // 12.7.3\n        nestedComments: nestedComments,\n\n        // 12.8\n        multiCharacterDelimiters: multiCharacterDelimiters,\n\n        // 12.9\n        oneSidedComments: oneSidedComments\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 13 Procedures\n * ======================\n */\n\ndefine([], function () {\n    'use strict';\n\n    /**\n     * 13.1 Introduction\n     * -----------------\n     * At this point we’ve studied almost all the basic features of\n     * compilers and parsing.\n     */\n\n    /**\n     * 13.2 One last digression\n     * ------------------------\n     *\n     */\n\n    /**\n     * 13.3 The basics\n     * ---------------\n     *\n     */\n\n    /**\n     * 13.4 A basis for experimentation\n     * --------------------------------\n     *\n     */\n    var aBasisForExperimentation = ({\n\n    });\n\n    /**\n     * 13.5 Declarating a procedure\n     * ----------------------------\n     *\n     */\n    var declaratingAProcedure = ({\n\n    });\n\n    return {\n\n        // 13.4\n        aBasisForExperimentation: aBasisForExperimentation,\n\n        // 13.5\n        declaratingAProcedure: declaratingAProcedure\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 2 Expression Parsing\n * ============================\n */\n\ndefine(['./1.2-cradle'], function (cradle) {\n    'use strict';\n\n    /**\n     * 2.1 Getting started\n     * -------------------\n     * The purpose of this chapter is for us to learn how to\n     * *parse* and *translate* **mathematical expressions**.\n     * An expression is the right-hand side of an equation, as in\n     * ```\n     * x = 2 * y + 3 / (4 * z)\n     * ```\n     */\n\n    /**\n     * 2.2 Single digits\n     * -----------------\n     * Let's start with the absolutely most simple case we can think of,\n     * an expression consisting of a single digit.\n     *\n     * **In Backus-Naur Form (BNF)**\n     * ```\n     * <expression> ::= <number>\n     * <number> ::= <digit>\n     * ```\n     * Try any single-digit number, or any other character.\n     */\n    var singleDigits = cradle.extend({\n\n        // Parse and translate a math expression.\n        expression: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.expression();\n        }\n    });\n\n    /**\n     * 2.3 Binary expressions\n     * ----------------------\n     * Suppose we want to handle expressions of the form:\n     * `1 + 2` or `4 - 3`\n     *\n     * or in general,\n     * **in Backus-Naur Form (BNF)**\n     * ```\n     * <expression> ::= <term> +/- <term>\n     * <term> ::= <number>\n     * ```\n     * We want to do is have procedure `term` do what `expression` was\n     * doing before. So just RENAME procedure `expression` as `term`,\n     * and make a new version of `expression`.\n     *\n     * Try any combination of two single digits, separated by a `+`\n     * or a `-`. Try some expressions with deliberate errors in them.\n     * Does the parser catch the errors?\n     *\n     * At this point we have a parser that can recognize the sum or\n     * difference of two digits. Howerver, run the program with\n     * the single input line `1`. Didn't work, did it?\n     */\n    var binaryExpressions = singleDigits.extend({\n\n        // Parse and translate a math term.\n        term: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Recognize and translate an add.\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD D1, D0');\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB D1, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.term();\n            this.emitLn('MOVE D0, D1');\n            switch (this.look) {\n            case '+':\n                this.add();\n                break;\n            case '-':\n                this.subtract();\n                break;\n            default:\n                this.expected('Addop');\n            }\n        }\n    });\n\n    /**\n     * 2.4 General expressions\n     * -----------------------\n     * In the REAL world, an *expression* can consist of one\n     * or more *terms*, separated by *addops* (`+` or `-`).\n     *\n     * **In BNF**\n     * ```\n     * <expression> ::= <term> [<addop> <term>]*\n     * ```\n     * This version handles any number of terms,\n     * and it only cost us two extra lines of code.\n     */\n    var generalExpressions = binaryExpressions.extend({\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {  // <--\n                this.emitLn('MOVE D0, D1');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }                                                 // <--\n        }\n    });\n\n    /**\n     * 2.5 Using the stack\n     * -------------------\n     * To deal with complexity, such as\n     * ```\n     * 1 + (2 - (3 + (4 - 5)))\n     * ```\n     * we're going to run out of registers fast!\n     * The solution is to use the stack instead.\n     *\n     * For M68000 assembler langugage, a push is written as `-(SP)`,\n     * and a pop, `(SP)+`.\n     */\n    var usingTheStack = binaryExpressions.extend({\n\n        // Recognize and translate an add.\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD (SP)+, D0');    // <-- pop from stack\n        },\n\n        // Recognize and translate a subtract.\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB (SP)+, D0');    // <-- pop from stack\n            this.emitLn('NEG D0');\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');   // <-- push to stack\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.6 Multiplication and division\n     * -------------------------------\n     * There is an implied operator *PRECEDENCE*, or *hierarchy*,\n     * associated with expressions, so that in an expression like\n     * ```\n     * 2 + 3 * 4\n     * ```\n     * we know that we’re supposed to multiply FIRST, then add.\n     * (See why we needed the stack?)\n     *\n     * We can define a term as a PRODUCT of FACTORS.\n     * What is a factor? For now, it’s what a term used to be.\n     *\n     * **In BNF**\n     * ```\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * <factor> ::= <number>\n     * ```\n     * Notice the symmetry: a term has the same form as an expression.\n     */\n    var multiplicationAndDivision = usingTheStack.extend({\n\n        // Parse and translate a math factor.\n        // Same as term() in 2.3 binary expressions.\n        factor: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Recognize and translate a multiply.\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Recognize and translate a divide.\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');  // exchange, swap(D0, D1)\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.factor();\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.7 Parentheses\n     * ---------------\n     * Parentheses are a mechanism to force a desired operator precedence.\n     * For example:\n     * ```\n     * 2 * (3 + 4)\n     * ```\n     * They give us a mechanism for defining expressions of\n     * any degree of complexity.\n     * ```\n     * (1 + 2) / ((3 + 4) + (5 - 6))\n     * ```\n     * **In BNF**\n     * ```\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     * This is where the recursion comes in.\n     * An expression can contain a factor which contains another\n     * expression which contains a factor, etc., ad infinitum.\n     *\n     * As usual, try and make sure that it correctly parses legal sentences,\n     * and flags illegal ones with an error message.\n     */\n    var parentheses = multiplicationAndDivision.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        }\n    });\n\n    /**\n     * 2.8 Unary minus\n     * ---------------\n     * Try e.g. `-1`, `+3` or `-(3-2)`, etc. It doesn't work, does it?\n     *\n     * **Solution**\n     *\n     * The  easiest (although not necessarily the best) way is\n     * to stick an imaginary leading zero in front of expressions\n     * of this type, so that `-3` becomes `0 - 3`.\n     *\n     * **In BNF**\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * ```\n     * At this point we’re just about finished with the structure\n     * of our expression parser.\n     */\n    var unaryMinus = parentheses.extend({\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            if (this.isAddop(this.look)) {  // <--\n                this.emitLn('CLR D0');      // <--\n            } else {\n                this.term();\n            }\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.9 A word about optimization\n     * -----------------------------\n     */\n\n\n    return {\n\n        // 2.2\n        // <expression> ::= <number>\n        singleDigits: singleDigits,\n\n        // 2.3\n        // <term> ::= <number>\n        // <expression> ::= <term> <addop> <term>\n        binaryExpressions: binaryExpressions,\n\n        // 2.4\n        // <expression> ::= <term> [<addop> <term>]*\n        generalExpressions: generalExpressions,\n\n        // 2.5\n        // Use the stack instead of registers to serve for complexity\n        usingTheStack: usingTheStack,\n\n        // 2.6\n        // <factor> ::= <number>\n        // <term> ::= <factor> [<mulop> <factor>]*\n        multiplicationAndDivision: multiplicationAndDivision,\n\n        // 2.7\n        // <factor> ::= <number> | (<expression>)\n        parentheses: parentheses,\n\n        // 2.8\n        // <expression> ::= <unary op> <term> [<addop> <term>]*\n        unaryMinus: unaryMinus\n    };\n\n    /**\n     * Final results of this chapter in BNF\n     * -------------------------------------\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     */\n});\n\r\n/*global define*/\n\n/**\n * Chapter 3 More Expressions\n * ==========================\n */\n\ndefine(['./2-expression-parsing'], function (expressionParsing) {\n    'use strict';\n\n    /**\n     * 3.1 Introduction\n     * ----------------\n     * In this chapter we will extend what we've done to deal with\n     *\n     * - variables\n     * - function calls\n     * - assignment statements\n     * - multi-character tokens (variables/numbers)\n     * - white space\n     */\n\n    /**\n     * 3.2 Variables\n     * --------------\n     * Most expressions that we see in practice involve variables, such as\n     * ```\n     * b * b + 4 * a * c\n     * ```\n     * It probably won’t come as too much of a surprise that a variable is\n     * just another kind of factor.\n     *\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>) | <variable>\n     * ```\n     * The format for a load in 68000 is\n     * ```\n     * MOVE X(PC), D0\n     * ```\n     * where `X` is the variable name.\n     */\n    var variables = expressionParsing.unaryMinus.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {   // <--\n                this.emitLn('MOVE ' + this.getName() + '(PC), D0');\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        }\n    });\n\n    /**\n     * 3.3 Functions\n     * -------------\n     * We don’t yet have a mechanism for declaring types,\n     * so let’s use the **C rule** for now. We also don’t have a mechanism\n     * to deal with parameters, we can only handle empty lists,\n     * so for now our function calls will have the form `x()`.\n     *\n     * **In BNF**\n     * ```\n     * <identifier> ::= <variable> | <function>\n     * <factor> ::= <number> | (<expression>) | <identifier>\n     * ```\n     * Test this version. Does it parse all legal expressions?\n     * Does it correctly flag badly formed ones?\n     *\n     * Before going to the next section, try the input line\n     * ```\n     * 1 + 2 <space> 3 + 4\n     * ```\n     * See how the space was treated as a terminator?\n     */\n    var functions = variables.extend({\n\n        // Parse and translate an identifier.\n        identifier: function () {\n            var name = this.getName();\n            if (this.look === '(') {    // <-- <function>\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + name);\n            } else {                    // <-- <variable>\n                this.emitLn('MOVE ' + name + '(PC), D0');\n            }\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();  // <--\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ', D0');\n            }\n        }\n    });\n\n    /**\n     * 3.4 More on error handling\n     * --------------------------\n     * *Assert that the expression should end with an end-of-line.*\n     * Try again\n     * ```\n     * 1 + 2 <space> 3 + 4\n     * ```\n     * Verify that it does what it’s supposed to.\n     */\n    var moreOnErrorHandling = functions.extend({\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.expression();\n            if (this.look !== this.LF) {   // <--\n                this.expected('Newline');   // <--\n            }\n        }\n    });\n\n    /**\n     * 3.5 Assignment statements\n     * --------------------------\n     * Expressions *USUALLY* (but not always) appear in assignment statements.\n     *\n     * **In BNF**\n     * ```\n     * <assignment> ::= <ident> = <expression>\n     * ```\n     * Note again that the code below exactly parallels the BNF.\n     * And notice further that the error checking was\n     * painless, handled by `getName` and `match`.\n     */\n    var assignmentStatements = moreOnErrorHandling.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.assignment();  // <--\n            if (this.look !== this.LF) {\n                this.expected('Newline');\n            }\n        }\n    });\n\n    /**\n     * 3.6 Multi-character tokens\n     * --------------------------\n     * We can handle the multi-character tokens that we need by\n     * very slight and very local modifications to `getName`  and `getNum`.\n     */\n    var multiCharacterTokens = assignmentStatements.extend({\n\n        // Recognize and alphanumeric.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var token = '';                     // <--\n            while (this.isAlNum(this.look)) {   // <--\n                token += this.look.toUpperCase(); // <--\n                this.getChar();\n            }\n            return token;                       // <--\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = '';                     // <--\n            while (this.isDigit(this.look)) {   // <--\n                value += this.look;             // <--\n                this.getChar();\n            }\n            return value;                       // <--\n        }\n    });\n\n    /**\n     * 3.7 White space\n     * ----------------\n     * The key to easy handling of white space is to come up with a simple\n     * rule for how the parser should treat the input stream,\n     * and to enforce that rule everywhere.\n     *\n     * Fortunately, because we’ve been careful to use `getName`, `getNum`,\n     * and `match` for most of our input processing, it is only those\n     * three routines (plus `Init`) that we need to modify.\n     */\n    var whiteSpace = multiCharacterTokens.extend({\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character.\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();   // <--\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var token = '';\n            while (this.isAlNum(this.look)) {\n                token += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return token;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = '';\n            while (this.isDigit(this.look)) {\n                value += this.look;\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return value;\n        },\n\n        // Initialize.\n        init: function () {\n            this.getChar();\n            this.skipWhite();   // <--\n        }\n    });\n\n\n    return {\n\n        // 3.2\n        // <factor> ::= <number> | (<expression>) | <variable>\n        variables: variables,\n\n        // 3.3\n        // <identifier> ::= <variable> | <function>\n        // <factor> ::= <number> | (<expression>) | <identifier>\n        functions: functions,\n\n        // 3.4\n        // Assert that the expression should end with an end-of-line\n        moreOnErrorHandling: moreOnErrorHandling,\n\n        // 3.5\n        // <assignment> ::= <ident> = <expression>\n        assignmentStatements: assignmentStatements,\n\n        // 3.6\n        multiCharacterTokens: multiCharacterTokens,\n\n        // 3.7\n        whiteSpace: whiteSpace\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 4 Interpreters\n * ======================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 4.1 Introduction\n     * ----------------\n     * The approach we’ve been taking in this whole series is called\n     * \"syntax-driven translation.\"\n     *\n     * - In our *compiler* so far, every action involves\n     *   emitting object code, to be executed later at execution time.\n     * - In an *interpreter*, every action involves\n     *   something to be done immediately.\n     *\n     * the *layout* ... the *structure* ... of the parser doesn’t change.\n     * It’s only the **actions** that change.\n     */\n\n    /**\n     * 4.2 The interpreters\n     * --------------------\n     * We're going to start over with a bare cradle and build up\n     * the translator all over again.\n     */\n\n    /**\n     * ### 4.2.1 Single digits ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <number>\n     * <number> ::= <digit>\n     * ```\n     * The first thing we need to do is to change function `getNum`,\n     * which up till now has always returned a character (or string).\n     * Now, it’s better for it to return an integer.\n     */\n    var singleDigits = cradle.extend({\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = +this.look;   // <-- convert string to number\n            this.getChar();\n            return num;\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            return this.getNum();   // <--\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            io.writeLn(this.expression());  // <--\n        }\n    });\n\n    /**\n     * ### 4.2.2 Addition and subtraction ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <number> [<addop> <number>]*\n     * ```\n     */\n    var additionAndSubtraction = singleDigits.extend({\n\n        // Recognize an addop.\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            var value = this.isAddop(this.look) ? 0 : this.getNum();\n\n            while (this.isAddop(this.look)) {\n                switch (this.look) {\n                case '+':\n                    this.match('+');\n                    value += this.getNum();\n                    break;\n                case '-':\n                    this.match('-');\n                    value -= this.getNum();\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.3 Multiplication and division ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <term> [<addop> <term>]*\n     * <term> ::= <number> [<mulop> <number>]*\n     * ```\n     */\n    var multiplicationAndDivision = additionAndSubtraction.extend({\n\n        // Parse and translate a math term.\n        term: function () {\n            var value = this.getNum();\n\n            while (this.look === '*' || this.look === '/') {\n                switch (this.look) {\n                case '*':\n                    this.match('*');\n                    value *= this.getNum();\n                    break;\n                case '/':\n                    this.match('/');\n                    value = Math.floor(value / this.getNum());\n                    break;\n                }\n            }\n            return value;\n        },\n\n        // Parse and translate an expression.\n        expression: function () {\n            var value = this.isAddop(this.look) ? 0 : this.term(); // <--\n\n            while (this.isAddop(this.look)) {\n                switch (this.look) {\n                case '+':\n                    this.match('+');\n                    value += this.term();   // <--\n                    break;\n                case '-':\n                    this.match('-');\n                    value -= this.term();   // <--\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.4 Multi-digits number ###\n     * Extend `getNum` to support multi-digit number.\n     */\n    var multiDigitsNumber = multiplicationAndDivision.extend({\n\n        // Get a Number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var value = 0;\n            while (this.isDigit(this.look)) {       // <--\n                value = 10 * value + (+this.look);  // <--\n                this.getChar();\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.5 Factor ###\n     * The next step is to install function `factor`,\n     * complete with parenthesized expressions.\n     *\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>)\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * ```\n     * We’re rapidly closing in on a useful interpreter.\n     */\n    var factor = multiDigitsNumber.extend({\n\n        // Parse and translate a math factor.\n        factor: function () {\n            var value;\n\n            if (this.look === '(') {\n                this.match('(');\n                value = this.expression();  // <--\n                this.match(')');\n            } else {\n                value = this.getNum();      // <--\n            }\n            return value;\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            var value = this.factor();      // <--\n\n            while (this.look === '*' || this.look === '/') {\n                switch (this.look) {\n                case '*':\n                    this.match('*');\n                    value *= this.factor(); // <--\n                    break;\n                case '/':\n                    this.match('/');\n                    value = Math.floor(value / this.factor());  // <--\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * 4.3 A little philosophy\n     * -----------------------\n     * Where did the precedence stacks go?\n     *\n     * The *hierarchy levels* and the *parse trees* are there, but they’re\n     * hidden within the structure of the parser, and they’re taken\n     * care of by the order with which the various procedures are called.\n     */\n\n    /**\n     * ### 4.3.1 Variables ###\n     * The next step is to add variable names.\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>) | <variable>\n     * ```\n     * We need a storage mechanism for these variables.\n     */\n    var variables = factor.extend({\n\n        table: {},\n\n        // Initialize the variable Area.\n        initTable: function () {\n            var charCodeOfA = 'A'.charCodeAt(0),\n                i,\n                name;\n\n            for (i = 0; i < 26; i += 1) {\n                name = String.fromCharCode(charCodeOfA + i);\n                this.table[name] = 0;\n            }\n        },\n\n        // Initialize.\n        init: function () {\n            this.initTable();   // <--\n            this.getChar();\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            var value;\n            if (this.look === '(') {\n                this.match('(');\n                value = this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {    // <--\n                value = this.table[this.getName()];  // <--\n            } else {\n                value = this.getNum();\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.3.2 Assignment statements ###\n     * We need to do an assignment statement so we can put something\n     * INTO the variables.\n     *\n     * **In BNF notation**\n     * ```\n     * <assignment> ::= <identifier> = <expression>\n     * ```\n     */\n    var assignmentStatements = variables.extend({\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.table[name] = this.expression();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.assignment();  // <--\n            io.writeLn('A = ' + this.table.A); // <-- for testing purposes\n        }\n    });\n\n    /**\n     * ### 4.3.3 Multiple statements ###\n     * We’re going to want to handle multiple statements.\n     * This merely means putting a loop around the call to Assignment.\n     * So let’s do that now. But what should be the loop exit criterion?\n     *\n     * Try nultiple statements in the editor, however,\n     * we have no way to read data in or write it out.\n     */\n    var multipleStatements = assignmentStatements.extend({\n\n        // Recognize and skip over a newline.\n        newLine: function () {\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {                            // <--\n                this.assignment();\n                this.newLine();             // <--\n            } while (this.look !== '.');    // <--\n        }\n    });\n\n    /**\n     * ### 4.3.4 I/O routines ###\n     * Use `?` to stand for a read statement (not implemented here),\n     * and `!` for a write.\n     *\n     * We have now completed a real, working interpreter.\n     * Try the following code, for example, in the editor.\n     * ```\n     * a=10*5\n     * b=20-5*2\n     * c=2*a-a/b\n     * !c\n     * .\n     * ```\n     */\n    var ioRoutines = multipleStatements.extend({\n\n        // Input routine.\n        input: function () {\n            this.match('?');\n            // Not implemented.\n        },\n\n        // Output routine.\n        output: function () {\n            this.match('!');\n            io.writeLn(this.table[this.getName()]);\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                switch (this.look) {\n                case '?':\n                    this.input();\n                    break;\n                case '!':\n                    this.output();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.newLine();\n            } while (this.look !== '.');\n        }\n    });\n\n\n    return {\n\n        // 4.2.1\n        // <expression> ::= <number>\n        singleDigits: singleDigits,\n\n        // 4.2.2\n        // <expression> ::= <number> [<addop> <number>]*\n        additionAndSubtraction: additionAndSubtraction,\n\n        // 4.2.3\n        // <term> ::= <number> [<mulop> <number>]*\n        // <expression> ::= <term> [<addop> <term>]*\n        multiplicationAndDivision: multiplicationAndDivision,\n\n        // 4.2.4\n        // Multi-digits number\n        multiDigitsNumber: multiDigitsNumber,\n\n        // 4.2.5\n        // <factor> ::= <number> | (<expression>)\n        // <term> ::= <factor> [<mulop> <factor>]*\n        factor: factor,\n\n        // 4.3.1\n        // <factor> ::= <number> | (<expression>) | <variable>\n        variables: variables,\n\n        // 4.3.2\n        assignmentStatements: assignmentStatements,\n\n        // 4.3.3\n        multipleStatements: multipleStatements,\n\n        // 4.3.4\n        ioRoutines: ioRoutines\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 5 Control Constructs\n * ============================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 5.1 Introduction\n     * ----------------\n     * We’ll take off on a new and exciting tangent:\n     * that of parsing and translating control constructs such as\n     * IF statements.\n     */\n\n    /**\n     * 5.2 The plan\n     * -------------\n     * We’ll be starting over again with a bare cradle.\n     * We’ll also be retaining the concept of single-character tokens.\n     * This means that the \"code\" will look a little funny,\n     * with `i` for `IF`, `w` for `WHILE`, etc.\n     */\n\n    /**\n     * ### 5.2.1 One statement ###\n     * We will use an anonymous statement `other` to take the place of\n     * the non- control statements and serve as a place-holder for them.\n     *\n     * **In BNF notation**\n     * ```\n     * <program> ::= <statement>\n     * <statement> ::= <other>\n     * ```\n     * Code example: `a`\n     */\n    var oneStatement = cradle.extend({\n\n        // Recognize and translate an \"Other\".\n        // an anonymous statement serve as a place-holder.\n        other: function () {\n            this.emitLn('<block ' + this.getName() + '>');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.other();   // <--\n        }\n    });\n\n    /**\n     * ### 5.2.2 More than one statement ###\n     * The first thing we need is the ability to deal with more than\n     * one statement.\n     *\n     * **In BNF notation**\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * ```\n     * Code example: `abce`\n     */\n    var moreThanOneStatement = oneStatement.extend({\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e') {\n                this.other();\n            }\n        },\n\n        // Parse and translate a program.\n        doProgram: function () {\n            this.block();\n            if (this.look !== 'e') {\n                this.expected('End');\n            }\n            this.emitLn('END');\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.doProgram();   // <--\n        }\n    });\n\n    /**\n     * 5.3 Some groundwork\n     * --------------------\n     * We’re going to need some more procedures to help us deal with\n     * branches.\n     *\n     * Prepare two routines\n     *\n     * - `newLabel` to generate label `Lnn`,\n     *    where `nn` is a label number starting from zero.\n     * - `postLabel` to output the labels at the proper place.\n     */\n    var someGroundwork = moreThanOneStatement.extend({\n\n        lCount: 0,  // label counter\n\n        // Generate a unique label.\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output.\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        // Initialize.\n        init: function () {\n            this.lCount = 0;    // <--\n            this.getChar();\n        }\n    });\n\n    /**\n     * 5.4 The IF statement\n     * ---------------------\n     * All of the constructs we’ll be dealing with here involve transfer\n     * of control, which at the assembler-language level means conditional\n     * and/or unconditional branches.\n     *\n     * **In BNF**\n     * ```\n     * <if> ::= IF <condition> <block> ENDIF\n     * ```\n     * Output should be:\n     * ```\n     *      <condition>\n     *      BEQ L1      # branch if false to L1\n     *      <block>\n     * L1:\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * IF\n     * <condition>    { condition();\n     *                  L = newLabel();\n     *                  emit(Branch False to L); }\n     * <block>\n     * ENDIF          { postLabel(L) }\n     * -------------------------------------------\n     * ```\n     * On the **68000** the condition flags are set\n     * whenever any data is moved or calculated.\n     * If the data is a 0000 (corresponding to a false condition),\n     * the zero flag will be set.\n     * The code for **branch on zero** is `BEQ`.\n     * So for our purposes here,\n     * ```\n     * BEQ <=> Branch if false\n     * BNE <=> Branch if true\n     * ```\n     * It’s the nature of the beast that most of the branches we see\n     * will be `BEQ`’s... we’ll be branching *AROUND* the code\n     * that’s supposed to be executed when the condition is true.\n     *\n     * For the **implementation**, as usual,\n     * we will be using our single-character approach,\n     * with the character `i` for `IF`, and `e` for `ENDIF`\n     * (as well as `END` ... that dual nature causes no confusion).\n     *\n     * Code example: `aibece` and nested IF's `aibicedefe`.\n     *\n     * The later stands for\n     * ```\n     * <block A>                a\n     * IF <condition>           i\n     *     <block B>            b\n     *     IF <condition>       i\n     *         <block C>        c\n     *     ENDIF                e\n     *     <block D>            d\n     * ENDIF                    e\n     * <block F>                f\n     * END                      e\n     * ```\n     * It’s starting to look real, eh?\n     */\n    var theIfStatement = someGroundwork.extend({\n\n        // Parse and translate a boolean condition.\n        // This version is a dummy.\n        condition: function () {\n            this.emitLn('<condition>');\n        },\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label;\n\n            this.match('i');\n            label = this.newLabel();\n            this.condition();\n            this.emitLn('BEQ ' + label);\n            this.block();\n            this.match('e');\n            this.postLabel(label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e') {\n                switch (this.look) {\n                case 'i':           // <--\n                    this.doIf();    // <--\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 5.4.2 Add the ELSE clause ###\n     * To add the ELSE clause to IF, the tricky part arises simply\n     * because there is an optional part, which doesn’t occur in\n     * the other constructs.\n     *\n     * **BNF of the `IF` statement**\n     * ```\n     * <if> ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * ```\n     * **Output** should be\n     * ```\n     *      <condition>\n     *      BEQ L1      # branch if false\n     *      <block>\n     *      BRA L2      # unconditional branch\n     * L1:\n     *      <block>\n     * L2:\n     * ```\n     * This leads us to the following **syntax-directed translation**\n     * ```\n     *   SYNTAX           ACTIONS\n     *   -------------------------------------------\n     *   IF\n     *   <condition>    { condition();\n     *                    L1 = newLabel();\n     *                    L2 = newLabel();\n     *                    emit(BEQ L1); }\n     *   <block>\n     *   ELSE           { emit(BRA L2);\n     *                    postLabel(L1); }\n     *   <block>\n     *   ENDIF          { postLabel(L2); }\n     *   -------------------------------------------\n     * ```\n     * Try something like `aiblcede`\n     *\n     * which stands for\n     * ```\n     * <block A>            a\n     * IF <condition>       i\n     *     <block B>        b\n     * ELSE                 l\n     *     <block C>        c\n     * ENDIF                e\n     * <block D>            d\n     * END                  e\n     * ```\n     * Did it work? Now, just to be sure we haven’t broken the ELSE-less\n     * case, try `aibece`.\n     * Now try some nested IF’s. Try anything you like, including some\n     * badly formed statements.\n     */\n    var addTheElseClause = theIfStatement.extend({\n\n        // Recognize and translate an IF constructor.\n        doIf: function () {\n            var label1, label2;\n\n            this.match('i');\n            this.condition();\n            label1 = label2 = this.newLabel();  // <--\n            this.emitLn('BEQ ' + label1);\n            this.block();\n\n            if (this.look === 'l') {            // <-- optional ELSE clause\n                this.match('l');\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);   // <-- unconditional branch\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.match('e');\n            this.postLabel(label2);             // <--\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {  // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.5 The WHILE statement\n     * ------------------------\n     * **BNF of the `WHILE` statement**\n     * ```\n     * <while> ::= WHILE <condition> <block> ENDWHILE\n     * ```\n     * Output should be:\n     * ```\n     * L1:  <condition>\n     *      BEQ L2\n     *      <block>\n     *      BRA L1\n     * L2:\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * WHILE          { L1 = newLabel;\n     *                  postLabel(L1) }\n     * <condition>    { emit(BEQ L2) }\n     * <block>\n     * ENDWHILE       { emit(BRA L1);\n     *                  PostLabel(L2) }\n     * ```\n     * OK, try the **new program**, such as `awbece` which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     * ENDWHILE                 e\n     * <block C>                c\n     * END                      e\n     * ```\n     * Note that this time, the `<condition>` code is *INSIDE* the upper label,\n     * which is just where we wanted it.\n     *\n     * Try some **nested loops**, for example `awbwcedefe` which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     *     WHILE <condition>    w\n     *         <block C>        c\n     *     ENDWHILE             e\n     *     <block D>            d\n     * ENDWHILE                 e\n     * <block F>                f\n     * END                      e\n     * ```\n     * Try some **loops within `IF`’s**, for example`aibwcedlfege`\n     * which stands for\n     * ```\n     * <block A>                a\n     * IF <condition>           i\n     *     <block B>            b\n     *     WHILE <condition>    w\n     *         <block C>        c\n     *     ENDWHILE             e\n     *     <block D>            d\n     * ELSE                     l\n     *     <block F>            f\n     * ENDIF                    e\n     * <block G>                g\n     * END                      e\n     * ```\n     * and some **`IF`’s within loops**, for example `awbicedefe`\n     * which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     *     IF <condition>       i\n     *         <block C>        c\n     *     ENDIF                e\n     *     <block D>            d\n     * ENDWHILE                 e\n     * <block F>                f\n     * END                      e\n     * ```\n     * If you get a bit confused as to what you should type,\n     * don’t be discouraged: you write *bugs* in other languages, too,\n     * don’t you?\n     */\n    var theWhileStatement = addTheElseClause.extend({\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.match('w');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.condition();\n            this.emitLn('BEQ ' + label2);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':           // <--\n                    this.doWhile();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.6 The LOOP statement\n     * -----------------------\n     * **BNF** of the `LOOP` statement\n     * ```\n     * <loop> ::= LOOP <block> ENDLOOP\n     * ```\n     * **Output** should be:\n     * ```\n     * L1:\n     *      <block>\n     *      BRA L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * LOOP           { L = newLabel();\n     *                  postLabel(L) }\n     * <block>\n     * ENDLOOP        { emit(BRA L) }\n     * ```\n     * Code example `apbece`, which stands for\n     * ```\n     * <block A>                a\n     * LOOP                     p\n     *     <block B>            b\n     * ENDLOOP                  e\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    var theLoopStatement = theWhileStatement.extend({\n\n        // Parse and translate a LOOP statement.\n        doLoop: function () {\n            var label;\n\n            this.match('p');\n            label = this.newLabel();\n            this.postLabel(label);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':           // <--\n                    this.doLoop();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.7 The Repeat-Until statement\n     * -------------------------------\n     * **BNF of the `REPEAT` statement**\n     * ```\n     * <repeat> ::= REPEAT <block> UNTIL <conditon>\n     * ```\n     * **Output** should be:\n     * ```\n     * L1:\n     *      <block>\n     *      <condition>\n     *      BEQ L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX              ACTIONS\n     * -------------------------------------------\n     * REPEAT         { L = newLabel();\n     *                  postLabel(L) }\n     * <block>\n     * UNTIL\n     * <condition>    { emit(BEQ L) }\n     * ```\n     * Code example `arbuce`\n     * which stands for\n     * ```\n     * <block A>                a\n     * REPEAT                   r\n     *     <block B>            b\n     * UNTIL                    u\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    var theRepeatUntilStatement = theLoopStatement.extend({\n\n        // Parse and translate a REPEAT statement.\n        doRepeat: function () {\n            var label;\n\n            this.match('r');\n            label = this.newLabel();\n            this.postLabel(label);\n            this.block();\n            this.match('u');\n            this.condition();\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {    // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':                   // <--\n                    this.doRepeat();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.8 The FOR loop\n     * -----------------\n     * The FOR loop is a very handy one to have around, but it’s a bear\n     * to translate, because it’s hard to implement in assembler language.\n     *\n     * **BNF of the `FOR` statement**\n     * ```\n     * <for> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * ```\n     * It gets simpler if you adopt the point of view that the construct\n     * is equivalent to:\n     * ```\n     *  <ident> = <expr1>\n     *  temp = <expr2>\n     *  WHILE <ident> <= temp\n     *      <block>\n     *  ENDWHILE\n     * ```\n     * The translated code came out like this:\n     * ```\n     *      <ident>               get name of loop counter\n     *      <expr1>               get initial value\n     *      LEA <ident>(PC), A0   address the loop counter\n     *      SUBQ #1, D0           predecrement it\n     *      MOVE D0, (A0)         save it\n     *      <expr2>               get upper limit\n     *      MOVE D0, -(SP)        save it on stack\n     * L1:\n     *      LEA <ident>(PC), A0   address loop counter\n     *      MOVE (A0), D0         fetch it to D0\n     *      ADDQ #1, D0           bump the counter\n     *      MOVE D0, (A0)         save new value\n     *      CMP (SP), D0          check for range\n     *      BLE L2                skip out if D0 > (SP)\n     *      <block>\n     *      BRA L1                loop for next pass\n     * L2:\n     *      ADDQ #2, SP           clean up the stack\n     * ```\n     * Code example `afi=bece`\n     * which stands for\n     * ```\n     * <block A>                    a\n     * FOR I = <expr1> TO <expr2>   f i =\n     *     <block B>                b\n     * ENDFOR                       e\n     * <block C>                    c\n     * END                          e\n     * ```\n     * Well, it DOES generate a lot of code, doesn’t it?\n     * But at least it’s the RIGHT code.\n     */\n    var theForLoop = theRepeatUntilStatement.extend({\n\n        // Parse and translate an expression.\n        // This version is a dummy.\n        expression: function () {\n            this.emitLn('<expression>');\n        },\n\n        // Parse and translate a FOR statement.\n        doFor: function () {\n            var label1, label2, name;\n\n            this.match('f');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n            this.expression();\n            this.emitLn('MOVE D0, -(SP)');\n\n            this.postLabel(label1);\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE (A0), D0');\n            this.emitLn('ADDQ #1, D0');\n            this.emitLn('MOVE D0, (A0)');\n            this.emitLn('CMP (SP), D0');\n            this.emitLn('BGT ' + label2);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n            this.emitLn('ADDQ #2, SP');\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':           // <--\n                    this.doFor();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.9 The DO statement\n     * ----------------------\n     * This is a simpler version of the FOR loop.\n     * If all we need is a counting loop to make us go through something\n     * a specified number of times, but don’t need access to the counter\n     * itself.\n     *\n     * **BNF of the `DO` statement**\n     * ```\n     * <do> ::= DO <expr> <block> ENDDO\n     * ```\n     * translated code:\n     * ```\n     *      <expression>\n     *      SUBQ #1, D0\n     * L1:\n     *      MOVE D0, -(SP)      # push D0\n     *      <block>\n     *      MOVE (SP)+, D0      # pop D0\n     *      DBRA D0, L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * DO             { emit(SUBQ #1,D0);\n     *                  L = newLabel();\n     *                  postLabel(L)\n     *                  emit(MOVE D0,-(SP)) }\n     * <block>\n     * ENDDO          { emit(MOVE (SP)+,D0);\n     *                  emit(DBRA D0,L) }\n     * ```\n     * Code example `adbece`\n     * which stands for\n     * ```\n     * <block A>                a\n     * DO                       d\n     *     <block B>            b\n     * ENDDO                    e\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    var theDoStatement = theForLoop.extend({\n\n        // Parse and translate a DO statement.\n        doDo: function () {\n            var label;\n\n            this.match('d');\n            label = this.newLabel();\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.postLabel(label);\n            this.emitLn('MOVE D0, -(SP)');\n            this.block();\n            this.match('e');\n            this.emitLn('MOVE (SP)+, D0');\n            this.emitLn('DBRA D0, ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':           // <--\n                    this.doDo();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.10 The BREAK statement\n     * -------------------------\n     * On the face of it a BREAK seems really tricky.\n     * The secret is to note that every BREAK statement has to occur\n     * within a block ... there’s no place else for it to be.\n     * So all we have to do is to pass into Block the exit address of\n     * the innermost loop.\n     * Then it can pass the address to the routine that translates\n     * the break instruction.\n     *\n     * **In BNF**\n     * ```\n     * <break> ::= BREAK\n     * ```\n     * Code example `apcibegehe`\n     * which stands for\n     * ```\n     * <block A>                a\n     * LOOP                     p\n     *     <block C>            c\n     *     IF <condition>       i\n     *         BREAK            b\n     *     ENDIF                e\n     *     <block G>            g\n     * ENDLOOP                  e\n     * <block H>                h\n     * END                      e\n     * ```\n     */\n    var theBreakStatement = theDoStatement.extend({\n\n        // Recognize and translate an IF constructor.\n        doIf: function (label) {                // <--\n            var label1, label2;\n\n            this.match('i');\n            this.condition();\n            label1 = label2 = this.newLabel();\n            this.emitLn('BEQ ' + label1);\n            this.block(label);                  // <--\n\n            if (this.look === 'l') {\n                this.match('l');\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);\n                this.postLabel(label1);\n                this.block(label);              // <--\n            }\n\n            this.match('e');\n            this.postLabel(label2);\n        },\n\n        // Parse and translate a WHILE statement.\n        doWhile: function () {\n            var label1, label2;\n\n            this.match('w');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            this.postLabel(label1);\n            this.condition();\n            this.emitLn('BEQ ' + label2);\n            this.block(label2);                 // <--\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n        },\n\n        // Parse and translate a LOOP statement.\n        doLoop: function () {\n            var label1,\n                label2;                         // <--\n\n            this.match('p');\n            label1 = this.newLabel();\n            label2 = this.newLabel();           // <--\n            this.postLabel(label1);\n            this.block(label2);                 // <--\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);             // <--\n        },\n\n        // Parse and translate a REPEAT statement.\n        doRepeat: function () {\n            var label1,\n                label2;                         // <--\n\n            this.match('r');\n            label1 = this.newLabel();\n            label2 = this.newLabel();           // <--\n            this.postLabel(label1);\n            this.block(label2);                 // <--\n            this.match('u');\n            this.condition();\n            this.emitLn('BEQ ' + label1);\n            this.postLabel(label2);             // <--\n        },\n\n        // Parse and translate a FOR statement.\n        doFor: function () {\n            var label1, label2, name;\n\n            this.match('f');\n            label1 = this.newLabel();\n            label2 = this.newLabel();\n            name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n            this.expression();\n            this.emitLn('MOVE D0, -(SP)');\n\n            this.postLabel(label1);\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE (A0), D0');\n            this.emitLn('ADDQ #1, D0');\n            this.emitLn('MOVE D0,(A0)');\n            this.emitLn('CMP (SP), D0');\n            this.emitLn('BGT ' + label2);\n            this.block(label2);                 // <--\n            this.match('e');\n            this.emitLn('BRA ' + label1);\n            this.postLabel(label2);\n            this.emitLn('ADDQ #2, SP');\n        },\n\n        // Parse and translate a DO statement.\n        doDo: function () {\n            var label1,\n                label2;                         // <--\n\n            this.match('d');\n            label1 = this.newLabel();\n            label2 = this.newLabel();           // <--\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.postLabel(label1);\n            this.emitLn('MOVE D0, -(SP)');\n            this.block(label2);                 // <--\n            this.emitLn('MOVE (SP)+, D0');\n            this.emitLn('DBRA D0, ' + label1);\n            this.emitLn('SUBQ #2, SP');         // <--\n            this.postLabel(label2);             // <--\n            this.emitLn('ADDQ #2, SP');         // <--\n        },\n\n        // Recognize and translate a break.\n        doBreak: function (label) {\n            if (!label) {\n                this.abort('No loop to break from');\n            }\n\n            this.match('b');\n            this.emitLn('BRA ' + label);\n        },\n\n        // Recognize and translate a statement block.\n        block: function (label) {               // <--\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf(label);           // <--\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':\n                    this.doDo();\n                    break;\n                case 'b':                       // <--\n                    this.doBreak(label);        // <--\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n\n    /**\n     * 5.11 Conclusion\n     * ----------------\n     * Final results of this chapter in BNF\n     *\n     * **Program**\n     * ```\n     * <program>          ::= <block> END\n     * <block>            ::= [<statement>]*\n     * <statement>        ::= <if> | <while> | <loop> | <repeat> |\n     *                        <for> | <do> | <break> |\n     *                        <other>\n     * ```\n     * **Control statements**\n     * ```\n     * <if statement>     ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <while statement>  ::= WHILE <condition> <block> ENDWHILE\n     * <loop statement>   ::= LOOP <block> ENDLOOP\n     * <repeat statement> ::= REPEAT <block> UNTIL <conditon>\n     * <for statement>    ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * <do statement>     ::= DO <expression> <block> ENDDO\n     * <break statement>  ::= BREAK\n     * ```\n     * Next we’ll address *Boolean expressions*, so we can get rid of\n     * the dummy version of `<condition>` that we’ve used here.\n     */\n\n    return {\n\n        // 5.2.1\n        // <program> ::= <statement>\n        oneStatement: oneStatement,\n\n        // 5.2.2\n        // <program> ::= <block> END\n        // <block> ::= [<statement>]*\n        moreThanOneStatement: moreThanOneStatement,\n\n        // 5.3\n        someGroundwork: someGroundwork,\n\n        // 5.4\n        // <if> ::= IF <condition> <block> ENDIF\n        theIfStatement: theIfStatement,\n\n        // 5.4.2\n        // <if> ::= IF <condition> <block> [ELSE <block>] ENDIF\n        addTheElseClause: addTheElseClause,\n\n        // 5.5\n        // <while> ::= WHILE <condition> <block> ENDWHILE\n        theWhileStatement: theWhileStatement,\n\n        // 5.6\n        // <loop> ::= LOOP <block> ENDLOOP\n        theLoopStatement: theLoopStatement,\n\n        // 5.7\n        // <repeat> ::= REPEAT <block> UNTIL <conditon>\n        theRepeatUntilStatement: theRepeatUntilStatement,\n\n        // 5.8\n        // <for> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n        theForLoop: theForLoop,\n\n        // 5.9\n        // <do> ::= DO <expression> <block> ENDDO\n        theDoStatement: theDoStatement,\n\n        // 5.10\n        theBreakStatement: theBreakStatement\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 6 Boolean Expressions\n * =============================\n */\n\ndefine([\n    './1.2-cradle',\n    './3-more-expressions',\n    './5-control-constructs',\n    'jquery',\n    'io'\n], function (cradle, moreExpressions, controlConstructs, $, io) {\n    'use strict';\n\n    /**\n     * 6.1 Introduction\n     * -----------------\n     * In the previous chapter we did not address the issue of the branch\n     * **condition**. One of the things we’ll do in this session is to plug\n     * that hole by expanding condition into a true parser/translator.\n     */\n\n    /**\n     * 6.2 The plan\n     * -------------\n     * The approach we did in previous chapters is called coding without\n     * specs, and it’s usually frowned upon. We could get away with it\n     * before because the rules of arithmetic are pretty well established...\n     * The same is true for branches and loops.\n     *\n     * But the ways in which programming languages implement logic vary\n     * quite a bit from language to language. So before we begin serious\n     * coding, we’d better first make up our minds what it is we want.\n     *\n     * The way to do that is at the level of the BNF syntax rules\n     * (the GRAMMAR).\n     */\n\n    /**\n     * 6.3 The grammar\n     * ----------------\n     * **BNF syntax equations** for arithmetic expressions\n     * we have been implementing\n     * ```\n     * <expression>    ::= <unary op> <term> [<addop> <term>]*\n     * <term>          ::= <factor> [<mulop> factor]*\n     * <factor>        ::= <integer> | <variable> | (<expression>)\n     * ```\n     * The nice thing about this grammar is that it enforces the operator\n     * precedence hierarchy that we normally expect for algebra.\n     *\n     * It's better to write the *grammar* this way\n     * ```\n     * <expression>    ::= <term> [<addop> <term>]*\n     * <term>          ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>        ::= <integer> | <variable> | (<expression>)\n     * ```\n     * We can define an analogous grammar for boolean algebra\n     * ```\n     * <b-expression>  ::= <b-term> [<orop> <b-term>]*\n     * <b-term>        ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>    ::= [NOT] <b-factor>\n     * <b-factor>      ::= <b-literal> | <b-variable> | (<b-expression>)\n     * ```\n     * Notice the analogy\n     *\n     * - addop `+`, `-` <=> orop `OR`, `XOR`\n     * - mulop `*` <=> `AND`\n     * - unary minus `-` <=> `NOT`.\n     *\n     * Also notice that expression like `a * -b` or `a - -b` is not allowed.\n     * However, in boolean algebra `a AND NOT b` makes perfect sense.\n     */\n\n    /**\n     * 6.4 Relops\n     * -----------\n     * We now have syntax rules for both arithmetic and Boolean algebra.\n     * The sticky part comes in when we have to combine the two.\n     *\n     * **BNF for relational expressions**\n     * ```\n     * <relation>  ::=  <expression> <relop> <expression>\n     * ```\n     * where relops are any of `=`, `<>` (or `!=`), `<`, `>`, `<=`, and `>=`.\n     *\n     * The relation is really just another kind of factor,\n     * so we can expand the definition of a boolean factor to read\n     * ```\n     * <b-factor>  ::=   <b-literal>\n     *                 | <b-variable>\n     *                 | (<b-expression>)\n     *                 | <relation>\n     * ```\n     * THAT’s the connection! The relops and the relation they define\n     * serve to wed the two kinds of algebra.\n     * If you write out the precedence levels for all the operators,\n     * you arrive at the following list:\n     * ```\n     * Level   Syntax Element         Operator\n     * -------------------------------------------------\n     *   0        factor          literal, variable\n     *   1     signed factor         unary minus\n     *   2         term                 *, /\n     *   3      expression              +, -\n     *   4        b-factor      literal, variable, relop\n     *   5       not-factor              NOT\n     *   6         b-term                AND\n     *   7      b-expression           OR, XOR\n     * ```\n     * This grammar seems reasonable. Unfortunately, it won’t work!\n     * To see the problem, consider the code fragment:\n     * `IF ((((((A + B + C) < 0 ) AND ....`\n     * It has no way of knowing which kind of expression it’s dealing with.\n     * Compiler writers have had to make compromises so that a single parser\n     * can handle the grammar without backtracking.\n     */\n\n    /**\n     * 6.5 Fixing the grammar\n     * ----------------------\n     * The problem comes up because our definitions of both arithmetic and\n     * Boolean factors permit the use of parenthesized expressions.\n     *\n     * **In BNF**\n     * ```\n     * <b-expression>  ::= <b-term> [<orop> <b-term>]*\n     * <b-term>        ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>    ::= [NOT] <b-factor>\n     * <b-factor>      ::= <b-literal> | <b-variable> | <relation>\n     *\n     * <relation>      ::= <expression> [<relop> <expression>]\n     *\n     * <expression>    ::= <term> [<addop> <term>]*\n     * <term>          ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>        ::= <integer> | <variable> | (<b-expression>)\n     * ```\n     * The option of parenthesized b-expressions as a possible b-factor\n     * is removed, and the relation as a legal form of b-factor is added.\n     * There is one subtle but crucial difference, which is what makes\n     * the whole thing work. Notice that in `<relation>` the relop and\n     * the second expression are OPTIONAL.\n     *\n     * A strange consequence of this grammar (and one shared by C) is\n     * that EVERY expression is potentially a Boolean expression.\n     */\n\n    /**\n     * 6.6 The parser\n     * ---------------\n     * Now that we’ve gotten through the decision-making process, we can\n     * press on with development of a parser.\n     *\n     * ### 6.6.1 Boolean literal 1 ###\n     * We begin, as we did in the arithmetic case, by dealing only with\n     * Boolean literals rather than variables.\n     * We begin with a fresh copy of the cradle, and begin adding\n     * procedures one by one.\n     *\n     * Try with `t`, `f` or anything else.\n     */\n    var booleanLiteral1 = cradle.extend({\n\n        // Recognize a boolean literal.\n        isBoolean: function (c) {\n            c = c.toUpperCase();\n            return c === 'T' || c === 'F';\n        },\n\n        // Get a boolean literal.\n        getBoolean: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            var result = this.look.toUpperCase() === 'T';\n            this.getChar();\n            return result;\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            io.writeLn(this.getBoolean());  // <-- for testing purposes\n        }\n    });\n\n    /**\n     * ### 6.6.2 Boolean literal 2 ###\n     * The usual way to encode Boolean variables is to let `0` stand for\n     * `FALSE`, and some other value for `TRUE` (e.g. `1` for C).\n     * Here `FFFF` hex (or `-1`) is chosen for TRUE, because a *bitwise NOT*\n     * also becomes a *Boolean NOT*.\n     *\n     * **In BNF**\n     * ```\n     * <b-expression>  ::= <b-literal>\n     * ```\n     * Try again with `t`, `f` or anything else.\n     */\n    var booleanLiteral2 = booleanLiteral1.extend({\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');    // -1 stands for TRUE\n            } else {\n                this.emitLn('CLR D0');          // 0 stands for FALSE\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.boolExpression();              // <--\n        }\n    });\n\n    /**\n     * ### 6.6.3 OR operation ###\n     * We already have the **BNF** rule:\n     * ```\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term> ::= <b-literal>\n     * ```\n     * Here the **orop*s `OR` and `XOR` are encoded with `|` and `~`.\n     *\n     * Try some combinations such as `t|f` and `f~t`, etc.\n     * The output code is starting to look pretty good.\n     */\n    var orOperation = booleanLiteral2.extend({\n\n        // Recognize a boolean orop.\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Parse and translate a boolean term.\n        // Rename from previous boolExpression().\n        boolTerm: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Recognize and translate a boolean OR.\n        boolOr: function () {\n            this.match('|');\n            this.boolTerm();\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // Recognize and translate an exclusive or (XOR).\n        boolXor: function () {\n            this.match('~');\n            this.boolTerm();\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Parse and translate a boolean expression.\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.look)) {\n                this.emitLn('MOVE D0, -(SP)');  // push D0\n                switch (this.look) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.4 AND operation ###\n     * You’ve probably already guessed what the next step is:\n     * The Boolean version of Term.\n     *\n     * **In BNF**\n     * ```\n     * <b-term> ::= <not-factor> [AND <not-factor>]*\n     * <not-factor> :== <b-literal>\n     * ```\n     * Here the `AND` operator is encoded with `&`.\n     *\n     * Try some combinations such as `t&f` or `t|f&t`, etc.,\n     * and notice the precedence of AND and OR.\n     */\n    var andOperation = orOperation.extend({\n\n        // Parse and translate a boolean factor with NOT.\n        // Rename from previous boolTerm().\n        notFactor: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Parse and translate a boolean term.\n        boolTerm: function () {\n            this.notFactor();\n            while (this.look === '&') {\n                this.emitLn('MOVE D0, -(SP)');\n                this.match('&');\n                this.notFactor();\n                this.emitLn('AND (SP)+, D0');\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.5 NOT operation ###\n     * The next step is to allow for the NOT.\n     *\n     * **In BNF**\n     * ```\n     * <not-factor> ::= [NOT] <b-factor>\n     * <b-factor> ::= <b-literal>\n     * ```\n     * The `NOT` operator is encoded with `!`.\n     *\n     * Try some combinations as well, such as `!t`, `t&!f`, etc.\n     */\n    var notOperation = andOperation.extend({\n\n        // Parse and translate a boolean factor.\n        // Rename for previous notFactor().\n        boolFactor: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Parse and translate a boolean factor with NOT.\n        notFactor: function () {\n            if (this.look === '!') {\n                this.match('!');\n                this.boolFactor();\n                this.emitLn('EOR #-1, D0');\n            } else {\n                this.boolFactor();\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.6 Expand the factor ###\n     * It takes just a one line addition to `boolFactor` to take care\n     * of relations.\n     *\n     * **In BNF**\n     * ```\n     * <b-factor> ::= <b-literal> | <relation>\n     * ```\n     * The compiler itself can’t tell the difference between a Boolean\n     * variable or expression and an arithmetic one...\n     * all of those will be handled by Relation, either way.\n     *\n     * Now we can handle for example `a&f`, `!a|b&t`, etc.\n     */\n    var expandTheFactor = notOperation.extend({\n\n        // Parse and translate a relation.\n        // This version is a dummy.\n        relation: function () {\n            this.emitLn('<relation ' + this.getName() + '>');\n        },\n\n        // Parse and translate a boolean factor.\n        boolFactor: function () {\n            if (this.isBoolean(this.look)) {        // <--\n                if (this.getBoolean()) {\n                    this.emitLn('MOVE #-1, D0');\n                } else {\n                    this.emitLn('CLR D0');\n                }\n            } else {                                // <--\n                this.relation();                    // <--\n            }\n        }\n    });\n\n    /**\n     * ###6.6.7 Full-blown relation ###\n     * let’s move on to the full-blown version of `<relation>`.\n     * ```\n     * <relation> ::= <expression> [<relop> <expression>]\n     * ```\n     * Because of the single-character limitation, we're sticking to the\n     * four operators equals `=`, not equals `#`, less than `<` and\n     * greater than `>`.\n     *\n     * Try some code such as `a>b`, `a#b`, and `a>b&b>c`, etc.\n     */\n    var fullBlownRelation = expandTheFactor.extend({\n\n        // Recognize a relop.\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize and translate a relational \"equals\".\n        equals: function () {\n            this.match('=');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SEQ D0');\n        },\n\n        // Recognize and translate a relational \"not equals\".\n        notEquals: function () {\n            this.match('#');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SNE D0');\n        },\n\n        // Recognize and translate a relational \"less than\".\n        less: function () {\n            this.match('<');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SGE D0');\n        },\n\n        // Recognize and translate a relational \"greater than\".\n        greater: function () {\n            this.match('>');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SLE D0');\n        },\n\n        // Parse and translate a relation.\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.look)) {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '=':\n                    this.equals();\n                    break;\n                case '#':\n                    this.notEquals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n                this.emitLn('TST D0');\n            }\n        },\n\n        // Parse and translate an expression.\n        // This version is a dummy.\n        expression: function () {\n            this.emitLn('<Expression ' + this.getName() + '>');\n        }\n    });\n\n    /**\n     * ### 6.6.8 Merging with expressions ###\n     * We have already generated code for Expression and its buddies in\n     * previous sessions.\n     *\n     * **After merging, the syntax in BNF**\n     * ```\n     * ----- boolean expressions -----\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term>       ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>   ::= [NOT] <b-factor>\n     * <b-factor>     ::= <b-literal> | <relation>\n     * <relation>     ::= <expression> [<relop> <expression>]\n     * ----- arithmetic expressions -----\n     * <expression>   ::= [<unary op>] <term> [<addop> <term>]*\n     * <term>         ::= <factor> |<mulop> <factor>|*\n     * <factor>       ::= <number> | (<expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     * Now we have a parser that can handle both arithmetic AND Boolean\n     * algebra, and things that combine the two through the use of relops.\n     *\n     * Try some combinations such as `1<2`, `a>1+2`, `a>b+1&a#1`, etc.\n     * Howerver, does `(t|f)` produce an error?\n     */\n    //{\n    var mergingWithExpressions = $.extend(\n        true,   // deep copy\n        {},     // empty target\n\n        // 3.5\n        moreExpressions.assignmentStatements,\n\n        // 6.6.7\n        fullBlownRelation,\n\n        // 3.5\n        {\n            expression : moreExpressions.assignmentStatements.expression\n        }\n    );\n    //}\n\n    /**\n     * ### 6.6.9 Change to latest expression syntax ###\n     * The procedures are changed a little to make them correspond to\n     * the latest version of the syntax.\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> <factor>]*\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * ```\n     */\n    var changeToLatestExpressionSyntax = mergingWithExpressions.extend({\n\n        // parse and translate an expression.\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term.\n        term: function () {\n            this.signedFactor();                // <--\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate the first math factor.\n        signedFactor: function () {\n            if (this.look === '+') {\n                this.getChar();\n            }\n\n            if (this.look === '-') {\n                this.getChar();\n                if (this.isDigit(this.look)) {\n                    this.emitLn('MOVE #-' + this.getNum() + ', D0');\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Parse and translate a math factor.\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();              // <--\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ', D0');\n            }\n        }\n    });\n\n    /**\n     * 6.7 Merging with control constructs\n     * ------------------------------------\n     * Remember those little dummy procedures called `condition` and\n     * `expression` in the control constructs? Now we know what goes\n     * in their places.\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * <statement> ::= <control-statement> | <b-expression>\n     * ```\n     * Try `ia=bxlyeze` which stands for\n     * ```\n     * IF a=b\n     *     X\n     * ELSE\n     *     Y\n     * ENDIF\n     * Z\n     * END\n     * ```\n     * What do you think? Did it work? Try some others.\n     */\n    //{\n    var mergingWithControlConstructs = $.extend(\n        true,   // deep copy\n        {},     // empty target\n\n        // 6.6.9\n        changeToLatestExpressionSyntax,\n\n        // 5.10\n        controlConstructs.theBreakStatement,\n\n        // 6.6.9\n        {\n            condition: changeToLatestExpressionSyntax.boolExpression,\n            expression: changeToLatestExpressionSyntax.expression,\n            other: changeToLatestExpressionSyntax.boolExpression\n        }\n    );\n    //}\n\n    /**\n     * 6.8 Adding assignments\n     * -----------------------\n     * The one-line \"programs\" that we’re having to write here\n     * will really cramp our style. So we extend the parser to accept\n     * multiple-line *programs*.\n     * The only restriction here is that we can’t\n     * separate an `IF` or `WHILE` token from its predicate.\n     * ```\n     * <statement> ::= <control-statement> | <assignment>\n     * <assignment> ::= <identifier> = <b-expression>\n     * ```\n     * Note that `assignment` now calls `boolExpression`, so that we\n     * can assign Boolean variables.\n     *\n     * You should now be able to write reasonably realistic-looking\n     * programs, subject only to our limitation on single-character tokens.\n     * Try some code using the editor, for example\n     * ```\n     * c=1\n     * s=0\n     * wc<9\n     * s=s+c\n     * c=c+1\n     * e\n     * e\n     * ```\n     * which stands for\n     * ```\n     * COUNTER = 1\n     * SUM = 0\n     * WHILE COUNTER < 9\n     *     SUM = SUM + COUNTER\n     *     COUNTER = COUNTER + 1\n     * ENDWHILE\n     * END\n     * ```\n     * Try some others and remember that we have reserved **keywords**\n     * `b`, `d`, `e`, `f`, `i`, `l`, `p`, `r`, `u`, `w`\n     * which stand for BREAK, DO, END[XX], FOR, IF, ELSE,\n     * LOOP, REPEAT, UNTIL, and WHILE, respectively.\n     */\n    var addingAssignments = mergingWithControlConstructs.extend({\n\n        // Skip a CRLF.\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Recognize and translate a statement block.\n        block: function (label) {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                this.fin();             // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf(label);\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':\n                    this.doDo();\n                    break;\n                case 'b':\n                    this.doBreak(label);\n                    break;\n                default:\n                    this.assignment();  // <--\n                }\n                this.fin();             // <--\n            }\n        },\n\n        // Parse and translate an assignment statement.\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.boolExpression();      // <--\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        }\n    });\n\n    /**\n     * 6.9 Conclusion\n     * ---------------\n     * Final results of this chapter in BNF\n     *\n     * **Program**\n     * ```\n     * <program>        ::= <block> END\n     * <block>          ::= [<statement>]*\n     * <statement>      ::= <if> | <while> | <loop> | <repeat> |<for> |\n     *                      <do> | <break> | <assignment>\n     * ```\n     * **Control statements**\n     * ```\n     * <if statement>     ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <while statement>  ::= WHILE <condition> <block> ENDWHILE\n     * <loop statement>   ::= LOOP <block> ENDLOOP\n     * <repeat statement> ::= REPEAT <block> UNTIL <conditon>\n     * <for statement>    ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * <do statement>     ::= DO <expression> <block> ENDDO\n     * <break statement>  ::= BREAK\n     * ```\n     * **Assignment statement**\n     * ```\n     * <assignment statement> ::= <identifier> = <b-expression>\n     * ```\n     * **Boolean expressions**\n     * ```\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term>       ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>   ::= [NOT] <b-factor>\n     * <b-factor>     ::= <b-literal> | <relation>\n     * <relation>     ::= <expression> [<relop> <expression>]\n     * ```\n     * **Arithmetic expressions**\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> <factor>]*\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     */\n\n    return {\n\n        // 6.6.1\n        booleanLiteral1: booleanLiteral1,\n\n        // 6.6.2\n        // <b-expression> ::= <b-literal>\n        booleanLiteral2: booleanLiteral2,\n\n        // 6.6.3\n        // <b-expression> ::= <b-term> [<orop> <b-term>]*\n        // <b-term>       ::= <b-literal>\n        orOperation: orOperation,\n\n        // 6.6.4\n        // <b-term>       ::= <not-factor> [AND <not-factor>]*\n        // <not-factor>   ::= <b-literal>\n        andOperation: andOperation,\n\n        // 6.6.5\n        // <not-factor>   ::= [NOT] <b-factor>\n        // <b-factor>     ::= <b-literal>\n        notOperation: notOperation,\n\n        // 6.6.6\n        // <b-factor>     ::= <b-literal> | <relation>\n        expandTheFactor: expandTheFactor,\n\n        //6.6.7\n        // <relation>     ::= <expression> [<relop> <expression>]\n        fullBlownRelation: fullBlownRelation,\n\n        /**\n         * 6.6.8\n         * No new codes after merging, the syntax in BNF:\n         * ----- boolean expressions -----\n         * <b-expression> ::= <b-term> [<orop> <b-term>]*\n         * <b-term>       ::= <not-factor> [AND <not-factor>]*\n         * <not-factor>   ::= [NOT] <b-factor>\n         * <b-factor>     ::= <b-literal> | <relation>\n         * <relation>     ::= <expression> [<relop> <expression>]\n         * ----- arithmetic expressions -----\n         * <expression>   ::= [<unary op>] <term> [<addop> <term>]*\n         * <term>         ::= <factor> |<mulop> <factor>|*\n         * <factor>       ::= <number> | (<expression>) | <identifier>\n         * <identifier>   ::= <variable> | <function>\n         */\n        mergingWithExpressions: mergingWithExpressions,\n\n        // 6.6.9\n        // <expression>   ::= <term> [<addop> <term>]*\n        // <term>         ::= <signed factor> [<mulop> <factor>]*\n        // <factor>       ::= <number> | (<b-expression>) | <identifier>\n        changeToLatestExpressionSyntax: changeToLatestExpressionSyntax,\n\n        // 6.7\n        // <program>      ::= <block> END\n        // <block>        ::= [<statement>]*\n        // <statement>    ::= <control-statement> | <b-expression>\n        mergingWithControlConstructs: mergingWithControlConstructs,\n\n        // 6.8\n        // <statement>    ::= <control-statement> | <assignment>\n        // <assignment>   ::= <identifier> = <b-expression>\n        addingAssignments: addingAssignments\n    };\n});\n\r\n/*global define*/\n\n/**\n * Chapter 7 Lexical Scanning\n * ===========================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    var enumerate = cradle.enumerate;\n\n    /**\n     * 7.1 Introduction\n     * -----------------\n     * In the previous chapter we have a compiler that would ALMOST work,\n     * except that we were still limited to single-character tokens.\n     * To get rid of that restriction,\n     * we must deal with the concept of the *lexical scanner*.\n     *\n     * Why?\n     */\n\n    /**\n     * 7.2 Lexical scanning\n     * ----------------------\n     * **Compiler**\n     * ```\n     *  - Text editor     -> [stream of input characters]\n     * -> Lexical scanner -> [stream of input tokens]\n     * -> Parser (could be in one module) -> [object code]\n     * ```\n     *\n     * **Chomsky Hierarchy of grammars** (in 1956)\n     * ```\n     * Type 0: Unrestricted (e.g. English)\n     * Type 1: Context-Sensitive (older, e.g. Fortran)\n     * Type 2: Context-Free (modern)\n     * Type 3: Regular (modern)\n     * ```\n     *\n     * The neat part about these two types is that there are very specific ways\n     * to parse them.\n     * ```\n     * Type 3 - Regular grammar: an abstract machine called\n     *          the state machine (finite automaton)\n     * Type 2 - Context-free: push-down automaton\n     *          (a state machine augmented by a stack)\n     * ```\n     * **Regular expression** is the lower-level parts of real, practical grammars,\n     * such as\n     * ```\n     * <identifier> ::= <letter> [<letter> | <digit>]*\n     * ```\n     */\n\n    /**\n     * 7.3 State machines and alternatives\n     * ------------------------------------\n     * - **Regular expressions** can be parsed by a state machine.\n     *\n     * - **State machine:** integers (current state), table of\n     *   actions, input chars\n     *\n     * - **LEX output:** a state machine + table of actions crspd.\n     *   to input grammar\n     * - **YACC output:** a canned table-driven parser + table crspd.\n     *   to lang syntax\n     */\n\n    /**\n     * 7.4 Some experiments in scanning\n     * ---------------------------------\n     * Let’s begin with the two definitions most often seen in real programming\n     * languages:\n     * ```\n     * <identifier> ::= <letter> [<letter> | <digit>]*\n     * <number> ::= [<digit>]+\n     * ```\n     * Let’s begin (as usual) with a bare cradle.\n     */\n    var someExperimentsInScanning = cradle.extend({\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = '';\n            while (this.isAlNum(this.look)) {\n                name += this.look.toUpperCase();\n                this.getChar();\n            }\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = '';\n            while (this.isDigit(this.look)) {\n                num += this.look;\n                this.getChar();\n            }\n            return num;\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            io.writeLn(this.getName());     // <-- for testing purposes\n        }\n    });\n\n    /**\n     * 7.5 White space\n     * ----------------\n     * Run the program, and note how the input string is, indeed, separated\n     * into distinct tokens.\n     */\n    var whiteSpace = someExperimentsInScanning.extend({\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = '';\n            while (this.isAlNum(this.look)) {\n                name += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();                       // <--\n            return name;\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = '';\n            while (this.isDigit(this.look)) {\n                num += this.look;\n                this.getChar();\n            }\n            this.skipWhite();                       // <--\n            return num;\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            var result;\n\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n            return result;\n        },\n\n        // Main program.\n        main: function () {\n            var token;\n\n            this.init();\n            do {\n                token = this.scan();                // <--\n                io.writeLn(token);                  // <\n            } while (token !== this.LF);            // <\n        }\n    });\n\n    /**\n     * 7.6 State machines\n     * -------------------\n     * A parse routine like `getName()` does indeed implement a state machine.\n     *\n     * **Syntax diagram (railroad-track diagram)**\n     * ```\n     *          |-----> Other---------------------------> Error\n     *          |\n     *  Start -------> Letter ---------------> Other -----> Finish\n     *          ^                        V\n     *          |                        |\n     *          |<----- Letter <---------|\n     *          |                        |\n     *          |<----- Digit  <----------\n     * ```\n     * The `SkipWhite()`, `getNum()`, and `scan()` are also state machines.\n     * Little machines make big machines.\n     * This is an implicit approach opposed to table-driven (explicite) one.\n     */\n\n    /**\n     * 7.7 Newlines\n     * -------------\n     * Moving right along, let’s modify our scanner to handle more than one line.\n     *\n     * To do this, simply modify the single executable line of `isWhite`.\n     * We need to give the main program a new stop condition.\n     * Let’s just use until token = `.`.\n     *\n     * Try a couple of lines, terminated by the period.\n     */\n    var newlines = whiteSpace.extend({\n\n        // Recognize white space.\n        // isWhite: function (c) {\n        //     return c === ' ' || c === this.TAB ||\n        //            c === this.CR || c === this.LF;      // <--\n        // },\n\n        // Skip a CRLF. (copy from sec. 6.8)\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            var token;\n\n            this.init();\n            do {\n                while (this.look === this.LF) {         // <--\n                    this.fin();                         // <\n                }                                       // <\n                token = this.scan();\n                io.writeLn(token);\n            } while (token !== '.');                    // <--\n        }\n    });\n\n    /**\n     * 7.8 Operators\n     * --------------\n     * We can handle operators very much the same way as the other tokens.\n     * Try the program now.\n     * Any code fragments will be neatly broken up into individual tokens.\n     */\n    var operators = newlines.extend({\n\n        // Recognize any operator.\n        isOp: function (c) {\n            return c === '+' || c === '-' || c === '*' || c === '/' ||\n                   c === '<' || c === '>' || c === ':' || c === '=';\n        },\n\n        // Get an operator.\n        getOp: function () {\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n\n            var op = '';\n            while (this.isOp(this.look)) {\n                op += this.look;\n                this.getChar();\n            }\n            return op;\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            var result;\n\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else if (this.isOp(this.look)) {      // <--\n                result = this.getOp();              // <\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n            return result;\n        }\n    });\n\n    /**\n     * 7.9 Lists, commas and command lines\n     * ------------------------------------\n     */\n    var listsCommasAndCommandLines = operators.extend({\n\n        // Skip over a comma.\n        skipComma: function () {\n            this.skipWhite();\n            if (this.look === ',') {\n                this.getChar();\n                this.skipWhite();\n            }\n        },\n\n        // Lexical scanner.\n        // Change skipWhite() to skipComma() temporarily.\n        scan: function () {\n            var result;\n\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else if (this.isOp(this.look)) {\n                result = this.getOp();\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipComma();                   // <-- change TEMPORARILY\n            return result;\n        }\n    });\n\n    /**\n     * 7.10 Getting fancy\n     * -------------------\n     * One of the first things we’re going to need is a way to identify keywords.\n     *\n     * ### 7.10.1 ###\n     * Try `if`, `else`, `endif` `end` or anything else.\n     */\n    var gettingFancy = listsCommasAndCommandLines.extend({\n\n        // Definition of keywords and token types.\n        // { IF: 0, ELSE: 1, ... }\n        keywordType: enumerate(['IF', 'ELSE', 'ENDIF', 'END']),\n\n        // Main program.\n        main: function () {\n            var token = io.readLn().toUpperCase();  // <-- temporarily changed\n            io.writeLn(this.keywordType[token]);    // <-- temp...\n        }\n    });\n\n    /**\n     * ### 7.10.2 Returning codes ###\n     * Now that we can recognize keywords, the next thing is to arrange to\n     * return codes for them.\n     *\n     * Try some arbitrary code finished with `end`, such as\n     * ```\n     * if test >= 25\n     *     ans1 = 35\n     * else\n     *     sum += 1\n     * endif\n     * end\n     * ```\n     */\n    var returningCodes = gettingFancy.extend({\n\n        // Type declarations.\n        symType: enumerate(['ifSym', 'elseSym', 'endifSym', 'endSym',\n                'ident', 'number', 'operator']),\n\n        // variable declarations.\n        token: 0,   // current token (symType)\n        value: '',  // string token of look\n\n        // Lexical scanner.\n        scan: function () {\n            var k;\n\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.value = this.getName();\n                k = this.keywordType[this.value];\n                this.token = k === undefined ? this.symType.ident : k;\n            } else if (this.isDigit(this.look)) {\n                this.value = this.getNum();\n                this.token = this.symType.number;\n            } else if (this.isOp(this.look)) {\n                this.value = this.getOp();\n                this.token = this.symType.operator;\n            } else {\n                this.value = this.look;\n                this.token = this.symType.operator;\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                this.scan();\n\n                switch (this.token) {\n                case this.symType.ident:\n                    io.write('Ident    : ');\n                    break;\n                case this.symType.number:\n                    io.write('Number   : ');\n                    break;\n                case this.symType.operator:\n                    io.write('Operator : ');\n                    break;\n                case this.symType.ifSym:        // fall through\n                case this.symType.elseSym:      // fall through\n                case this.symType.endifSym:     // fall through\n                case this.symType.endSym:\n                    io.write('Keyword  : ');\n                    break;\n                }\n                io.writeLn(this.value);\n            } while (this.token !== this.symType.endSym);\n        }\n    });\n\n    /**\n     * ### 7.10.3 Cleanup with global ###\n     * We can simplify things a bit by letting\n     * `getName()`, `getNum()`, and `getOp()` becomes procedures,\n     * and use globle variables (value and token) to eliminate the local copies.\n     *\n     * This program should work the same as the previous version.\n     */\n    var cleanupWithGlobal = returningCodes.extend({\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var k;\n            this.value = '';\n\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            k = this.keywordType[this.value];  // copy from previous scan()\n            this.token = k === undefined ? this.symType.ident : k;  // copy\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            this.value = '';\n            while (this.isDigit(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = this.symType.number;   // copy from previous scan()\n        },\n\n        // Get an operator.\n        getOp: function () {\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n\n            this.value = '';\n            while (this.isOp(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = this.symType.operator; // copy from previous scan()\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else if (this.isOp(this.look)) {\n                this.getOp();\n            } else {\n                this.value = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n        }\n    });\n\n    /**\n     * 7.11 Returning a character\n     * ---------------------------\n     * There is another simple type that can be returned as a code: the character.\n     * A character is as good a variable for encoding the different token types.\n     *\n     * This program should work the same as the previous version.\n     */\n    var returningACharacter = cleanupWithGlobal.extend({\n\n        // Instead of symType, use keywordCode.\n        keywordCode: 'xilee',\n        keywordType: enumerate(['IF', 'ELSE', 'ENDIF', 'END'], 1),  // <--\n\n        // Get an identifier.\n        getName: function () {\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var index;\n            this.value = '';\n\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            index = this.keywordType[this.value] || 0;      // <--\n            this.token = this.keywordCode.charAt(index);    // <--\n        },\n\n        // Get a number.\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            this.value = '';\n            while (this.isDigit(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = '#';                               // <--\n        },\n\n        // Get an operator.\n        getOp: function () {\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n\n            this.value = '';\n            while (this.isOp(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            if (this.value.length === 1) {                  // <--\n                this.token = this.value;                    // <\n            } else {                                        // <\n                this.token = '?';                           // <\n            }\n        },\n\n        // Lexical scanner.\n        scan: function () {\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            this.skipWhite();\n\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else if (this.isOp(this.look)) {\n                this.getOp();\n            } else {\n                this.value = this.look;\n                this.token = '?';                           // <--\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                this.scan();\n\n                switch (this.token) {\n                case 'x':\n                    io.write('Ident ');\n                    break;\n                case '#':\n                    io.write('Number ');\n                    break;\n                case 'i':    // fall through\n                case 'l':    // fall through\n                case 'e':\n                    io.write('Keyword ');\n                    break;\n                default:\n                    io.write('Operator ');\n                }\n                io.writeLn(this.value);\n            } while (this.value !== 'END');\n        }\n    });\n\n    /**\n     * 7.12 Distributed vs centralized scanners\n     * -----------------------------------------\n     * The structure for the lexical scanner here is very conventional,\n     * and about 99% of all compilers use something very close to it.\n     * This is not, however, the only possible structure.\n     *\n     * The problem with the conventional approach is that the scanner has no\n     * knowledge of **context**. For example, it can’t distinguish between the\n     * assignment operator `=` and the relational operator `=`......\n     *\n     * The alternative is to seek some way to use the contextual information that\n     * comes from knowing where we are in the parser.\n     * This leads us back to the notion of a distributed scanner...\n     */\n\n    // No code for 7.12\n\n    // 7.13 Merging scanner and parser\n    // --------------------------------\n    // In file: 7.13-kiss.js\n\n\n    return {\n\n        // 7.4\n        someExperimentsInScanning: someExperimentsInScanning,\n\n        // 7.5\n        whiteSpace: whiteSpace,\n\n        // 7.7\n        newlines: newlines,\n\n        // 7.8\n        operators: operators,\n\n        // 7.9\n        listsCommasAndCommandLines: listsCommasAndCommandLines,\n\n        // 7.10.1\n        gettingFancy: gettingFancy,\n\n        // 7.10.2\n        returningCodes: returningCodes,\n\n        // 7.10.3\n        cleanupWithGlobal: cleanupWithGlobal,\n\n        // 7.11\n        returningACharacter: returningACharacter\n    };\n\n});\n\r\n/*global define*/\n\n/**\n * Chapter 7.13 Merging Scanner and Parser\n * ---------------------------------------\n * Program kiss\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var enumerate = object.enumerate,\n        judiciousCopying,           // 7.13.1\n        mergingScannerAndParser;    // 7.13.2\n\n\n    /**\n     * 7.13 Merging scanner and parser\n     * --------------------------------\n     * Now that we’ve covered all of the theory and general aspects of lexical\n     * scanning that we’ll be needing. We can accomodate multi-character tokens\n     * with minimal change to our previous work.\n     *\n     * To keep things short and simple here we allowing only one control construct\n     * (the `IF`) and no Boolean expressions. That’s enough to demonstrate the\n     * parsing of both keywords and expressions.\n     *\n     * ### 7.13.1 Judicious copying ###\n     * All the elements of the program to parse this subset, using\n     * **single-character** tokens, exist already in our previous programs.\n     *\n     * **A short list of the program KISS**\n     * ```\n     * const: TAB, CR, LF\n     * variable: look, lCount\n     * function: getChar, error, abort, expected,\n     *           isAlpha, isDigit, isAlNum, isAddop, isMulop, isWhite\n     *           skipWhite, match, fin, getName, getNum,\n     *           newLabel, postLabel, emit, emitLn\n     *           identifier, expression, signedFactor, multiply, divide\n     *           term1, term, firstTerm, add, subtract\n     *           expression, condition\n     *           doIf, assignment, block, doProgram,\n     *           init, main\n     * ```\n     *\n     * Some improvement of the arithmetic expressions is included:\n     *\n     * **in 2.8** we have\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * <term> ::= <factor> |<mulop> <factor>|*\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     * ** in 6.6.9** we have\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     * and the **improved version** here (only first term allows `<signed factor>`)\n     * ```\n     * <expression>      ::= <first term> [<addop> <term>]*\n     * <first term>      ::= <signed factor> <term 1>\n     * <term>            ::= <factor> <term 1>\n     * <term 1>          ::= [<mulop> <factor>]*\n     * <signed factor>   ::= [<addop>] <factor>\n     * <factor>          ::= <number> | (<expression>) | <identifier>\n     * <identifier>      ::= <variable> | <function>\n     * ```\n     *\n     * The structure of program looks like\n     * ```\n     * <program>         ::= <block> END\n     * <block>           ::= [<statement>]*\n     * <statement>       ::= <if> | <assignment>\n     * <if statement>    ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <assignment stmt> ::= <identifier> = <expression>\n     * ```\n     * where `<condition>` is a dummy version here.\n     *\n     * Before we proceed to adding the scanner, verify that it does indeed\n     * parse things correctly. For example\n     * ```\n     * a = 5\n     * i\n     *     b = a + 1\n     * l\n     *     b = -2 * a\n     * e\n     * e\n     * ```\n     * Don’t forget the \"codes\": `i` for IF, `l` for ELSE,\n     * and `e` for END or ENDIF.\n     */\n    judiciousCopying = object.extend({\n\n        // Constant declarations\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations\n        look: '',   // lookahead character\n        lCount: 0,  // label counter\n\n        // Read new character from input\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Recognize an alpha character\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character\n        match: function (x) {\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n\n            this.getChar();\n            this.skipWhite();                   // <--\n        },\n\n        // Skip a CRLF\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n            this.skipWhite();                   // <--\n        },\n\n        // Get an identifier\n        getName: function () {\n            while (this.look === this.LF) {     // <--\n                this.fin();                     // <\n            }                                   // <\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            var name = this.look.toUpperCase();\n            this.getChar();\n            this.skipWhite();   // <--\n            return name;\n        },\n\n        // Get a number\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            var num = this.look;\n            this.getChar();\n            this.skipWhite();                   // <--\n            return num;\n        },\n\n        // Generate a unique label\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n         // Output a string with tab\n        emit: function (str) {\n            io.write(this.TAB + str);\n        },\n\n        // Output a string with tab and newline\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Parse and translate an identifier\n        identifier: function () {\n            var name = this.getName();\n\n            if (this.look === '(') {\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + name);\n            } else {\n                this.emitLn('MOVE ' + name + '(PC), D0');\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        },\n\n        // Parse and translate the first math factor\n        signedFactor: function () {\n            var signed = this.look === '-';\n\n            if (this.isAddop(this.look)) {\n                this.getChar();\n                this.skipWhite();\n            }\n\n            if (signed) {\n                if (this.isDigit(this.look)) {\n                    this.emitLn('MOVE #-' + this.getNum() + ', D0');\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Recognize and translate a multiply\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Recognize and translate a divide\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Parse and translate a math term\n        term1: function () {\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            this.factor();                  // <--\n            this.term1();                   // <\n        },\n\n        // Parse and translate a math term with possible leading sing\n        firstTerm: function () {\n            this.signedFactor();            // <--\n            this.term1();                   // <\n        },\n\n        // Recognize and translate an add\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Recognize and translate a subtract\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // parse and translate an expression\n        expression: function () {\n            this.firstTerm();               // <--\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean condition\n        // This version is a dummy\n        condition: function () {\n            this.emitLn('<condition>');\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label1, label2;\n\n            this.match('i');\n            this.condition();\n            label1 = label2 = this.newLabel();\n            this.emitLn('BEQ ' + label1);\n            this.block();\n\n            if (this.look === 'l') {\n                this.match('l');\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.match('e');\n            this.postLabel(label2);\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case this.LF:\n                    while (this.look === this.LF) {\n                        this.fin();\n                    }\n                    break;\n                default:\n                    this.assignment();\n                }\n            }\n        },\n\n        // Parse and translate a program\n        doProgram: function () {\n            this.block();\n            if (this.look !== 'e') {\n                this.expected('End');\n            }\n            this.emitLn('END');\n        },\n\n        // Initialize\n        init: function () {\n            this.lCount = 0;\n            this.getChar();\n        },\n\n        // Main program\n        main: function () {\n            this.init();\n            this.doProgram();\n        }\n    });\n\n    /**\n     * ### 7.13.2 Merging scanner and parser ###\n     * Compare this program with its single-character counterpart.\n     *\n     * Now we have a compiler that can deal with code such as\n     * ```\n     * foo = 50\n     * if\n     *     bar = foo + 16\n     * else\n     *     bar = -25 * foo\n     * endif\n     * foo = foo + 10\n     * end\n     * ```\n     * We are very close to having all the elements that we need to build a real,\n     * functional compiler. There are still a few things missing, notably\n     * procedure calls and type definitions.\n     */\n    mergingScannerAndParser = judiciousCopying.extend({\n\n        // Variable declarations\n        token: '',      // encoded token\n        value: '',      // unencoded token\n\n        //\n        keywordCode: 'xilee',\n        keywordType: enumerate(['IF', 'ELSE', 'ENDIF', 'END'], 1),\n\n        // Get an identifier\n        getName: function () {\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            this.value = '';\n            while (this.isAlNum(this.look)) {           // <--\n                this.value += this.look.toUpperCase();  // <\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Get a number\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n\n            this.value = '';\n            while (this.isDigit(this.look)) {           // <--\n                this.value += this.look;                // <\n                this.getChar();\n            }\n            this.token = '#';                           // <\n            this.skipWhite();\n        },\n\n        // Get an identifier and scan it for keywords\n        scan: function () {\n            this.getName();\n            var index = this.keywordType[this.value] || 0;\n            this.token = this.keywordCode.charAt(index);\n        },\n\n        // Match a specific input string\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n        },\n\n        // Parse and translate an identifier\n        identifier: function () {\n            this.getName();                             // <--\n            if (this.look === '(') {\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + this.value);       // <--\n            } else {\n                this.emitLn('MOVE ' + this.value + '(PC), D0');   // <--\n            }\n        },\n\n        // Parse and translate the first math factor\n        signedFactor: function () {\n            var signed = this.look === '-';\n\n            if (this.isAddop(this.look)) {\n                this.getChar();\n                this.skipWhite();\n            }\n\n            if (signed) {\n                if (this.isDigit(this.look)) {\n                    this.getNum();                                // <--\n                    this.emitLn('MOVE #-' + this.value + ', D0'); // <\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.getNum();\n                this.emitLn('MOVE #' + this.value + ' ,D0');\n            }\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label1, label2;\n\n            this.condition();\n            label1 = label2 = this.newLabel();\n            this.emitLn('BEQ ' + label1);\n            this.block();\n\n            if (this.token === 'l') {                   // <--\n                label2 = this.newLabel();\n                this.emitLn('BRA ' + label2);\n                this.postLabel(label1);\n                this.block();\n            }\n\n            this.postLabel(label2);\n            this.matchString('ENDIF');                  // <--\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.value;                      // <--\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');    // <--\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            this.scan();                                // <--\n            while (this.token !== 'e' && this.token !== 'l') {  // <--\n                switch (this.token) {                   // <--\n                case 'i':\n                    this.doIf();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();                            // <--\n            }\n        },\n\n        // Parse and translate a program\n        doProgram: function () {\n            this.block();\n            this.matchString('END');                    // <--\n            this.emitLn('END');\n        }\n    });\n\n\n    return {\n        judiciousCopying: judiciousCopying,\n        mergingScannerAndParser: mergingScannerAndParser\n    };\n});\n\r\n/**\n * Chapter 8 A Little Philosophy\n * ==============================\n *\n * 8.1 Introduction\n * -----------------\n * About where we’re going with this series and some general thoughts\n * concerning the usefulness of what we’ve been doing.\n *\n * 8.2 The road home\n * -----------------\n * We have covered the parsing and translation of\n *\n * - arithmetic expressions\n * - Boolean expressions\n * - combinations connected by relational operators\n * - control constructs.\n *\n * We’ve leaned heavily on the use of **top-down, recursive descent**\n * parsing, **BNF** definitions of the syntax, and direct generation of\n * assembly-language code.\n *\n * To round out the series, we still have a few items to cover.\n * These include:\n *\n * - Procedure calls, with and without parameters\n * - Local and global variables\n * - Basic types, such as character and integer types\n * - Arrays\n * - Strings\n * - User-defined types and structures\n * - Tree-structured parsers and intermediate languages\n * - Optimization\n *\n * Two languages you will see in installments to come:\n *\n * - **TINY** A minimal, but usable language on the order of\n *   *Tiny BASIC* or *Tiny C*. It won’t be very practical,\n *   but it will have enough power to let you write and run real programs\n *   that do something worthwhile.\n *\n * - **KISS** intended to be a systems programming language.\n *   It won’t have strong typing or fancy data structures,\n *   but it will support most of the things to do with\n *   a higher order language (HOL).\n *\n * 8.3 Why is it so simple?\n * ------------------------\n * > Using the techniques we’ve used here, it is possible to build a\n * > production quality, working compiler without adding a lot of\n * > complexity to what we’ve already done.\n *\n * The areas that may have led to complexity in the past:\n *\n * - Limited RAM forcing multiple passes\n * - Batch processing\n * - Large programs\n * - Emphasis on efficiency\n * - Limited instruction sets\n * - Desire for generality\n *\n * 8.4 Conclusion\n * ---------------\n * So far, we’ve only looked at pieces of compilers,\n * and while we have many of the makings of a complete language,\n * we haven’t talked about how to put it all together.\n * That will be the subject of our next two installments.\n * Then we’ll press on into the new subjects listed at section 8.2.\n */\n\n// { No code in this chapter }\n\r\n/*global define*/\n\n/**\n * Chapter 9 A Top View\n * =====================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 9.1 Introduction\n     * -----------------\n     * Most people regard the top-down design approach as being better than\n     * the bottom-up one. The incremental approach that we’ve been using in\n     * all these tutorials is inherently bottom-up.\n     *\n     * We’ll consider languages such as C and Pascal, and see how complete\n     * compilers can be built starting from the top.\n     */\n\n    /**\n     * 9.2 The top level\n     * -----------------\n     * One of the biggest mistakes people make in a top-down design is\n     * failing to start at the true top.\n     *\n     * **In program design language (PDL)**, this top level looks something\n     * like:\n     * ```\n     * begin\n     *     solve the problem\n     * end\n     * ```\n     * Our problem is to compile a complete program. Any definition of the\n     * language, written in BNF, begins here.\n     *\n     * What does the top level BNF look like? Well, that depends quite a bit\n     * on the language to be translated. Let’s take a look at Pascal.\n     */\n\n    /**\n     * 9.3 The structure of Pascal\n     * ----------------------------\n     * Most texts for Pascal include a **BNF** or **railroad-track**\n     * definition of the language. Here are the first few lines of one\n     * ```\n     * <program> ::= <program-header> <block> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * <block> ::= <declarations> | <statements>\n     * ```\n     * we’ll use our familiar single-character tokens to represent the\n     * input, and start with a fresh copy of the Cradle (section 1.2).\n     * We’ll use a `p` to stand for `PROGRAM`, and let's start implement\n     * ```\n     * <program> ::= <program-header> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * ```\n     * The procedures `prolog` and `epilog` perform whatever is required\n     * to let the program interface with the operating system, so that\n     * it can execute as a program.\n     *\n     * At this point, there is only one legal input: `px.`\n     * which stands for\n     * ```\n     * PROGRAM X\n     * .\n     * ```\n     * where x is any single letter, the program name.\n     *\n     * There is one important thing to note: *THE OUTPUT IS A WORKING,\n     * COMPLETE, AND EXECUTABLE PROGRAM*\n     * This is very important. The nice feature of the top-down approach\n     * is that at any stage you can compile a subset of the complete\n     * language and get a program that will run on the target machine.\n     */\n    var theStructureOfPascal = cradle.extend({\n\n        // Parse and translate a program.\n        prog: function () {\n            var name;\n\n            this.match('p');        // <-- Handles program header part.\n            name = this.getName();  // <\n            this.prolog(name);\n            this.match('.');\n            this.epilog(name);\n        },\n\n        // Write the prolog.\n        prolog: function () {\n            this.emitLn('WARMST EQU $A01E');    // for SK*DOS\n        },\n\n        // Write the epilog.\n        epilog: function (name) {\n            this.emitLn('DC WARMST');           // SK*DOS\n            this.emitLn('END ' + name);\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            this.prog();\n        }\n    });\n\n    /**\n     * 9.4 Fleshing it out\n     * --------------------\n     * To flesh out the compiler, we only have to deal with language\n     * features one by one.\n     * ```\n     * <program> ::= <program-header> <block> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * <block> ::= <declarations> | <statements>\n     * ```\n     * where `declarations` and `statements` are null procedures.\n     *\n     * Try again `px.`, and does the program still run the same?\n     */\n    var fleshingItOut = theStructureOfPascal.extend({\n\n        // Post a label to output (copied from ch 5.3).\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        declarations: function () {},\n\n        statements: function () {},\n\n        // Parse and translate a Pascal block.\n        doBlock: function (name) {\n            this.declarations();\n            this.postLabel(name);\n            this.statements();\n        },\n\n        // Parse and translate a program.\n        prog: function () {\n            var name;\n            this.match('p');\n            name = this.getName();\n            this.prolog(name);\n            this.doBlock(name);             // <--\n            this.match('.');\n            this.epilog(name);\n        }\n    });\n\n    /**\n     * 9.5 Declarations\n     * -----------------\n     * **The BNF for Pascal declarations** is\n     * ```\n     * <declarations> ::= ( <label list>    |\n     *                      <constant list> |\n     *                      <type list>     |\n     *                      <variable list> |\n     *                      <procedure>     |\n     *                      <function>        )*\n     * ```\n     * As usual, let’s let a single character represent each of these\n     * declaration types. The `l`, `c`, `t`, `v`, `p` and `f` stand\n     * for labels, constants, types, variables, procedure and function,\n     * respectively.\n     *\n     * **Statement part in BNF**\n     * ```\n     * <statements> ::= <compound statement>\n     * <compound statement> ::= BEGIN <statement> (';' <statement>)* END\n     * ```\n     * **Procedure statements**\n     * ```\n     * <statement> ::= <simple statement> | <structured statement>\n     * <simple statement> ::= <assignment> | <procedure call> | null\n     * <structured statement> ::= <compound statement> |\n     *                            <if statement>       |\n     *                            <case statement>     |\n     *                            <while statement>    |\n     *                            <repeat statement>   |\n     *                            <for statement>      |\n     *                            <with statement>\n     * ```\n     * This is where the *top level* meets our *bottom-up approach* of\n     * previous sessions.\n     *\n     * The simplest form of input is now `pxbe.` which stands for\n     * ```\n     * PROGRAM X\n     * BEGIN\n     * END\n     * .\n     * ```\n     * Try it. Also try some combinations of this. Make some deliberate\n     * errors and see what happens.\n     */\n    var declarations = fleshingItOut.extend({\n\n        // Process label statement.\n        labels: function () {\n            this.match('l');\n        },\n\n        // Process const statement.\n        constants: function () {\n            this.match('c');\n        },\n\n        // Process type statement.\n        types: function () {\n            this.match('t');\n        },\n\n        // Process var statement.\n        variables: function () {\n            this.match('v');\n        },\n\n        // Process procedure statement.\n        doProcedure: function () {\n            this.match('p');\n        },\n\n        // Process function statement.\n        doFunction: function () {\n            this.match('f');\n        },\n\n        // Parse and translate the declaration part.\n        declarations: function () {\n            while ((/[lctvpf]/).test(this.look)) {\n                switch (this.look) {\n                case 'l':\n                    this.labels();\n                    break;\n                case 'c':\n                    this.constants();\n                    break;\n                case 't':\n                    this.types();\n                    break;\n                case 'v':\n                    this.variables();\n                    break;\n                case 'p':\n                    this.doProcedure();\n                    break;\n                case 'f':\n                    this.doFunction();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate the statement part.\n        statements: function () {\n            this.match('b');\n            while (this.look !== 'e') {\n                this.getChar();\n            }\n            this.match('e');\n        }\n    });\n\n    /**\n     * 9.6 The structure of C\n     * -----------------------\n     * The C language is quite another matter. Texts on C rarely include\n     * a BNF definition of the language. Probably that’s because the\n     * language is quite hard to write BNF for.\n     *\n     * At the top level, everything in C is a static declaration,\n     * either of data or of a function.\n     * ```\n     * <program> ::= ( <global declaration> )*\n     * <global declaration> ::= <data declaration> |\n     *                          <function>\n     * ```\n     * **In Small C**\n     * ```\n     * <global declaration> ::= '#' <preprocessor command>  |\n     *                          'int' <data list>           |\n     *                          'char' <data list>          |\n     *                          '<ident> <function body>\n     * ```\n     * where functions can only have the default type int, which is\n     * not declared. This makes the input easy to parse: the first token\n     * is either `int`, `char`, or the `name` of a function.\n     * ```\n     * // Demonstrates the top-level structure for small C.\n     * // Parse and translate a program.\n     * prog: function () {\n     *     while (this.look !== 'Z') {   // ^Z -> the end of the source\n     *         switch (this.look) {\n     *         case '#':\n     *             this.preProc();\n     *             break;\n     *         case 'i':\n     *             this.intDecl();\n     *             break;\n     *         case 'c':\n     *             this.charDecl();\n     *             break;\n     *         default:\n     *             this.doFunction();\n     *         }\n     *     }\n     * },\n     * ```\n     *\n     * With full C, things aren’t even this easy. The problem comes\n     * about because functions can also have types.\n     *\n     * More specifically, the **BNF for full C** begins with\n     * ```\n     * <program>        ::= ( <top-level decl> )*\n     * <top-level decl> ::= <function def> | <data decl>\n     * <data decl>      ::= [<class>] <type> <decl-list>\n     * <function def>   ::= [<class>] [<type>] <function decl>\n     * ```\n     * The first two parts of the `<data decl>` and `<function def>`\n     * can be the same.\n     * Because of the **ambiguity** in the grammar above, it’s not a\n     * suitable grammar for a recursive-descent parser.\n     *\n     * Can we transform it into one that is suitable?\n     * Yes, with a little work. Suppose we write it this way:\n     * ```\n     * <top-level decl> ::= [<class>] <decl>\n     * <decl>           ::= <type> <typed decl> | <function decl>\n     * <typed decl>     ::= <data list> | <function decl>\n     * ```\n     * We can build a parsing routine for the class and type definitions,\n     * and have them store away their findings and go on,\n     * without their ever having to **know** whether a function or a data\n     * declaration is being processed.\n     *\n     * We use single-character representation as follows\n     *\n     * - **Storage classes** `a`: auto, `x`: extern, `s`: static.\n     *   Default is auto.\n     * - **Sign** `s`: signed, `u`: unsigned. Default is signed.\n     * - **Type** `l`: long, `i`: int, `c`: char. Default for unsigned is int.\n     *\n     * Try some code such as `xula;ub;ucc;ld;ig(){}sch(){}`\n     * which stands for\n     * ```\n     * extern unsigned long a;\n     * unsinged b;\n     * unsigned char c;\n     * long d;\n     * int g() {}\n     * static char h() {}\n     * ```\n     */\n    var theStructureOfC = cradle.extend({\n\n        // For full C.\n        // Main program.\n        main: function () {\n            this.init();\n            while (this.look !== this.LF) {  // ^Z (EOF) instead in real case\n                this.getClass();\n                this.getType();\n                this.topDecl();\n            }\n        },\n\n        // Global variable.\n        class: '',   // storage class: auto, extern, static, register, typedef\n        sign: '',   // signed, unsigned\n        type: '',    // long, int, char, ...\n        classMap: { a: 'auto ', x: 'extern ', s: 'static ' },\n        signMap: { s: 'signed ', u: 'unsigned ' },\n        typeMap: { l: 'long ', i: 'int ', c: 'char ' },\n\n        // Get a storage class specifier.\n        // a: auto, x: extern, s: static.\n        getClass: function () {\n            if (this.look === 'a' || this.look === 'x' || this.look === 's') {\n                this.class = this.look;\n                this.getChar();\n            } else {\n                this.class = 'a';\n            }\n        },\n\n        // Get a type specifier.\n        getType: function () {\n            this.type = ' ';\n            if (this.look === 'u') {\n                this.sign = 'u';\n                this.type = 'i';\n                this.getChar();\n            } else {\n                this.sign = 's';\n            }\n\n            if (this.look === 'i' || this.look === 'l' || this.look === 'c') {\n                this.type = this.look;\n                this.getChar();\n            }\n        },\n\n        // Process a type-level declaration.\n        topDecl: function () {\n            var name = this.getName();\n            if (this.look === '(') {\n                this.doFunc(name);\n            } else {\n                this.doData(name);\n            }\n        },\n\n        // Process a function definition.\n        doFunc: function (name) {\n            this.match('(');\n            this.match(')');\n            this.match('{');\n            this.match('}');\n            if (this.type === ' ') {\n                this.type = 'i';\n            }\n            io.writeLn(this.classMap[this.class], this.signMap[this.sign],\n                    this.typeMap[this.type], name, ' (function)');\n        },\n\n        // Process a data declaration.\n        doData: function (name) {\n            if (this.typ === ' ') {\n                this.expected('Type declaration');\n            }\n            io.writeLn(this.classMap[this.class], this.signMap[this.sign],\n                    this.typeMap[this.type], name, ' (data)');\n            this.match(';');\n        }\n    });\n\n\n    return {\n\n        // 9.3\n        theStructureOfPascal: theStructureOfPascal,\n\n        // 9.4\n        fleshingItOut: fleshingItOut,\n\n        // 9.5\n        declarations: declarations,\n\n        // 9.6\n        theStructureOfC: theStructureOfC\n    };\n});\n\r\n/*global define*/\n\ndefine([\n    './2-expression-parsing',\n    './3-more-expressions',\n    './4-interpreters',\n    './5-control-constructs',\n    './6-boolean-expressions',\n    './7-lexical-scanning',\n    './7.13-kiss',\n    './9.a-top-view',\n    './10-introducing-tiny',\n    './11-lexical-scan-revisited',\n    './11.6-tiny-1.1',\n    './12-miscellany'\n], function (\n    expressionParsing,      // 2\n    moreExpressions,        // 3\n    interpreters,           // 4\n    controlConstructs,      // 5\n    booleanExpressions,     // 6\n    lexicalScanning,        // 7\n    kiss,                   // 7.13\n    aTopView,               // 9\n    introducingTiny,        // 10\n    lexicalScanRevisited,   // 11\n    tiny11,                 // 11.6\n    miscellany              // 12\n) {\n    'use strict';\n\n    return {\n        expressionParsing: expressionParsing,\n        moreExpressions: moreExpressions,\n        interpreters: interpreters,\n        controlConstructs: controlConstructs,\n        booleanExpressions: booleanExpressions,\n        lexicalScanning: lexicalScanning,\n        kiss: kiss,\n        aTopView: aTopView,\n        introducingTiny: introducingTiny,\n        lexicalScanRevisited: lexicalScanRevisited,\n        tiny11: tiny11,\n        miscellany: miscellany\n    };\n\n});\n\r\n/*global define*/\n\n/**\n * Prologue\n * ========\n * This is a JavaScript port of **Let's Build a Compiler**,\n * *a non-technical introduction to compiler construction*,\n * written from 1988 to 1995 by Jack W. Crenshaw.\n * Please refer to the [original context][original]\n * or alternatively a [LaTeX typeset PDF version][latex].\n *\n * [original]: http://compilers.iecc.com/crenshaw/\n * [latex]: http://www.stack.nl/~marcov/compiler.pdf\n *\n * The JavaScript code was ported section by section based on\n * *prototypal inheritance*.\n * It aims to be similar to the [original Pascal version][original].\n * A tiny console is provided with necessary I/O routines\n * for user interactions.\n *\n * The base object\n * ------------\n * The base `object` provides the `object.extend` method\n * for *prototypal inheritance* and some other helper functions.\n *\n */\n\ndefine(['jquery'], function ($) {\n    'use strict';\n\n    var object = {\n\n        // Extend method used for prototyal inheritance\n        extend: function (obj) {\n            var newObj = Object.create(this),\n                prop;\n\n            for (prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    newObj[prop] = obj[prop];\n                }\n            }\n            return newObj;\n        },\n\n        /**\n         * Helper functions\n         */\n\n        // Convert an array to an object to work as enum\n        // e.g. enumerate([a, b]) => { a: 0, b: 1 }\n        enumerate: function (arr, start) {\n            var result = Object.create(null);\n\n            start = start || 0;\n            $.each(arr, function (i, name) {\n                result[name] = start + i;\n            });\n            return result;\n        }\n    };\n\n    return object;\n});\n\r\n/*global define*/\n\n/**\n * Chapter 11 Lexical Scan Revisited\n * ==================================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    /**\n     * 11.1 Introduction\n     * ------------------\n     * A way to simplify and improve the lexical scanning part of the\n     * compiler.\n     */\n\n    /**\n     * 11.2 Background\n     * ----------------\n     */\n\n    /**\n     * 11.3 The problem\n     * -----------------\n     * The problem begins to show itself in procedure Block.\n     * At each pass through the loop, we know that we are at the beginning\n     * of a statement. We exit the block when we have scanned an `END` or\n     * an `ELSE`.\n     *\n     * But suppose that we see a semicolon instead. The procedure as it’s\n     * shown above can’t handle that, because procedure Scan only expects\n     * and can only accept tokens that begin with a letter.\n     */\n\n    /**\n     * 11.4 The solution\n     * ------------------\n     * Verify that you can separate a program into a series of tokens,\n     * and that you get the right encoding for each token.\n     *\n     * For example\n     * ```\n     * if foo>=bar\n     *     bar=10*foo\n     * endif\n     * (a+b)*(c+d)\n     * end\n     * .\n     * ```\n     * This ALMOST works, but not quite. There are two potential problems:\n     * - First, in KISS/TINY almost all of our operators are\n     * single-character operators. The only exceptions are the relops\n     * `>=`, `<=`, and `<>`.\n     * - Second, and much more important, the thing doesn’t WORK when two\n     * operators appear together, as in `(a+b)*(c+d)`. Here the string\n     * following `b` would be interpreted as a single operator `)*(`.\n     */\n    var theSolution = cradle.extend({\n\n        // Recognize an alphanumeric character.\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize white space.\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF;\n        },\n\n        // Skip over leading white space.\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Get an identifier.\n        getName: function () {\n            this.skipWhite();                           // <--\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n\n            this.token = 'x';                           // <--\n            this.value = '';\n            do {                                        // <--\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            } while (this.isAlNum(this.look));          // <\n        },\n\n        // Get a Number.\n        getNum: function () {\n            this.skipWhite();                           // <--\n            if (!this.isDigit(this.look)) {\n                this.expected('Number');\n            }\n\n            this.token = '#';                           // <--\n            this.value = '';                            // <\n            do {                                        // <\n                this.value += this.look;                // <\n                this.getChar();\n            } while (this.isDigit(this.look));          // <\n        },\n\n        // Get an operator.\n        getOp: function () {\n            this.token = this.look;\n            this.value = '';\n            do {\n                this.value += this.look;\n                this.getChar();\n            } while (!this.isAlpha(this.look) && !this.isDigit(this.look) &&\n                     !this.isWhite(this.look));\n        },\n\n        // Get the next input token.\n        next: function () {\n            this.skipWhite();\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else {\n                this.getOp();\n            }\n        },\n\n        // Main program.\n        main: function () {\n            this.init();\n            do {\n                this.next();\n                io.writeLn(this.token, ' ', this.value);\n            } while (this.token !== '.');\n        }\n    });\n\n    /**\n     * ### 11.4.2 Single-character operators ###\n     * Since almost all the operators are single characters, let’s just\n     * treat them that way, and let `getOp` get only one character at a time.\n     */\n    var singleCharacterOperators = theSolution.extend({\n\n        // Get an operator.\n        getOp: function () {\n            this.token = this.look;\n            this.value = this.look;\n            this.getChar();\n        },\n\n        // Scan the current identifier for keywords.\n        scan: function () {\n            if (this.token === 'x') {\n                this.token = this.keywordCode(this.value);\n            }\n        },\n\n        // Match a specific input string.\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n\n            this.next();                            // <--\n        }\n    });\n\n    /**\n     * 11.5 Fixing up the compiler\n     * ----------------------------\n     * in file: `11.6-tiny-1.1.js`\n     *\n     * 11.6 Conclusion\n     * ----------------\n     * in file: `11.6-tiny-1.1.js`\n     */\n\n\n    return {\n\n        // 11.4.1\n        theSolution: theSolution,\n\n        // 11.4.2\n        singleCharacterOperators: singleCharacterOperators\n    };\n\n});\n"
}),define("models/content",["lodash","backbone","prettify","marked","common","text!src"],function(t,n,e,i,s,o){"use strict";function a(t){var n,e,i=c(t),s=p(i);return i=u(i),n=d(s),e=f(n),{docLines:l.slice(i,s),codeLines:l.slice(n,e)}}function r(n){function e(t){var n=t.search(/\S/);return n>-1?n:Number.MAX_VALUE}return e(t.min(n,e))}function h(t,n,e){var i;return n=n||0,e=void 0===e?!0:e,i=e?r(t):0,t.map(function(t){return t.slice(i+n)})}var l=o.split("\n"),c=t.memoize(function(n){return t.findIndex(l,function(e){return t.contains(e,n)})}),u=t.memoize(function(n){var e,i;for(e=n;e>=0;e-=1)if(i=l[e]){if(!t.contains(i,"*"))break;t.contains(i,"/**")&&(n=e)}return n}),p=t.memoize(function(n){var e=t.rest(l,n);return n+t.findIndex(e,function(n){return t.contains(n," */")})}),d=t.memoize(function(t){for(var n=t+1;!l[n].trim();)n+=1;return n}),f=t.memoize(function(n){var e,i,s=l.length,o=0,a=!1,r=!1;for(e=n;s>e;e+=1)if(i=l[e],t.contains(i,"/*")&&(r=!0),t.contains(i,"*/")&&(r=!1),!r&&t.contains(i,"{")&&(o+=1,a=!0),!r&&t.contains(i,"}")&&(o-=1),a&&0===o)return e+1});i.setOptions({highlight:function(n){return e.prettyPrintOne(t.escape(n))}});var m=n.Model.extend({defaults:{doc:"",code:"",hasConsole:!1,hasEditor:!1},update:function(n,o){var r=s.getTitle(n,o),l=a(r),c=h(l.docLines,3).join("\n"),u=t.escape(h(l.codeLines).join("\n"));this.set("doc",i(c)),this.set("code",e.prettyPrintOne(u))}});return m}),define("models/setting",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{editor:!0,editorTitle:"",console:!0,consoleTitle:""},initialize:function(){this.setTitle("editor"),this.setTitle("console")},toggle:function(t){this.set(t,!this.get(t)),this.setTitle(t)},setTitle:function(t){var n=this.get(t);n?this.set(t+"Title","<div>The "+t+" is shown when available.</div><div>Uncheck to hide the "+t+".</div>"):this.set(t+"Title","<div>Check to show the "+t+"</div><div>when available.</div>")}});return n}),define("models/pagerItem",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{className:"",href:"#",title:"Untitled",text:"Untitled",placement:""}});return n}),define("collections/pager",["lodash","backbone","models/pagerItem","data/toc"],function(t,n,e,i){"use strict";function s(n,e){var o,a,r=t.reject(i[n].sections,"disabled"),h=t.findIndex(r,{sec:e})-1,l="last"===e?t.last(r):r[h];if(l)o=l.sec,a="&sect;"+o+" "+l.title;else{if(!e)return n>0?s(n-1,"last"):null;a=(n?"Chapter "+i[n].ch+" ":"")+i[n].title}return{className:"previous",ch:n,sec:o,title:a,text:"&laquo; Previous"}}function o(n,e){var s,o,a=16,r=t.reject(i[n].sections,"disabled"),h=t.findIndex(r,{sec:e})+1,l=r[h];if(l)s=l.sec,o="&sect;"+s+" "+l.title;else{if(!(a>n))return null;n+=1,o="Chapter "+i[n].ch+" "+i[n].title}return{className:"next",ch:n,sec:s,title:o,text:"Next &raquo;",placement:"bottom"}}function a(n,e){var a,r=i[n],h=[];return a=s(n,e),a&&h.push(a),h.push({className:e?"":"disabled",ch:n,sec:null,title:(n?"Chapter "+n+" ":"")+r.title,text:n?"Ch"+n:r.title}),t(r.sections).reject("disabled").each(function(t){h.push({className:t.sec===e?"disabled":"",ch:n,sec:t.sec,title:"&sect;"+t.sec+" "+t.title,text:t.sec})}),a=o(n,e),a&&h.push(a),h}var r=n.Collection.extend({model:e,update:function(t,n){this.reset(a(t,n))}});return r}),define("views/pager",["jquery","backbone","templates"],function(t,n,e){"use strict";var i=n.View.extend({itemTemplate:e["app/scripts/templates/pagerItem.ejs"],events:{"click a":"itemClicked"},initialize:function(){this.listenTo(this.collection,"reset",this.render)},render:function(){var t=this.itemTemplate,n=this.collection.map(function(n){return t(n.attributes)}).join("");this.$el.html(n).find("a").tooltip()},itemClicked:function(n){var e=t(n.target).attr("href");return this.trigger("click:item",e),!1}});return i}),define("views/setting",["jquery","backbone","templates"],function(t,n,e){"use strict";var i=n.View.extend({className:"clearfix",template:e["app/scripts/templates/setting.ejs"],events:{"click #toggle-editor":"toggleEditorItem","click #toggle-console":"toggleConsoleItem"},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$toggleEditor=this.$("#toggle-editor"),this.$toggleConsole=this.$("#toggle-console"),this.$toggleEditor.tooltip({html:!0}),this.$toggleConsole.tooltip({html:!0}),this},toggleEditorItem:function(t){this.model.toggle("editor"),t.preventDefault(),this.$("#toggle-editor i").toggleClass("icon-ok",this.model.get("editor")),this.$toggleEditor.tooltip("destroy").tooltip({title:this.model.get("editorTitle"),html:!0})},toggleConsoleItem:function(t){this.model.toggle("console"),t.preventDefault(),this.$("#toggle-console i").toggleClass("icon-ok",this.model.get("console")),this.$toggleConsole.tooltip("destroy").tooltip({title:this.model.get("consoleTitle"),html:!0})}});return i}),define("lbac/object",["jquery"],function(t){"use strict";var n={extend:function(t){var n,e=Object.create(this);for(n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},enumerate:function(n,e){var i=Object.create(null);return e=e||0,t.each(n,function(t,n){i[n]=e+t}),i}};return n}),define("io",[],function(){"use strict";var t;return{set:function(n){t=n},read:function(){return t.read()},readLn:function(){return t.readLn()},write:function(){return t.write.apply(null,arguments)},writeLn:function(){return t.writeLn.apply(null,arguments)},halt:function(){return t.halt()}}}),define("lbac/1.2-cradle",["./object","io"],function(t,n){"use strict";var e=t.extend({TAB:"	",CR:"\r",LF:"\n",look:"",getChar:function(){this.look=n.read()},error:function(t){n.writeLn("Error: ",t,".")},abort:function(t){this.error(t),n.halt()},expected:function(t){this.abort(t+" Expected")},match:function(t){this.look!==t&&this.expected('"'+t+'"'),this.getChar()},isAlpha:function(t){return/[A-Z]/i.test(t)},isDigit:function(t){return/\d/.test(t)},getName:function(){this.isAlpha(this.look)||this.expected("Name");var t=this.look.toUpperCase();return this.getChar(),t},getNum:function(){this.isDigit(this.look)||this.expected("Integer");var t=this.look;return this.getChar(),t},emit:function(t){n.write(this.TAB,t)},emitLn:function(t){this.emit(t),n.writeLn()},init:function(){this.getChar()},main:function(){this.init()}});return e}),define("lbac/2-expression-parsing",["./1.2-cradle"],function(t){"use strict";var n=t.extend({expression:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},main:function(){this.init(),this.expression()}}),e=n.extend({term:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},add:function(){this.match("+"),this.term(),this.emitLn("ADD D1, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB D1, D0"),this.emitLn("NEG D0")},expression:function(){switch(this.term(),this.emitLn("MOVE D0, D1"),this.look){case"+":this.add();break;case"-":this.subtract();break;default:this.expected("Addop")}}}),i=e.extend({expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, D1"),this.look){case"+":this.add();break;case"-":this.subtract()}}}),s=e.extend({add:function(){this.match("+"),this.term(),this.emitLn("ADD (SP)+, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}}}),o=s.extend({factor:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},multiply:function(){this.match("*"),this.factor(),this.emitLn("MULS (SP)+, D0")},divide:function(){this.match("/"),this.factor(),this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},term:function(){for(this.factor();"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}}}),a=o.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.emitLn("MOVE #"+this.getNum()+" ,D0")}}),r=a.extend({isAddop:function(t){return"+"===t||"-"===t},expression:function(){for(this.isAddop(this.look)?this.emitLn("CLR D0"):this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}}});return{singleDigits:n,binaryExpressions:e,generalExpressions:i,usingTheStack:s,multiplicationAndDivision:o,parentheses:a,unaryMinus:r}}),define("lbac/3-more-expressions",["./2-expression-parsing"],function(t){"use strict";var n=t.unaryMinus.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.emitLn("MOVE "+this.getName()+"(PC), D0"):this.emitLn("MOVE #"+this.getNum()+" ,D0")}}),e=n.extend({identifier:function(){var t=this.getName();"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+t)):this.emitLn("MOVE "+t+"(PC), D0")},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+", D0")}}),i=e.extend({main:function(){this.init(),this.expression(),this.look!==this.LF&&this.expected("Newline")}}),s=i.extend({assignment:function(){var t=this.getName();this.match("="),this.expression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},main:function(){this.init(),this.assignment(),this.look!==this.LF&&this.expected("Newline")}}),o=s.extend({isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var t="";this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return t},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var t="";this.isDigit(this.look);)t+=this.look,this.getChar();return t}}),a=o.extend({isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},match:function(t){this.look!==t&&this.expected('"'+t+'"'),this.getChar(),this.skipWhite()},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var t="";this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return this.skipWhite(),t},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var t="";this.isDigit(this.look);)t+=this.look,this.getChar();return this.skipWhite(),t},init:function(){this.getChar(),this.skipWhite()}});return{variables:n,functions:e,moreOnErrorHandling:i,assignmentStatements:s,multiCharacterTokens:o,whiteSpace:a}}),define("lbac/4-interpreters",["./1.2-cradle","io"],function(t,n){"use strict";var e=t.extend({getNum:function(){this.isDigit(this.look)||this.expected("Integer");var t=+this.look;return this.getChar(),t},expression:function(){return this.getNum()},main:function(){this.init(),n.writeLn(this.expression())}}),i=e.extend({isAddop:function(t){return"+"===t||"-"===t},expression:function(){for(var t=this.isAddop(this.look)?0:this.getNum();this.isAddop(this.look);)switch(this.look){case"+":this.match("+"),t+=this.getNum();break;case"-":this.match("-"),t-=this.getNum()}return t}}),s=i.extend({term:function(){for(var t=this.getNum();"*"===this.look||"/"===this.look;)switch(this.look){case"*":this.match("*"),t*=this.getNum();break;case"/":this.match("/"),t=Math.floor(t/this.getNum())}return t},expression:function(){for(var t=this.isAddop(this.look)?0:this.term();this.isAddop(this.look);)switch(this.look){case"+":this.match("+"),t+=this.term();break;case"-":this.match("-"),t-=this.term()}return t}}),o=s.extend({getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var t=0;this.isDigit(this.look);)t=10*t+ +this.look,this.getChar();return t}}),a=o.extend({factor:function(){var t;return"("===this.look?(this.match("("),t=this.expression(),this.match(")")):t=this.getNum(),t},term:function(){for(var t=this.factor();"*"===this.look||"/"===this.look;)switch(this.look){case"*":this.match("*"),t*=this.factor();break;case"/":this.match("/"),t=Math.floor(t/this.factor())}return t}}),r=a.extend({table:{},initTable:function(){var t,n,e="A".charCodeAt(0);for(t=0;26>t;t+=1)n=String.fromCharCode(e+t),this.table[n]=0},init:function(){this.initTable(),this.getChar()},factor:function(){var t;return"("===this.look?(this.match("("),t=this.expression(),this.match(")")):t=this.isAlpha(this.look)?this.table[this.getName()]:this.getNum(),t}}),h=r.extend({assignment:function(){var t=this.getName();this.match("="),this.table[t]=this.expression()},main:function(){this.init(),this.assignment(),n.writeLn("A = "+this.table.A)}}),l=h.extend({newLine:function(){this.look===this.LF&&this.getChar()},main:function(){this.init();do this.assignment(),this.newLine();while("."!==this.look)}}),c=l.extend({input:function(){this.match("?")},output:function(){this.match("!"),n.writeLn(this.table[this.getName()])},main:function(){this.init();do{switch(this.look){case"?":this.input();break;case"!":this.output();break;default:this.assignment()}this.newLine()}while("."!==this.look)}});return{singleDigits:e,additionAndSubtraction:i,multiplicationAndDivision:s,multiDigitsNumber:o,factor:a,variables:r,assignmentStatements:h,multipleStatements:l,ioRoutines:c}}),define("lbac/5-control-constructs",["./1.2-cradle","io"],function(t,n){"use strict";var e=t.extend({other:function(){this.emitLn("<block "+this.getName()+">")},main:function(){this.init(),this.other()}}),i=e.extend({block:function(){for(;"e"!==this.look;)this.other()},doProgram:function(){this.block(),"e"!==this.look&&this.expected("End"),this.emitLn("END")},main:function(){this.init(),this.doProgram()}}),s=i.extend({lCount:0,newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},postLabel:function(t){n.writeLn(t+":")},init:function(){this.lCount=0,this.getChar()}}),o=s.extend({condition:function(){this.emitLn("<condition>")},doIf:function(){var t;this.match("i"),t=this.newLabel(),this.condition(),this.emitLn("BEQ "+t),this.block(),this.match("e"),this.postLabel(t)},block:function(){for(;"e"!==this.look;)switch(this.look){case"i":this.doIf();break;default:this.other()}}}),a=o.extend({doIf:function(){var t,n;this.match("i"),this.condition(),t=n=this.newLabel(),this.emitLn("BEQ "+t),this.block(),"l"===this.look&&(this.match("l"),n=this.newLabel(),this.emitLn("BRA "+n),this.postLabel(t),this.block()),this.match("e"),this.postLabel(n)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;default:this.other()}}}),r=a.extend({doWhile:function(){var t,n;this.match("w"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.condition(),this.emitLn("BEQ "+n),this.block(),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.other()}}}),h=r.extend({doLoop:function(){var t;this.match("p"),t=this.newLabel(),this.postLabel(t),this.block(),this.match("e"),this.emitLn("BRA "+t)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;default:this.other()}}}),l=h.extend({doRepeat:function(){var t;this.match("r"),t=this.newLabel(),this.postLabel(t),this.block(),this.match("u"),this.condition(),this.emitLn("BEQ "+t)},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;default:this.other()}}}),c=l.extend({expression:function(){this.emitLn("<expression>")},doFor:function(){var t,n,e;this.match("f"),t=this.newLabel(),n=this.newLabel(),e=this.getName(),this.match("="),this.expression(),this.emitLn("SUBQ #1, D0"),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE D0, (A0)"),this.expression(),this.emitLn("MOVE D0, -(SP)"),this.postLabel(t),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE (A0), D0"),this.emitLn("ADDQ #1, D0"),this.emitLn("MOVE D0, (A0)"),this.emitLn("CMP (SP), D0"),this.emitLn("BGT "+n),this.block(),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n),this.emitLn("ADDQ #2, SP")},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;default:this.other()}}}),u=c.extend({doDo:function(){var t;this.match("d"),t=this.newLabel(),this.expression(),this.emitLn("SUBQ #1, D0"),this.postLabel(t),this.emitLn("MOVE D0, -(SP)"),this.block(),this.match("e"),this.emitLn("MOVE (SP)+, D0"),this.emitLn("DBRA D0, "+t)},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;default:this.other()}}}),p=u.extend({doIf:function(t){var n,e;this.match("i"),this.condition(),n=e=this.newLabel(),this.emitLn("BEQ "+n),this.block(t),"l"===this.look&&(this.match("l"),e=this.newLabel(),this.emitLn("BRA "+e),this.postLabel(n),this.block(t)),this.match("e"),this.postLabel(e)},doWhile:function(){var t,n;this.match("w"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.condition(),this.emitLn("BEQ "+n),this.block(n),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n)},doLoop:function(){var t,n;this.match("p"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.block(n),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n)},doRepeat:function(){var t,n;this.match("r"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.block(n),this.match("u"),this.condition(),this.emitLn("BEQ "+t),this.postLabel(n)},doFor:function(){var t,n,e;this.match("f"),t=this.newLabel(),n=this.newLabel(),e=this.getName(),this.match("="),this.expression(),this.emitLn("SUBQ #1, D0"),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE D0, (A0)"),this.expression(),this.emitLn("MOVE D0, -(SP)"),this.postLabel(t),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE (A0), D0"),this.emitLn("ADDQ #1, D0"),this.emitLn("MOVE D0,(A0)"),this.emitLn("CMP (SP), D0"),this.emitLn("BGT "+n),this.block(n),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n),this.emitLn("ADDQ #2, SP")},doDo:function(){var t,n;this.match("d"),t=this.newLabel(),n=this.newLabel(),this.expression(),this.emitLn("SUBQ #1, D0"),this.postLabel(t),this.emitLn("MOVE D0, -(SP)"),this.block(n),this.emitLn("MOVE (SP)+, D0"),this.emitLn("DBRA D0, "+t),this.emitLn("SUBQ #2, SP"),this.postLabel(n),this.emitLn("ADDQ #2, SP")},doBreak:function(t){t||this.abort("No loop to break from"),this.match("b"),this.emitLn("BRA "+t)},block:function(t){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf(t);break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;case"b":this.doBreak(t);break;default:this.other()}}});return{oneStatement:e,moreThanOneStatement:i,someGroundwork:s,theIfStatement:o,addTheElseClause:a,theWhileStatement:r,theLoopStatement:h,theRepeatUntilStatement:l,theForLoop:c,theDoStatement:u,theBreakStatement:p}}),define("lbac/6-boolean-expressions",["./1.2-cradle","./3-more-expressions","./5-control-constructs","jquery","io"],function(t,n,e,i,s){"use strict";var o=t.extend({isBoolean:function(t){return t=t.toUpperCase(),"T"===t||"F"===t},getBoolean:function(){this.isBoolean(this.look)||this.expected("Boolean Literal");var t="T"===this.look.toUpperCase();return this.getChar(),t},main:function(){this.init(),s.writeLn(this.getBoolean())}}),a=o.extend({boolExpression:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},main:function(){this.init(),this.boolExpression()}}),r=a.extend({isOrop:function(t){return"|"===t||"~"===t},boolTerm:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},boolOr:function(){this.match("|"),this.boolTerm(),this.emitLn("OR (SP)+, D0")},boolXor:function(){this.match("~"),this.boolTerm(),this.emitLn("EOR (SP)+, D0")},boolExpression:function(){for(this.boolTerm();this.isOrop(this.look);)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"|":this.boolOr();break;case"~":this.boolXor()}}}),h=r.extend({notFactor:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},boolTerm:function(){for(this.notFactor();"&"===this.look;)this.emitLn("MOVE D0, -(SP)"),this.match("&"),this.notFactor(),this.emitLn("AND (SP)+, D0")}}),l=h.extend({boolFactor:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},notFactor:function(){"!"===this.look?(this.match("!"),this.boolFactor(),this.emitLn("EOR #-1, D0")):this.boolFactor()}}),c=l.extend({relation:function(){this.emitLn("<relation "+this.getName()+">")},boolFactor:function(){this.isBoolean(this.look)?this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0"):this.relation()}}),u=c.extend({isRelop:function(t){return"="===t||"#"===t||"<"===t||">"===t},equals:function(){this.match("="),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SEQ D0")},notEquals:function(){this.match("#"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SNE D0")},less:function(){this.match("<"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SGE D0")},greater:function(){this.match(">"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SLE D0")},relation:function(){if(this.expression(),this.isRelop(this.look)){switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"=":this.equals();break;case"#":this.notEquals();break;case"<":this.less();break;case">":this.greater()}this.emitLn("TST D0")}},expression:function(){this.emitLn("<Expression "+this.getName()+">")}}),p=i.extend(!0,{},n.assignmentStatements,u,{expression:n.assignmentStatements.expression}),d=p.extend({expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}},term:function(){for(this.signedFactor();"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}},signedFactor:function(){"+"===this.look&&this.getChar(),"-"===this.look?(this.getChar(),this.isDigit(this.look)?this.emitLn("MOVE #-"+this.getNum()+", D0"):(this.factor(),this.emitLn("NEG D0"))):this.factor()},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+", D0")}}),f=i.extend(!0,{},d,e.theBreakStatement,{condition:d.boolExpression,expression:d.expression,other:d.boolExpression}),m=f.extend({fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar()},block:function(t){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;){switch(this.fin(),this.look){case"i":this.doIf(t);break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;case"b":this.doBreak(t);break;default:this.assignment()}this.fin()}},assignment:function(){var t=this.getName();this.match("="),this.boolExpression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")}});return{booleanLiteral1:o,booleanLiteral2:a,orOperation:r,andOperation:h,notOperation:l,expandTheFactor:c,fullBlownRelation:u,mergingWithExpressions:p,changeToLatestExpressionSyntax:d,mergingWithControlConstructs:f,addingAssignments:m}}),define("lbac/7-lexical-scanning",["./1.2-cradle","io"],function(t,n){"use strict";var e=t.enumerate,i=t.extend({isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var t="";this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return t},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var t="";this.isDigit(this.look);)t+=this.look,this.getChar();return t},main:function(){this.init(),n.writeLn(this.getName())}}),s=i.extend({isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},getName:function(){this.isAlpha(this.look)||this.expected("Name");for(var t="";this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return this.skipWhite(),t},getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var t="";this.isDigit(this.look);)t+=this.look,this.getChar();return this.skipWhite(),t},scan:function(){var t;return this.isAlpha(this.look)?t=this.getName():this.isDigit(this.look)?t=this.getNum():(t=this.look,this.getChar()),this.skipWhite(),t},main:function(){var t;this.init();do t=this.scan(),n.writeLn(t);while(t!==this.LF)}}),o=s.extend({fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar()},main:function(){var t;this.init();do{for(;this.look===this.LF;)this.fin();t=this.scan(),n.writeLn(t)}while("."!==t)}}),a=o.extend({isOp:function(t){return"+"===t||"-"===t||"*"===t||"/"===t||"<"===t||">"===t||":"===t||"="===t},getOp:function(){this.isOp(this.look)||this.expected("Operator");for(var t="";this.isOp(this.look);)t+=this.look,this.getChar();return t},scan:function(){var t;return this.isAlpha(this.look)?t=this.getName():this.isDigit(this.look)?t=this.getNum():this.isOp(this.look)?t=this.getOp():(t=this.look,this.getChar()),this.skipWhite(),t}}),r=a.extend({skipComma:function(){this.skipWhite(),","===this.look&&(this.getChar(),this.skipWhite())},scan:function(){var t;return this.isAlpha(this.look)?t=this.getName():this.isDigit(this.look)?t=this.getNum():this.isOp(this.look)?t=this.getOp():(t=this.look,this.getChar()),this.skipComma(),t}}),h=r.extend({keywordType:e(["IF","ELSE","ENDIF","END"]),main:function(){var t=n.readLn().toUpperCase();n.writeLn(this.keywordType[t])}}),l=h.extend({symType:e(["ifSym","elseSym","endifSym","endSym","ident","number","operator"]),token:0,value:"",scan:function(){for(var t;this.look===this.LF;)this.fin();this.skipWhite(),this.isAlpha(this.look)?(this.value=this.getName(),t=this.keywordType[this.value],this.token=void 0===t?this.symType.ident:t):this.isDigit(this.look)?(this.value=this.getNum(),this.token=this.symType.number):this.isOp(this.look)?(this.value=this.getOp(),this.token=this.symType.operator):(this.value=this.look,this.token=this.symType.operator,this.getChar()),this.skipWhite()},main:function(){this.init();do{switch(this.scan(),this.token){case this.symType.ident:n.write("Ident    : ");break;case this.symType.number:n.write("Number   : ");break;case this.symType.operator:n.write("Operator : ");break;case this.symType.ifSym:case this.symType.elseSym:case this.symType.endifSym:case this.symType.endSym:n.write("Keyword  : ")}n.writeLn(this.value)}while(this.token!==this.symType.endSym)}}),c=l.extend({getName:function(){this.isAlpha(this.look)||this.expected("Name");var t;for(this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();t=this.keywordType[this.value],this.token=void 0===t?this.symType.ident:t},getNum:function(){for(this.isDigit(this.look)||this.expected("Integer"),this.value="";this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token=this.symType.number},getOp:function(){for(this.isOp(this.look)||this.expected("Operator"),this.value="";this.isOp(this.look);)this.value+=this.look,this.getChar();this.token=this.symType.operator},scan:function(){for(;this.look===this.LF;)this.fin();this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.isOp(this.look)?this.getOp():(this.value=this.look,this.getChar()),this.skipWhite()}}),u=c.extend({keywordCode:"xilee",keywordType:e(["IF","ELSE","ENDIF","END"],1),getName:function(){this.isAlpha(this.look)||this.expected("Name");var t;for(this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();t=this.keywordType[this.value]||0,this.token=this.keywordCode.charAt(t)},getNum:function(){for(this.isDigit(this.look)||this.expected("Integer"),this.value="";this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token="#"},getOp:function(){for(this.isOp(this.look)||this.expected("Operator"),this.value="";this.isOp(this.look);)this.value+=this.look,this.getChar();this.token=1===this.value.length?this.value:"?"},scan:function(){for(;this.look===this.LF;)this.fin();this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.isOp(this.look)?this.getOp():(this.value=this.look,this.token="?",this.getChar()),this.skipWhite()},main:function(){this.init();do{switch(this.scan(),this.token){case"x":n.write("Ident ");break;case"#":n.write("Number ");break;case"i":case"l":case"e":n.write("Keyword ");break;default:n.write("Operator ")}n.writeLn(this.value)}while("END"!==this.value)}});return{someExperimentsInScanning:i,whiteSpace:s,newlines:o,operators:a,listsCommasAndCommandLines:r,gettingFancy:h,returningCodes:l,cleanupWithGlobal:c,returningACharacter:u}}),define("lbac/7.13-kiss",["./object","io"],function(t,n){"use strict";var e,i,s=t.enumerate;return e=t.extend({TAB:"	",CR:"\r",LF:"\n",look:"",lCount:0,getChar:function(){this.look=n.read()},error:function(t){n.writeLn("Error: ",t,".")},abort:function(t){this.error(t),n.halt()},expected:function(t){this.abort(t+" Expected")},isAlpha:function(t){return/[A-Z]/i.test(t)},isDigit:function(t){return/\d/.test(t)},isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isAddop:function(t){return"+"===t||"-"===t},isMulop:function(t){return"*"===t||"/"===t},isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},match:function(t){this.look!==t&&this.expected('"'+t+'"'),this.getChar(),this.skipWhite()},fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar(),this.skipWhite()},getName:function(){for(;this.look===this.LF;)this.fin();this.isAlpha(this.look)||this.expected("Name");var t=this.look.toUpperCase();return this.getChar(),this.skipWhite(),t},getNum:function(){this.isDigit(this.look)||this.expected("Integer");var t=this.look;return this.getChar(),this.skipWhite(),t},newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},postLabel:function(t){n.writeLn(t+":")},emit:function(t){n.write(this.TAB+t)},emitLn:function(t){this.emit(t),n.writeLn()},identifier:function(){var t=this.getName();"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+t)):this.emitLn("MOVE "+t+"(PC), D0")},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+" ,D0")},signedFactor:function(){var t="-"===this.look;this.isAddop(this.look)&&(this.getChar(),this.skipWhite()),t?this.isDigit(this.look)?this.emitLn("MOVE #-"+this.getNum()+", D0"):(this.factor(),this.emitLn("NEG D0")):this.factor()},multiply:function(){this.match("*"),this.factor(),this.emitLn("MULS (SP)+, D0")},divide:function(){this.match("/"),this.factor(),this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},term1:function(){for(;"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}},term:function(){this.factor(),this.term1()},firstTerm:function(){this.signedFactor(),this.term1()},add:function(){this.match("+"),this.term(),this.emitLn("ADD (SP)+, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},expression:function(){for(this.firstTerm();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();
break;case"-":this.subtract()}},condition:function(){this.emitLn("<condition>")},doIf:function(){var t,n;this.match("i"),this.condition(),t=n=this.newLabel(),this.emitLn("BEQ "+t),this.block(),"l"===this.look&&(this.match("l"),n=this.newLabel(),this.emitLn("BRA "+n),this.postLabel(t),this.block()),this.match("e"),this.postLabel(n)},assignment:function(){var t=this.getName();this.match("="),this.expression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case this.LF:for(;this.look===this.LF;)this.fin();break;default:this.assignment()}},doProgram:function(){this.block(),"e"!==this.look&&this.expected("End"),this.emitLn("END")},init:function(){this.lCount=0,this.getChar()},main:function(){this.init(),this.doProgram()}}),i=e.extend({token:"",value:"",keywordCode:"xilee",keywordType:s(["IF","ELSE","ENDIF","END"],1),getName:function(){for(;this.look===this.LF;)this.fin();for(this.isAlpha(this.look)||this.expected("Name"),this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();this.skipWhite()},getNum:function(){for(this.isDigit(this.look)||this.expected("Integer"),this.value="";this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token="#",this.skipWhite()},scan:function(){this.getName();var t=this.keywordType[this.value]||0;this.token=this.keywordCode.charAt(t)},matchString:function(t){this.value!==t&&this.expected('"'+t+'"')},identifier:function(){this.getName(),"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+this.value)):this.emitLn("MOVE "+this.value+"(PC), D0")},signedFactor:function(){var t="-"===this.look;this.isAddop(this.look)&&(this.getChar(),this.skipWhite()),t?this.isDigit(this.look)?(this.getNum(),this.emitLn("MOVE #-"+this.value+", D0")):(this.factor(),this.emitLn("NEG D0")):this.factor()},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():(this.getNum(),this.emitLn("MOVE #"+this.value+" ,D0"))},doIf:function(){var t,n;this.condition(),t=n=this.newLabel(),this.emitLn("BEQ "+t),this.block(),"l"===this.token&&(n=this.newLabel(),this.emitLn("BRA "+n),this.postLabel(t),this.block()),this.postLabel(n),this.matchString("ENDIF")},assignment:function(){var t=this.value;this.match("="),this.expression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;default:this.assignment()}this.scan()}},doProgram:function(){this.block(),this.matchString("END"),this.emitLn("END")}}),{judiciousCopying:e,mergingScannerAndParser:i}}),define("lbac/9.a-top-view",["./1.2-cradle","io"],function(t,n){"use strict";var e=t.extend({prog:function(){var t;this.match("p"),t=this.getName(),this.prolog(t),this.match("."),this.epilog(t)},prolog:function(){this.emitLn("WARMST EQU $A01E")},epilog:function(t){this.emitLn("DC WARMST"),this.emitLn("END "+t)},main:function(){this.init(),this.prog()}}),i=e.extend({postLabel:function(t){n.writeLn(t+":")},declarations:function(){},statements:function(){},doBlock:function(t){this.declarations(),this.postLabel(t),this.statements()},prog:function(){var t;this.match("p"),t=this.getName(),this.prolog(t),this.doBlock(t),this.match("."),this.epilog(t)}}),s=i.extend({labels:function(){this.match("l")},constants:function(){this.match("c")},types:function(){this.match("t")},variables:function(){this.match("v")},doProcedure:function(){this.match("p")},doFunction:function(){this.match("f")},declarations:function(){for(;/[lctvpf]/.test(this.look);)switch(this.look){case"l":this.labels();break;case"c":this.constants();break;case"t":this.types();break;case"v":this.variables();break;case"p":this.doProcedure();break;case"f":this.doFunction()}},statements:function(){for(this.match("b");"e"!==this.look;)this.getChar();this.match("e")}}),o=t.extend({main:function(){for(this.init();this.look!==this.LF;)this.getClass(),this.getType(),this.topDecl()},"class":"",sign:"",type:"",classMap:{a:"auto ",x:"extern ",s:"static "},signMap:{s:"signed ",u:"unsigned "},typeMap:{l:"long ",i:"int ",c:"char "},getClass:function(){"a"===this.look||"x"===this.look||"s"===this.look?(this.class=this.look,this.getChar()):this.class="a"},getType:function(){this.type=" ","u"===this.look?(this.sign="u",this.type="i",this.getChar()):this.sign="s",("i"===this.look||"l"===this.look||"c"===this.look)&&(this.type=this.look,this.getChar())},topDecl:function(){var t=this.getName();"("===this.look?this.doFunc(t):this.doData(t)},doFunc:function(t){this.match("("),this.match(")"),this.match("{"),this.match("}")," "===this.type&&(this.type="i"),n.writeLn(this.classMap[this.class],this.signMap[this.sign],this.typeMap[this.type],t," (function)")},doData:function(t){" "===this.typ&&this.expected("Type declaration"),n.writeLn(this.classMap[this.class],this.signMap[this.sign],this.typeMap[this.type],t," (data)"),this.match(";")}});return{theStructureOfPascal:e,fleshingItOut:i,declarations:s,theStructureOfC:o}}),define("lbac/10-introducing-tiny",["./1.2-cradle","io"],function(t,n){"use strict";var e=t.extend({prog:function(){this.match("p"),this.header(),this.prolog(),this.match("."),this.epilog()},header:function(){n.writeLn("WARMST",this.TAB,"EQU $A01E")},prolog:function(){this.postLabel("MAIN")},postLabel:function(t){n.writeLn(t+":")},epilog:function(){this.emitLn("DC WARMST"),this.emitLn("END MAIN")},main:function(){this.init(),this.prog(),this.look!==this.LF&&this.abort('Unexpected data after "."')}}),i=e.extend({prog:function(){this.match("p"),this.header(),this.doMain(),this.match(".")},doMain:function(){this.match("b"),this.prolog(),this.match("e"),this.epilog()}}),s=i.extend({decl:function(){this.match("v"),this.getChar()},topDecls:function(){for(;"b"!==this.look;)switch(this.look){case"v":this.decl();break;default:this.abort('Unrecognized Keyword "'+this.look+'"')}},prog:function(){this.match("p"),this.header(),this.topDecls(),this.doMain(),this.match(".")}}),o=s.extend({decl:function(){this.match("v"),this.alloc(this.getName())},alloc:function(t){n.writeLn(t,":",this.TAB,"DC 0")}}),a=o.extend({decl:function(){for(this.match("v"),this.alloc(this.getName());","===this.look;)this.getChar(),this.alloc(this.getName())}}),r=a.extend({alloc:function(t){n.write(t,":",this.TAB,"DC "),"="===this.look?(this.match("="),n.writeLn(this.getNum())):n.writeLn("0")}}),h=r.extend({getNum:function(){this.isDigit(this.look)||this.expected("Integer");for(var t=0;this.isDigit(this.look);)t=+this.look+10*t,this.getChar();return t},alloc:function(t){n.write(t,":",this.TAB,"DC "),"="===this.look?(this.match("="),"-"===this.look&&(n.write("-"),this.match("-")),n.writeLn(this.getNum())):n.writeLn("0")}}),l=h.extend({symbolTable:null,inTable:function(t){return!!this.symbolTable[t]},alloc:function(t){this.inTable(t)&&this.abort("Duplicate Variable Name "+t),this.symbolTable[t]="v",n.write(t,":",this.TAB,"DC "),"="===this.look?(this.match("="),"-"===this.look&&(n.write("-"),this.match("-")),n.writeLn(this.getNum())):n.writeLn("0")},init:function(){this.symbolTable={},this.getChar()}}),c=l.extend({assignment:function(){this.getChar()},block:function(){for(;"e"!==this.look;)this.assignment()},doMain:function(){this.match("b"),this.prolog(),this.block(),this.match("e"),this.epilog()}}),u=c.extend({clear:function(){this.emitLn("CLR D0")},negate:function(){this.emitLn("NEG D0")},loadConst:function(t){this.emitLn("MOVE #"+t+", D0")},loadVar:function(t){this.inTable(t)||this.undefined(t),this.emitLn("MOVE "+t+"(PC), D0")},push:function(){this.emitLn("MOVE D0, -(SP)")},popAdd:function(){this.emitLn("ADD (SP)+, D0")},popSub:function(){this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},popMul:function(){this.emitLn("MULS (SP)+, D0")},popDiv:function(){this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},store:function(t){this.inTable(t)||this.undefined(t),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},undefined:function(t){this.abort("Undefined Identifier "+t)}}),p=u.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.loadVar(this.getName()):this.loadConst(this.getNum())},negFactor:function(){this.match("-"),this.isDigit(this.look)?this.loadConst(-this.getNum()):(this.factor(),this.negate())},firstFactor:function(){switch(this.look){case"+":this.match("+"),this.factor();break;case"-":this.negFactor();break;default:this.factor()}},multiply:function(){this.match("*"),this.factor(),this.popMul()},divide:function(){this.match("/"),this.factor(),this.popDiv()},isMulop:function(t){return"*"===t||"/"===t},term1:function(){for(;this.isMulop(this.look);)switch(this.push(),this.look){case"*":this.multiply();break;case"/":this.divide()}},term:function(){this.factor(),this.term1()},firstTerm:function(){this.firstFactor(),this.term1()},add:function(){this.match("+"),this.term(),this.popAdd()},subtract:function(){this.match("-"),this.term(),this.popSub()},isAddop:function(t){return"+"===t||"-"===t},expression:function(){for(this.firstTerm();this.isAddop(this.look);)switch(this.push(),this.look){case"+":this.add();break;case"-":this.subtract()}},assignment:function(){var t=this.getName();this.match("="),this.expression(),this.store(t)}}),d=p.extend({notIt:function(){this.emitLn("NOT D0")},popAnd:function(){this.emitLn("AND (SP)+, D0")},popOr:function(){this.emitLn("OR (SP)+, D0")},popXor:function(){this.emitLn("EOR (SP)+, D0")},popCompare:function(){this.emitLn("CMP (SP)+, D0")},setEqual:function(){this.emitLn("SEQ D0"),this.emitLn("EXT D0")},setNEqual:function(){this.emitLn("SNE D0"),this.emitLn("EXT D0")},setGreater:function(){this.emitLn("SLT D0"),this.emitLn("EXT D0")},setLess:function(){this.emitLn("SGT D0"),this.emitLn("EXT D0")}}),f=d.extend({isOrop:function(t){return"|"===t||"~"===t},isRelop:function(t){return"="===t||"#"===t||"<"===t||">"===t},equals:function(){this.match("="),this.expression(),this.popCompare(),this.setEqual()},notEquals:function(){this.match("#"),this.expression(),this.popCompare(),this.setNEqual()},less:function(){this.match("<"),this.expression(),this.popCompare(),this.setLess()},greater:function(){this.match(">"),this.expression(),this.popCompare(),this.setGreater()},relation:function(){if(this.expression(),this.isRelop(this.look))switch(this.push(),this.look){case"=":this.equals();break;case"#":this.notEquals();break;case"<":this.less();break;case">":this.greater()}},notFactor:function(){"!"===this.look?(this.match("!"),this.relation(),this.notIt()):this.relation()},boolTerm:function(){for(this.notFactor();"&"===this.look;)this.push(),this.match("&"),this.notFactor(),this.popAnd()},boolOr:function(){this.match("|"),this.boolTerm(),this.popOr()},boolXor:function(){this.match("~"),this.boolTerm(),this.popXor()},boolExpression:function(){for(this.boolTerm();this.isOrop(this.look);)switch(this.push(),this.look){case"|":this.boolOr();break;case"~":this.boolXor()}},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?this.loadVar(this.getName()):this.loadConst(this.getNum())},assignment:function(){var t=this.getName();this.match("="),this.boolExpression(),this.store(t)}}),m=f.extend({branch:function(t){this.emitLn("BRA "+t)},branchFalse:function(t){this.emitLn("TST D0"),this.emitLn("BEQ "+t)},newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},doIf:function(){var t,n;this.match("i"),this.boolExpression(),t=n=this.newLabel(),this.branchFalse(t),this.block(),"l"===this.look&&(this.match("l"),n=this.newLabel(),this.branch(n),this.postLabel(t),this.block()),this.postLabel(n),this.match("e")},doWhile:function(){var t,n;this.match("w"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.boolExpression(),this.branchFalse(n),this.block(),this.match("e"),this.branch(t),this.postLabel(n)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.assignment()}},init:function(){this.symbolTable={},this.lCount=0,this.getChar()}}),g=m.extend({token:"",value:"",keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",VAR:"v",BEGIN:"b",END:"e",PROGRAM:"p"},keywordCode:function(t){return this.keywordCodeTable[t]||"x"},scan:function(){this.getName(),this.token=this.keywordCode(this.value)},isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},newLine:function(){for(;this.look===this.CR||this.look===this.LF;)this.getChar(),this.skipWhite()},match:function(t){this.newLine(),this.look!==t&&this.expected('"'+t+'"'),this.getChar(),this.skipWhite()},matchString:function(t){this.value!==t&&this.expected('"'+t+'"')},getName:function(){for(this.newLine(),this.isAlpha(this.look)||this.expected("Name"),this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();this.skipWhite()},getNum:function(){var t=0;for(this.newLine(),this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t=+this.look+10*t,this.getChar();return this.skipWhite(),t},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?(this.getName(),this.loadVar(this.value)):this.loadConst(this.getNum())},decl:function(){for(this.getName(),this.alloc(this.value);","===this.look;)this.match(","),this.getName(),this.alloc(this.value)},assignment:function(){var t=this.value;this.match("="),this.boolExpression(),this.store(t)},doIf:function(){var t,n;this.boolExpression(),t=n=this.newLabel(),this.branchFalse(t),this.block(),"l"===this.token&&(n=this.newLabel(),this.branch(n),this.postLabel(t),this.block()),this.postLabel(n),this.matchString("ENDIF")},doWhile:function(){var t=this.newLabel(),n=this.newLabel();this.postLabel(t),this.boolExpression(),this.branchFalse(n),this.block(),this.matchString("ENDWHILE"),this.branch(t),this.postLabel(n)},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.assignment()}this.scan()}},topDecls:function(){for(this.scan();"b"!==this.token;){switch(this.token){case"v":this.decl();break;default:this.abort('Unrecognized Keyword "'+this.value+'"')}this.scan()}},doMain:function(){this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()},prog:function(){this.matchString("PROGRAM"),this.header(),this.topDecls(),this.doMain(),this.match(".")},init:function(){this.symbolTable={},this.lCount=0,this.getChar(),this.scan()}}),b=g.extend({setLessOrEqual:function(){this.emitLn("SGE D0"),this.emitLn("EXT D0")},setGreaterOrEqual:function(){this.emitLn("SLE D0"),this.emitLn("EXT D0")},lessOrEqual:function(){this.match("="),this.expression(),this.popCompare(),this.setLessOrEqual()},notEqual:function(){this.match(">"),this.expression(),this.popCompare(),this.setNEqual()},less:function(){switch(this.match("<"),this.look){case"=":this.lessOrEqual();break;case">":this.notEqual();break;default:this.expression(),this.popCompare(),this.setLess()}},greater:function(){this.match(">"),"="===this.look?(this.match("="),this.expression(),this.popCompare(),this.setGreaterOrEqual()):(this.expression(),this.popCompare(),this.setGreater())}}),v=b.extend({keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",READ:"R",WRITE:"W",VAR:"v",BEGIN:"b",END:"e",PROGRAM:"p"},header:function(){n.writeLn("WARMST",this.TAB,"EQU $A01E"),this.emitLn("LIB TINYLIB")},readVar:function(){this.emitLn("BSR READ"),this.store(this.value)},writeVar:function(){this.emitLn("BSR WRITE")},doRead:function(){for(this.match("("),this.getName(),this.readVar();","===this.look;)this.match(","),this.getName(),this.readVar();this.match(")")},doWrite:function(){for(this.match("("),this.expression(),this.writeVar();","===this.look;)this.match(","),this.expression(),this.writeVar();this.match(")")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;default:this.assignment()}this.scan()}}});return{firstStep:e,theMainProgram:i,declarations:s,declarationsAndSymbols:o,variableList:a,initializers:r,multiDigitInteger:h,theSymbolTable:l,executableStatements:c,codeGenerationRoutines:u,assignmentStatement:p,moreCodeGenerationRoutines:d,booleanExpressions:f,controlStructures:m,lexicalScanning:g,moreRelops:b,inputOutput:v}}),define("lbac/11-lexical-scan-revisited",["./1.2-cradle","io"],function(t,n){"use strict";var e=t.extend({isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isWhite:function(t){return" "===t||t===this.TAB||t===this.CR||t===this.LF},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},getName:function(){this.skipWhite(),this.isAlpha(this.look)||this.expected("Name"),this.token="x",this.value="";do this.value+=this.look.toUpperCase(),this.getChar();while(this.isAlNum(this.look))},getNum:function(){this.skipWhite(),this.isDigit(this.look)||this.expected("Number"),this.token="#",this.value="";do this.value+=this.look,this.getChar();while(this.isDigit(this.look))},getOp:function(){this.token=this.look,this.value="";do this.value+=this.look,this.getChar();while(!this.isAlpha(this.look)&&!this.isDigit(this.look)&&!this.isWhite(this.look))},next:function(){this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.getOp()},main:function(){this.init();do this.next(),n.writeLn(this.token," ",this.value);while("."!==this.token)}}),i=e.extend({getOp:function(){this.token=this.look,this.value=this.look,this.getChar()},scan:function(){"x"===this.token&&(this.token=this.keywordCode(this.value))},matchString:function(t){this.value!==t&&this.expected('"'+t+'"'),this.next()}});return{theSolution:e,singleCharacterOperators:i}}),define("lbac/11.6-tiny-1.1",["./object","io"],function(t,n){"use strict";var e=t.extend({TAB:"	",CR:"\r",LF:"\n",look:"",lCount:0,token:"",value:"",symbolTable:null,keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",READ:"R",WRITE:"W",VAR:"v",END:"e"},keywordCode:function(t){return this.keywordCodeTable[t]||"x"},getChar:function(){this.look=n.read()},error:function(t){n.writeLn("Error: ",t,".")},abort:function(t){this.error(t),n.halt()},expected:function(t){this.abort(t+" Expected")},undef:function(t){this.abort("Undefined Identifier "+t)},duplicate:function(t){this.abort("Duplicate Identifier "+t)},checkIdent:function(){"x"!==this.token&&this.expected("Identifier")},isAlpha:function(t){return/[A-Z]/i.test(t)},isDigit:function(t){return/\d/.test(t)},isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isAddop:function(t){return"+"===t||"-"===t},isMulop:function(t){return"*"===t||"/"===t},isOrop:function(t){return"|"===t||"~"===t},isRelop:function(t){return"="===t||"#"===t||"<"===t||">"===t},isWhite:function(t){return" "===t||t===this.TAB||t===this.CR||t===this.LF},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},inTable:function(t){return!!this.symbolTable[t]},checkTable:function(t){this.inTable(t)||this.undef(t)},checkDup:function(t){this.inTable(t)&&this.duplicate(t)},addEntry:function(t,n){this.checkDup(t),this.symbolTable[t]=n},getName:function(){this.skipWhite(),this.isAlpha(this.look)||this.expected("Identifier"),this.token="x",this.value="";do this.value+=this.look.toUpperCase(),this.getChar();while(this.isAlNum(this.look))},getNum:function(){this.skipWhite(),this.isDigit(this.look)||this.expected("Number"),this.token="#",this.value="";do this.value+=this.look,this.getChar();while(this.isDigit(this.look))},getOp:function(){this.token=this.look,this.value=this.look,this.getChar()},next:function(){this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.getOp()},scan:function(){"x"===this.token&&(this.token=this.keywordCode(this.value))},matchString:function(t){this.value!==t&&this.expected('"'+t+'"'),this.next()},emit:function(t){n.write(this.TAB+t)},emitLn:function(t){this.emit(t),n.writeLn()},newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},postLabel:function(t){n.writeLn(t+":")},clear:function(){this.emitLn("CLR D0")},negate:function(){this.emitLn("NEG D0")},notIt:function(){this.emitLn("NOT D0")},loadConst:function(t){this.emitLn("MOVE #"+t+", D0")},loadVar:function(t){this.inTable(t)||this.undef(t),this.emitLn("MOVE "+t+"(PC), D0")},push:function(){this.emitLn("MOVE D0, -(SP)")},popAdd:function(){this.emitLn("ADD (SP)+, D0")},popSub:function(){this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},popMul:function(){this.emitLn("MULS (SP)+, D0")},popDiv:function(){this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},popAnd:function(){this.emitLn("AND (SP)+, D0")},popOr:function(){this.emitLn("OR (SP)+, D0")},popXor:function(){this.emitLn("EOR (SP)+, D0")},popCompare:function(){this.emitLn("CMP (SP)+, D0")},setEqual:function(){this.emitLn("SEQ D0"),this.emitLn("EXT D0")},setNEqual:function(){this.emitLn("SNE D0"),this.emitLn("EXT D0")},setGreater:function(){this.emitLn("SLT D0"),this.emitLn("EXT D0")},setLess:function(){this.emitLn("SGT D0"),this.emitLn("EXT D0")},setLessOrEqual:function(){this.emitLn("SGE D0"),this.emitLn("EXT D0")},setGreaterOrEqual:function(){this.emitLn("SLE D0"),this.emitLn("EXT D0")},store:function(t){this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},branch:function(t){this.emitLn("BRA "+t)},branchFalse:function(t){this.emitLn("TST D0"),this.emitLn("BEQ "+t)},readIt:function(){this.emitLn("BSR READ"),this.store(this.value)},writeIt:function(){this.emitLn("BSR WRITE")},header:function(){n.writeLn("WARMST",this.TAB,"EQU $A01E")},prolog:function(){this.postLabel("MAIN")},epilog:function(){this.emitLn("DC WARMST"),this.emitLn("END MAIN")},allocate:function(t,e){n.writeLn(t,":",this.TAB,"DC ",e)},factor:function(){"("===this.token?(this.next(),this.boolExpression(),this.matchString(")")):("x"===this.token?this.loadVar(this.value):"#"===this.token?this.loadConst(this.value):this.expected("Math Factor"),this.next())},multiply:function(){this.next(),this.factor(),this.popMul()},divide:function(){this.next(),this.factor(),this.popDiv()},term:function(){for(this.factor();this.isMulop(this.token);)switch(this.push(),this.token){case"*":this.multiply();break;case"/":this.divide()}},add:function(){this.next(),this.term(),this.popAdd()},subtract:function(){this.next(),this.term(),this.popSub()},expression:function(){for(this.isAddop(this.token)?this.clear():this.term();this.isAddop(this.token);)switch(this.push(),this.token){case"+":this.add();break;case"-":this.subtract()}},compareExpression:function(){this.expression(),this.popCompare()},nextExpression:function(){this.next(),this.compareExpression()},equal:function(){this.nextExpression(),this.setEqual()},lessOrEqual:function(){this.nextExpression(),this.setLessOrEqual()},notEqual:function(){this.nextExpression(),this.setNEqual()},less:function(){switch(this.next(),this.token){case"=":this.lessOrEqual();break;case">":this.notEqual();break;default:this.compareExpression(),this.setLess()}},greater:function(){this.next(),"="===this.token?(this.nextExpression(),this.setGreaterOrEqual()):(this.compareExpression(),this.setGreater())},relation:function(){if(this.expression(),this.isRelop(this.token))switch(this.push(),this.token){case"=":this.equals();break;case"<":this.less();break;case">":this.greater()}},notFactor:function(){"!"===this.token?(this.next(),this.relation(),this.notIt()):this.relation()},boolTerm:function(){for(this.notFactor();"&"===this.token;)this.push(),this.next(),this.notFactor(),this.popAnd()},boolOr:function(){this.next(),this.boolTerm(),this.popOr()},boolXor:function(){this.next(),this.boolTerm(),this.popXor()},boolExpression:function(){for(this.boolTerm();this.isOrop(this.token);)switch(this.push(),this.token){case"|":this.boolOr();break;case"~":this.boolXor()}},assignment:function(){var t;this.checkTable(this.value),t=this.value,this.next(),this.matchString("="),this.boolExpression(),this.store(t)},doIf:function(){var t,n;this.next(),this.boolExpression(),t=n=this.newLabel(),this.branchFalse(t),this.block(),"l"===this.token&&(this.next(),n=this.newLabel(),this.branch(n),this.postLabel(t),this.block()),this.postLabel(n),this.matchString("ENDIF")},doWhile:function(){var t,n;this.next(),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.boolExpression(),this.branchFalse(n),this.block(),this.matchString("ENDWHILE"),this.branch(t),this.postLabel(n)},readVar:function(){this.checkIdent(),this.checkTable(this.value),this.readIt(this.value),this.next()},doRead:function(){for(this.next(),this.matchString("("),this.readVar();","===this.token;)this.next(),this.readVar();this.matchString(")")},doWrite:function(){for(this.next(),this.matchString("("),this.expression(),this.writeIt();","===this.token;)this.next(),this.expression(),this.writeIt();this.matchString(")")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;default:this.assignment()}this.scan()}},alloc:function(){this.next(),"x"!==this.token&&this.expected("Variable Name"),this.checkDup(this.value),this.addEntry(this.value,"v"),this.allocate(this.value,"0"),this.next()},topDecls:function(){for(this.scan();"v"===this.token;){for(this.alloc();","===this.token;)this.alloc();this.scan()}},init:function(){this.symbolTable={},this.lCount=0,this.getChar(),this.next()},main:function(){this.init(),this.matchString("PROGRAM"),this.header(),this.topDecls(),this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()}});return{object:e}}),define("lbac/12-miscellany",["./11.6-tiny-1.1","io"],function(t,n){"use strict";var e=t.object.extend({semi:function(){this.matchString(";")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;case"x":this.assignment()}this.semi(),this.scan()}},topDecls:function(){for(this.scan();"v"===this.token;){for(this.alloc();","===this.token;)this.alloc();this.semi(),this.scan()}},main:function(){this.init(),this.matchString("PROGRAM"),this.semi(),this.header(),this.topDecls(),this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()}}),i=e.extend({statement:function(){switch(this.scan(),this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;case"x":this.assignment()}},block:function(){for(this.statement();";"===this.token;)this.next(),this.statement()}}),s=e.extend({semi:function(){";"===this.token&&this.next()}}),o=s.extend({getCharX:function(){this.look=n.read()},skipComment:function(){for(;"}"!==this.look;)this.getCharX();this.getCharX()},getChar:function(){this.getCharX(),"{"===this.look&&this.skipComment()}}),a=s.extend({skipComment:function(){for(;"}"!==this.look;)this.getChar();this.getChar()},isWhite:function(t){return" "===t||t===this.TAB||t===this.CR||t===this.LF||"{"===t},skipWhite:function(){for(;this.isWhite(this.look);)"{"===this.look?this.skipComment():this.getChar()}}),r=a.extend({skipComment:function(){for(;"}"!==this.look;)this.getChar(),"{"===this.look&&this.skipComment();this.getChar()}}),h=a.extend({tempChar:" ",getCharX:function(){this.look=n.read()},getChar:function(){" "!==this.tempChar?(this.look=this.tempChar,this.tempChar=" "):(this.getCharX(),"/"===this.look&&(this.tempChar=n.read(),"*"===this.tempChar&&(this.look="{",this.tempChar=" ")))},skipComment:function(){do{do this.getCharX();while("*"!==this.look);this.getCharX()}while("/"!==this.look);this.getCharX()}}),l=s.extend({skipComment:function(){for(;this.look!==this.LF;)this.getChar();this.getChar()},isWhite:function(t){return" "===t||t===this.TAB||t===this.CR||t===this.LF||";"===t},skipWhite:function(){for(;this.isWhite(this.look);)";"===this.look?this.skipComment():this.getChar()}});return{theCVersion:e,thePascalVersion:i,aCompromise:s,stripTheCommentsOut:o,theConventionalTreatment:a,nestedComments:r,multiCharacterDelimiters:h,oneSidedComments:l}}),define("lbac/main",["./2-expression-parsing","./3-more-expressions","./4-interpreters","./5-control-constructs","./6-boolean-expressions","./7-lexical-scanning","./7.13-kiss","./9.a-top-view","./10-introducing-tiny","./11-lexical-scan-revisited","./11.6-tiny-1.1","./12-miscellany"],function(t,n,e,i,s,o,a,r,h,l,c,u){"use strict";return{expressionParsing:t,moreExpressions:n,interpreters:e,controlConstructs:i,booleanExpressions:s,lexicalScanning:o,kiss:a,aTopView:r,introducingTiny:h,lexicalScanRevisited:l,tiny11:c,miscellany:u}}),define("lbac",["lbac/main"],function(t){return t}),function(t){"use strict";"function"==typeof define&&define.amd?define("tiny-console",["jquery"],t):t(jQuery)}(function(t){"use strict";function n(n){var e=[[/</g,"&lt;"],[/>/g,"&gt;"]];return t.each(e,function(t,e){n=n.replace(e[0],e[1])}),n}function e(n,e){var i,s=document.createRange(),o=window.getSelection(),a=0;n.contents().each(function(){var n=t(this).text().length;return"BR"===this.nodeName.toUpperCase()&&(n=1),n>=e?!1:(e-=n,a+=1,void 0)}),i=n[0].childNodes[a],3!==i.nodeType&&(i=i.firstChild),s.setStart(i,e),s.collapse(!0),o.removeAllRanges(),o.addRange(s)}function i(n){var e=window.getSelection().getRangeAt(0),i=e.startContainer,s=e.startOffset;return n.contents().each(function(){return this===i||this.firstChild===i?!1:(s+=t(this).text().length,void 0)}),s}function s(t){e(t,t.text().length)}function o(){function e(t){return'<span class="'+t+'">$&</span>'}function i(n){var e={};return e.index=Number.MAX_VALUE,t.each(s,function(t,i){var s=n.search(i.pattern);return s>=0&&e.index>s&&(e.index=s,e.match=n.match(i.pattern)[0],e.length=e.match.length,e.format=i.format),0===s?!1:void 0}),e.index===Number.MAX_VALUE&&(e.index=-1),e}var s=[];this.addRule=function(t){s.push({pattern:t.pattern,format:e(t["class"])})},this.addRules=function(n,i){var o=e(i);t.each(n,function(t,n){s.push({pattern:n,format:o})})},this.highlightElement=function(t){for(var e,s=n(t.text()),o=i(s),a="";o.index>=0;)e=s.substr(0,o.index+o.length),s=s.substr(o.index+o.length),a+=e.replace(o.match,o.format),o=i(s);a+=s,t.html(a)}}function a(t){var n=[/\bEND\b/,/\bMOVE\b/,/\bADD\w?\b/,/\bSUB\w?\b/,/\bNEG\b/,/\bEXG\b/,/\bMUL\w?\b/,/\bDIV\w?\b/,/\bBSR\b/,/\bLEA\b/,/\bCMP\b/,/\bCLR\b/,/\b\w?OR\b/,/\bAND\b/,/\bSEQ\b/,/\bSNE\b/,/\bSGE\b/,/\bSLE\b/,/\bTST\b/],e=[/\bBEQ\b/,/\b\w?BRA\b/,/\bBGT\b/],i="m68k-keyword",s="m68k-branch",o={pattern:/\bL\d+:?/,"class":"m68k-label"},a={pattern:/Error:([\w\W]*?)\n/,"class":"m68k-error"};this.addRules(n,i),this.addRules(e,s),this.addRule(o),this.addRule(a),this.highlight=function(){this.highlightElement(t)}}function r(t){this.addRule({pattern:/[bl]/,"class":"compiler-middle"}),this.addRule({pattern:/[dfiwpr]/,"class":"compiler-start"}),this.addRule({pattern:/[eu]/,"class":"compiler-end"}),this.highlight=function(){var n=i(t);this.highlightElement(t),e(t,n)}}function h(n){"outputHighlighter"in n&&n.outputHighlighter.highlight();var e=n.$entry.clone(),i=t(".entry-input",e),o=t(".entry-output",e),a=i.html();i.attr("contenteditable","false").html(a+"<br>"),""===o.html()&&o.remove(),e.insertBefore(n.$entry),n.$output.html(""),n.$input.html(" "),n.target.scrollTop(n.target.prop("scrollHeight")),s(n.$input),n.$input.focus()}function l(n){var e=t(this).data("tinyConsole"),o=e.$input.text().length;if(13===n.keyCode){n.preventDefault(),e.stream.update(e.$input.text()+p),e.history.update();
try{e.execute()}catch(a){}h(e)}else if(9===n.keyCode)try{document.execCommand("insertHtml",!1,"	"),n.preventDefault()}catch(r){}else 37!==n.keyCode&&8!==n.keyCode||1!==i(e.$input)?39===n.keyCode?i(e.$input)===o?n.preventDefault():i(e.$input)===o-1&&(n.preventDefault(),s(e.$input)):38===n.keyCode?(n.preventDefault(),e.history.scrollUp()):40===n.keyCode&&(n.preventDefault(),e.history.scrollDown()):n.preventDefault();e.$input[0].normalize()}function c(t){1>=i(t)&&e(t,1)}function u(){var n=t(this).data("tinyConsole");n.$input.focus(),c(n.$input)}var p="\n";a.prototype=new o,r.prototype=new o;var d={init:function(n){function i(n,e,i){var s=t("#"+e),o=t("#"+n);o&&s&&s.click(function(){var t=i.data("tinyConsole");t.stream.update(" "+o.val()+"\n"),t.history.update();try{t.execute()}catch(n){}h(t)})}var o=t.extend({prompt:">>>"},n);return this.each(function(){var n=t(this),h=n.data("tinyConsole");if(!h){o.width&&n.width(o.width),o.height&&n.height(o.height),n.addClass("tiny-console");var d=t("<div />").addClass("console-entry"),f=t("<pre />").addClass("entry-prompt").text(o.prompt),m=t("<pre />").addClass("entry-input").attr("contenteditable","true").html(" "),g=t("<pre />").addClass("entry-output");if(n.append(d.append(f).append(m).append(g)),"tabSize"in o){var b=""+o.tabSize;t("pre",d).css({"-moz-tab-size":b,"-o-tab-size":b,"tab-size":b})}var v=!1,k=!1;if("highlight"in o)switch(o.highlight){case"input":v=!0;break;case"output":k=!0;break;case"both":v=k=!0}m.focus(),e(m,1),m.bind("focus.tinyConsole",function(n){c(t(n.target))}),n.bind("keydown.tinyConsole",l),n.bind("click.tinyConsole",u);var y={target:n,$entry:d,$prompt:f,$input:m,$output:g,stream:{content:"",offset:1,update:function(t){this.content=t,this.offset=1},read:function(){var n=this.offset;return n===this.content.length&&t.error("End of input stream"),this.offset+=1,this.content.charAt(n)},readLn:function(){for(var t,n="";;){if(t=y.stream.read(),t===p)break;n+=t}return n}},history:{content:[],position:-1,last:function(){return this.content[this.content.length-1]},update:function(){var t=y.stream,n=t.content.substr(0,t.content.length-p.length);" "!==n&&n!==this.last()&&this.content.push(n),this.position=this.content.length,y.target.scrollTop(y.target.prop("scrollHeight"))},scrollUp:function(){0>=this.position||(this.position-=1,m.text(this.content[this.position]),s(m),y.target.scrollTop(y.target.prop("scrollHeight")))},scrollDown:function(){this.position!==this.content.length-1&&(this.position+=1,m.text(this.content[this.position]),s(m),y.target.scrollTop(y.target.prop("scrollHeight")))}}};k&&(y.outputHighlighter=new a(g)),v&&(y.inputHighlighter=new r(m),n.bind("keyup.tinyConsole",function(){y.inputHighlighter.highlight()})),n.data("tinyConsole",y),i(o.editorElement,o.runButtonElement,n)}})},destroy:function(){return this.each(function(){var n=t(this);t(window).unbind(".tinyConsole"),n.removeData("tinyConsole")})},option:function(t,n){var e=this.data("tinyConsole");"prompt"===t&&e.$prompt.text(n)},read:function(){var t,n=this.data("tinyConsole");try{t=n.stream.read()}catch(e){d.writeLn.call(this,"Error: End of Input Stream.")}return t},readLn:function(){var t=this.data("tinyConsole");return t.stream.readLn()},write:function(){var e=Array.prototype.slice.call(arguments),i="";return t.each(e,function(t,n){i+=void 0===n?"undefined":n}),this.each(function(){var e=t(this).data("tinyConsole");e.$output.append(n(i))})},writeLn:function(){var t=Array.prototype.slice.call(arguments);t.push(p),d.write.apply(this,t)},halt:function(){throw"Halt."},getFunction:function(n){return t.proxy(d[n],this)},setExecute:function(n){return this.each(function(){var e=t(this).data("tinyConsole");e.execute=n})}};t.fn.tinyConsole=function(n){return d[n]?d[n].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof n&&n?(t.error("Method "+n+" does not exist on jQuery.tinyConsole"),void 0):d.init.apply(this,arguments)}}),define("views/console",["jquery","lodash","backbone","lbac","io","common","tiny-console"],function(t,n,e,i,s,o){"use strict";function a(t){return t=t.replace(/Chapter\s*\d*\s*/,""),t=t.replace(/\d+\.\d+\.?\d?\s*/,""),t=t.replace(/-/g," "),t=t.replace(/[,\/"]/g,""),n.reduce(t.split(" "),function(t,n,e){return t+(e?n.substr(0,1).toUpperCase()+n.substr(1).toLowerCase():n.toLowerCase())},"")}var r=e.View.extend({render:function(){return this.$el.tinyConsole({editorElement:"editor",runButtonElement:"run-button",height:350,highlight:"output"}),s.set({read:this.$el.tinyConsole("getFunction","read"),readLn:this.$el.tinyConsole("getFunction","readLn"),write:this.$el.tinyConsole("getFunction","write"),writeLn:this.$el.tinyConsole("getFunction","writeLn"),halt:this.$el.tinyConsole("getFunction","halt")}),this},update:function(t,e){var s=o.getTitle(t),r=o.getTitle(t,e),h=a(s),l=a(r);return("judiciousCopying"===l||"mergingScannerAndParser"===l)&&(h="kiss"),"lexicalScanRevisited"===h&&"conclusion"===l&&(h="tiny11",l="object"),i[h]&&i[h][l]?(this.$el.tinyConsole("setExecute",n.bindKey(i[h][l],"main")),this.$el.tinyConsole("option","prompt",r+">"),!0):!1}});return r}),define("views/content",["jquery","lodash","backbone","templates","models/content","models/setting","collections/pager","views/pager","views/setting","views/console","data/toc"],function(t,n,e,i,s,o,a,r,h,l,c){"use strict";var u=e.View.extend({infoTemplate:i["app/scripts/templates/info.ejs"],initialize:function(){this.$info=this.$("#info"),this.$doc=this.$("#doc"),this.$editorArea=this.$("#editor-area"),this.$console=this.$("#console"),this.$codeArea=this.$("#code-area"),this.$code=this.$("#code"),this.content=new s,this.setting=new o,this.pager=new a,this.topPagerView=new r({el:"#top-pager",collection:this.pager}),this.bottomPagerView=new r({el:"#bottom-pager",collection:this.pager}),this.settingView=new h({model:this.setting}),this.consoleView=new l({el:"#console"}),this.listenTo(this.content,"change:doc",this.renderDoc),this.listenTo(this.content,"change:code",this.renderCode),this.listenTo(this.content,"change:hasEditor",this.toggleEditor),this.listenTo(this.content,"change:hasConsole",this.toggleConsole),this.listenTo(this.setting,"change:editor",this.toggleEditor),this.listenTo(this.setting,"change:console",this.toggleConsole)},render:function(){this.$info.show(),this.settingView.render(),this.consoleView.render(),this.$codeArea.show()},update:function(t,n){this.pager.update(t,n),this.$info.html(this.infoTemplate({ch:t,title:c[t].title.toUpperCase().replace(/ /g,"&nbsp;")})),this.content.update(t,n),this.updateConsole(t,n)},updateConsole:function(t,e){var i,s=!1,o=!1;e&&(i=n.find(c[t].sections,{sec:e}),s=this.consoleView.update(t,e)&&(i.console===!1?!1:!0),o=!!i.editor),this.content.set("hasConsole",s),this.content.set("hasEditor",o)},renderDoc:function(t){this.settingView.$el.detach(),this.$doc.html(t.get("doc")),this.$doc.children(":first-child").after(this.settingView.el)},renderCode:function(t){this.$code.html(t.get("code"))},toggleEditor:function(){var t=this.content.get("hasEditor")&&this.setting.get("editor");this.$editorArea.toggle(t)},toggleConsole:function(){var t=this.content.get("hasConsole")&&this.setting.get("console");this.$console.toggle(t)}});return u}),define("views/app",["jquery","backbone","templates","views/menu","views/content"],function(t,n,e,i,s){"use strict";var o=!0,a=n.View.extend({el:"body",initialize:function(){this.$content=t("#content"),this.menuView=new i({el:"#menu"}),this.contentView=new s({el:this.$content})},render:function(){this.menuView.render(),this.contentView.render(),this.$("#loading").remove(),this.$("#footer").show()},update:function(n,e){this.menuView.update(n,e),this.contentView.update(n,e),o?o=!1:t("html, body").scrollTop(this.$content.offset().top-20)}});return a}),!function(t){"use strict";t(function(){t.support.transition=function(){var t=function(){var t,n=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in e)if(void 0!==n.style[t])return e[t]}();return t&&{end:t}}()})}(window.jQuery),!function(t){"use strict";var n='[data-dismiss="alert"]',e=function(e){t(e).on("click",n,this.close)};e.prototype.close=function(n){function e(){i.trigger("closed").remove()}var i,s=t(this),o=s.attr("data-target");o||(o=s.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),i=t(o),n&&n.preventDefault(),i.length||(i=s.hasClass("alert")?s:s.parent()),i.trigger(n=t.Event("close")),n.isDefaultPrevented()||(i.removeClass("in"),t.support.transition&&i.hasClass("fade")?i.on(t.support.transition.end,e):e())};var i=t.fn.alert;t.fn.alert=function(n){return this.each(function(){var i=t(this),s=i.data("alert");s||i.data("alert",s=new e(this)),"string"==typeof n&&s[n].call(i)})},t.fn.alert.Constructor=e,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.alert.data-api",n,e.prototype.close)}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.options=t.extend({},t.fn.button.defaults,e)};n.prototype.setState=function(t){var n="disabled",e=this.$element,i=e.data(),s=e.is("input")?"val":"html";t+="Text",i.resetText||e.data("resetText",e[s]()),e[s](i[t]||this.options[t]),setTimeout(function(){"loadingText"==t?e.addClass(n).attr(n,n):e.removeClass(n).removeAttr(n)},0)},n.prototype.toggle=function(){var t=this.$element.closest('[data-toggle="buttons-radio"]');t&&t.find(".active").removeClass("active"),this.$element.toggleClass("active")};var e=t.fn.button;t.fn.button=function(e){return this.each(function(){var i=t(this),s=i.data("button"),o="object"==typeof e&&e;s||i.data("button",s=new n(this,o)),"toggle"==e?s.toggle():e&&s.setState(e)})},t.fn.button.defaults={loadingText:"loading..."},t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=e,this},t(document).on("click.button.data-api","[data-toggle^=button]",function(n){var e=t(n.target);e.hasClass("btn")||(e=e.closest(".btn")),e.button("toggle")})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,"hover"==this.options.pause&&this.$element.on("mouseenter",t.proxy(this.pause,this)).on("mouseleave",t.proxy(this.cycle,this))};n.prototype={cycle:function(n){return n||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},getActiveIndex:function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},to:function(n){var e=this.getActiveIndex(),i=this;if(!(n>this.$items.length-1||0>n))return this.sliding?this.$element.one("slid",function(){i.to(n)}):e==n?this.pause().cycle():this.slide(n>e?"next":"prev",t(this.$items[n]))},pause:function(n){return n||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition.end&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),clearInterval(this.interval),this.interval=null,this},next:function(){return this.sliding?void 0:this.slide("next")},prev:function(){return this.sliding?void 0:this.slide("prev")},slide:function(n,e){var i,s=this.$element.find(".item.active"),o=e||s[n](),a=this.interval,r="next"==n?"left":"right",h="next"==n?"first":"last",l=this;if(this.sliding=!0,a&&this.pause(),o=o.length?o:this.$element.find(".item")[h](),i=t.Event("slide",{relatedTarget:o[0],direction:r}),!o.hasClass("active")){if(this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid",function(){var n=t(l.$indicators.children()[l.getActiveIndex()]);n&&n.addClass("active")})),t.support.transition&&this.$element.hasClass("slide")){if(this.$element.trigger(i),i.isDefaultPrevented())return;o.addClass(n),o[0].offsetWidth,s.addClass(r),o.addClass(r),this.$element.one(t.support.transition.end,function(){o.removeClass([n,r].join(" ")).addClass("active"),s.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger("slid")},0)})}else{if(this.$element.trigger(i),i.isDefaultPrevented())return;s.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return a&&this.cycle(),this}}};var e=t.fn.carousel;t.fn.carousel=function(e){return this.each(function(){var i=t(this),s=i.data("carousel"),o=t.extend({},t.fn.carousel.defaults,"object"==typeof e&&e),a="string"==typeof e?e:o.slide;s||i.data("carousel",s=new n(this,o)),"number"==typeof e?s.to(e):a?s[a]():o.interval&&s.pause().cycle()})},t.fn.carousel.defaults={interval:5e3,pause:"hover"},t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=e,this},t(document).on("click.carousel.data-api","[data-slide], [data-slide-to]",function(n){var e,i,s=t(this),o=t(s.attr("data-target")||(e=s.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"")),a=t.extend({},o.data(),s.data());o.carousel(a),(i=s.attr("data-slide-to"))&&o.data("carousel").pause().to(i).cycle(),n.preventDefault()})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.options=t.extend({},t.fn.collapse.defaults,e),this.options.parent&&(this.$parent=t(this.options.parent)),this.options.toggle&&this.toggle()};n.prototype={constructor:n,dimension:function(){var t=this.$element.hasClass("width");return t?"width":"height"},show:function(){var n,e,i,s;if(!this.transitioning&&!this.$element.hasClass("in")){if(n=this.dimension(),e=t.camelCase(["scroll",n].join("-")),i=this.$parent&&this.$parent.find("> .accordion-group > .in"),i&&i.length){if(s=i.data("collapse"),s&&s.transitioning)return;i.collapse("hide"),s||i.data("collapse",null)}this.$element[n](0),this.transition("addClass",t.Event("show"),"shown"),t.support.transition&&this.$element[n](this.$element[0][e])}},hide:function(){var n;!this.transitioning&&this.$element.hasClass("in")&&(n=this.dimension(),this.reset(this.$element[n]()),this.transition("removeClass",t.Event("hide"),"hidden"),this.$element[n](0))},reset:function(t){var n=this.dimension();return this.$element.removeClass("collapse")[n](t||"auto")[0].offsetWidth,this.$element[null!==t?"addClass":"removeClass"]("collapse"),this},transition:function(n,e,i){var s=this,o=function(){"show"==e.type&&s.reset(),s.transitioning=0,s.$element.trigger(i)};this.$element.trigger(e),e.isDefaultPrevented()||(this.transitioning=1,this.$element[n]("in"),t.support.transition&&this.$element.hasClass("collapse")?this.$element.one(t.support.transition.end,o):o())},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}};var e=t.fn.collapse;t.fn.collapse=function(e){return this.each(function(){var i=t(this),s=i.data("collapse"),o=t.extend({},t.fn.collapse.defaults,i.data(),"object"==typeof e&&e);s||i.data("collapse",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.collapse.defaults={toggle:!0},t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=e,this},t(document).on("click.collapse.data-api","[data-toggle=collapse]",function(n){var e,i=t(this),s=i.attr("data-target")||n.preventDefault()||(e=i.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""),o=t(s).data("collapse")?"toggle":i.data();i[t(s).hasClass("in")?"addClass":"removeClass"]("collapsed"),t(s).collapse(o)})}(window.jQuery),!function(t){"use strict";function n(){t(i).each(function(){e(t(this)).removeClass("open")})}function e(n){var e,i=n.attr("data-target");return i||(i=n.attr("href"),i=i&&/#/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,"")),e=i&&t(i),e&&e.length||(e=n.parent()),e}var i="[data-toggle=dropdown]",s=function(n){var e=t(n).on("click.dropdown.data-api",this.toggle);t("html").on("click.dropdown.data-api",function(){e.parent().removeClass("open")})};s.prototype={constructor:s,toggle:function(){var i,s,o=t(this);if(!o.is(".disabled, :disabled"))return i=e(o),s=i.hasClass("open"),n(),s||i.toggleClass("open"),o.focus(),!1},keydown:function(n){var s,o,a,r,h;if(/(38|40|27)/.test(n.keyCode)&&(s=t(this),n.preventDefault(),n.stopPropagation(),!s.is(".disabled, :disabled"))){if(a=e(s),r=a.hasClass("open"),!r||r&&27==n.keyCode)return 27==n.which&&a.find(i).focus(),s.click();o=t("[role=menu] li:not(.divider):visible a",a),o.length&&(h=o.index(o.filter(":focus")),38==n.keyCode&&h>0&&h--,40==n.keyCode&&o.length-1>h&&h++,~h||(h=0),o.eq(h).focus())}}};var o=t.fn.dropdown;t.fn.dropdown=function(n){return this.each(function(){var e=t(this),i=e.data("dropdown");i||e.data("dropdown",i=new s(this)),"string"==typeof n&&i[n].call(e)})},t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=o,this},t(document).on("click.dropdown.data-api",n).on("click.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.dropdown-menu",function(t){t.stopPropagation()}).on("click.dropdown.data-api",i,s.prototype.toggle).on("keydown.dropdown.data-api",i+", [role=menu]",s.prototype.keydown)}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.options=e,this.$element=t(n).delegate('[data-dismiss="modal"]',"click.dismiss.modal",t.proxy(this.hide,this)),this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};n.prototype={constructor:n,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var n=this,e=t.Event("show");this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.escape(),this.backdrop(function(){var e=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(document.body),n.$element.show(),e&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus(),e?n.$element.one(t.support.transition.end,function(){n.$element.focus().trigger("shown")}):n.$element.focus().trigger("shown")}))},hide:function(n){n&&n.preventDefault(),n=t.Event("hide"),this.$element.trigger(n),this.isShown&&!n.isDefaultPrevented()&&(this.isShown=!1,this.escape(),t(document).off("focusin.modal"),this.$element.removeClass("in").attr("aria-hidden",!0),t.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal())},enforceFocus:function(){var n=this;t(document).on("focusin.modal",function(t){n.$element[0]===t.target||n.$element.has(t.target).length||n.$element.focus()})},escape:function(){var t=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(n){27==n.which&&t.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var n=this,e=setTimeout(function(){n.$element.off(t.support.transition.end),n.hideModal()},500);this.$element.one(t.support.transition.end,function(){clearTimeout(e),n.hideModal()})},hideModal:function(){var t=this;this.$element.hide(),this.backdrop(function(){t.removeBackdrop(),t.$element.trigger("hidden")})},removeBackdrop:function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},backdrop:function(n){var e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=t.support.transition&&e;if(this.$backdrop=t('<div class="modal-backdrop '+e+'" />').appendTo(document.body),this.$backdrop.click("static"==this.options.backdrop?t.proxy(this.$element[0].focus,this.$element[0]):t.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!n)return;i?this.$backdrop.one(t.support.transition.end,n):n()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(t.support.transition.end,n):n()):n&&n()}};var e=t.fn.modal;t.fn.modal=function(e){return this.each(function(){var i=t(this),s=i.data("modal"),o=t.extend({},t.fn.modal.defaults,i.data(),"object"==typeof e&&e);s||i.data("modal",s=new n(this,o)),"string"==typeof e?s[e]():o.show&&s.show()})},t.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0},t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=e,this},t(document).on("click.modal.data-api",'[data-toggle="modal"]',function(n){var e=t(this),i=e.attr("href"),s=t(e.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),o=s.data("modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},s.data(),e.data());n.preventDefault(),s.modal(o).one("hide",function(){e.focus()})})}(window.jQuery),!function(t){"use strict";var n=function(t,n){this.init("tooltip",t,n)};n.prototype={constructor:n,init:function(n,e,i){var s,o,a,r,h;for(this.type=n,this.$element=t(e),this.options=this.getOptions(i),this.enabled=!0,a=this.options.trigger.split(" "),h=a.length;h--;)r=a[h],"click"==r?this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this)):"manual"!=r&&(s="hover"==r?"mouseenter":"focus",o="hover"==r?"mouseleave":"blur",this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(o+"."+this.type,this.options.selector,t.proxy(this.leave,this)));this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(n){return n=t.extend({},t.fn[this.type].defaults,this.$element.data(),n),n.delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),n},enter:function(n){var e,i=t.fn[this.type].defaults,s={};return this._options&&t.each(this._options,function(t,n){i[t]!=n&&(s[t]=n)},this),e=t(n.currentTarget)[this.type](s).data(this.type),e.options.delay&&e.options.delay.show?(clearTimeout(this.timeout),e.hoverState="in",this.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show),void 0):e.show()},leave:function(n){var e=t(n.currentTarget)[this.type](this._options).data(this.type);return this.timeout&&clearTimeout(this.timeout),e.options.delay&&e.options.delay.hide?(e.hoverState="out",this.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide),void 0):e.hide()},show:function(){var n,e,i,s,o,a,r=t.Event("show");if(this.hasContent()&&this.enabled){if(this.$element.trigger(r),r.isDefaultPrevented())return;switch(n=this.tip(),this.setContent(),this.options.animation&&n.addClass("fade"),o="function"==typeof this.options.placement?this.options.placement.call(this,n[0],this.$element[0]):this.options.placement,n.detach().css({top:0,left:0,display:"block"}),this.options.container?n.appendTo(this.options.container):n.insertAfter(this.$element),e=this.getPosition(),i=n[0].offsetWidth,s=n[0].offsetHeight,o){case"bottom":a={top:e.top+e.height,left:e.left+e.width/2-i/2};break;case"top":a={top:e.top-s,left:e.left+e.width/2-i/2};break;case"left":a={top:e.top+e.height/2-s/2,left:e.left-i};break;case"right":a={top:e.top+e.height/2-s/2,left:e.left+e.width}}this.applyPlacement(a,o),this.$element.trigger("shown")}},applyPlacement:function(t,n){var e,i,s,o,a=this.tip(),r=a[0].offsetWidth,h=a[0].offsetHeight;a.offset(t).addClass(n).addClass("in"),e=a[0].offsetWidth,i=a[0].offsetHeight,"top"==n&&i!=h&&(t.top=t.top+h-i,o=!0),"bottom"==n||"top"==n?(s=0,0>t.left&&(s=-2*t.left,t.left=0,a.offset(t),e=a[0].offsetWidth,i=a[0].offsetHeight),this.replaceArrow(s-r+e,e,"left")):this.replaceArrow(i-h,i,"top"),o&&a.offset(t)},replaceArrow:function(t,n,e){this.arrow().css(e,t?50*(1-t/n)+"%":"")},setContent:function(){var t=this.tip(),n=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](n),t.removeClass("fade in top bottom left right")},hide:function(){function n(){var n=setTimeout(function(){e.off(t.support.transition.end).detach()},500);e.one(t.support.transition.end,function(){clearTimeout(n),e.detach()})}var e=this.tip(),i=t.Event("hide");return this.$element.trigger(i),i.isDefaultPrevented()?void 0:(e.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?n():e.detach(),this.$element.trigger("hidden"),this)},fixTitle:function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},hasContent:function(){return this.getTitle()},getPosition:function(){var n=this.$element[0];return t.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():{width:n.offsetWidth,height:n.offsetHeight},this.$element.offset())},getTitle:function(){var t,n=this.$element,e=this.options;return t=n.attr("data-original-title")||("function"==typeof e.title?e.title.call(n[0]):e.title)},tip:function(){return this.$tip=this.$tip||t(this.options.template)},arrow:function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(n){var e=n?t(n.currentTarget)[this.type](this._options).data(this.type):this;e.tip().hasClass("in")?e.hide():e.show()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};var e=t.fn.tooltip;t.fn.tooltip=function(e){return this.each(function(){var i=t(this),s=i.data("tooltip"),o="object"==typeof e&&e;s||i.data("tooltip",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.tooltip.Constructor=n,t.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},t.fn.tooltip.noConflict=function(){return t.fn.tooltip=e,this}}(window.jQuery),!function(t){"use strict";var n=function(t,n){this.init("popover",t,n)};n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype,{constructor:n,setContent:function(){var t=this.tip(),n=this.getTitle(),e=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](n),t.find(".popover-content")[this.options.html?"html":"text"](e),t.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var t,n=this.$element,e=this.options;return t=("function"==typeof e.content?e.content.call(n[0]):e.content)||n.attr("data-content")},tip:function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}});var e=t.fn.popover;t.fn.popover=function(e){return this.each(function(){var i=t(this),s=i.data("popover"),o="object"==typeof e&&e;s||i.data("popover",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.popover.Constructor=n,t.fn.popover.defaults=t.extend({},t.fn.tooltip.defaults,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),t.fn.popover.noConflict=function(){return t.fn.popover=e,this}}(window.jQuery),!function(t){"use strict";function n(n,e){var i,s=t.proxy(this.process,this),o=t(n).is("body")?t(window):t(n);this.options=t.extend({},t.fn.scrollspy.defaults,e),this.$scrollElement=o.on("scroll.scroll-spy.data-api",s),this.selector=(this.options.target||(i=t(n).attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.$body=t("body"),this.refresh(),this.process()}n.prototype={constructor:n,refresh:function(){var n,e=this;this.offsets=t([]),this.targets=t([]),n=this.$body.find(this.selector).map(function(){var n=t(this),i=n.data("target")||n.attr("href"),s=/^#\w/.test(i)&&t(i);return s&&s.length&&[[s.position().top+(!t.isWindow(e.$scrollElement.get(0))&&e.$scrollElement.scrollTop()),i]]||null}).sort(function(t,n){return t[0]-n[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},process:function(){var t,n=this.$scrollElement.scrollTop()+this.options.offset,e=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,i=e-this.$scrollElement.height(),s=this.offsets,o=this.targets,a=this.activeTarget;if(n>=i)return a!=(t=o.last()[0])&&this.activate(t);for(t=s.length;t--;)a!=o[t]&&n>=s[t]&&(!s[t+1]||s[t+1]>=n)&&this.activate(o[t])},activate:function(n){var e,i;this.activeTarget=n,t(this.selector).parent(".active").removeClass("active"),i=this.selector+'[data-target="'+n+'"],'+this.selector+'[href="'+n+'"]',e=t(i).parent("li").addClass("active"),e.parent(".dropdown-menu").length&&(e=e.closest("li.dropdown").addClass("active")),e.trigger("activate")}};var e=t.fn.scrollspy;t.fn.scrollspy=function(e){return this.each(function(){var i=t(this),s=i.data("scrollspy"),o="object"==typeof e&&e;s||i.data("scrollspy",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.scrollspy.Constructor=n,t.fn.scrollspy.defaults={offset:10},t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=e,this},t(window).on("load",function(){t('[data-spy="scroll"]').each(function(){var n=t(this);n.scrollspy(n.data())})})}(window.jQuery),!function(t){"use strict";var n=function(n){this.element=t(n)};n.prototype={constructor:n,show:function(){var n,e,i,s=this.element,o=s.closest("ul:not(.dropdown-menu)"),a=s.attr("data-target");a||(a=s.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,"")),s.parent("li").hasClass("active")||(n=o.find(".active:last a")[0],i=t.Event("show",{relatedTarget:n}),s.trigger(i),i.isDefaultPrevented()||(e=t(a),this.activate(s.parent("li"),o),this.activate(e,e.parent(),function(){s.trigger({type:"shown",relatedTarget:n})})))},activate:function(n,e,i){function s(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),n.addClass("active"),a?(n[0].offsetWidth,n.addClass("in")):n.removeClass("fade"),n.parent(".dropdown-menu")&&n.closest("li.dropdown").addClass("active"),i&&i()}var o=e.find("> .active"),a=i&&t.support.transition&&o.hasClass("fade");a?o.one(t.support.transition.end,s):s(),o.removeClass("in")}};var e=t.fn.tab;t.fn.tab=function(e){return this.each(function(){var i=t(this),s=i.data("tab");s||i.data("tab",s=new n(this)),"string"==typeof e&&s[e]()})},t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=e,this},t(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),t(this).tab("show")})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.options=t.extend({},t.fn.typeahead.defaults,e),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.source=this.options.source,this.$menu=t(this.options.menu),this.shown=!1,this.listen()};n.prototype={constructor:n,select:function(){var t=this.$menu.find(".active").attr("data-value");return this.$element.val(this.updater(t)).change(),this.hide()},updater:function(t){return t},show:function(){var n=t.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});return this.$menu.insertAfter(this.$element).css({top:n.top+n.height,left:n.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(){var n;return this.query=this.$element.val(),!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(n=t.isFunction(this.source)?this.source(this.query,t.proxy(this.process,this)):this.source,n?this.process(n):this)},process:function(n){var e=this;return n=t.grep(n,function(t){return e.matcher(t)}),n=this.sorter(n),n.length?this.render(n.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(t){return~t.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(t){for(var n,e=[],i=[],s=[];n=t.shift();)n.toLowerCase().indexOf(this.query.toLowerCase())?~n.indexOf(this.query)?i.push(n):s.push(n):e.push(n);return e.concat(i,s)},highlighter:function(t){var n=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return t.replace(RegExp("("+n+")","ig"),function(t,n){return"<strong>"+n+"</strong>"})},render:function(n){var e=this;return n=t(n).map(function(n,i){return n=t(e.options.item).attr("data-value",i),n.find("a").html(e.highlighter(i)),n[0]
}),n.first().addClass("active"),this.$menu.html(n),this},next:function(){var n=this.$menu.find(".active").removeClass("active"),e=n.next();e.length||(e=t(this.$menu.find("li")[0])),e.addClass("active")},prev:function(){var t=this.$menu.find(".active").removeClass("active"),n=t.prev();n.length||(n=this.$menu.find("li").last()),n.addClass("active")},listen:function(){this.$element.on("focus",t.proxy(this.focus,this)).on("blur",t.proxy(this.blur,this)).on("keypress",t.proxy(this.keypress,this)).on("keyup",t.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",t.proxy(this.keydown,this)),this.$menu.on("click",t.proxy(this.click,this)).on("mouseenter","li",t.proxy(this.mouseenter,this)).on("mouseleave","li",t.proxy(this.mouseleave,this))},eventSupported:function(t){var n=t in this.$element;return n||(this.$element.setAttribute(t,"return;"),n="function"==typeof this.$element[t]),n},move:function(t){if(this.shown){switch(t.keyCode){case 9:case 13:case 27:t.preventDefault();break;case 38:t.preventDefault(),this.prev();break;case 40:t.preventDefault(),this.next()}t.stopPropagation()}},keydown:function(n){this.suppressKeyPressRepeat=~t.inArray(n.keyCode,[40,38,9,13,27]),this.move(n)},keypress:function(t){this.suppressKeyPressRepeat||this.move(t)},keyup:function(t){switch(t.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}t.stopPropagation(),t.preventDefault()},focus:function(){this.focused=!0},blur:function(){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(t){t.stopPropagation(),t.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(n){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),t(n.currentTarget).addClass("active")},mouseleave:function(){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var e=t.fn.typeahead;t.fn.typeahead=function(e){return this.each(function(){var i=t(this),s=i.data("typeahead"),o="object"==typeof e&&e;s||i.data("typeahead",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1},t.fn.typeahead.Constructor=n,t.fn.typeahead.noConflict=function(){return t.fn.typeahead=e,this},t(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(){var n=t(this);n.data("typeahead")||n.typeahead(n.data())})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.options=t.extend({},t.fn.affix.defaults,e),this.$window=t(window).on("scroll.affix.data-api",t.proxy(this.checkPosition,this)).on("click.affix.data-api",t.proxy(function(){setTimeout(t.proxy(this.checkPosition,this),1)},this)),this.$element=t(n),this.checkPosition()};n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var n,e=t(document).height(),i=this.$window.scrollTop(),s=this.$element.offset(),o=this.options.offset,a=o.bottom,r=o.top,h="affix affix-top affix-bottom";"object"!=typeof o&&(a=r=o),"function"==typeof r&&(r=o.top()),"function"==typeof a&&(a=o.bottom()),n=null!=this.unpin&&i+this.unpin<=s.top?!1:null!=a&&s.top+this.$element.height()>=e-a?"bottom":null!=r&&r>=i?"top":!1,this.affixed!==n&&(this.affixed=n,this.unpin="bottom"==n?s.top-i:null,this.$element.removeClass(h).addClass("affix"+(n?"-"+n:"")))}};var e=t.fn.affix;t.fn.affix=function(e){return this.each(function(){var i=t(this),s=i.data("affix"),o="object"==typeof e&&e;s||i.data("affix",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.affix.Constructor=n,t.fn.affix.defaults={offset:0},t.fn.affix.noConflict=function(){return t.fn.affix=e,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),e=n.data();e.offset=e.offset||{},e.offsetBottom&&(e.offset.bottom=e.offsetBottom),e.offsetTop&&(e.offset.top=e.offsetTop),n.affix(e)})})}(window.jQuery),define("bootstrap",["jquery"],function(t){return function(){var n;return n||t.jquery}}(this)),define("app",["jquery","backbone","routes/router","views/app","bootstrap"],function(t,n,e,i){"use strict";t(function(){function t(t){s.navigate(t,{trigger:!0})}var s=new e,o=new i;o.render(),o.listenTo(s,"update",o.update),o.menuView.on("click:chapter",t),o.contentView.topPagerView.on("click:item",t),o.contentView.bottomPagerView.on("click:item",t),n.history.start()})}),require.config({paths:{jquery:"../components/jquery/jquery",text:"../components/requirejs-text/text",backbone:"../components/backbone-amd/backbone",localstorage:"../components/backbone.localStorage/backbone.localStorage",lodash:"../components/lodash/lodash",bootstrap:"vendor/bootstrap",prettify:"../components/google-code-prettify/src/prettify",marked:"../components/marked/lib/marked",common:"helpers/common",io:"helpers/io",src:"../../data/lbac.src.txt"},shim:{bootstrap:{deps:["jquery"],exports:"jquery"}},map:{"*":{underscore:"lodash"}},packages:["lbac"]}),require(["app"]),define("main",function(){})})();