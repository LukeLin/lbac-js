(function(){(function(t,n){function e(t){var n=t.length,e=rn.type(t);return rn.isWindow(t)?!1:1===t.nodeType&&n?!0:"array"===e||"function"!==e&&(0===n||"number"==typeof n&&n>0&&n-1 in t)}function i(t){var n=mn[t]={};return rn.each(t.match(hn)||[],function(t,e){n[e]=!0}),n}function s(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=rn.expando+Math.random()}function o(t,e,i){var s;if(i===n&&1===t.nodeType)if(s="data-"+e.replace(kn,"-$1").toLowerCase(),i=t.getAttribute(s),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:vn.test(i)?JSON.parse(i):i}catch(o){}gn.set(t,e,i)}else i=n;return i}function r(){return!0}function a(){return!1}function h(){try{return H.activeElement}catch(t){}}function l(t,n){for(;(t=t[n])&&1!==t.nodeType;);return t}function c(t,n,e){if(rn.isFunction(n))return rn.grep(t,function(t,i){return!!n.call(t,i,t)!==e});if(n.nodeType)return rn.grep(t,function(t){return t===n!==e});if("string"==typeof n){if(Tn.test(n))return rn.filter(n,t,e);n=rn.filter(n,t)}return rn.grep(t,function(t){return nn.call(n,t)>=0!==e})}function u(t,n){return rn.nodeName(t,"table")&&rn.nodeName(1===n.nodeType?n:n.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function p(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function f(t){var n=$n.exec(t.type);return n?t.type=n[1]:t.removeAttribute("type"),t}function d(t,n){for(var e=t.length,i=0;e>i;i++)bn.set(t[i],"globalEval",!n||bn.get(n[i],"globalEval"))}function m(t,n){var e,i,s,o,r,a,h,l;if(1===n.nodeType){if(bn.hasData(t)&&(o=bn.access(t),r=rn.extend({},o),l=o.events,bn.set(n,r),l)){delete r.handle,r.events={};for(s in l)for(e=0,i=l[s].length;i>e;e++)rn.event.add(n,s,l[s][e])}gn.hasData(t)&&(a=gn.access(t),h=rn.extend({},a),gn.set(n,h))}}function g(t,e){var i=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return e===n||e&&rn.nodeName(t,e)?rn.merge([t],i):i}function b(t,n){var e=n.nodeName.toLowerCase();"input"===e&&Mn.test(t.type)?n.checked=t.checked:("input"===e||"textarea"===e)&&(n.defaultValue=t.defaultValue)}function v(t,n){if(n in t)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),i=n,s=Zn.length;s--;)if(n=Zn[s]+e,n in t)return n;return i}function k(t,n){return t=n||t,"none"===rn.css(t,"display")||!rn.contains(t.ownerDocument,t)}function y(n){return t.getComputedStyle(n,null)}function x(t,n){for(var e,i,s,o=[],r=0,a=t.length;a>r;r++)i=t[r],i.style&&(o[r]=bn.get(i,"olddisplay"),e=i.style.display,n?(o[r]||"none"!==e||(i.style.display=""),""===i.style.display&&k(i)&&(o[r]=bn.access(i,"olddisplay",C(i.nodeName)))):o[r]||(s=k(i),(e&&"none"!==e||!s)&&bn.set(i,"olddisplay",s?e:rn.css(i,"display"))));for(r=0;a>r;r++)i=t[r],i.style&&(n&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=n?o[r]||"":"none"));return t}function w(t,n,e){var i=Gn.exec(n);return i?Math.max(0,i[1]-(e||0))+(i[2]||"px"):n}function L(t,n,e,i,s){for(var o=e===(i?"border":"content")?4:"width"===n?1:0,r=0;4>o;o+=2)"margin"===e&&(r+=rn.css(t,e+Kn[o],!0,s)),i?("content"===e&&(r-=rn.css(t,"padding"+Kn[o],!0,s)),"margin"!==e&&(r-=rn.css(t,"border"+Kn[o]+"Width",!0,s))):(r+=rn.css(t,"padding"+Kn[o],!0,s),"padding"!==e&&(r+=rn.css(t,"border"+Kn[o]+"Width",!0,s)));return r}function E(t,n,e){var i=!0,s="width"===n?t.offsetWidth:t.offsetHeight,o=y(t),r=rn.support.boxSizing&&"border-box"===rn.css(t,"boxSizing",!1,o);if(0>=s||null==s){if(s=Vn(t,n,o),(0>s||null==s)&&(s=t.style[n]),Un.test(s))return s;i=r&&(rn.support.boxSizingReliable||s===t.style[n]),s=parseFloat(s)||0}return s+L(t,n,e||(r?"border":"content"),i,o)+"px"}function C(t){var n=H,e=Qn[t];return e||(e=D(t,n),"none"!==e&&e||(qn=(qn||rn("<iframe frameborder='0' width='0' height='0'/>").css("cssText","display:block !important")).appendTo(n.documentElement),n=(qn[0].contentWindow||qn[0].contentDocument).document,n.write("<!doctype html><html><body>"),n.close(),e=D(t,n),qn.detach()),Qn[t]=e),e}function D(t,n){var e=rn(n.createElement(t)).appendTo(n.body),i=rn.css(e[0],"display");return e.remove(),i}function S(t,n,e,i){var s;if(rn.isArray(n))rn.each(n,function(n,s){e||ne.test(t)?i(t,s):S(t+"["+("object"==typeof s?n:"")+"]",s,e,i)});else if(e||"object"!==rn.type(n))i(t,n);else for(s in n)S(t+"["+s+"]",n[s],e,i)}function N(t){return function(n,e){"string"!=typeof n&&(e=n,n="*");var i,s=0,o=n.toLowerCase().match(hn)||[];if(rn.isFunction(e))for(;i=o[s++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(e)):(t[i]=t[i]||[]).push(e)}}function T(t,e,i,s){function o(h){var l;return r[h]=!0,rn.each(t[h]||[],function(t,h){var c=h(e,i,s);return"string"!=typeof c||a||r[c]?a?!(l=c):n:(e.dataTypes.unshift(c),o(c),!1)}),l}var r={},a=t===ve;return o(e.dataTypes[0])||!r["*"]&&o("*")}function A(t,e){var i,s,o=rn.ajaxSettings.flatOptions||{};for(i in e)e[i]!==n&&((o[i]?t:s||(s={}))[i]=e[i]);return s&&rn.extend(!0,t,s),t}function O(t,e,i){for(var s,o,r,a,h=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),s===n&&(s=t.mimeType||e.getResponseHeader("Content-Type"));if(s)for(o in h)if(h[o]&&h[o].test(s)){l.unshift(o);break}if(l[0]in i)r=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}a||(a=o)}r=r||a}return r?(r!==l[0]&&l.unshift(r),i[r]):n}function R(t,n,e,i){var s,o,r,a,h,l={},c=t.dataTypes.slice();if(c[1])for(r in t.converters)l[r.toLowerCase()]=t.converters[r];for(o=c.shift();o;)if(t.responseFields[o]&&(e[t.responseFields[o]]=n),!h&&i&&t.dataFilter&&(n=t.dataFilter(n,t.dataType)),h=o,o=c.shift())if("*"===o)o=h;else if("*"!==h&&h!==o){if(r=l[h+" "+o]||l["* "+o],!r)for(s in l)if(a=s.split(" "),a[1]===o&&(r=l[h+" "+a[0]]||l["* "+a[0]])){r===!0?r=l[s]:l[s]!==!0&&(o=a[0],c.unshift(a[1]));break}if(r!==!0)if(r&&t["throws"])n=r(n);else try{n=r(n)}catch(u){return{state:"parsererror",error:r?u:"No conversion from "+h+" to "+o}}}return{state:"success",data:n}}function P(){return setTimeout(function(){Se=n}),Se=rn.now()}function I(t,n){rn.each(n,function(n,e){for(var i=(Pe[n]||[]).concat(Pe["*"]),s=0,o=i.length;o>s;s++)if(i[s].call(t,n,e))return})}function _(t,n,e){var i,s,o=0,r=Re.length,a=rn.Deferred().always(function(){delete h.elem}),h=function(){if(s)return!1;for(var n=Se||P(),e=Math.max(0,l.startTime+l.duration-n),i=e/l.duration||0,o=1-i,r=0,h=l.tweens.length;h>r;r++)l.tweens[r].run(o);return a.notifyWith(t,[l,o,e]),1>o&&h?e:(a.resolveWith(t,[l]),!1)},l=a.promise({elem:t,props:rn.extend({},n),opts:rn.extend(!0,{specialEasing:{}},e),originalProperties:n,originalOptions:e,startTime:Se||P(),duration:e.duration,tweens:[],createTween:function(n,e){var i=rn.Tween(t,l.opts,n,e,l.opts.specialEasing[n]||l.opts.easing);return l.tweens.push(i),i},stop:function(n){var e=0,i=n?l.tweens.length:0;if(s)return this;for(s=!0;i>e;e++)l.tweens[e].run(1);return n?a.resolveWith(t,[l,n]):a.rejectWith(t,[l,n]),this}}),c=l.props;for(M(c,l.opts.specialEasing);r>o;o++)if(i=Re[o].call(l,t,c,l.opts))return i;return I(l,c),rn.isFunction(l.opts.start)&&l.opts.start.call(t,l),rn.fx.timer(rn.extend(h,{elem:t,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function M(t,n){var e,i,s,o,r;for(e in t)if(i=rn.camelCase(e),s=n[i],o=t[e],rn.isArray(o)&&(s=o[1],o=t[e]=o[0]),e!==i&&(t[i]=o,delete t[e]),r=rn.cssHooks[i],r&&"expand"in r){o=r.expand(o),delete t[i];for(e in o)e in t||(t[e]=o[e],n[e]=s)}else n[i]=s}function F(t,e,i){var s,o,r,a,h,l,c,u,p,f=this,d=t.style,m={},g=[],b=t.nodeType&&k(t);i.queue||(u=rn._queueHooks(t,"fx"),null==u.unqueued&&(u.unqueued=0,p=u.empty.fire,u.empty.fire=function(){u.unqueued||p()}),u.unqueued++,f.always(function(){f.always(function(){u.unqueued--,rn.queue(t,"fx").length||u.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[d.overflow,d.overflowX,d.overflowY],"inline"===rn.css(t,"display")&&"none"===rn.css(t,"float")&&(d.display="inline-block")),i.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=i.overflow[0],d.overflowX=i.overflow[1],d.overflowY=i.overflow[2]})),h=bn.get(t,"fxshow");for(s in e)if(r=e[s],Te.exec(r)){if(delete e[s],l=l||"toggle"===r,r===(b?"hide":"show")){if("show"!==r||h===n||h[s]===n)continue;b=!0}g.push(s)}if(a=g.length){h=bn.get(t,"fxshow")||bn.access(t,"fxshow",{}),"hidden"in h&&(b=h.hidden),l&&(h.hidden=!b),b?rn(t).show():f.done(function(){rn(t).hide()}),f.done(function(){var n;bn.remove(t,"fxshow");for(n in m)rn.style(t,n,m[n])});for(s=0;a>s;s++)o=g[s],c=f.createTween(o,b?h[o]:0),m[o]=h[o]||rn.style(t,o),o in h||(h[o]=c.start,b&&(c.end=c.start,c.start="width"===o||"height"===o?1:0))}}function B(t,n,e,i,s){return new B.prototype.init(t,n,e,i,s)}function $(t,n){var e,i={height:t},s=0;for(n=n?1:0;4>s;s+=2-n)e=Kn[s],i["margin"+e]=i["padding"+e]=t;return n&&(i.opacity=i.width=t),i}function j(t){return rn.isWindow(t)?t:9===t.nodeType&&t.defaultView}var W,V,q=typeof n,z=t.location,H=t.document,G=H.documentElement,U=t.jQuery,X=t.$,Q={},Y=[],J="2.0.0",K=Y.concat,Z=Y.push,tn=Y.slice,nn=Y.indexOf,en=Q.toString,sn=Q.hasOwnProperty,on=J.trim,rn=function(t,n){return new rn.fn.init(t,n,W)},an=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,hn=/\S+/g,ln=/^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,cn=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,un=/^-ms-/,pn=/-([\da-z])/gi,fn=function(t,n){return n.toUpperCase()},dn=function(){H.removeEventListener("DOMContentLoaded",dn,!1),t.removeEventListener("load",dn,!1),rn.ready()};rn.fn=rn.prototype={jquery:J,constructor:rn,init:function(t,e,i){var s,o;if(!t)return this;if("string"==typeof t){if(s="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:ln.exec(t),!s||!s[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(s[1]){if(e=e instanceof rn?e[0]:e,rn.merge(this,rn.parseHTML(s[1],e&&e.nodeType?e.ownerDocument||e:H,!0)),cn.test(s[1])&&rn.isPlainObject(e))for(s in e)rn.isFunction(this[s])?this[s](e[s]):this.attr(s,e[s]);return this}return o=H.getElementById(s[2]),o&&o.parentNode&&(this.length=1,this[0]=o),this.context=H,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):rn.isFunction(t)?i.ready(t):(t.selector!==n&&(this.selector=t.selector,this.context=t.context),rn.makeArray(t,this))},selector:"",length:0,toArray:function(){return tn.call(this)},get:function(t){return null==t?this.toArray():0>t?this[this.length+t]:this[t]},pushStack:function(t){var n=rn.merge(this.constructor(),t);return n.prevObject=this,n.context=this.context,n},each:function(t,n){return rn.each(this,t,n)},ready:function(t){return rn.ready.promise().done(t),this},slice:function(){return this.pushStack(tn.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var n=this.length,e=+t+(0>t?n:0);return this.pushStack(e>=0&&n>e?[this[e]]:[])},map:function(t){return this.pushStack(rn.map(this,function(n,e){return t.call(n,e,n)}))},end:function(){return this.prevObject||this.constructor(null)},push:Z,sort:[].sort,splice:[].splice},rn.fn.init.prototype=rn.fn,rn.extend=rn.fn.extend=function(){var t,e,i,s,o,r,a=arguments[0]||{},h=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[1]||{},h=2),"object"==typeof a||rn.isFunction(a)||(a={}),l===h&&(a=this,--h);l>h;h++)if(null!=(t=arguments[h]))for(e in t)i=a[e],s=t[e],a!==s&&(c&&s&&(rn.isPlainObject(s)||(o=rn.isArray(s)))?(o?(o=!1,r=i&&rn.isArray(i)?i:[]):r=i&&rn.isPlainObject(i)?i:{},a[e]=rn.extend(c,r,s)):s!==n&&(a[e]=s));return a},rn.extend({expando:"jQuery"+(J+Math.random()).replace(/\D/g,""),noConflict:function(n){return t.$===rn&&(t.$=X),n&&t.jQuery===rn&&(t.jQuery=U),rn},isReady:!1,readyWait:1,holdReady:function(t){t?rn.readyWait++:rn.ready(!0)},ready:function(t){(t===!0?--rn.readyWait:rn.isReady)||(rn.isReady=!0,t!==!0&&--rn.readyWait>0||(V.resolveWith(H,[rn]),rn.fn.trigger&&rn(H).trigger("ready").off("ready")))},isFunction:function(t){return"function"===rn.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!isNaN(parseFloat(t))&&isFinite(t)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?Q[en.call(t)]||"object":typeof t},isPlainObject:function(t){if("object"!==rn.type(t)||t.nodeType||rn.isWindow(t))return!1;try{if(t.constructor&&!sn.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}return!0},isEmptyObject:function(t){var n;for(n in t)return!1;return!0},error:function(t){throw Error(t)},parseHTML:function(t,n,e){if(!t||"string"!=typeof t)return null;"boolean"==typeof n&&(e=n,n=!1),n=n||H;var i=cn.exec(t),s=!e&&[];return i?[n.createElement(i[1])]:(i=rn.buildFragment([t],n,s),s&&rn(s).remove(),rn.merge([],i.childNodes))},parseJSON:JSON.parse,parseXML:function(t){var e,i;if(!t||"string"!=typeof t)return null;try{i=new DOMParser,e=i.parseFromString(t,"text/xml")}catch(s){e=n}return(!e||e.getElementsByTagName("parsererror").length)&&rn.error("Invalid XML: "+t),e},noop:function(){},globalEval:function(t){var n,e=eval;t=rn.trim(t),t&&(1===t.indexOf("use strict")?(n=H.createElement("script"),n.text=t,H.head.appendChild(n).parentNode.removeChild(n)):e(t))},camelCase:function(t){return t.replace(un,"ms-").replace(pn,fn)},nodeName:function(t,n){return t.nodeName&&t.nodeName.toLowerCase()===n.toLowerCase()},each:function(t,n,i){var s,o=0,r=t.length,a=e(t);if(i){if(a)for(;r>o&&(s=n.apply(t[o],i),s!==!1);o++);else for(o in t)if(s=n.apply(t[o],i),s===!1)break}else if(a)for(;r>o&&(s=n.call(t[o],o,t[o]),s!==!1);o++);else for(o in t)if(s=n.call(t[o],o,t[o]),s===!1)break;return t},trim:function(t){return null==t?"":on.call(t)},makeArray:function(t,n){var i=n||[];return null!=t&&(e(Object(t))?rn.merge(i,"string"==typeof t?[t]:t):Z.call(i,t)),i},inArray:function(t,n,e){return null==n?-1:nn.call(n,t,e)},merge:function(t,e){var i=e.length,s=t.length,o=0;if("number"==typeof i)for(;i>o;o++)t[s++]=e[o];else for(;e[o]!==n;)t[s++]=e[o++];return t.length=s,t},grep:function(t,n,e){var i,s=[],o=0,r=t.length;for(e=!!e;r>o;o++)i=!!n(t[o],o),e!==i&&s.push(t[o]);return s},map:function(t,n,i){var s,o=0,r=t.length,a=e(t),h=[];if(a)for(;r>o;o++)s=n(t[o],o,i),null!=s&&(h[h.length]=s);else for(o in t)s=n(t[o],o,i),null!=s&&(h[h.length]=s);return K.apply([],h)},guid:1,proxy:function(t,e){var i,s,o;return"string"==typeof e&&(i=t[e],e=t,t=i),rn.isFunction(t)?(s=tn.call(arguments,2),o=function(){return t.apply(e||this,s.concat(tn.call(arguments)))},o.guid=t.guid=t.guid||rn.guid++,o):n},access:function(t,e,i,s,o,r,a){var h=0,l=t.length,c=null==i;if("object"===rn.type(i)){o=!0;for(h in i)rn.access(t,e,h,i[h],!0,r,a)}else if(s!==n&&(o=!0,rn.isFunction(s)||(a=!0),c&&(a?(e.call(t,s),e=null):(c=e,e=function(t,n,e){return c.call(rn(t),e)})),e))for(;l>h;h++)e(t[h],i,a?s:s.call(t[h],h,e(t[h],i)));return o?t:c?e.call(t):l?e(t[0],i):r},now:Date.now,swap:function(t,n,e,i){var s,o,r={};for(o in n)r[o]=t.style[o],t.style[o]=n[o];s=e.apply(t,i||[]);for(o in n)t.style[o]=r[o];return s}}),rn.ready.promise=function(n){return V||(V=rn.Deferred(),"complete"===H.readyState?setTimeout(rn.ready):(H.addEventListener("DOMContentLoaded",dn,!1),t.addEventListener("load",dn,!1))),V.promise(n)},rn.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,n){Q["[object "+n+"]"]=n.toLowerCase()}),W=rn(H),function(t,n){function e(t){return yn.test(t+"")}function i(){var t,n=[];return t=function(e,i){return n.push(e+=" ")>D.cacheLength&&delete t[n.shift()],t[e]=i}}function s(t){return t[j]=!0,t}function o(t){var n=P.createElement("div");try{return!!t(n)}catch(e){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function r(t,n,e,i){var s,o,r,a,h,l,c,u,p,m;if((n?n.ownerDocument||n:W)!==P&&R(n),n=n||P,e=e||[],!t||"string"!=typeof t)return e;if(1!==(a=n.nodeType)&&9!==a)return[];if(_&&!i){if(s=xn.exec(t))if(r=s[1]){if(9===a){if(o=n.getElementById(r),!o||!o.parentNode)return e;if(o.id===r)return e.push(o),e}else if(n.ownerDocument&&(o=n.ownerDocument.getElementById(r))&&$(n,o)&&o.id===r)return e.push(o),e}else{if(s[2])return nn.apply(e,n.getElementsByTagName(t)),e;if((r=s[3])&&V.getElementsByClassName&&n.getElementsByClassName)return nn.apply(e,n.getElementsByClassName(r)),e}if(V.qsa&&(!M||!M.test(t))){if(u=c=j,p=n,m=9===a&&t,1===a&&"object"!==n.nodeName.toLowerCase()){for(l=f(t),(c=n.getAttribute("id"))?u=c.replace(En,"\\$&"):n.setAttribute("id",u),u="[id='"+u+"'] ",h=l.length;h--;)l[h]=u+d(l[h]);p=mn.test(t)&&n.parentNode||n,m=l.join(",")}if(m)try{return nn.apply(e,p.querySelectorAll(m)),e}catch(g){}finally{c||n.removeAttribute("id")}}}return w(t.replace(pn,"$1"),n,e,i)}function a(t,n){var e=n&&t,i=e&&(~n.sourceIndex||J)-(~t.sourceIndex||J);if(i)return i;if(e)for(;e=e.nextSibling;)if(e===n)return-1;return t?1:-1}function h(t,e,i){var s;return i?n:(s=t.getAttributeNode(e))&&s.specified?s.value:t[e]===!0?e.toLowerCase():null}function l(t,e,i){var s;return i?n:s=t.getAttribute(e,"type"===e.toLowerCase()?1:2)}function c(t){return function(n){var e=n.nodeName.toLowerCase();return"input"===e&&n.type===t}}function u(t){return function(n){var e=n.nodeName.toLowerCase();return("input"===e||"button"===e)&&n.type===t}}function p(t){return s(function(n){return n=+n,s(function(e,i){for(var s,o=t([],e.length,n),r=o.length;r--;)e[s=o[r]]&&(e[s]=!(i[s]=e[s]))})})}function f(t,n){var e,i,s,o,a,h,l,c=G[t+" "];if(c)return n?0:c.slice(0);for(a=t,h=[],l=D.preFilter;a;){(!e||(i=fn.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),h.push(s=[])),e=!1,(i=dn.exec(a))&&(e=i.shift(),s.push({value:e,type:i[0].replace(pn," ")}),a=a.slice(e.length));for(o in D.filter)!(i=kn[o].exec(a))||l[o]&&!(i=l[o](i))||(e=i.shift(),s.push({value:e,type:o,matches:i}),a=a.slice(e.length));if(!e)break}return n?a.length:a?r.error(t):G(t,h).slice(0)}function d(t){for(var n=0,e=t.length,i="";e>n;n++)i+=t[n].value;return i}function m(t,n,e){var i=n.dir,s=e&&"parentNode"===i,o=z++;return n.first?function(n,e,o){for(;n=n[i];)if(1===n.nodeType||s)return t(n,e,o)}:function(n,e,r){var a,h,l,c=q+" "+o;if(r){for(;n=n[i];)if((1===n.nodeType||s)&&t(n,e,r))return!0}else for(;n=n[i];)if(1===n.nodeType||s)if(l=n[j]||(n[j]={}),(h=l[i])&&h[0]===c){if((a=h[1])===!0||a===C)return a===!0}else if(h=l[i]=[c],h[1]=t(n,e,r)||C,h[1]===!0)return!0}}function g(t){return t.length>1?function(n,e,i){for(var s=t.length;s--;)if(!t[s](n,e,i))return!1;return!0}:t[0]}function b(t,n,e,i,s){for(var o,r=[],a=0,h=t.length,l=null!=n;h>a;a++)(o=t[a])&&(!e||e(o,i,s))&&(r.push(o),l&&n.push(a));return r}function v(t,n,e,i,o,r){return i&&!i[j]&&(i=v(i)),o&&!o[j]&&(o=v(o,r)),s(function(s,r,a,h){var l,c,u,p=[],f=[],d=r.length,m=s||x(n||"*",a.nodeType?[a]:a,[]),g=!t||!s&&n?m:b(m,p,t,a,h),v=e?o||(s?t:d||i)?[]:r:g;if(e&&e(g,v,a,h),i)for(l=b(v,f),i(l,[],a,h),c=l.length;c--;)(u=l[c])&&(v[f[c]]=!(g[f[c]]=u));if(s){if(o||t){if(o){for(l=[],c=v.length;c--;)(u=v[c])&&l.push(g[c]=u);o(null,v=[],l,h)}for(c=v.length;c--;)(u=v[c])&&(l=o?sn.call(s,u):p[c])>-1&&(s[l]=!(r[l]=u))}}else v=b(v===r?v.splice(d,v.length):v),o?o(null,r,v,h):nn.apply(r,v)})}function k(t){for(var n,e,i,s=t.length,o=D.relative[t[0].type],r=o||D.relative[" "],a=o?1:0,h=m(function(t){return t===n},r,!0),l=m(function(t){return sn.call(n,t)>-1},r,!0),c=[function(t,e,i){return!o&&(i||e!==A)||((n=e).nodeType?h(t,e,i):l(t,e,i))}];s>a;a++)if(e=D.relative[t[a].type])c=[m(g(c),e)];else{if(e=D.filter[t[a].type].apply(null,t[a].matches),e[j]){for(i=++a;s>i&&!D.relative[t[i].type];i++);return v(a>1&&g(c),a>1&&d(t.slice(0,a-1)).replace(pn,"$1"),e,i>a&&k(t.slice(a,i)),s>i&&k(t=t.slice(i)),s>i&&d(t))}c.push(e)}return g(c)}function y(t,n){var e=0,i=n.length>0,o=t.length>0,a=function(s,a,h,l,c){var u,p,f,d=[],m=0,g="0",v=s&&[],k=null!=c,y=A,x=s||o&&D.find.TAG("*",c&&a.parentNode||a),w=q+=null==y?1:Math.random()||.1;for(k&&(A=a!==P&&a,C=e);null!=(u=x[g]);g++){if(o&&u){for(p=0;f=t[p++];)if(f(u,a,h)){l.push(u);break}k&&(q=w,C=++e)}i&&((u=!f&&u)&&m--,s&&v.push(u))}if(m+=g,i&&g!==m){for(p=0;f=n[p++];)f(v,d,a,h);if(s){if(m>0)for(;g--;)v[g]||d[g]||(d[g]=Z.call(l));d=b(d)}nn.apply(l,d),k&&!s&&d.length>0&&m+n.length>1&&r.uniqueSort(l)}return k&&(q=w,A=y),v};return i?s(a):a}function x(t,n,e){for(var i=0,s=n.length;s>i;i++)r(t,n[i],e);return e}function w(t,n,e,i){var s,o,r,a,h,l=f(t);if(!i&&1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(r=o[0]).type&&9===n.nodeType&&_&&D.relative[o[1].type]){if(n=(D.find.ID(r.matches[0].replace(Cn,Dn),n)||[])[0],!n)return e;t=t.slice(o.shift().value.length)}for(s=kn.needsContext.test(t)?0:o.length;s--&&(r=o[s],!D.relative[a=r.type]);)if((h=D.find[a])&&(i=h(r.matches[0].replace(Cn,Dn),mn.test(o[0].type)&&n.parentNode||n))){if(o.splice(s,1),t=i.length&&d(o),!t)return nn.apply(e,i),e;break}}return T(t,l)(i,n,!_,e,mn.test(t)),e}function L(){}var E,C,D,S,N,T,A,O,R,P,I,_,M,F,B,$,j="sizzle"+-new Date,W=t.document,V={},q=0,z=0,H=i(),G=i(),U=i(),X=!1,Q=function(){return 0},Y=typeof n,J=1<<31,K=[],Z=K.pop,tn=K.push,nn=K.push,en=K.slice,sn=K.indexOf||function(t){for(var n=0,e=this.length;e>n;n++)if(this[n]===t)return n;return-1},on="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",an="[\\x20\\t\\r\\n\\f]",hn="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ln=hn.replace("w","w#"),cn="\\["+an+"*("+hn+")"+an+"*(?:([*^$|!~]?=)"+an+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+ln+")|)|)"+an+"*\\]",un=":("+hn+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+cn.replace(3,8)+")*)|.*)\\)|)",pn=RegExp("^"+an+"+|((?:^|[^\\\\])(?:\\\\.)*)"+an+"+$","g"),fn=RegExp("^"+an+"*,"+an+"*"),dn=RegExp("^"+an+"*([>+~]|"+an+")"+an+"*"),mn=RegExp(an+"*[+~]"),gn=RegExp("="+an+"*([^\\]'\"]*)"+an+"*\\]","g"),bn=RegExp(un),vn=RegExp("^"+ln+"$"),kn={ID:RegExp("^#("+hn+")"),CLASS:RegExp("^\\.("+hn+")"),TAG:RegExp("^("+hn.replace("w","w*")+")"),ATTR:RegExp("^"+cn),PSEUDO:RegExp("^"+un),CHILD:RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+an+"*(even|odd|(([+-]|)(\\d*)n|)"+an+"*(?:([+-]|)"+an+"*(\\d+)|))"+an+"*\\)|)","i"),"boolean":RegExp("^(?:"+on+")$","i"),needsContext:RegExp("^"+an+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+an+"*((?:-\\d)?\\d*)"+an+"*\\)|)(?=[^-]|$)","i")},yn=/^[^{]+\{\s*\[native \w/,xn=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wn=/^(?:input|select|textarea|button)$/i,Ln=/^h\d$/i,En=/'|\\/g,Cn=/\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,Dn=function(t,n){var e="0x"+n-65536;return e!==e?n:0>e?String.fromCharCode(e+65536):String.fromCharCode(55296|e>>10,56320|1023&e)};try{nn.apply(K=en.call(W.childNodes),W.childNodes),K[W.childNodes.length].nodeType}catch(Sn){nn={apply:K.length?function(t,n){tn.apply(t,en.call(n))}:function(t,n){for(var e=t.length,i=0;t[e++]=n[i++];);t.length=e-1}}}N=r.isXML=function(t){var n=t&&(t.ownerDocument||t).documentElement;return n?"HTML"!==n.nodeName:!1},R=r.setDocument=function(t){var i=t?t.ownerDocument||t:W;return i!==P&&9===i.nodeType&&i.documentElement?(P=i,I=i.documentElement,_=!N(i),V.getElementsByTagName=o(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),V.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),V.getElementsByClassName=o(function(t){return t.innerHTML="<div class='a'></div><div class='a i'></div>",t.firstChild.className="i",2===t.getElementsByClassName("i").length}),V.sortDetached=o(function(t){return 1&t.compareDocumentPosition(P.createElement("div"))}),V.getById=o(function(t){return I.appendChild(t).id=j,!i.getElementsByName||!i.getElementsByName(j).length}),V.getById?(D.find.ID=function(t,n){if(typeof n.getElementById!==Y&&_){var e=n.getElementById(t);return e&&e.parentNode?[e]:[]}},D.filter.ID=function(t){var n=t.replace(Cn,Dn);return function(t){return t.getAttribute("id")===n}}):(D.find.ID=function(t,e){if(typeof e.getElementById!==Y&&_){var i=e.getElementById(t);return i?i.id===t||typeof i.getAttributeNode!==Y&&i.getAttributeNode("id").value===t?[i]:n:[]}},D.filter.ID=function(t){var n=t.replace(Cn,Dn);return function(t){var e=typeof t.getAttributeNode!==Y&&t.getAttributeNode("id");return e&&e.value===n}}),D.find.TAG=V.getElementsByTagName?function(t,e){return typeof e.getElementsByTagName!==Y?e.getElementsByTagName(t):n}:function(t,n){var e,i=[],s=0,o=n.getElementsByTagName(t);if("*"===t){for(;e=o[s++];)1===e.nodeType&&i.push(e);return i}return o},D.find.CLASS=V.getElementsByClassName&&function(t,e){return typeof e.getElementsByClassName!==Y&&_?e.getElementsByClassName(t):n},F=[],M=[],(V.qsa=e(i.querySelectorAll))&&(o(function(t){t.innerHTML="<select><option selected=''></option></select>",t.querySelectorAll("[selected]").length||M.push("\\["+an+"*(?:value|"+on+")"),t.querySelectorAll(":checked").length||M.push(":checked")}),o(function(t){var n=P.createElement("input");n.setAttribute("type","hidden"),t.appendChild(n).setAttribute("t",""),t.querySelectorAll("[t^='']").length&&M.push("[*^$]="+an+"*(?:''|\"\")"),t.querySelectorAll(":enabled").length||M.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),M.push(",.*:")})),(V.matchesSelector=e(B=I.webkitMatchesSelector||I.mozMatchesSelector||I.oMatchesSelector||I.msMatchesSelector))&&o(function(t){V.disconnectedMatch=B.call(t,"div"),B.call(t,"[s!='']:x"),F.push("!=",un)}),M=M.length&&RegExp(M.join("|")),F=F.length&&RegExp(F.join("|")),$=e(I.contains)||I.compareDocumentPosition?function(t,n){var e=9===t.nodeType?t.documentElement:t,i=n&&n.parentNode;return t===i||!(!i||1!==i.nodeType||!(e.contains?e.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,n){if(n)for(;n=n.parentNode;)if(n===t)return!0;return!1},Q=I.compareDocumentPosition?function(t,n){if(t===n)return X=!0,0;var e=n.compareDocumentPosition&&t.compareDocumentPosition&&t.compareDocumentPosition(n);return e?1&e||!V.sortDetached&&n.compareDocumentPosition(t)===e?t===i||$(W,t)?-1:n===i||$(W,n)?1:O?sn.call(O,t)-sn.call(O,n):0:4&e?-1:1:t.compareDocumentPosition?-1:1}:function(t,n){var e,s=0,o=t.parentNode,r=n.parentNode,h=[t],l=[n];if(t===n)return X=!0,0;if(!o||!r)return t===i?-1:n===i?1:o?-1:r?1:O?sn.call(O,t)-sn.call(O,n):0;if(o===r)return a(t,n);for(e=t;e=e.parentNode;)h.unshift(e);for(e=n;e=e.parentNode;)l.unshift(e);for(;h[s]===l[s];)s++;return s?a(h[s],l[s]):h[s]===W?-1:l[s]===W?1:0},P):P},r.matches=function(t,n){return r(t,null,null,n)},r.matchesSelector=function(t,n){if((t.ownerDocument||t)!==P&&R(t),n=n.replace(gn,"='$1']"),!(!V.matchesSelector||!_||F&&F.test(n)||M&&M.test(n)))try{var e=B.call(t,n);if(e||V.disconnectedMatch||t.document&&11!==t.document.nodeType)return e}catch(i){}return r(n,P,null,[t]).length>0},r.contains=function(t,n){return(t.ownerDocument||t)!==P&&R(t),$(t,n)},r.attr=function(t,e){(t.ownerDocument||t)!==P&&R(t);var i=D.attrHandle[e.toLowerCase()],s=i&&i(t,e,!_);return s===n?V.attributes||!_?t.getAttribute(e):(s=t.getAttributeNode(e))&&s.specified?s.value:null:s},r.error=function(t){throw Error("Syntax error, unrecognized expression: "+t)},r.uniqueSort=function(t){var n,e=[],i=0,s=0;if(X=!V.detectDuplicates,O=!V.sortStable&&t.slice(0),t.sort(Q),X){for(;n=t[s++];)n===t[s]&&(i=e.push(s));for(;i--;)t.splice(e[i],1)}return t},S=r.getText=function(t){var n,e="",i=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)e+=S(t)}else if(3===s||4===s)return t.nodeValue}else for(;n=t[i];i++)e+=S(n);return e},D=r.selectors={cacheLength:50,createPseudo:s,match:kn,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Cn,Dn),t[3]=(t[4]||t[5]||"").replace(Cn,Dn),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||r.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&r.error(t[0]),t},PSEUDO:function(t){var n,e=!t[5]&&t[2];return kn.CHILD.test(t[0])?null:(t[4]?t[2]=t[4]:e&&bn.test(e)&&(n=f(e,!0))&&(n=e.indexOf(")",e.length-n)-e.length)&&(t[0]=t[0].slice(0,n),t[2]=e.slice(0,n)),t.slice(0,3))}},filter:{TAG:function(t){var n=t.replace(Cn,Dn).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===n}},CLASS:function(t){var n=H[t+" "];return n||(n=RegExp("(^|"+an+")"+t+"("+an+"|$)"))&&H(t,function(t){return n.test("string"==typeof t.className&&t.className||typeof t.getAttribute!==Y&&t.getAttribute("class")||"")})},ATTR:function(t,n,e){return function(i){var s=r.attr(i,t);return null==s?"!="===n:n?(s+="","="===n?s===e:"!="===n?s!==e:"^="===n?e&&0===s.indexOf(e):"*="===n?e&&s.indexOf(e)>-1:"$="===n?e&&s.slice(-e.length)===e:"~="===n?(" "+s+" ").indexOf(e)>-1:"|="===n?s===e||s.slice(0,e.length+1)===e+"-":!1):!0}},CHILD:function(t,n,e,i,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===n;return 1===i&&0===s?function(t){return!!t.parentNode}:function(n,e,h){var l,c,u,p,f,d,m=o!==r?"nextSibling":"previousSibling",g=n.parentNode,b=a&&n.nodeName.toLowerCase(),v=!h&&!a;if(g){if(o){for(;m;){for(u=n;u=u[m];)if(a?u.nodeName.toLowerCase()===b:1===u.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[r?g.firstChild:g.lastChild],r&&v){for(c=g[j]||(g[j]={}),l=c[t]||[],f=l[0]===q&&l[1],p=l[0]===q&&l[2],u=f&&g.childNodes[f];u=++f&&u&&u[m]||(p=f=0)||d.pop();)if(1===u.nodeType&&++p&&u===n){c[t]=[q,f,p];break}}else if(v&&(l=(n[j]||(n[j]={}))[t])&&l[0]===q)p=l[1];else for(;(u=++f&&u&&u[m]||(p=f=0)||d.pop())&&((a?u.nodeName.toLowerCase()!==b:1!==u.nodeType)||!++p||(v&&((u[j]||(u[j]={}))[t]=[q,p]),u!==n)););return p-=s,p===i||0===p%i&&p/i>=0}}},PSEUDO:function(t,n){var e,i=D.pseudos[t]||D.setFilters[t.toLowerCase()]||r.error("unsupported pseudo: "+t);return i[j]?i(n):i.length>1?(e=[t,t,"",n],D.setFilters.hasOwnProperty(t.toLowerCase())?s(function(t,e){for(var s,o=i(t,n),r=o.length;r--;)s=sn.call(t,o[r]),t[s]=!(e[s]=o[r])}):function(t){return i(t,0,e)}):i}},pseudos:{not:s(function(t){var n=[],e=[],i=T(t.replace(pn,"$1"));return i[j]?s(function(t,n,e,s){for(var o,r=i(t,null,s,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(n[a]=o))}):function(t,s,o){return n[0]=t,i(n,null,o,e),!e.pop()}}),has:s(function(t){return function(n){return r(t,n).length>0}}),contains:s(function(t){return function(n){return(n.textContent||n.innerText||S(n)).indexOf(t)>-1}}),lang:s(function(t){return vn.test(t||"")||r.error("unsupported lang: "+t),t=t.replace(Cn,Dn).toLowerCase(),function(n){var e;do if(e=_?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return e=e.toLowerCase(),e===t||0===e.indexOf(t+"-");while((n=n.parentNode)&&1===n.nodeType);return!1}}),target:function(n){var e=t.location&&t.location.hash;return e&&e.slice(1)===n.id},root:function(t){return t===I},focus:function(t){return t===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&!!t.checked||"option"===n&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeName>"@"||3===t.nodeType||4===t.nodeType)return!1;return!0},parent:function(t){return!D.pseudos.empty(t)},header:function(t){return Ln.test(t.nodeName)},input:function(t){return wn.test(t.nodeName)},button:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&"button"===t.type||"button"===n},text:function(t){var n;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(n=t.getAttribute("type"))||n.toLowerCase()===t.type)},first:p(function(){return[0]}),last:p(function(t,n){return[n-1]}),eq:p(function(t,n,e){return[0>e?e+n:e]}),even:p(function(t,n){for(var e=0;n>e;e+=2)t.push(e);return t}),odd:p(function(t,n){for(var e=1;n>e;e+=2)t.push(e);return t}),lt:p(function(t,n,e){for(var i=0>e?e+n:e;--i>=0;)t.push(i);return t}),gt:p(function(t,n,e){for(var i=0>e?e+n:e;n>++i;)t.push(i);
return t})}};for(E in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})D.pseudos[E]=c(E);for(E in{submit:!0,reset:!0})D.pseudos[E]=u(E);T=r.compile=function(t,n){var e,i=[],s=[],o=U[t+" "];if(!o){for(n||(n=f(t)),e=n.length;e--;)o=k(n[e]),o[j]?i.push(o):s.push(o);o=U(t,y(s,i))}return o},D.pseudos.nth=D.pseudos.eq,L.prototype=D.filters=D.pseudos,D.setFilters=new L,V.sortStable=j.split("").sort(Q).join("")===j,R(),[0,0].sort(Q),V.detectDuplicates=X,o(function(t){if(t.innerHTML="<a href='#'></a>","#"!==t.firstChild.getAttribute("href"))for(var n="type|href|height|width".split("|"),e=n.length;e--;)D.attrHandle[n[e]]=l}),o(function(t){if(null!=t.getAttribute("disabled"))for(var n=on.split("|"),e=n.length;e--;)D.attrHandle[n[e]]=h}),rn.find=r,rn.expr=r.selectors,rn.expr[":"]=rn.expr.pseudos,rn.unique=r.uniqueSort,rn.text=r.getText,rn.isXMLDoc=r.isXML,rn.contains=r.contains}(t);var mn={};rn.Callbacks=function(t){t="string"==typeof t?mn[t]||i(t):rn.extend({},t);var e,s,o,r,a,h,l=[],c=!t.once&&[],u=function(n){for(e=t.memory&&n,s=!0,h=r||0,r=0,a=l.length,o=!0;l&&a>h;h++)if(l[h].apply(n[0],n[1])===!1&&t.stopOnFalse){e=!1;break}o=!1,l&&(c?c.length&&u(c.shift()):e?l=[]:p.disable())},p={add:function(){if(l){var n=l.length;(function i(n){rn.each(n,function(n,e){var s=rn.type(e);"function"===s?t.unique&&p.has(e)||l.push(e):e&&e.length&&"string"!==s&&i(e)})})(arguments),o?a=l.length:e&&(r=n,u(e))}return this},remove:function(){return l&&rn.each(arguments,function(t,n){for(var e;(e=rn.inArray(n,l,e))>-1;)l.splice(e,1),o&&(a>=e&&a--,h>=e&&h--)}),this},has:function(t){return t?rn.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],a=0,this},disable:function(){return l=c=e=n,this},disabled:function(){return!l},lock:function(){return c=n,e||p.disable(),this},locked:function(){return!c},fireWith:function(t,n){return n=n||[],n=[t,n.slice?n.slice():n],!l||s&&!c||(o?c.push(n):u(n)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!s}};return p},rn.extend({Deferred:function(t){var n=[["resolve","done",rn.Callbacks("once memory"),"resolved"],["reject","fail",rn.Callbacks("once memory"),"rejected"],["notify","progress",rn.Callbacks("memory")]],e="pending",i={state:function(){return e},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var t=arguments;return rn.Deferred(function(e){rn.each(n,function(n,o){var r=o[0],a=rn.isFunction(t[n])&&t[n];s[o[1]](function(){var t=a&&a.apply(this,arguments);t&&rn.isFunction(t.promise)?t.promise().done(e.resolve).fail(e.reject).progress(e.notify):e[r+"With"](this===i?e.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?rn.extend(t,i):i}},s={};return i.pipe=i.then,rn.each(n,function(t,o){var r=o[2],a=o[3];i[o[1]]=r.add,a&&r.add(function(){e=a},n[1^t][2].disable,n[2][2].lock),s[o[0]]=function(){return s[o[0]+"With"](this===s?i:this,arguments),this},s[o[0]+"With"]=r.fireWith}),i.promise(s),t&&t.call(s,s),s},when:function(t){var n,e,i,s=0,o=tn.call(arguments),r=o.length,a=1!==r||t&&rn.isFunction(t.promise)?r:0,h=1===a?t:rn.Deferred(),l=function(t,e,i){return function(s){e[t]=this,i[t]=arguments.length>1?tn.call(arguments):s,i===n?h.notifyWith(e,i):--a||h.resolveWith(e,i)}};if(r>1)for(n=Array(r),e=Array(r),i=Array(r);r>s;s++)o[s]&&rn.isFunction(o[s].promise)?o[s].promise().done(l(s,i,o)).fail(h.reject).progress(l(s,e,n)):--a;return a||h.resolveWith(i,o),h.promise()}}),rn.support=function(n){var e=H.createElement("input"),i=H.createDocumentFragment(),s=H.createElement("div"),o=H.createElement("select"),r=o.appendChild(H.createElement("option"));return e.type?(e.type="checkbox",n.checkOn=""!==e.value,n.optSelected=r.selected,n.reliableMarginRight=!0,n.boxSizingReliable=!0,n.pixelPosition=!1,e.checked=!0,n.noCloneChecked=e.cloneNode(!0).checked,o.disabled=!0,n.optDisabled=!r.disabled,e=H.createElement("input"),e.value="t",e.type="radio",n.radioValue="t"===e.value,e.setAttribute("checked","t"),e.setAttribute("name","t"),i.appendChild(e),n.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,n.focusinBubbles="onfocusin"in t,s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",n.clearCloneStyle="content-box"===s.style.backgroundClip,rn(function(){var e,i,o="padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",r=H.getElementsByTagName("body")[0];r&&(e=H.createElement("div"),e.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",r.appendChild(e).appendChild(s),s.innerHTML="",s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",rn.swap(r,null!=r.style.zoom?{zoom:1}:{},function(){n.boxSizing=4===s.offsetWidth}),t.getComputedStyle&&(n.pixelPosition="1%"!==(t.getComputedStyle(s,null)||{}).top,n.boxSizingReliable="4px"===(t.getComputedStyle(s,null)||{width:"4px"}).width,i=s.appendChild(H.createElement("div")),i.style.cssText=s.style.cssText=o,i.style.marginRight=i.style.width="0",s.style.width="1px",n.reliableMarginRight=!parseFloat((t.getComputedStyle(i,null)||{}).marginRight)),r.removeChild(e))}),n):n}({});var gn,bn,vn=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,kn=/([A-Z])/g;s.uid=1,s.accepts=function(t){return t.nodeType?1===t.nodeType||9===t.nodeType:!0},s.prototype={key:function(t){if(!s.accepts(t))return 0;var n={},e=t[this.expando];if(!e){e=s.uid++;try{n[this.expando]={value:e},Object.defineProperties(t,n)}catch(i){n[this.expando]=e,rn.extend(t,n)}}return this.cache[e]||(this.cache[e]={}),e},set:function(t,n,e){var i,s=this.key(t),o=this.cache[s];if("string"==typeof n)o[n]=e;else if(rn.isEmptyObject(o))this.cache[s]=n;else for(i in n)o[i]=n[i]},get:function(t,e){var i=this.cache[this.key(t)];return e===n?i:i[e]},access:function(t,e,i){return e===n||e&&"string"==typeof e&&i===n?this.get(t,e):(this.set(t,e,i),i!==n?i:e)},remove:function(t,e){var i,s,o=this.key(t),r=this.cache[o];if(e===n)this.cache[o]={};else{rn.isArray(e)?s=e.concat(e.map(rn.camelCase)):e in r?s=[e]:(s=rn.camelCase(e),s=s in r?[s]:s.match(hn)||[]),i=s.length;for(;i--;)delete r[s[i]]}},hasData:function(t){return!rn.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){delete this.cache[this.key(t)]}},gn=new s,bn=new s,rn.extend({acceptData:s.accepts,hasData:function(t){return gn.hasData(t)||bn.hasData(t)},data:function(t,n,e){return gn.access(t,n,e)},removeData:function(t,n){gn.remove(t,n)},_data:function(t,n,e){return bn.access(t,n,e)},_removeData:function(t,n){bn.remove(t,n)}}),rn.fn.extend({data:function(t,e){var i,s,r=this[0],a=0,h=null;if(t===n){if(this.length&&(h=gn.get(r),1===r.nodeType&&!bn.get(r,"hasDataAttrs"))){for(i=r.attributes;i.length>a;a++)s=i[a].name,0===s.indexOf("data-")&&(s=rn.camelCase(s.substring(5)),o(r,s,h[s]));bn.set(r,"hasDataAttrs",!0)}return h}return"object"==typeof t?this.each(function(){gn.set(this,t)}):rn.access(this,function(e){var i,s=rn.camelCase(t);if(r&&e===n){if(i=gn.get(r,t),i!==n)return i;if(i=gn.get(r,s),i!==n)return i;if(i=o(r,s,n),i!==n)return i}else this.each(function(){var i=gn.get(this,s);gn.set(this,s,e),-1!==t.indexOf("-")&&i!==n&&gn.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){gn.remove(this,t)})}}),rn.extend({queue:function(t,e,i){var s;return t?(e=(e||"fx")+"queue",s=bn.get(t,e),i&&(!s||rn.isArray(i)?s=bn.access(t,e,rn.makeArray(i)):s.push(i)),s||[]):n},dequeue:function(t,n){n=n||"fx";var e=rn.queue(t,n),i=e.length,s=e.shift(),o=rn._queueHooks(t,n),r=function(){rn.dequeue(t,n)};"inprogress"===s&&(s=e.shift(),i--),o.cur=s,s&&("fx"===n&&e.unshift("inprogress"),delete o.stop,s.call(t,r,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,n){var e=n+"queueHooks";return bn.get(t,e)||bn.access(t,e,{empty:rn.Callbacks("once memory").add(function(){bn.remove(t,[n+"queue",e])})})}}),rn.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),i>arguments.length?rn.queue(this[0],t):e===n?this:this.each(function(){var n=rn.queue(this,t,e);rn._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&rn.dequeue(this,t)})},dequeue:function(t){return this.each(function(){rn.dequeue(this,t)})},delay:function(t,n){return t=rn.fx?rn.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,e){var i=setTimeout(n,t);e.stop=function(){clearTimeout(i)}})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,s=1,o=rn.Deferred(),r=this,a=this.length,h=function(){--s||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=n),t=t||"fx";a--;)i=bn.get(r[a],t+"queueHooks"),i&&i.empty&&(s++,i.empty.add(h));return h(),o.promise(e)}});var yn,xn,wn=/[\t\r\n]/g,Ln=/\r/g,En=/^(?:input|select|textarea|button)$/i;rn.fn.extend({attr:function(t,n){return rn.access(this,rn.attr,t,n,arguments.length>1)},removeAttr:function(t){return this.each(function(){rn.removeAttr(this,t)})},prop:function(t,n){return rn.access(this,rn.prop,t,n,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[rn.propFix[t]||t]})},addClass:function(t){var n,e,i,s,o,r=0,a=this.length,h="string"==typeof t&&t;if(rn.isFunction(t))return this.each(function(n){rn(this).addClass(t.call(this,n,this.className))});if(h)for(n=(t||"").match(hn)||[];a>r;r++)if(e=this[r],i=1===e.nodeType&&(e.className?(" "+e.className+" ").replace(wn," "):" ")){for(o=0;s=n[o++];)0>i.indexOf(" "+s+" ")&&(i+=s+" ");e.className=rn.trim(i)}return this},removeClass:function(t){var n,e,i,s,o,r=0,a=this.length,h=0===arguments.length||"string"==typeof t&&t;if(rn.isFunction(t))return this.each(function(n){rn(this).removeClass(t.call(this,n,this.className))});if(h)for(n=(t||"").match(hn)||[];a>r;r++)if(e=this[r],i=1===e.nodeType&&(e.className?(" "+e.className+" ").replace(wn," "):"")){for(o=0;s=n[o++];)for(;i.indexOf(" "+s+" ")>=0;)i=i.replace(" "+s+" "," ");e.className=t?rn.trim(i):""}return this},toggleClass:function(t,n){var e=typeof t,i="boolean"==typeof n;return rn.isFunction(t)?this.each(function(e){rn(this).toggleClass(t.call(this,e,this.className,n),n)}):this.each(function(){if("string"===e)for(var s,o=0,r=rn(this),a=n,h=t.match(hn)||[];s=h[o++];)a=i?a:!r.hasClass(s),r[a?"addClass":"removeClass"](s);else(e===q||"boolean"===e)&&(this.className&&bn.set(this,"__className__",this.className),this.className=this.className||t===!1?"":bn.get(this,"__className__")||"")})},hasClass:function(t){for(var n=" "+t+" ",e=0,i=this.length;i>e;e++)if(1===this[e].nodeType&&(" "+this[e].className+" ").replace(wn," ").indexOf(n)>=0)return!0;return!1},val:function(t){var e,i,s,o=this[0];{if(arguments.length)return s=rn.isFunction(t),this.each(function(i){var o,r=rn(this);1===this.nodeType&&(o=s?t.call(this,i,r.val()):t,null==o?o="":"number"==typeof o?o+="":rn.isArray(o)&&(o=rn.map(o,function(t){return null==t?"":t+""})),e=rn.valHooks[this.type]||rn.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&e.set(this,o,"value")!==n||(this.value=o))});if(o)return e=rn.valHooks[o.type]||rn.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&(i=e.get(o,"value"))!==n?i:(i=o.value,"string"==typeof i?i.replace(Ln,""):null==i?"":i)}}}),rn.extend({valHooks:{option:{get:function(t){var n=t.attributes.value;return!n||n.specified?t.value:t.text}},select:{get:function(t){for(var n,e,i=t.options,s=t.selectedIndex,o="select-one"===t.type||0>s,r=o?null:[],a=o?s+1:i.length,h=0>s?a:o?s:0;a>h;h++)if(e=i[h],!(!e.selected&&h!==s||(rn.support.optDisabled?e.disabled:null!==e.getAttribute("disabled"))||e.parentNode.disabled&&rn.nodeName(e.parentNode,"optgroup"))){if(n=rn(e).val(),o)return n;r.push(n)}return r},set:function(t,n){for(var e,i,s=t.options,o=rn.makeArray(n),r=s.length;r--;)i=s[r],(i.selected=rn.inArray(rn(i).val(),o)>=0)&&(e=!0);return e||(t.selectedIndex=-1),o}}},attr:function(t,e,i){var s,o,r=t.nodeType;if(t&&3!==r&&8!==r&&2!==r)return typeof t.getAttribute===q?rn.prop(t,e,i):(1===r&&rn.isXMLDoc(t)||(e=e.toLowerCase(),s=rn.attrHooks[e]||(rn.expr.match.boolean.test(e)?xn:yn)),i===n?s&&"get"in s&&null!==(o=s.get(t,e))?o:(o=rn.find.attr(t,e),null==o?n:o):null!==i?s&&"set"in s&&(o=s.set(t,i,e))!==n?o:(t.setAttribute(e,i+""),i):(rn.removeAttr(t,e),n))},removeAttr:function(t,n){var e,i,s=0,o=n&&n.match(hn);if(o&&1===t.nodeType)for(;e=o[s++];)i=rn.propFix[e]||e,rn.expr.match.boolean.test(e)&&(t[i]=!1),t.removeAttribute(e)},attrHooks:{type:{set:function(t,n){if(!rn.support.radioValue&&"radio"===n&&rn.nodeName(t,"input")){var e=t.value;return t.setAttribute("type",n),e&&(t.value=e),n}}}},propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,i){var s,o,r,a=t.nodeType;if(t&&3!==a&&8!==a&&2!==a)return r=1!==a||!rn.isXMLDoc(t),r&&(e=rn.propFix[e]||e,o=rn.propHooks[e]),i!==n?o&&"set"in o&&(s=o.set(t,i,e))!==n?s:t[e]=i:o&&"get"in o&&null!==(s=o.get(t,e))?s:t[e]},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||En.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),xn={set:function(t,n,e){return n===!1?rn.removeAttr(t,e):t.setAttribute(e,e),e}},rn.each(rn.expr.match.boolean.source.match(/\w+/g),function(t,e){var i=rn.expr.attrHandle[e]||rn.find.attr;rn.expr.attrHandle[e]=function(t,e,s){var o=rn.expr.attrHandle[e],r=s?n:(rn.expr.attrHandle[e]=n)!=i(t,e,s)?e.toLowerCase():null;return rn.expr.attrHandle[e]=o,r}}),rn.support.optSelected||(rn.propHooks.selected={get:function(t){var n=t.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null}}),rn.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){rn.propFix[this.toLowerCase()]=this}),rn.each(["radio","checkbox"],function(){rn.valHooks[this]={set:function(t,e){return rn.isArray(e)?t.checked=rn.inArray(rn(t).val(),e)>=0:n}},rn.support.checkOn||(rn.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var Cn=/^key/,Dn=/^(?:mouse|contextmenu)|click/,Sn=/^(?:focusinfocus|focusoutblur)$/,Nn=/^([^.]*)(?:\.(.+)|)$/;rn.event={global:{},add:function(t,e,i,s,o){var r,a,h,l,c,u,p,f,d,m,g,b=bn.get(t);if(b){for(i.handler&&(r=i,i=r.handler,o=r.selector),i.guid||(i.guid=rn.guid++),(l=b.events)||(l=b.events={}),(a=b.handle)||(a=b.handle=function(t){return typeof rn===q||t&&rn.event.triggered===t.type?n:rn.event.dispatch.apply(a.elem,arguments)},a.elem=t),e=(e||"").match(hn)||[""],c=e.length;c--;)h=Nn.exec(e[c])||[],d=g=h[1],m=(h[2]||"").split(".").sort(),d&&(p=rn.event.special[d]||{},d=(o?p.delegateType:p.bindType)||d,p=rn.event.special[d]||{},u=rn.extend({type:d,origType:g,data:s,handler:i,guid:i.guid,selector:o,needsContext:o&&rn.expr.match.needsContext.test(o),namespace:m.join(".")},r),(f=l[d])||(f=l[d]=[],f.delegateCount=0,p.setup&&p.setup.call(t,s,m,a)!==!1||t.addEventListener&&t.addEventListener(d,a,!1)),p.add&&(p.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),rn.event.global[d]=!0);t=null}},remove:function(t,n,e,i,s){var o,r,a,h,l,c,u,p,f,d,m,g=bn.hasData(t)&&bn.get(t);if(g&&(h=g.events)){for(n=(n||"").match(hn)||[""],l=n.length;l--;)if(a=Nn.exec(n[l])||[],f=m=a[1],d=(a[2]||"").split(".").sort(),f){for(u=rn.event.special[f]||{},f=(i?u.delegateType:u.bindType)||f,p=h[f]||[],a=a[2]&&RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=p.length;o--;)c=p[o],!s&&m!==c.origType||e&&e.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,u.remove&&u.remove.call(t,c));r&&!p.length&&(u.teardown&&u.teardown.call(t,d,g.handle)!==!1||rn.removeEvent(t,f,g.handle),delete h[f])}else for(f in h)rn.event.remove(t,f+n[l],e,i,!0);rn.isEmptyObject(h)&&(delete g.handle,bn.remove(t,"events"))}},trigger:function(e,i,s,o){var r,a,h,l,c,u,p,f=[s||H],d=sn.call(e,"type")?e.type:e,m=sn.call(e,"namespace")?e.namespace.split("."):[];if(a=h=s=s||H,3!==s.nodeType&&8!==s.nodeType&&!Sn.test(d+rn.event.triggered)&&(d.indexOf(".")>=0&&(m=d.split("."),d=m.shift(),m.sort()),c=0>d.indexOf(":")&&"on"+d,e=e[rn.expando]?e:new rn.Event(d,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=m.join("."),e.namespace_re=e.namespace?RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=n,e.target||(e.target=s),i=null==i?[e]:rn.makeArray(i,[e]),p=rn.event.special[d]||{},o||!p.trigger||p.trigger.apply(s,i)!==!1)){if(!o&&!p.noBubble&&!rn.isWindow(s)){for(l=p.delegateType||d,Sn.test(l+d)||(a=a.parentNode);a;a=a.parentNode)f.push(a),h=a;h===(s.ownerDocument||H)&&f.push(h.defaultView||h.parentWindow||t)}for(r=0;(a=f[r++])&&!e.isPropagationStopped();)e.type=r>1?l:p.bindType||d,u=(bn.get(a,"events")||{})[e.type]&&bn.get(a,"handle"),u&&u.apply(a,i),u=c&&a[c],u&&rn.acceptData(a)&&u.apply&&u.apply(a,i)===!1&&e.preventDefault();return e.type=d,o||e.isDefaultPrevented()||p._default&&p._default.apply(f.pop(),i)!==!1||!rn.acceptData(s)||c&&rn.isFunction(s[d])&&!rn.isWindow(s)&&(h=s[c],h&&(s[c]=null),rn.event.triggered=d,s[d](),rn.event.triggered=n,h&&(s[c]=h)),e.result}},dispatch:function(t){t=rn.event.fix(t);var e,i,s,o,r,a=[],h=tn.call(arguments),l=(bn.get(this,"events")||{})[t.type]||[],c=rn.event.special[t.type]||{};if(h[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(a=rn.event.handlers.call(this,t,l),e=0;(o=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,i=0;(r=o.handlers[i++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(r.namespace))&&(t.handleObj=r,t.data=r.data,s=((rn.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,h),s!==n&&(t.result=s)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,s,o,r,a=[],h=e.delegateCount,l=t.target;if(h&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(s=[],i=0;h>i;i++)r=e[i],o=r.selector+" ",s[o]===n&&(s[o]=r.needsContext?rn(o,this).index(l)>=0:rn.find(o,this,null,[l]).length),s[o]&&s.push(r);s.length&&a.push({elem:l,handlers:s})}return e.length>h&&a.push({elem:this,handlers:e.slice(h)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,n){return null==t.which&&(t.which=null!=n.charCode?n.charCode:n.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,s,o,r=e.button;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||H,s=i.documentElement,o=i.body,t.pageX=e.clientX+(s&&s.scrollLeft||o&&o.scrollLeft||0)-(s&&s.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(s&&s.scrollTop||o&&o.scrollTop||0)-(s&&s.clientTop||o&&o.clientTop||0)),t.which||r===n||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[rn.expando])return t;var n,e,i,s=t.type,o=t,r=this.fixHooks[s];for(r||(this.fixHooks[s]=r=Dn.test(s)?this.mouseHooks:Cn.test(s)?this.keyHooks:{}),i=r.props?this.props.concat(r.props):this.props,t=new rn.Event(o),n=i.length;n--;)e=i[n],t[e]=o[e];return 3===t.target.nodeType&&(t.target=t.target.parentNode),r.filter?r.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==h()&&this.focus?(this.focus(),!1):n},delegateType:"focusin"},blur:{trigger:function(){return this===h()&&this.blur?(this.blur(),!1):n},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&rn.nodeName(this,"input")?(this.click(),!1):n},_default:function(t){return rn.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){t.result!==n&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,n,e,i){var s=rn.extend(new rn.Event,e,{type:t,isSimulated:!0,originalEvent:{}});i?rn.event.trigger(s,null,n):rn.event.dispatch.call(n,s),s.isDefaultPrevented()&&e.preventDefault()}},rn.removeEvent=function(t,n,e){t.removeEventListener&&t.removeEventListener(n,e,!1)},rn.Event=function(t,e){return this instanceof rn.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||t.getPreventDefault&&t.getPreventDefault()?r:a):this.type=t,e&&rn.extend(this,e),this.timeStamp=t&&t.timeStamp||rn.now(),this[rn.expando]=!0,n):new rn.Event(t,e)},rn.Event.prototype={isDefaultPrevented:a,isPropagationStopped:a,isImmediatePropagationStopped:a,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=r,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=r,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=r,this.stopPropagation()}},rn.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(t,n){rn.event.special[t]={delegateType:n,bindType:n,handle:function(t){var e,i=this,s=t.relatedTarget,o=t.handleObj;return(!s||s!==i&&!rn.contains(i,s))&&(t.type=o.origType,e=o.handler.apply(this,arguments),t.type=n),e}}}),rn.support.focusinBubbles||rn.each({focus:"focusin",blur:"focusout"},function(t,n){var e=0,i=function(t){rn.event.simulate(n,t.target,rn.event.fix(t),!0)};rn.event.special[n]={setup:function(){0===e++&&H.addEventListener(t,i,!0)},teardown:function(){0===--e&&H.removeEventListener(t,i,!0)}}}),rn.fn.extend({on:function(t,e,i,s,o){var r,h;if("object"==typeof t){"string"!=typeof e&&(i=i||e,e=n);for(h in t)this.on(h,e,i,t[h],o);return this}if(null==i&&null==s?(s=e,i=e=n):null==s&&("string"==typeof e?(s=i,i=n):(s=i,i=e,e=n)),s===!1)s=a;else if(!s)return this;return 1===o&&(r=s,s=function(t){return rn().off(t),r.apply(this,arguments)},s.guid=r.guid||(r.guid=rn.guid++)),this.each(function(){rn.event.add(this,t,s,i,e)})},one:function(t,n,e,i){return this.on(t,n,e,i,1)},off:function(t,e,i){var s,o;if(t&&t.preventDefault&&t.handleObj)return s=t.handleObj,rn(t.delegateTarget).off(s.namespace?s.origType+"."+s.namespace:s.origType,s.selector,s.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return(e===!1||"function"==typeof e)&&(i=e,e=n),i===!1&&(i=a),this.each(function(){rn.event.remove(this,t,i,e)})},trigger:function(t,n){return this.each(function(){rn.event.trigger(t,n,this)})},triggerHandler:function(t,e){var i=this[0];return i?rn.event.trigger(t,e,i,!0):n}});var Tn=/^.[^:#\[\.,]*$/,An=rn.expr.match.needsContext,On={children:!0,contents:!0,next:!0,prev:!0};rn.fn.extend({find:function(t){var n,e,i,s=this.length;if("string"!=typeof t)return n=this,this.pushStack(rn(t).filter(function(){for(i=0;s>i;i++)if(rn.contains(n[i],this))return!0}));for(e=[],i=0;s>i;i++)rn.find(t,this[i],e);return e=this.pushStack(s>1?rn.unique(e):e),e.selector=(this.selector?this.selector+" ":"")+t,e},has:function(t){var n=rn(t,this),e=n.length;return this.filter(function(){for(var t=0;e>t;t++)if(rn.contains(this,n[t]))return!0})},not:function(t){return this.pushStack(c(this,t||[],!0))},filter:function(t){return this.pushStack(c(this,t||[],!1))},is:function(t){return!!t&&("string"==typeof t?An.test(t)?rn(t,this.context).index(this[0])>=0:rn.filter(t,this).length>0:this.filter(t).length>0)},closest:function(t,n){for(var e,i=0,s=this.length,o=[],r=An.test(t)||"string"!=typeof t?rn(t,n||this.context):0;s>i;i++)for(e=this[i];e&&e!==n;e=e.parentNode)if(11>e.nodeType&&(r?r.index(e)>-1:1===e.nodeType&&rn.find.matchesSelector(e,t))){e=o.push(e);break}return this.pushStack(o.length>1?rn.unique(o):o)},index:function(t){return t?"string"==typeof t?nn.call(rn(t),this[0]):nn.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,n){var e="string"==typeof t?rn(t,n):rn.makeArray(t&&t.nodeType?[t]:t),i=rn.merge(this.get(),e);return this.pushStack(rn.unique(i))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),rn.each({parent:function(t){var n=t.parentNode;return n&&11!==n.nodeType?n:null},parents:function(t){return rn.dir(t,"parentNode")},parentsUntil:function(t,n,e){return rn.dir(t,"parentNode",e)},next:function(t){return l(t,"nextSibling")},prev:function(t){return l(t,"previousSibling")},nextAll:function(t){return rn.dir(t,"nextSibling")},prevAll:function(t){return rn.dir(t,"previousSibling")},nextUntil:function(t,n,e){return rn.dir(t,"nextSibling",e)},prevUntil:function(t,n,e){return rn.dir(t,"previousSibling",e)},siblings:function(t){return rn.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return rn.sibling(t.firstChild)},contents:function(t){return rn.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:rn.merge([],t.childNodes)}},function(t,n){rn.fn[t]=function(e,i){var s=rn.map(this,n,e);return"Until"!==t.slice(-5)&&(i=e),i&&"string"==typeof i&&(s=rn.filter(i,s)),this.length>1&&(On[t]||rn.unique(s),"p"===t[0]&&s.reverse()),this.pushStack(s)}}),rn.extend({filter:function(t,n,e){var i=n[0];return e&&(t=":not("+t+")"),1===n.length&&1===i.nodeType?rn.find.matchesSelector(i,t)?[i]:[]:rn.find.matches(t,rn.grep(n,function(t){return 1===t.nodeType}))},dir:function(t,e,i){for(var s=[],o=i!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&rn(t).is(i))break;s.push(t)}return s},sibling:function(t,n){for(var e=[];t;t=t.nextSibling)1===t.nodeType&&t!==n&&e.push(t);return e}});var Rn=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Pn=/<([\w:]+)/,In=/<|&#?\w+;/,_n=/<(?:script|style|link)/i,Mn=/^(?:checkbox|radio)$/i,Fn=/checked\s*(?:[^=]|=\s*.checked.)/i,Bn=/^$|\/(?:java|ecma)script/i,$n=/^true\/(.*)/,jn=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Wn={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Wn.optgroup=Wn.option,Wn.tbody=Wn.tfoot=Wn.colgroup=Wn.caption=Wn.col=Wn.thead,Wn.th=Wn.td,rn.fn.extend({text:function(t){return rn.access(this,function(t){return t===n?rn.text(this):this.empty().append((this[0]&&this[0].ownerDocument||H).createTextNode(t))},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=u(this,t);n.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=u(this,t);n.insertBefore(t,n.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,n){for(var e,i=t?rn.filter(t,this):this,s=0;null!=(e=i[s]);s++)n||1!==e.nodeType||rn.cleanData(g(e)),e.parentNode&&(n&&rn.contains(e.ownerDocument,e)&&d(g(e,"script")),e.parentNode.removeChild(e));return this},empty:function(){for(var t,n=0;null!=(t=this[n]);n++)1===t.nodeType&&(rn.cleanData(g(t,!1)),t.textContent="");return this},clone:function(t,n){return t=null==t?!1:t,n=null==n?t:n,this.map(function(){return rn.clone(this,t,n)})},html:function(t){return rn.access(this,function(t){var e=this[0]||{},i=0,s=this.length;if(t===n&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!_n.test(t)&&!Wn[(Pn.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Rn,"<$1></$2>");try{for(;s>i;i++)e=this[i]||{},1===e.nodeType&&(rn.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=rn.map(this,function(t){return[t.nextSibling,t.parentNode]}),n=0;return this.domManip(arguments,function(e){var i=t[n++],s=t[n++];s&&(rn(this).remove(),s.insertBefore(e,i))},!0),n?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,n,e){t=K.apply([],t);var i,s,o,r,a,h,l=0,c=this.length,u=this,d=c-1,m=t[0],b=rn.isFunction(m);if(b||!(1>=c||"string"!=typeof m||rn.support.checkClone)&&Fn.test(m))return this.each(function(i){var s=u.eq(i);b&&(t[0]=m.call(this,i,s.html())),s.domManip(t,n,e)});if(c&&(i=rn.buildFragment(t,this[0].ownerDocument,!1,!e&&this),s=i.firstChild,1===i.childNodes.length&&(i=s),s)){for(o=rn.map(g(i,"script"),p),r=o.length;c>l;l++)a=i,l!==d&&(a=rn.clone(a,!0,!0),r&&rn.merge(o,g(a,"script"))),n.call(this[l],a,l);if(r)for(h=o[o.length-1].ownerDocument,rn.map(o,f),l=0;r>l;l++)a=o[l],Bn.test(a.type||"")&&!bn.access(a,"globalEval")&&rn.contains(h,a)&&(a.src?rn._evalUrl(a.src):rn.globalEval(a.textContent.replace(jn,"")))}return this}}),rn.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,n){rn.fn[t]=function(t){for(var e,i=[],s=rn(t),o=s.length-1,r=0;o>=r;r++)e=r===o?this:this.clone(!0),rn(s[r])[n](e),Z.apply(i,e.get());return this.pushStack(i)}}),rn.extend({clone:function(t,n,e){var i,s,o,r,a=t.cloneNode(!0),h=rn.contains(t.ownerDocument,t);if(!(rn.support.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||rn.isXMLDoc(t)))for(r=g(a),o=g(t),i=0,s=o.length;s>i;i++)b(o[i],r[i]);if(n)if(e)for(o=o||g(t),r=r||g(a),i=0,s=o.length;s>i;i++)m(o[i],r[i]);else m(t,a);return r=g(a,"script"),r.length>0&&d(r,!h&&g(t,"script")),a},buildFragment:function(t,n,e,i){for(var s,o,r,a,h,l,c=0,u=t.length,p=n.createDocumentFragment(),f=[];u>c;c++)if(s=t[c],s||0===s)if("object"===rn.type(s))rn.merge(f,s.nodeType?[s]:s);else if(In.test(s)){for(o=o||p.appendChild(n.createElement("div")),r=(Pn.exec(s)||["",""])[1].toLowerCase(),a=Wn[r]||Wn._default,o.innerHTML=a[1]+s.replace(Rn,"<$1></$2>")+a[2],l=a[0];l--;)o=o.firstChild;rn.merge(f,o.childNodes),o=p.firstChild,o.textContent=""}else f.push(n.createTextNode(s));for(p.textContent="",c=0;s=f[c++];)if((!i||-1===rn.inArray(s,i))&&(h=rn.contains(s.ownerDocument,s),o=g(p.appendChild(s),"script"),h&&d(o),e))for(l=0;s=o[l++];)Bn.test(s.type||"")&&e.push(s);return p},cleanData:function(t){for(var n,e,i,s=t.length,o=0,r=rn.event.special;s>o;o++){if(e=t[o],rn.acceptData(e)&&(n=bn.access(e)))for(i in n.events)r[i]?rn.event.remove(e,i):rn.removeEvent(e,i,n.handle);gn.discard(e),bn.discard(e)}},_evalUrl:function(t){return rn.ajax({url:t,type:"GET",dataType:"text",async:!1,global:!1,success:rn.globalEval})}}),rn.fn.extend({wrapAll:function(t){var n;return rn.isFunction(t)?this.each(function(n){rn(this).wrapAll(t.call(this,n))}):(this[0]&&(n=rn(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return rn.isFunction(t)?this.each(function(n){rn(this).wrapInner(t.call(this,n))}):this.each(function(){var n=rn(this),e=n.contents();e.length?e.wrapAll(t):n.append(t)})},wrap:function(t){var n=rn.isFunction(t);return this.each(function(e){rn(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(){return this.parent().each(function(){rn.nodeName(this,"body")||rn(this).replaceWith(this.childNodes)}).end()}});var Vn,qn,zn=/^(none|table(?!-c[ea]).+)/,Hn=/^margin/,Gn=RegExp("^("+an+")(.*)$","i"),Un=RegExp("^("+an+")(?!px)[a-z%]+$","i"),Xn=RegExp("^([+-])=("+an+")","i"),Qn={BODY:"block"},Yn={position:"absolute",visibility:"hidden",display:"block"},Jn={letterSpacing:0,fontWeight:400},Kn=["Top","Right","Bottom","Left"],Zn=["Webkit","O","Moz","ms"];rn.fn.extend({css:function(t,e){return rn.access(this,function(t,e,i){var s,o,r={},a=0;if(rn.isArray(e)){for(s=y(t),o=e.length;o>a;a++)r[e[a]]=rn.css(t,e[a],!1,s);return r}return i!==n?rn.style(t,e,i):rn.css(t,e)},t,e,arguments.length>1)},show:function(){return x(this,!0)},hide:function(){return x(this)},toggle:function(t){var n="boolean"==typeof t;return this.each(function(){(n?t:k(this))?rn(this).show():rn(this).hide()})}}),rn.extend({cssHooks:{opacity:{get:function(t,n){if(n){var e=Vn(t,"opacity");return""===e?"1":e}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,i,s){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,a,h=rn.camelCase(e),l=t.style;
return e=rn.cssProps[h]||(rn.cssProps[h]=v(l,h)),a=rn.cssHooks[e]||rn.cssHooks[h],i===n?a&&"get"in a&&(o=a.get(t,!1,s))!==n?o:l[e]:(r=typeof i,"string"===r&&(o=Xn.exec(i))&&(i=(o[1]+1)*o[2]+parseFloat(rn.css(t,e)),r="number"),null==i||"number"===r&&isNaN(i)||("number"!==r||rn.cssNumber[h]||(i+="px"),rn.support.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&(i=a.set(t,i,s))===n||(l[e]=i)),n)}},css:function(t,e,i,s){var o,r,a,h=rn.camelCase(e);return e=rn.cssProps[h]||(rn.cssProps[h]=v(t.style,h)),a=rn.cssHooks[e]||rn.cssHooks[h],a&&"get"in a&&(o=a.get(t,!0,i)),o===n&&(o=Vn(t,e,s)),"normal"===o&&e in Jn&&(o=Jn[e]),""===i||i?(r=parseFloat(o),i===!0||rn.isNumeric(r)?r||0:o):o}}),Vn=function(t,e,i){var s,o,r,a=i||y(t),h=a?a.getPropertyValue(e)||a[e]:n,l=t.style;return a&&(""!==h||rn.contains(t.ownerDocument,t)||(h=rn.style(t,e)),Un.test(h)&&Hn.test(e)&&(s=l.width,o=l.minWidth,r=l.maxWidth,l.minWidth=l.maxWidth=l.width=h,h=a.width,l.width=s,l.minWidth=o,l.maxWidth=r)),h},rn.each(["height","width"],function(t,e){rn.cssHooks[e]={get:function(t,i,s){return i?0===t.offsetWidth&&zn.test(rn.css(t,"display"))?rn.swap(t,Yn,function(){return E(t,e,s)}):E(t,e,s):n},set:function(t,n,i){var s=i&&y(t);return w(t,n,i?L(t,e,i,rn.support.boxSizing&&"border-box"===rn.css(t,"boxSizing",!1,s),s):0)}}}),rn(function(){rn.support.reliableMarginRight||(rn.cssHooks.marginRight={get:function(t,e){return e?rn.swap(t,{display:"inline-block"},Vn,[t,"marginRight"]):n}}),!rn.support.pixelPosition&&rn.fn.position&&rn.each(["top","left"],function(t,e){rn.cssHooks[e]={get:function(t,i){return i?(i=Vn(t,e),Un.test(i)?rn(t).position()[e]+"px":i):n}}})}),rn.expr&&rn.expr.filters&&(rn.expr.filters.hidden=function(t){return 0>=t.offsetWidth&&0>=t.offsetHeight},rn.expr.filters.visible=function(t){return!rn.expr.filters.hidden(t)}),rn.each({margin:"",padding:"",border:"Width"},function(t,n){rn.cssHooks[t+n]={expand:function(e){for(var i=0,s={},o="string"==typeof e?e.split(" "):[e];4>i;i++)s[t+Kn[i]+n]=o[i]||o[i-2]||o[0];return s}},Hn.test(t)||(rn.cssHooks[t+n].set=w)});var te=/%20/g,ne=/\[\]$/,ee=/\r?\n/g,ie=/^(?:submit|button|image|reset|file)$/i,se=/^(?:input|select|textarea|keygen)/i;rn.fn.extend({serialize:function(){return rn.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=rn.prop(this,"elements");return t?rn.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!rn(this).is(":disabled")&&se.test(this.nodeName)&&!ie.test(t)&&(this.checked||!Mn.test(t))}).map(function(t,n){var e=rn(this).val();return null==e?null:rn.isArray(e)?rn.map(e,function(t){return{name:n.name,value:t.replace(ee,"\r\n")}}):{name:n.name,value:e.replace(ee,"\r\n")}}).get()}}),rn.param=function(t,e){var i,s=[],o=function(t,n){n=rn.isFunction(n)?n():null==n?"":n,s[s.length]=encodeURIComponent(t)+"="+encodeURIComponent(n)};if(e===n&&(e=rn.ajaxSettings&&rn.ajaxSettings.traditional),rn.isArray(t)||t.jquery&&!rn.isPlainObject(t))rn.each(t,function(){o(this.name,this.value)});else for(i in t)S(i,t[i],e,o);return s.join("&").replace(te,"+")},rn.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,n){rn.fn[n]=function(t,e){return arguments.length>0?this.on(n,null,t,e):this.trigger(n)}}),rn.fn.extend({hover:function(t,n){return this.mouseenter(t).mouseleave(n||t)},bind:function(t,n,e){return this.on(t,null,n,e)},unbind:function(t,n){return this.off(t,null,n)},delegate:function(t,n,e,i){return this.on(n,t,e,i)},undelegate:function(t,n,e){return 1===arguments.length?this.off(t,"**"):this.off(n,t||"**",e)}});var oe,re,ae=rn.now(),he=/\?/,le=/#.*$/,ce=/([?&])_=[^&]*/,ue=/^(.*?):[ \t]*([^\r\n]*)$/gm,pe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,fe=/^(?:GET|HEAD)$/,de=/^\/\//,me=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,ge=rn.fn.load,be={},ve={},ke="*/".concat("*");try{re=z.href}catch(ye){re=H.createElement("a"),re.href="",re=re.href}oe=me.exec(re.toLowerCase())||[],rn.fn.load=function(t,e,i){if("string"!=typeof t&&ge)return ge.apply(this,arguments);var s,o,r,a=this,h=t.indexOf(" ");return h>=0&&(s=t.slice(h),t=t.slice(0,h)),rn.isFunction(e)?(i=e,e=n):e&&"object"==typeof e&&(o="POST"),a.length>0&&rn.ajax({url:t,type:o,dataType:"html",data:e}).done(function(t){r=arguments,a.html(s?rn("<div>").append(rn.parseHTML(t)).find(s):t)}).complete(i&&function(t,n){a.each(i,r||[t.responseText,n,t])}),this},rn.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,n){rn.fn[n]=function(t){return this.on(n,t)}}),rn.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:re,type:"GET",isLocal:pe.test(oe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ke,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":rn.parseJSON,"text xml":rn.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,n){return n?A(A(t,rn.ajaxSettings),n):A(rn.ajaxSettings,t)},ajaxPrefilter:N(be),ajaxTransport:N(ve),ajax:function(t,e){function i(t,e,i,a){var l,u,v,k,x,L=e;2!==y&&(y=2,h&&clearTimeout(h),s=n,r=a||"",w.readyState=t>0?4:0,l=t>=200&&300>t||304===t,i&&(k=O(p,w,i)),k=R(p,k,w,l),l?(p.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(rn.lastModified[o]=x),x=w.getResponseHeader("etag"),x&&(rn.etag[o]=x)),204===t?L="nocontent":304===t?L="notmodified":(L=k.state,u=k.data,v=k.error,l=!v)):(v=L,(t||!L)&&(L="error",0>t&&(t=0))),w.status=t,w.statusText=(e||L)+"",l?m.resolveWith(f,[u,L,w]):m.rejectWith(f,[w,L,v]),w.statusCode(b),b=n,c&&d.trigger(l?"ajaxSuccess":"ajaxError",[w,p,l?u:v]),g.fireWith(f,[w,L]),c&&(d.trigger("ajaxComplete",[w,p]),--rn.active||rn.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=n),e=e||{};var s,o,r,a,h,l,c,u,p=rn.ajaxSetup({},e),f=p.context||p,d=p.context&&(f.nodeType||f.jquery)?rn(f):rn.event,m=rn.Deferred(),g=rn.Callbacks("once memory"),b=p.statusCode||{},v={},k={},y=0,x="canceled",w={readyState:0,getResponseHeader:function(t){var n;if(2===y){if(!a)for(a={};n=ue.exec(r);)a[n[1].toLowerCase()]=n[2];n=a[t.toLowerCase()]}return null==n?null:n},getAllResponseHeaders:function(){return 2===y?r:null},setRequestHeader:function(t,n){var e=t.toLowerCase();return y||(t=k[e]=k[e]||t,v[t]=n),this},overrideMimeType:function(t){return y||(p.mimeType=t),this},statusCode:function(t){var n;if(t)if(2>y)for(n in t)b[n]=[b[n],t[n]];else w.always(t[w.status]);return this},abort:function(t){var n=t||x;return s&&s.abort(n),i(0,n),this}};if(m.promise(w).complete=g.add,w.success=w.done,w.error=w.fail,p.url=((t||p.url||re)+"").replace(le,"").replace(de,oe[1]+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=rn.trim(p.dataType||"*").toLowerCase().match(hn)||[""],null==p.crossDomain&&(l=me.exec(p.url.toLowerCase()),p.crossDomain=!(!l||l[1]===oe[1]&&l[2]===oe[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(oe[3]||("http:"===oe[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=rn.param(p.data,p.traditional)),T(be,p,e,w),2===y)return w;c=p.global,c&&0===rn.active++&&rn.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!fe.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(he.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=ce.test(o)?o.replace(ce,"$1_="+ae++):o+(he.test(o)?"&":"?")+"_="+ae++)),p.ifModified&&(rn.lastModified[o]&&w.setRequestHeader("If-Modified-Since",rn.lastModified[o]),rn.etag[o]&&w.setRequestHeader("If-None-Match",rn.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||e.contentType)&&w.setRequestHeader("Content-Type",p.contentType),w.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+ke+"; q=0.01":""):p.accepts["*"]);for(u in p.headers)w.setRequestHeader(u,p.headers[u]);if(p.beforeSend&&(p.beforeSend.call(f,w,p)===!1||2===y))return w.abort();x="abort";for(u in{success:1,error:1,complete:1})w[u](p[u]);if(s=T(ve,p,e,w)){w.readyState=1,c&&d.trigger("ajaxSend",[w,p]),p.async&&p.timeout>0&&(h=setTimeout(function(){w.abort("timeout")},p.timeout));try{y=1,s.send(v,i)}catch(L){if(!(2>y))throw L;i(-1,L)}}else i(-1,"No Transport");return w},getJSON:function(t,n,e){return rn.get(t,n,e,"json")},getScript:function(t,e){return rn.get(t,n,e,"script")}}),rn.each(["get","post"],function(t,e){rn[e]=function(t,i,s,o){return rn.isFunction(i)&&(o=o||s,s=i,i=n),rn.ajax({url:t,type:e,dataType:o,data:i,success:s})}}),rn.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return rn.globalEval(t),t}}}),rn.ajaxPrefilter("script",function(t){t.cache===n&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),rn.ajaxTransport("script",function(t){if(t.crossDomain){var n,e;return{send:function(i,s){n=rn("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",e=function(t){n.remove(),e=null,t&&s("error"===t.type?404:200,t.type)}),H.head.appendChild(n[0])},abort:function(){e&&e()}}}});var xe=[],we=/(=)\?(?=&|$)|\?\?/;rn.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=xe.pop()||rn.expando+"_"+ae++;return this[t]=!0,t}}),rn.ajaxPrefilter("json jsonp",function(e,i,s){var o,r,a,h=e.jsonp!==!1&&(we.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&we.test(e.data)&&"data");return h||"jsonp"===e.dataTypes[0]?(o=e.jsonpCallback=rn.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,h?e[h]=e[h].replace(we,"$1"+o):e.jsonp!==!1&&(e.url+=(he.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||rn.error(o+" was not called"),a[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){a=arguments},s.always(function(){t[o]=r,e[o]&&(e.jsonpCallback=i.jsonpCallback,xe.push(o)),a&&rn.isFunction(r)&&r(a[0]),a=r=n}),"script"):n}),rn.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Le=rn.ajaxSettings.xhr(),Ee={0:200,1223:204},Ce=0,De={};t.ActiveXObject&&rn(t).on("unload",function(){for(var t in De)De[t]();De=n}),rn.support.cors=!!Le&&"withCredentials"in Le,rn.support.ajax=Le=!!Le,rn.ajaxTransport(function(t){var e;return rn.support.cors||Le&&!t.crossDomain?{send:function(i,s){var o,r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(o in i)a.setRequestHeader(o,i[o]);e=function(t){return function(){e&&(delete De[r],e=a.onload=a.onerror=null,"abort"===t?a.abort():"error"===t?s(a.status||404,a.statusText):s(Ee[a.status]||a.status,a.statusText,"string"==typeof a.responseText?{text:a.responseText}:n,a.getAllResponseHeaders()))}},a.onload=e(),a.onerror=e("error"),e=De[r=Ce++]=e("abort"),a.send(t.hasContent&&t.data||null)},abort:function(){e&&e()}}:n});var Se,Ne,Te=/^(?:toggle|show|hide)$/,Ae=RegExp("^(?:([+-])=|)("+an+")([a-z%]*)$","i"),Oe=/queueHooks$/,Re=[F],Pe={"*":[function(t,n){var e,i,s=this.createTween(t,n),o=Ae.exec(n),r=s.cur(),a=+r||0,h=1,l=20;if(o){if(e=+o[2],i=o[3]||(rn.cssNumber[t]?"":"px"),"px"!==i&&a){a=rn.css(s.elem,t,!0)||e||1;do h=h||".5",a/=h,rn.style(s.elem,t,a+i);while(h!==(h=s.cur()/r)&&1!==h&&--l)}s.unit=i,s.start=a,s.end=o[1]?a+(o[1]+1)*e:e}return s}]};rn.Animation=rn.extend(_,{tweener:function(t,n){rn.isFunction(t)?(n=t,t=["*"]):t=t.split(" ");for(var e,i=0,s=t.length;s>i;i++)e=t[i],Pe[e]=Pe[e]||[],Pe[e].unshift(n)},prefilter:function(t,n){n?Re.unshift(t):Re.push(t)}}),rn.Tween=B,B.prototype={constructor:B,init:function(t,n,e,i,s,o){this.elem=t,this.prop=e,this.easing=s||"swing",this.options=n,this.start=this.now=this.cur(),this.end=i,this.unit=o||(rn.cssNumber[e]?"":"px")},cur:function(){var t=B.propHooks[this.prop];return t&&t.get?t.get(this):B.propHooks._default.get(this)},run:function(t){var n,e=B.propHooks[this.prop];return this.pos=n=this.options.duration?rn.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):t,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),e&&e.set?e.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(t){var n;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(n=rn.css(t.elem,t.prop,""),n&&"auto"!==n?n:0):t.elem[t.prop]},set:function(t){rn.fx.step[t.prop]?rn.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[rn.cssProps[t.prop]]||rn.cssHooks[t.prop])?rn.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},rn.each(["toggle","show","hide"],function(t,n){var e=rn.fn[n];rn.fn[n]=function(t,i,s){return null==t||"boolean"==typeof t?e.apply(this,arguments):this.animate($(n,!0),t,i,s)}}),rn.fn.extend({fadeTo:function(t,n,e,i){return this.filter(k).css("opacity",0).show().end().animate({opacity:n},t,e,i)},animate:function(t,n,e,i){var s=rn.isEmptyObject(t),o=rn.speed(n,e,i),r=function(){var n=_(this,rn.extend({},t),o);r.finish=function(){n.stop(!0)},(s||bn.get(this,"finish"))&&n.stop(!0)};return r.finish=r,s||o.queue===!1?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var s=function(t){var n=t.stop;delete t.stop,n(i)};return"string"!=typeof t&&(i=e,e=t,t=n),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var n=!0,e=null!=t&&t+"queueHooks",o=rn.timers,r=bn.get(this);if(e)r[e]&&r[e].stop&&s(r[e]);else for(e in r)r[e]&&r[e].stop&&Oe.test(e)&&s(r[e]);for(e=o.length;e--;)o[e].elem!==this||null!=t&&o[e].queue!==t||(o[e].anim.stop(i),n=!1,o.splice(e,1));(n||!i)&&rn.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var n,e=bn.get(this),i=e[t+"queue"],s=e[t+"queueHooks"],o=rn.timers,r=i?i.length:0;for(e.finish=!0,rn.queue(this,t,[]),s&&s.cur&&s.cur.finish&&s.cur.finish.call(this),n=o.length;n--;)o[n].elem===this&&o[n].queue===t&&(o[n].anim.stop(!0),o.splice(n,1));for(n=0;r>n;n++)i[n]&&i[n].finish&&i[n].finish.call(this);delete e.finish})}}),rn.each({slideDown:$("show"),slideUp:$("hide"),slideToggle:$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,n){rn.fn[t]=function(t,e,i){return this.animate(n,t,e,i)}}),rn.speed=function(t,n,e){var i=t&&"object"==typeof t?rn.extend({},t):{complete:e||!e&&n||rn.isFunction(t)&&t,duration:t,easing:e&&n||n&&!rn.isFunction(n)&&n};return i.duration=rn.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in rn.fx.speeds?rn.fx.speeds[i.duration]:rn.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){rn.isFunction(i.old)&&i.old.call(this),i.queue&&rn.dequeue(this,i.queue)},i},rn.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},rn.timers=[],rn.fx=B.prototype.init,rn.fx.tick=function(){var t,e=rn.timers,i=0;for(Se=rn.now();e.length>i;i++)t=e[i],t()||e[i]!==t||e.splice(i--,1);e.length||rn.fx.stop(),Se=n},rn.fx.timer=function(t){t()&&rn.timers.push(t)&&rn.fx.start()},rn.fx.interval=13,rn.fx.start=function(){Ne||(Ne=setInterval(rn.fx.tick,rn.fx.interval))},rn.fx.stop=function(){clearInterval(Ne),Ne=null},rn.fx.speeds={slow:600,fast:200,_default:400},rn.fx.step={},rn.expr&&rn.expr.filters&&(rn.expr.filters.animated=function(t){return rn.grep(rn.timers,function(n){return t===n.elem}).length}),rn.fn.offset=function(t){if(arguments.length)return t===n?this:this.each(function(n){rn.offset.setOffset(this,t,n)});var e,i,s=this[0],o={top:0,left:0},r=s&&s.ownerDocument;if(r)return e=r.documentElement,rn.contains(e,s)?(typeof s.getBoundingClientRect!==q&&(o=s.getBoundingClientRect()),i=j(r),{top:o.top+i.pageYOffset-e.clientTop,left:o.left+i.pageXOffset-e.clientLeft}):o},rn.offset={setOffset:function(t,n,e){var i,s,o,r,a,h,l,c=rn.css(t,"position"),u=rn(t),p={};"static"===c&&(t.style.position="relative"),a=u.offset(),o=rn.css(t,"top"),h=rn.css(t,"left"),l=("absolute"===c||"fixed"===c)&&(o+h).indexOf("auto")>-1,l?(i=u.position(),r=i.top,s=i.left):(r=parseFloat(o)||0,s=parseFloat(h)||0),rn.isFunction(n)&&(n=n.call(t,e,a)),null!=n.top&&(p.top=n.top-a.top+r),null!=n.left&&(p.left=n.left-a.left+s),"using"in n?n.using.call(t,p):u.css(p)}},rn.fn.extend({position:function(){if(this[0]){var t,n,e=this[0],i={top:0,left:0};return"fixed"===rn.css(e,"position")?n=e.getBoundingClientRect():(t=this.offsetParent(),n=this.offset(),rn.nodeName(t[0],"html")||(i=t.offset()),i.top+=rn.css(t[0],"borderTopWidth",!0),i.left+=rn.css(t[0],"borderLeftWidth",!0)),{top:n.top-i.top-rn.css(e,"marginTop",!0),left:n.left-i.left-rn.css(e,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||G;t&&!rn.nodeName(t,"html")&&"static"===rn.css(t,"position");)t=t.offsetParent;return t||G})}}),rn.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var s="pageYOffset"===i;rn.fn[e]=function(o){return rn.access(this,function(e,o,r){var a=j(e);return r===n?a?a[i]:e[o]:(a?a.scrollTo(s?t.pageXOffset:r,s?r:t.pageYOffset):e[o]=r,n)},e,o,arguments.length,null)}}),rn.each({Height:"height",Width:"width"},function(t,e){rn.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,s){rn.fn[s]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(s===!0||o===!0?"margin":"border");return rn.access(this,function(e,i,s){var o;return rn.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):s===n?rn.css(e,i,a):rn.style(e,i,s,a)},e,r?s:n,r,null)}})}),rn.fn.size=function(){return this.length},rn.fn.andSelf=rn.fn.addBack,"object"==typeof module&&"object"==typeof module.exports?module.exports=rn:"function"==typeof define&&define.amd&&define("jquery",[],function(){return rn}),"object"==typeof t&&"object"==typeof t.document&&(t.jQuery=t.$=rn)})(window),function(){var t=this,n=t._,e={},i=Array.prototype,s=Object.prototype,o=Function.prototype,r=i.push,a=i.slice,h=i.concat,l=s.toString,c=s.hasOwnProperty,u=i.forEach,p=i.map,f=i.reduce,d=i.reduceRight,m=i.filter,g=i.every,b=i.some,v=i.indexOf,k=i.lastIndexOf,y=Array.isArray,x=Object.keys,w=o.bind,L=function(t){return t instanceof L?t:this instanceof L?(this._wrapped=t,void 0):new L(t)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=L),exports._=L):t._=L,L.VERSION="1.4.4";var E=L.each=L.forEach=function(t,n,i){if(null!=t)if(u&&t.forEach===u)t.forEach(n,i);else if(t.length===+t.length){for(var s=0,o=t.length;o>s;s++)if(n.call(i,t[s],s,t)===e)return}else for(var r in t)if(L.has(t,r)&&n.call(i,t[r],r,t)===e)return};L.map=L.collect=function(t,n,e){var i=[];return null==t?i:p&&t.map===p?t.map(n,e):(E(t,function(t,s,o){i[i.length]=n.call(e,t,s,o)}),i)};var C="Reduce of empty array with no initial value";L.reduce=L.foldl=L.inject=function(t,n,e,i){var s=arguments.length>2;if(null==t&&(t=[]),f&&t.reduce===f)return i&&(n=L.bind(n,i)),s?t.reduce(n,e):t.reduce(n);if(E(t,function(t,o,r){s?e=n.call(i,e,t,o,r):(e=t,s=!0)}),!s)throw new TypeError(C);return e},L.reduceRight=L.foldr=function(t,n,e,i){var s=arguments.length>2;if(null==t&&(t=[]),d&&t.reduceRight===d)return i&&(n=L.bind(n,i)),s?t.reduceRight(n,e):t.reduceRight(n);var o=t.length;if(o!==+o){var r=L.keys(t);o=r.length}if(E(t,function(a,h,l){h=r?r[--o]:--o,s?e=n.call(i,e,t[h],h,l):(e=t[h],s=!0)}),!s)throw new TypeError(C);return e},L.find=L.detect=function(t,n,e){var i;return D(t,function(t,s,o){return n.call(e,t,s,o)?(i=t,!0):void 0}),i},L.filter=L.select=function(t,n,e){var i=[];return null==t?i:m&&t.filter===m?t.filter(n,e):(E(t,function(t,s,o){n.call(e,t,s,o)&&(i[i.length]=t)}),i)},L.reject=function(t,n,e){return L.filter(t,function(t,i,s){return!n.call(e,t,i,s)},e)},L.every=L.all=function(t,n,i){n||(n=L.identity);var s=!0;return null==t?s:g&&t.every===g?t.every(n,i):(E(t,function(t,o,r){return(s=s&&n.call(i,t,o,r))?void 0:e}),!!s)};var D=L.some=L.any=function(t,n,i){n||(n=L.identity);var s=!1;return null==t?s:b&&t.some===b?t.some(n,i):(E(t,function(t,o,r){return s||(s=n.call(i,t,o,r))?e:void 0}),!!s)};L.contains=L.include=function(t,n){return null==t?!1:v&&t.indexOf===v?-1!=t.indexOf(n):D(t,function(t){return t===n})},L.invoke=function(t,n){var e=a.call(arguments,2),i=L.isFunction(n);return L.map(t,function(t){return(i?n:t[n]).apply(t,e)})},L.pluck=function(t,n){return L.map(t,function(t){return t[n]})},L.where=function(t,n,e){return L.isEmpty(n)?e?null:[]:L[e?"find":"filter"](t,function(t){for(var e in n)if(n[e]!==t[e])return!1;return!0})},L.findWhere=function(t,n){return L.where(t,n,!0)},L.max=function(t,n,e){if(!n&&L.isArray(t)&&t[0]===+t[0]&&65535>t.length)return Math.max.apply(Math,t);if(!n&&L.isEmpty(t))return-1/0;var i={computed:-1/0,value:-1/0};return E(t,function(t,s,o){var r=n?n.call(e,t,s,o):t;r>=i.computed&&(i={value:t,computed:r})}),i.value},L.min=function(t,n,e){if(!n&&L.isArray(t)&&t[0]===+t[0]&&65535>t.length)return Math.min.apply(Math,t);if(!n&&L.isEmpty(t))return 1/0;var i={computed:1/0,value:1/0};return E(t,function(t,s,o){var r=n?n.call(e,t,s,o):t;i.computed>r&&(i={value:t,computed:r})}),i.value},L.shuffle=function(t){var n,e=0,i=[];return E(t,function(t){n=L.random(e++),i[e-1]=i[n],i[n]=t}),i};var S=function(t){return L.isFunction(t)?t:function(n){return n[t]}};L.sortBy=function(t,n,e){var i=S(n);return L.pluck(L.map(t,function(t,n,s){return{value:t,index:n,criteria:i.call(e,t,n,s)}}).sort(function(t,n){var e=t.criteria,i=n.criteria;if(e!==i){if(e>i||void 0===e)return 1;if(i>e||void 0===i)return-1}return t.index<n.index?-1:1}),"value")};var N=function(t,n,e,i){var s={},o=S(n||L.identity);return E(t,function(n,r){var a=o.call(e,n,r,t);i(s,a,n)}),s};L.groupBy=function(t,n,e){return N(t,n,e,function(t,n,e){(L.has(t,n)?t[n]:t[n]=[]).push(e)})},L.countBy=function(t,n,e){return N(t,n,e,function(t,n){L.has(t,n)||(t[n]=0),t[n]++})},L.sortedIndex=function(t,n,e,i){e=null==e?L.identity:S(e);for(var s=e.call(i,n),o=0,r=t.length;r>o;){var a=o+r>>>1;s>e.call(i,t[a])?o=a+1:r=a}return o},L.toArray=function(t){return t?L.isArray(t)?a.call(t):t.length===+t.length?L.map(t,L.identity):L.values(t):[]},L.size=function(t){return null==t?0:t.length===+t.length?t.length:L.keys(t).length},L.first=L.head=L.take=function(t,n,e){return null==t?void 0:null==n||e?t[0]:a.call(t,0,n)},L.initial=function(t,n,e){return a.call(t,0,t.length-(null==n||e?1:n))},L.last=function(t,n,e){return null==t?void 0:null==n||e?t[t.length-1]:a.call(t,Math.max(t.length-n,0))},L.rest=L.tail=L.drop=function(t,n,e){return a.call(t,null==n||e?1:n)},L.compact=function(t){return L.filter(t,L.identity)};var T=function(t,n,e){return E(t,function(t){L.isArray(t)?n?r.apply(e,t):T(t,n,e):e.push(t)}),e};L.flatten=function(t,n){return T(t,n,[])},L.without=function(t){return L.difference(t,a.call(arguments,1))},L.uniq=L.unique=function(t,n,e,i){L.isFunction(n)&&(i=e,e=n,n=!1);var s=e?L.map(t,e,i):t,o=[],r=[];return E(s,function(e,i){(n?i&&r[r.length-1]===e:L.contains(r,e))||(r.push(e),o.push(t[i]))}),o},L.union=function(){return L.uniq(h.apply(i,arguments))},L.intersection=function(t){var n=a.call(arguments,1);return L.filter(L.uniq(t),function(t){return L.every(n,function(n){return L.indexOf(n,t)>=0})})},L.difference=function(t){var n=h.apply(i,a.call(arguments,1));return L.filter(t,function(t){return!L.contains(n,t)})},L.zip=function(){for(var t=a.call(arguments),n=L.max(L.pluck(t,"length")),e=Array(n),i=0;n>i;i++)e[i]=L.pluck(t,""+i);return e},L.object=function(t,n){if(null==t)return{};for(var e={},i=0,s=t.length;s>i;i++)n?e[t[i]]=n[i]:e[t[i][0]]=t[i][1];return e},L.indexOf=function(t,n,e){if(null==t)return-1;var i=0,s=t.length;if(e){if("number"!=typeof e)return i=L.sortedIndex(t,n),t[i]===n?i:-1;i=0>e?Math.max(0,s+e):e}if(v&&t.indexOf===v)return t.indexOf(n,e);for(;s>i;i++)if(t[i]===n)return i;return-1},L.lastIndexOf=function(t,n,e){if(null==t)return-1;var i=null!=e;if(k&&t.lastIndexOf===k)return i?t.lastIndexOf(n,e):t.lastIndexOf(n);for(var s=i?e:t.length;s--;)if(t[s]===n)return s;return-1},L.range=function(t,n,e){1>=arguments.length&&(n=t||0,t=0),e=arguments[2]||1;for(var i=Math.max(Math.ceil((n-t)/e),0),s=0,o=Array(i);i>s;)o[s++]=t,t+=e;return o},L.bind=function(t,n){if(t.bind===w&&w)return w.apply(t,a.call(arguments,1));var e=a.call(arguments,2);return function(){return t.apply(n,e.concat(a.call(arguments)))}},L.partial=function(t){var n=a.call(arguments,1);return function(){return t.apply(this,n.concat(a.call(arguments)))}},L.bindAll=function(t){var n=a.call(arguments,1);return 0===n.length&&(n=L.functions(t)),E(n,function(n){t[n]=L.bind(t[n],t)}),t},L.memoize=function(t,n){var e={};return n||(n=L.identity),function(){var i=n.apply(this,arguments);return L.has(e,i)?e[i]:e[i]=t.apply(this,arguments)}},L.delay=function(t,n){var e=a.call(arguments,2);return setTimeout(function(){return t.apply(null,e)},n)},L.defer=function(t){return L.delay.apply(L,[t,1].concat(a.call(arguments,1)))},L.throttle=function(t,n){var e,i,s,o,r=0,a=function(){r=new Date,s=null,o=t.apply(e,i)};return function(){var h=new Date,l=n-(h-r);return e=this,i=arguments,0>=l?(clearTimeout(s),s=null,r=h,o=t.apply(e,i)):s||(s=setTimeout(a,l)),o}},L.debounce=function(t,n,e){var i,s;return function(){var o=this,r=arguments,a=function(){i=null,e||(s=t.apply(o,r))},h=e&&!i;return clearTimeout(i),i=setTimeout(a,n),h&&(s=t.apply(o,r)),s}},L.once=function(t){var n,e=!1;return function(){return e?n:(e=!0,n=t.apply(this,arguments),t=null,n)}},L.wrap=function(t,n){return function(){var e=[t];return r.apply(e,arguments),n.apply(this,e)}},L.compose=function(){var t=arguments;return function(){for(var n=arguments,e=t.length-1;e>=0;e--)n=[t[e].apply(this,n)];return n[0]}},L.after=function(t,n){return 0>=t?n():function(){return 1>--t?n.apply(this,arguments):void 0}},L.keys=x||function(t){if(t!==Object(t))throw new TypeError("Invalid object");var n=[];for(var e in t)L.has(t,e)&&(n[n.length]=e);return n},L.values=function(t){var n=[];for(var e in t)L.has(t,e)&&n.push(t[e]);return n},L.pairs=function(t){var n=[];for(var e in t)L.has(t,e)&&n.push([e,t[e]]);return n},L.invert=function(t){var n={};for(var e in t)L.has(t,e)&&(n[t[e]]=e);return n},L.functions=L.methods=function(t){var n=[];for(var e in t)L.isFunction(t[e])&&n.push(e);return n.sort()},L.extend=function(t){return E(a.call(arguments,1),function(n){if(n)for(var e in n)t[e]=n[e]}),t},L.pick=function(t){var n={},e=h.apply(i,a.call(arguments,1));return E(e,function(e){e in t&&(n[e]=t[e])}),n},L.omit=function(t){var n={},e=h.apply(i,a.call(arguments,1));for(var s in t)L.contains(e,s)||(n[s]=t[s]);return n},L.defaults=function(t){return E(a.call(arguments,1),function(n){if(n)for(var e in n)null==t[e]&&(t[e]=n[e])}),t},L.clone=function(t){return L.isObject(t)?L.isArray(t)?t.slice():L.extend({},t):t},L.tap=function(t,n){return n(t),t};var A=function(t,n,e,i){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return t===n;t instanceof L&&(t=t._wrapped),n instanceof L&&(n=n._wrapped);var s=l.call(t);if(s!=l.call(n))return!1;switch(s){case"[object String]":return t==n+"";case"[object Number]":return t!=+t?n!=+n:0==t?1/t==1/n:t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object RegExp]":return t.source==n.source&&t.global==n.global&&t.multiline==n.multiline&&t.ignoreCase==n.ignoreCase}if("object"!=typeof t||"object"!=typeof n)return!1;for(var o=e.length;o--;)if(e[o]==t)return i[o]==n;e.push(t),i.push(n);var r=0,a=!0;if("[object Array]"==s){if(r=t.length,a=r==n.length)for(;r--&&(a=A(t[r],n[r],e,i)););}else{var h=t.constructor,c=n.constructor;if(h!==c&&!(L.isFunction(h)&&h instanceof h&&L.isFunction(c)&&c instanceof c))return!1;for(var u in t)if(L.has(t,u)&&(r++,!(a=L.has(n,u)&&A(t[u],n[u],e,i))))break;if(a){for(u in n)if(L.has(n,u)&&!r--)break;a=!r}}return e.pop(),i.pop(),a};L.isEqual=function(t,n){return A(t,n,[],[])},L.isEmpty=function(t){if(null==t)return!0;if(L.isArray(t)||L.isString(t))return 0===t.length;for(var n in t)if(L.has(t,n))return!1;return!0},L.isElement=function(t){return!(!t||1!==t.nodeType)},L.isArray=y||function(t){return"[object Array]"==l.call(t)},L.isObject=function(t){return t===Object(t)},E(["Arguments","Function","String","Number","Date","RegExp"],function(t){L["is"+t]=function(n){return l.call(n)=="[object "+t+"]"}}),L.isArguments(arguments)||(L.isArguments=function(t){return!(!t||!L.has(t,"callee"))}),L.isFunction=function(t){return"function"==typeof t},L.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},L.isNaN=function(t){return L.isNumber(t)&&t!=+t},L.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"==l.call(t)},L.isNull=function(t){return null===t},L.isUndefined=function(t){return void 0===t},L.has=function(t,n){return c.call(t,n)},L.noConflict=function(){return t._=n,this},L.identity=function(t){return t},L.times=function(t,n,e){for(var i=Array(t),s=0;t>s;s++)i[s]=n.call(e,s);return i},L.random=function(t,n){return null==n&&(n=t,t=0),t+Math.floor(Math.random()*(n-t+1))};var O={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","/":"&#x2F;"}};O.unescape=L.invert(O.escape);var R={escape:RegExp("["+L.keys(O.escape).join("")+"]","g"),unescape:RegExp("("+L.keys(O.unescape).join("|")+")","g")};L.each(["escape","unescape"],function(t){L[t]=function(n){return null==n?"":(""+n).replace(R[t],function(n){return O[t][n]})}}),L.result=function(t,n){if(null==t)return null;var e=t[n];return L.isFunction(e)?e.call(t):e},L.mixin=function(t){E(L.functions(t),function(n){var e=L[n]=t[n];L.prototype[n]=function(){var t=[this._wrapped];return r.apply(t,arguments),F.call(this,e.apply(L,t))}})};var P=0;L.uniqueId=function(t){var n=++P+"";return t?t+n:n},L.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var I=/(.)^/,_={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},M=/\\|'|\r|\n|\t|\u2028|\u2029/g;L.template=function(t,n,e){var i;e=L.defaults({},e,L.templateSettings);var s=RegExp([(e.escape||I).source,(e.interpolate||I).source,(e.evaluate||I).source].join("|")+"|$","g"),o=0,r="__p+='";t.replace(s,function(n,e,i,s,a){return r+=t.slice(o,a).replace(M,function(t){return"\\"+_[t]}),e&&(r+="'+\n((__t=("+e+"))==null?'':_.escape(__t))+\n'"),i&&(r+="'+\n((__t=("+i+"))==null?'':__t)+\n'"),s&&(r+="';\n"+s+"\n__p+='"),o=a+n.length,n}),r+="';\n",e.variable||(r="with(obj||{}){\n"+r+"}\n"),r="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+r+"return __p;\n";try{i=Function(e.variable||"obj","_",r)}catch(a){throw a.source=r,a}if(n)return i(n,L);var h=function(t){return i.call(this,t,L)};return h.source="function("+(e.variable||"obj")+"){\n"+r+"}",h},L.chain=function(t){return L(t).chain()};var F=function(t){return this._chain?L(t).chain():t};L.mixin(L),E(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var n=i[t];L.prototype[t]=function(){var e=this._wrapped;return n.apply(e,arguments),"shift"!=t&&"splice"!=t||0!==e.length||delete e[0],F.call(this,e)}}),E(["concat","join","slice"],function(t){var n=i[t];L.prototype[t]=function(){return F.call(this,n.apply(this._wrapped,arguments))}}),L.extend(L.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),"function"==typeof define&&define.amd&&define("underscore",[],function(){return L})}.call(this),function(t,n){"undefined"!=typeof exports?n(t,exports,require("underscore")):"function"==typeof define&&define.amd?define("backbone",["underscore","jquery","exports"],function(e,i,s){t.Backbone=n(t,s,e,i)
}):t.Backbone=n(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}(this,function(t,n,e,i){var s=t.Backbone,o=[],r=o.push,a=o.slice,h=o.splice;n.VERSION="1.0.0",n.$=i,n.noConflict=function(){return t.Backbone=s,this},n.emulateHTTP=!1,n.emulateJSON=!1;var l=n.Events={on:function(t,n,e){if(!u(this,"on",t,[n,e])||!n)return this;this._events||(this._events={});var i=this._events[t]||(this._events[t]=[]);return i.push({callback:n,context:e,ctx:e||this}),this},once:function(t,n,i){if(!u(this,"once",t,[n,i])||!n)return this;var s=this,o=e.once(function(){s.off(t,o),n.apply(this,arguments)});return o._callback=n,this.on(t,o,i)},off:function(t,n,i){var s,o,r,a,h,l,c,p;if(!this._events||!u(this,"off",t,[n,i]))return this;if(!t&&!n&&!i)return this._events={},this;for(a=t?[t]:e.keys(this._events),h=0,l=a.length;l>h;h++)if(t=a[h],r=this._events[t]){if(this._events[t]=s=[],n||i)for(c=0,p=r.length;p>c;c++)o=r[c],(n&&n!==o.callback&&n!==o.callback._callback||i&&i!==o.context)&&s.push(o);s.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var n=a.call(arguments,1);if(!u(this,"trigger",t,n))return this;var e=this._events[t],i=this._events.all;return e&&p(e,n),i&&p(i,arguments),this},stopListening:function(t,n,e){var i=this._listeners;if(!i)return this;var s=!n&&!e;"object"==typeof n&&(e=this),t&&((i={})[t._listenerId]=t);for(var o in i)i[o].off(n,e,this),s&&delete this._listeners[o];return this}},c=/\s+/,u=function(t,n,e,i){if(!e)return!0;if("object"==typeof e){for(var s in e)t[n].apply(t,[s,e[s]].concat(i));return!1}if(c.test(e)){for(var o=e.split(c),r=0,a=o.length;a>r;r++)t[n].apply(t,[o[r]].concat(i));return!1}return!0},p=function(t,n){var e,i=-1,s=t.length,o=n[0],r=n[1],a=n[2];switch(n.length){case 0:for(;s>++i;)(e=t[i]).callback.call(e.ctx);return;case 1:for(;s>++i;)(e=t[i]).callback.call(e.ctx,o);return;case 2:for(;s>++i;)(e=t[i]).callback.call(e.ctx,o,r);return;case 3:for(;s>++i;)(e=t[i]).callback.call(e.ctx,o,r,a);return;default:for(;s>++i;)(e=t[i]).callback.apply(e.ctx,n)}},f={listenTo:"on",listenToOnce:"once"};e.each(f,function(t,n){l[n]=function(n,i,s){var o=this._listeners||(this._listeners={}),r=n._listenerId||(n._listenerId=e.uniqueId("l"));return o[r]=n,"object"==typeof i&&(s=this),n[t](i,s,this),this}}),l.bind=l.on,l.unbind=l.off,e.extend(n,l);var d=n.Model=function(t,n){var i,s=t||{};n||(n={}),this.cid=e.uniqueId("c"),this.attributes={},e.extend(this,e.pick(n,m)),n.parse&&(s=this.parse(s,n)||{}),(i=e.result(this,"defaults"))&&(s=e.defaults({},s,i)),this.set(s,n),this.changed={},this.initialize.apply(this,arguments)},m=["url","urlRoot","collection"];e.extend(d.prototype,l,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(){return e.clone(this.attributes)},sync:function(){return n.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return e.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,n,i){var s,o,r,a,h,l,c,u;if(null==t)return this;if("object"==typeof t?(o=t,i=n):(o={})[t]=n,i||(i={}),!this._validate(o,i))return!1;r=i.unset,h=i.silent,a=[],l=this._changing,this._changing=!0,l||(this._previousAttributes=e.clone(this.attributes),this.changed={}),u=this.attributes,c=this._previousAttributes,this.idAttribute in o&&(this.id=o[this.idAttribute]);for(s in o)n=o[s],e.isEqual(u[s],n)||a.push(s),e.isEqual(c[s],n)?delete this.changed[s]:this.changed[s]=n,r?delete u[s]:u[s]=n;if(!h){a.length&&(this._pending=!0);for(var p=0,f=a.length;f>p;p++)this.trigger("change:"+a[p],this,u[a[p]],i)}if(l)return this;if(!h)for(;this._pending;)this._pending=!1,this.trigger("change",this,i);return this._pending=!1,this._changing=!1,this},unset:function(t,n){return this.set(t,void 0,e.extend({},n,{unset:!0}))},clear:function(t){var n={};for(var i in this.attributes)n[i]=void 0;return this.set(n,e.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!e.isEmpty(this.changed):e.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?e.clone(this.changed):!1;var n,i=!1,s=this._changing?this._previousAttributes:this.attributes;for(var o in t)e.isEqual(s[o],n=t[o])||((i||(i={}))[o]=n);return i},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return e.clone(this._previousAttributes)},fetch:function(t){t=t?e.clone(t):{},void 0===t.parse&&(t.parse=!0);var n=this,i=t.success;return t.success=function(e){return n.set(n.parse(e,t),t)?(i&&i(n,e,t),n.trigger("sync",n,e,t),void 0):!1},B(this,t),this.sync("read",this,t)},save:function(t,n,i){var s,o,r,a=this.attributes;if(null==t||"object"==typeof t?(s=t,i=n):(s={})[t]=n,!(!s||i&&i.wait||this.set(s,i)))return!1;if(i=e.extend({validate:!0},i),!this._validate(s,i))return!1;s&&i.wait&&(this.attributes=e.extend({},a,s)),void 0===i.parse&&(i.parse=!0);var h=this,l=i.success;return i.success=function(t){h.attributes=a;var n=h.parse(t,i);return i.wait&&(n=e.extend(s||{},n)),e.isObject(n)&&!h.set(n,i)?!1:(l&&l(h,t,i),h.trigger("sync",h,t,i),void 0)},B(this,i),o=this.isNew()?"create":i.patch?"patch":"update","patch"===o&&(i.attrs=s),r=this.sync(o,this,i),s&&i.wait&&(this.attributes=a),r},destroy:function(t){t=t?e.clone(t):{};var n=this,i=t.success,s=function(){n.trigger("destroy",n,n.collection,t)};if(t.success=function(e){(t.wait||n.isNew())&&s(),i&&i(n,e,t),n.isNew()||n.trigger("sync",n,e,t)},this.isNew())return t.success(),!1;B(this,t);var o=this.sync("delete",this,t);return t.wait||s(),o},url:function(){var t=e.result(this,"urlRoot")||e.result(this.collection,"url")||F();return this.isNew()?t:t+("/"===t.charAt(t.length-1)?"":"/")+encodeURIComponent(this.id)},parse:function(t){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return null==this.id},isValid:function(t){return this._validate({},e.extend(t||{},{validate:!0}))},_validate:function(t,n){if(!n.validate||!this.validate)return!0;t=e.extend({},this.attributes,t);var i=this.validationError=this.validate(t,n)||null;return i?(this.trigger("invalid",this,i,e.extend(n||{},{validationError:i})),!1):!0}});var g=["keys","values","pairs","invert","pick","omit"];e.each(g,function(t){d.prototype[t]=function(){var n=a.call(arguments);return n.unshift(this.attributes),e[t].apply(e,n)}});var b=n.Collection=function(t,n){n||(n={}),n.url&&(this.url=n.url),n.model&&(this.model=n.model),void 0!==n.comparator&&(this.comparator=n.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,e.extend({silent:!0},n))},v={add:!0,remove:!0,merge:!0},k={add:!0,merge:!1,remove:!1};e.extend(b.prototype,l,{model:d,initialize:function(){},toJSON:function(t){return this.map(function(n){return n.toJSON(t)})},sync:function(){return n.sync.apply(this,arguments)},add:function(t,n){return this.set(t,e.defaults(n||{},k))},remove:function(t,n){t=e.isArray(t)?t.slice():[t],n||(n={});var i,s,o,r;for(i=0,s=t.length;s>i;i++)r=this.get(t[i]),r&&(delete this._byId[r.id],delete this._byId[r.cid],o=this.indexOf(r),this.models.splice(o,1),this.length--,n.silent||(n.index=o,r.trigger("remove",r,this,n)),this._removeReference(r));return this},set:function(t,n){n=e.defaults(n||{},v),n.parse&&(t=this.parse(t,n)),e.isArray(t)||(t=t?[t]:[]);var i,s,o,a,l,c=n.at,u=this.comparator&&null==c&&n.sort!==!1,p=e.isString(this.comparator)?this.comparator:null,f=[],d=[],m={};for(i=0,s=t.length;s>i;i++)(o=this._prepareModel(t[i],n))&&((a=this.get(o))?(n.remove&&(m[a.cid]=!0),n.merge&&(a.set(o.attributes,n),u&&!l&&a.hasChanged(p)&&(l=!0))):n.add&&(f.push(o),o.on("all",this._onModelEvent,this),this._byId[o.cid]=o,null!=o.id&&(this._byId[o.id]=o)));if(n.remove){for(i=0,s=this.length;s>i;++i)m[(o=this.models[i]).cid]||d.push(o);d.length&&this.remove(d,n)}if(f.length&&(u&&(l=!0),this.length+=f.length,null!=c?h.apply(this.models,[c,0].concat(f)):r.apply(this.models,f)),l&&this.sort({silent:!0}),n.silent)return this;for(i=0,s=f.length;s>i;i++)(o=f[i]).trigger("add",o,this,n);return l&&this.trigger("sort",this,n),this},reset:function(t,n){n||(n={});for(var i=0,s=this.models.length;s>i;i++)this._removeReference(this.models[i]);return n.previousModels=this.models,this._reset(),this.add(t,e.extend({silent:!0},n)),n.silent||this.trigger("reset",this,n),this},push:function(t,n){return t=this._prepareModel(t,n),this.add(t,e.extend({at:this.length},n)),t},pop:function(t){var n=this.at(this.length-1);return this.remove(n,t),n},unshift:function(t,n){return t=this._prepareModel(t,n),this.add(t,e.extend({at:0},n)),t},shift:function(t){var n=this.at(0);return this.remove(n,t),n},slice:function(t,n){return this.models.slice(t,n)},get:function(t){return null==t?void 0:this._byId[null!=t.id?t.id:t.cid||t]},at:function(t){return this.models[t]},where:function(t,n){return e.isEmpty(t)?n?void 0:[]:this[n?"find":"filter"](function(n){for(var e in t)if(t[e]!==n.get(e))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw Error("Cannot sort a set without a comparator");return t||(t={}),e.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(e.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},sortedIndex:function(t,n,i){n||(n=this.comparator);var s=e.isFunction(n)?n:function(t){return t.get(n)};return e.sortedIndex(this.models,t,s,i)},pluck:function(t){return e.invoke(this.models,"get",t)},fetch:function(t){t=t?e.clone(t):{},void 0===t.parse&&(t.parse=!0);var n=t.success,i=this;return t.success=function(e){var s=t.reset?"reset":"set";i[s](e,t),n&&n(i,e,t),i.trigger("sync",i,e,t)},B(this,t),this.sync("read",this,t)},create:function(t,n){if(n=n?e.clone(n):{},!(t=this._prepareModel(t,n)))return!1;n.wait||this.add(t,n);var i=this,s=n.success;return n.success=function(e){n.wait&&i.add(t,n),s&&s(t,e,n)},t.save(null,n),t},parse:function(t){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,n){if(t instanceof d)return t.collection||(t.collection=this),t;n||(n={}),n.collection=this;var e=new this.model(t,n);return e._validate(t,n)?e:(this.trigger("invalid",this,t,n),!1)},_removeReference:function(t){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,n,e,i){("add"!==t&&"remove"!==t||e===this)&&("destroy"===t&&this.remove(n,i),n&&t==="change:"+n.idAttribute&&(delete this._byId[n.previous(n.idAttribute)],null!=n.id&&(this._byId[n.id]=n)),this.trigger.apply(this,arguments))}});var y=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain"];e.each(y,function(t){b.prototype[t]=function(){var n=a.call(arguments);return n.unshift(this.models),e[t].apply(e,n)}});var x=["groupBy","countBy","sortBy"];e.each(x,function(t){b.prototype[t]=function(n,i){var s=e.isFunction(n)?n:function(t){return t.get(n)};return e[t](this.models,s,i)}});var w=n.View=function(t){this.cid=e.uniqueId("view"),this._configure(t||{}),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},L=/^(\S+)\s*(.*)$/,E=["model","collection","el","id","attributes","className","tagName","events"];e.extend(w.prototype,l,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,e){return this.$el&&this.undelegateEvents(),this.$el=t instanceof n.$?t:n.$(t),this.el=this.$el[0],e!==!1&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=e.result(this,"events")))return this;this.undelegateEvents();for(var n in t){var i=t[n];if(e.isFunction(i)||(i=this[t[n]]),i){var s=n.match(L),o=s[1],r=s[2];i=e.bind(i,this),o+=".delegateEvents"+this.cid,""===r?this.$el.on(o,i):this.$el.on(o,r,i)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_configure:function(t){this.options&&(t=e.extend({},e.result(this,"options"),t)),e.extend(this,e.pick(t,E)),this.options=t},_ensureElement:function(){if(this.el)this.setElement(e.result(this,"el"),!1);else{var t=e.extend({},e.result(this,"attributes"));this.id&&(t.id=e.result(this,"id")),this.className&&(t["class"]=e.result(this,"className"));var i=n.$("<"+e.result(this,"tagName")+">").attr(t);this.setElement(i,!1)}}}),n.sync=function(t,i,s){var o=C[t];e.defaults(s||(s={}),{emulateHTTP:n.emulateHTTP,emulateJSON:n.emulateJSON});var r={type:o,dataType:"json"};if(s.url||(r.url=e.result(i,"url")||F()),null!=s.data||!i||"create"!==t&&"update"!==t&&"patch"!==t||(r.contentType="application/json",r.data=JSON.stringify(s.attrs||i.toJSON(s))),s.emulateJSON&&(r.contentType="application/x-www-form-urlencoded",r.data=r.data?{model:r.data}:{}),s.emulateHTTP&&("PUT"===o||"DELETE"===o||"PATCH"===o)){r.type="POST",s.emulateJSON&&(r.data._method=o);var a=s.beforeSend;s.beforeSend=function(t){return t.setRequestHeader("X-HTTP-Method-Override",o),a?a.apply(this,arguments):void 0}}"GET"===r.type||s.emulateJSON||(r.processData=!1),"PATCH"!==r.type||!window.ActiveXObject||window.external&&window.external.msActiveXFilteringEnabled||(r.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var h=s.xhr=n.ajax(e.extend(r,s));return i.trigger("request",i,h,s),h};var C={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};n.ajax=function(){return n.$.ajax.apply(n.$,arguments)};var D=n.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},S=/\((.*?)\)/g,N=/(\(\?)?:\w+/g,T=/\*\w+/g,A=/[\-{}\[\]+?.,\\\^$|#\s]/g;e.extend(D.prototype,l,{initialize:function(){},route:function(t,i,s){e.isRegExp(t)||(t=this._routeToRegExp(t)),e.isFunction(i)&&(s=i,i=""),s||(s=this[i]);var o=this;return n.history.route(t,function(e){var r=o._extractParameters(t,e);s&&s.apply(o,r),o.trigger.apply(o,["route:"+i].concat(r)),o.trigger("route",i,r),n.history.trigger("route",o,i,r)}),this},navigate:function(t,e){return n.history.navigate(t,e),this},_bindRoutes:function(){if(this.routes){this.routes=e.result(this,"routes");for(var t,n=e.keys(this.routes);null!=(t=n.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(A,"\\$&").replace(S,"(?:$1)?").replace(N,function(t,n){return n?t:"([^/]+)"}).replace(T,"(.*?)"),RegExp("^"+t+"$")},_extractParameters:function(t,n){var i=t.exec(n).slice(1);return e.map(i,function(t){return t?decodeURIComponent(t):null})}});var O=n.History=function(){this.handlers=[],e.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},R=/^[#\/]|\s+$/g,P=/^\/+|\/+$/g,I=/msie [\w.]+/,_=/\/$/;O.started=!1,e.extend(O.prototype,l,{interval:50,getHash:function(t){var n=(t||this).location.href.match(/#(.*)$/);return n?n[1]:""},getFragment:function(t,n){if(null==t)if(this._hasPushState||!this._wantsHashChange||n){t=this.location.pathname;var e=this.root.replace(_,"");t.indexOf(e)||(t=t.substr(e.length))}else t=this.getHash();return t.replace(R,"")},start:function(t){if(O.started)throw Error("Backbone.history has already been started");O.started=!0,this.options=e.extend({},{root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var i=this.getFragment(),s=document.documentMode,o=I.exec(navigator.userAgent.toLowerCase())&&(!s||7>=s);this.root=("/"+this.root+"/").replace(P,"/"),o&&this._wantsHashChange&&(this.iframe=n.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow,this.navigate(i)),this._hasPushState?n.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!o?n.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=i;var r=this.location,a=r.pathname.replace(/[^\/]$/,"$&/")===this.root;return this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!a?(this.fragment=this.getFragment(null,!0),this.location.replace(this.root+this.location.search+"#"+this.fragment),!0):(this._wantsPushState&&this._hasPushState&&a&&r.hash&&(this.fragment=this.getHash().replace(R,""),this.history.replaceState({},document.title,this.root+this.fragment+r.search)),this.options.silent?void 0:this.loadUrl())},stop:function(){n.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),clearInterval(this._checkUrlInterval),O.started=!1},route:function(t,n){this.handlers.unshift({route:t,callback:n})},checkUrl:function(){var t=this.getFragment();return t===this.fragment&&this.iframe&&(t=this.getFragment(this.getHash(this.iframe))),t===this.fragment?!1:(this.iframe&&this.navigate(t),this.loadUrl()||this.loadUrl(this.getHash()),void 0)},loadUrl:function(t){var n=this.fragment=this.getFragment(t),i=e.any(this.handlers,function(t){return t.route.test(n)?(t.callback(n),!0):void 0});return i},navigate:function(t,n){if(!O.started)return!1;if(n&&n!==!0||(n={trigger:n}),t=this.getFragment(t||""),this.fragment!==t){this.fragment=t;var e=this.root+t;if(this._hasPushState)this.history[n.replace?"replaceState":"pushState"]({},document.title,e);else{if(!this._wantsHashChange)return this.location.assign(e);this._updateHash(this.location,t,n.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(n.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,n.replace))}n.trigger&&this.loadUrl(t)}},_updateHash:function(t,n,e){if(e){var i=t.href.replace(/(javascript:|#).*$/,"");t.replace(i+"#"+n)}else t.hash="#"+n}}),n.history=new O;var M=function(t,n){var i,s=this;i=t&&e.has(t,"constructor")?t.constructor:function(){return s.apply(this,arguments)},e.extend(i,s,n);var o=function(){this.constructor=i};return o.prototype=s.prototype,i.prototype=new o,t&&e.extend(i.prototype,t),i.__super__=s.prototype,i};d.extend=b.extend=D.extend=w.extend=O.extend=M;var F=function(){throw Error('A "url" property or function must be specified')},B=function(t,n){var e=n.error;n.error=function(i){e&&e(t,i,n),t.trigger("error",t,i,n)}};return n}),define("data/toc",[],function(){"use strict";var t=[{ch:0,title:"Prologue",sections:[{sec:"",title:"The base object",disabled:!0}]},{ch:1,title:"Introduction",sections:[{sec:"1.1",title:"Introduction",disabled:!0},{sec:"1.2",title:"The cradle",disabled:!0}]},{ch:2,title:"Expression Parsing",sections:[{sec:"2.1",title:"Getting started",disabled:!0},{sec:"2.2",title:"Single digits"},{sec:"2.3",title:"Binary expressions"},{sec:"2.4",title:"General expressions"},{sec:"2.5",title:"Using the stack"},{sec:"2.6",title:"Multiplication and division"},{sec:"2.7",title:"Parentheses"},{sec:"2.8",title:"Unary minus"},{sec:"2.9",title:"A word about optimization",disabled:!0}]},{ch:3,title:"More Expressions",sections:[{sec:"3.1",title:"Introduction",disabled:!0},{sec:"3.2",title:"Variables"},{sec:"3.3",title:"Functions"},{sec:"3.4",title:"More on error handling"},{sec:"3.5",title:"Assignment statements"},{sec:"3.6",title:"Multi-character tokens"},{sec:"3.7",title:"White space"}]},{ch:4,title:"Interpreters",sections:[{sec:"4.1",title:"Introduction",disabled:!0},{sec:"4.2",title:"The interpreters",disabled:!0},{sec:"4.2.1",title:"Single digits"},{sec:"4.2.3",title:"General expressions"},{sec:"4.2.4",title:"Multi-digits number"},{sec:"4.2.5",title:"Factor"},{sec:"4.3",title:"A little philosophy",disabled:!0},{sec:"4.3.1",title:"Variables"},{sec:"4.3.2",title:"Assignment statements"},{sec:"4.3.3",title:"Multiple statements"},{sec:"4.3.4",title:"I/O routines"}]},{ch:5,title:"Control Constructs",sections:[{sec:"5.1",title:"Introduction",disabled:!0},{sec:"5.2",title:"The plan",disabled:!0},{sec:"5.2.1",title:"One statement"},{sec:"5.2.2",title:"More than one statement"},{sec:"5.3",title:"Some groundwork"},{sec:"5.4",title:"The IF statement"},{sec:"5.4.2",title:"Add the ELSE clause"},{sec:"5.5",title:"The WHILE statement"},{sec:"5.6",title:"The LOOP statement"},{sec:"5.7",title:"The Repeat-Until statement"},{sec:"5.8",title:"The FOR loop"},{sec:"5.9",title:"The DO statement"},{sec:"5.10",title:"The BREAK statement"}]},{ch:6,title:"Boolean Expressions",sections:[{sec:"6.1",title:"Introduction",disabled:!0},{sec:"6.2",title:"The plan",disabled:!0},{sec:"6.3",title:"The grammar",disabled:!0},{sec:"6.4",title:"Relops",disabled:!0},{sec:"6.5",title:"Fixing the grammar",disabled:!0},{sec:"6.6",title:"The parser"},{sec:"6.6.2",title:"Boolean literal"},{sec:"6.6.3",title:"General expressions"},{sec:"6.6.4",title:"AND operation"},{sec:"6.6.5",title:"NOT operation"},{sec:"6.6.6",title:"Expand the factor"},{sec:"6.6.7",title:"Full-blown relation"},{sec:"6.6.8",title:"Merging with expressions"},{sec:"6.6.9",title:"Change to latest expression syntax"},{sec:"6.7",title:"Merging with control constructs"},{sec:"6.8",title:"Adding assignments"}]},{ch:7,title:"Lexical Scanning",sections:[{sec:"7.1",title:"Introduction",disabled:!0},{sec:"7.2",title:"Lexical scanning",disabled:!0},{sec:"7.3",title:"State machines and alternatives",disabled:!0},{sec:"7.4",title:"Some experiments in scanning"},{sec:"7.5",title:"White space"},{sec:"7.6",title:"State machines",disabled:!0},{sec:"7.7",title:"Newlines"},{sec:"7.8",title:"Operators"},{sec:"7.9",title:"Lists, commas and command lines"},{sec:"7.10",title:"Getting fancy"},{sec:"7.10.2",title:"Returning codes"},{sec:"7.10.3",title:"Cleanup with global"},{sec:"7.11",title:"Returning a character"},{sec:"7.12",title:"Distributed vs centralized scanners",disabled:!0},{sec:"7.13",title:"Merging scanner and parser",disabled:!0},{sec:"7.13.1",title:"Judicious copying"},{sec:"7.13.2",title:"Merging scanner and parser"},{sec:"7.14",title:"Conclusion",disabled:!0}]},{ch:8,title:"A Little Philosophy",sections:[{sec:"8.1",title:"Introduction",disabled:!0},{sec:"8.2",title:"The road home",disabled:!0},{sec:"8.3",title:"Why is it so simple",disabled:!0},{sec:"8.4",title:"Conclusion",disabled:!0}]},{ch:9,title:"A Top View",sections:[{sec:"9.1",title:"Introduction",disabled:!0},{sec:"9.2",title:"The top level",disabled:!0},{sec:"9.3",title:"The structure of Pascal"},{sec:"9.4",title:"Fleshing it out"},{sec:"9.5",title:"Declarations"},{sec:"9.6",title:"The structure of C"}]},{ch:10,title:'Introducing "Tiny"',sections:[{sec:"10.1",title:"Introduction",disabled:!0},{sec:"10.2",title:"Getting started",disabled:!0},{sec:"10.2.1",title:"First step"},{sec:"10.2.2",title:"The main program"},{sec:"10.3",title:"Declarations"},{sec:"10.4",title:"Declarations and symbols"},{sec:"10.4.2",title:"Variable list"},{sec:"10.5",title:"Initializers"},{sec:"10.5.2",title:"Multi-digit integer"},{sec:"10.6",title:"The symbol table"},{sec:"10.7",title:"Executable statements"},{sec:"10.7.2",title:"Code generation routines"},{sec:"10.7.3",title:"Assignment statement"},{sec:"10.8",title:"Booleans",disabled:!0},{sec:"10.8.1",title:"More code generation routines"},{sec:"10.8.2",title:"Boolean expressions"},{sec:"10.9",title:"Control structures"},{sec:"10.10",title:"Lexical scanning"},{sec:"10.11",title:"Multi-character variable names",disabled:!0},{sec:"10.12",title:"More relops"},{sec:"10.13",title:"Input / Output"},{sec:"10.14",title:"Conclusion",disabled:!0}]},{ch:11,title:"Lexical Scan Revisited",sections:[{sec:"11.1",title:"Introduction",disabled:!0},{sec:"11.2",title:"Background",disabled:!0},{sec:"11.3",title:"The problem",disabled:!0},{sec:"11.4",title:"The solution"},{sec:"11.4.2",title:"Single-character operators"},{sec:"11.5",title:"Fixing up the compiler",disabled:!0},{sec:"11.6",title:"Conclusion"}]},{ch:12,title:"Miscellany",sections:[{sec:"12.1",title:"Introduction",disabled:!0},{sec:"12.2",title:"Semicolons",disabled:!0},{sec:"12.3",title:"Syntatic sugar",disabled:!0},{sec:"12.4",title:"Dealing with semicolons"},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]},{ch:13,title:"Procedures",sections:[{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]},{ch:14,title:"Types",sections:[{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]},{ch:15,title:"Back to The Future",sections:[{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]},{ch:16,title:"Unit Construction",sections:[{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""},{sec:"",title:""}]}];return t}),function(t,n,e){function i(t){return t}function s(t){return o(decodeURIComponent(t.replace(a," ")))}function o(t){return 0===t.indexOf('"')&&(t=t.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\")),t}function r(t){return h.json?JSON.parse(t):t}var a=/\+/g,h=t.cookie=function(o,a,l){if(a!==e){if(l=t.extend({},h.defaults,l),null===a&&(l.expires=-1),"number"==typeof l.expires){var c=l.expires,u=l.expires=new Date;u.setDate(u.getDate()+c)}return a=h.json?JSON.stringify(a):a+"",n.cookie=[encodeURIComponent(o),"=",h.raw?a:encodeURIComponent(a),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var p=h.raw?i:s,f=n.cookie.split("; "),d=o?null:{},m=0,g=f.length;g>m;m++){var b=f[m].split("="),v=p(b.shift()),k=p(b.join("="));if(o&&o===v){d=r(k);break}o||(d[v]=r(k))}return d};h.defaults={},t.removeCookie=function(n,e){return null!==t.cookie(n)?(t.cookie(n,null,e),!0):!1}}(jQuery,document),define("cookie",["jquery"],function(t){return function(){var n;return n||t.jquery}}(this)),define("routes/router",["jquery","underscore","backbone","data/toc","cookie"],function(t,n,e,i){"use strict";var s=e.Router.extend({routes:{"ch:ch(/:sec)":"update","*any":"restorePage"},update:function(n,e){this.validate(n,e)&&(this.trigger("update",parseInt(n,10),e),t.cookie("ch",n,{expires:60}),t.cookie("sec",e||"",{expires:60}))},restorePage:function(){var n,e=t.cookie("ch")||0,i=e?t.cookie("sec"):"";n="ch"+e,i&&(n+="/"+i),this.navigate(n,{trigger:!0,replace:!0})},validate:function(t,e){var s;return t===""+parseInt(t,10)&&i[t]?e&&(s=n.some(i[t].sections,function(t){return t.sec===e}),!s)?(this.restorePage(),!1):!0:(this.restorePage(),!1)}});return s}),define("templates",[],function(){return this.JST=this.JST||{},this.JST["app/scripts/templates/chapterItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<div class="accordion-heading">\n    <a id="chapter'+(null==(__t=ch)?"":__t)+'" class="accordion-toggle btn" href="#ch'+(null==(__t=ch)?"":__t)+'">'+(null==(__t=ch?"Chapter "+ch+" ":"")?"":__t)+(null==(__t=title)?"":__t)+'</a>\n</div>\n<div id="ch'+(null==(__t=ch)?"":__t)+'" class="accordion-body collapse"></div>\n';return __p},this.JST["app/scripts/templates/info.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<button type="button" class="close" data-dismiss="alert">&times;</button>\n<b>NOTICE:</b> You are highly recommanded to read the original article:\n<a href="http://compilers.iecc.com/crenshaw/'+(null==(__t=ch?"tutor"+ch+".txt":"")?"":__t)+'" target="_blank">\n    <b>'+(null==(__t=(ch?"PART&nbsp;"+ch+":&nbsp;"+title:"Let's Build a Compiler")+", by&nbsp;Jack&nbsp;Crenshaw.")?"":__t)+"\n    </b>\n</a>\n";return __p},this.JST["app/scripts/templates/pagerItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+="<li"+(null==(__t=className?' class="'+className+'"':"")?"":__t)+'>\n    <a href="'+(null==(__t=href)?"":__t)+'" data-title="'+(null==(__t=title)?"":__t)+'" '+(null==(__t=placement?'data-placement="'+placement+'"':"")?"":__t)+">"+(null==(__t=text)?"":__t)+"</a>\n</li>\n";return __p},this.JST["app/scripts/templates/sectionItem.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+="<li"+(null==(__t=disabled?' class="disabled"':"")?"":__t)+'>\n    <a id="sec'+(null==(__t=sec.replace(/\./g,"-"))?"":__t)+'" href="#ch'+(null==(__t=ch)?"":__t)+"/"+(null==(__t=sec)?"":__t)+'">'+(null==(__t=sec)?"":__t)+" "+(null==(__t=title)?"":__t)+"</a>\n</li>\n";return __p},this.JST["app/scripts/templates/setting.ejs"]=function(obj){obj||(obj={});var __t,__p="";with(_.escape,obj)__p+='<div id="setting" class="btn-group">\n\n<a class="btn dropdown-toggle" data-toggle="dropdown" href="#">\n    Settings <span class="caret"></span>\n</a>\n\n<ul class="dropdown-menu pull-right">\n    <li>\n        <a id="toggle-editor" tabindex="-1" href="#" data-toggle="tooltip" data-placement="left" data-title="'+(null==(__t=editorTitle)?"":__t)+'"><i'+(null==(__t=editor?' class="icon-ok"':"")?"":__t)+'></i>Editor</a>\n    </li>\n    <li>\n        <a id="toggle-console" tabindex="-1" href="#" data-toggle="tooltip" data-placement="left" data-title="'+(null==(__t=consoleTitle)?"":__t)+'"><i'+(null==(__t=console?' class="icon-ok"':"")?"":__t)+"></i>Console</a>\n    </li>\n</ul>\n\n</div>\n";return __p},this.JST}),define("models/menu",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{ch:-1,active:""}});return n}),define("models/chapter",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{ch:0,title:"Untitled"}});return n}),define("collections/chapters",["backbone","models/chapter"],function(t,n){"use strict";var e=t.Collection.extend({model:n});return e}),define("models/section",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{sec:"",title:"Untitled",disabled:!1}});return n}),define("collections/sections",["backbone","models/section"],function(t,n){"use strict";var e=t.Collection.extend({model:n});return e}),define("views/sections",["jquery","underscore","backbone","templates","collections/sections"],function(t,n,e,i,s){"use strict";var o=e.View.extend({tagName:"ul",className:"accordion-inner nav nav-tabs nav-stacked",template:i["app/scripts/templates/sectionItem.ejs"],initialize:function(t,e){n.each(t,function(t){t.ch=e}),this.collection=new s(t),this.render()},render:function(){var t=this;return this.collection.each(function(n){t.$el.append(t.template(n.attributes))}),this}});return o}),define("views/menu",["jquery","backbone","templates","models/menu","collections/chapters","views/sections","data/toc"],function(t,n,e,i,s,o,r){"use strict";var a=n.View.extend({className:"accordion-group",template:e["app/scripts/templates/chapterItem.ejs"],events:{"click .disabled a":"preventDefault","click .accordion-toggle":"chapterClicked"},initialize:function(){this.model=new i,this.chapters=new s(r),this.listenTo(this.model,"change:ch",this.toggleCh),this.listenTo(this.model,"change:active",this.toggleActive),this.render()},render:function(){var t=this;this.chapters.each(function(n){var e;n=n.attributes,t.$el.append(t.template(n)),e=new o(n.sections,n.ch),t.$("#ch"+n.ch).append(e.el)})},update:function(t,n){this.model.set("ch",t),n?this.model.set("active","#sec"+n.replace(/\./g,"-")):this.model.set("active","#chapter"+t)},preventDefault:function(t){t.preventDefault()},chapterClicked:function(n){var e=t(n.target).attr("href").replace(/#/,"");this.trigger("click:chapter",e),n.preventDefault()},toggleCh:function(t,n){this.$("#ch"+t.previous("ch")).collapse("hide"),this.$("#ch"+n).collapse("show")},toggleActive:function(t,n){this.$(t.previous("active")).removeClass("btn-primary"),this.$(n).addClass("btn-primary")}});return a}),window.PR_SHOULD_USE_CONTINUATION=!0,function(){function t(t){function n(t){var n=t.charCodeAt(0);
if(92!==n)return n;var e=t.charAt(1);return n=u[e],n?n:e>="0"&&"7">=e?parseInt(t.substring(1),8):"u"===e||"x"===e?parseInt(t.substring(2),16):t.charCodeAt(1)}function e(t){if(32>t)return(16>t?"\\x0":"\\x")+t.toString(16);var n=String.fromCharCode(t);return"\\"===n||"-"===n||"]"===n||"^"===n?"\\"+n:n}function i(t){var i=t.substring(1,t.length-1).match(RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g")),s=[],o="^"===i[0],r=["["];o&&r.push("^");for(var a=o?1:0,h=i.length;h>a;++a){var l=i[a];if(/\\[bdsw]/i.test(l))r.push(l);else{var c,u=n(l);h>a+2&&"-"===i[a+1]?(c=n(i[a+2]),a+=2):c=u,s.push([u,c]),65>c||u>122||(65>c||u>90||s.push([32|Math.max(65,u),32|Math.min(c,90)]),97>c||u>122||s.push([-33&Math.max(97,u),-33&Math.min(c,122)]))}}s.sort(function(t,n){return t[0]-n[0]||n[1]-t[1]});for(var p=[],f=[],a=0;s.length>a;++a){var d=s[a];d[0]<=f[1]+1?f[1]=Math.max(f[1],d[1]):p.push(f=d)}for(var a=0;p.length>a;++a){var d=p[a];r.push(e(d[0])),d[1]>d[0]&&(d[1]+1>d[0]&&r.push("-"),r.push(e(d[1])))}return r.push("]"),r.join("")}function s(t){for(var n=t.source.match(RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g")),s=n.length,a=[],h=0,l=0;s>h;++h){var c=n[h];if("("===c)++l;else if("\\"===c.charAt(0)){var u=+c.substring(1);u&&(l>=u?a[u]=-1:n[h]=e(u))}}for(var h=1;a.length>h;++h)-1===a[h]&&(a[h]=++o);for(var h=0,l=0;s>h;++h){var c=n[h];if("("===c)++l,a[l]||(n[h]="(?:");else if("\\"===c.charAt(0)){var u=+c.substring(1);u&&l>=u&&(n[h]="\\"+a[u])}}for(var h=0;s>h;++h)"^"===n[h]&&"^"!==n[h+1]&&(n[h]="");if(t.ignoreCase&&r)for(var h=0;s>h;++h){var c=n[h],p=c.charAt(0);c.length>=2&&"["===p?n[h]=i(c):"\\"!==p&&(n[h]=c.replace(/[a-zA-Z]/g,function(t){var n=t.charCodeAt(0);return"["+String.fromCharCode(-33&n,32|n)+"]"}))}return n.join("")}for(var o=0,r=!1,a=!1,h=0,l=t.length;l>h;++h){var c=t[h];if(c.ignoreCase)a=!0;else if(/[a-z]/i.test(c.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){r=!0,a=!1;break}}for(var u={b:8,t:9,n:10,v:11,f:12,r:13},p=[],h=0,l=t.length;l>h;++h){var c=t[h];if(c.global||c.multiline)throw Error(""+c);p.push("(?:"+s(c)+")")}return RegExp(p.join("|"),a?"gi":"g")}function n(t,n){function e(t){switch(t.nodeType){case 1:if(i.test(t.className))return;for(var h=t.firstChild;h;h=h.nextSibling)e(h);var l=t.nodeName.toLowerCase();("br"===l||"li"===l)&&(s[a]="\n",r[a<<1]=o++,r[1|a++<<1]=t);break;case 3:case 4:var c=t.nodeValue;c.length&&(c=n?c.replace(/\r\n?/g,"\n"):c.replace(/[ \t\r\n]+/g," "),s[a]=c,r[a<<1]=o,o+=c.length,r[1|a++<<1]=t)}}var i=/(?:^|\s)nocode(?:\s|$)/,s=[],o=0,r=[],a=0;return e(t),{sourceCode:s.join("").replace(/\n$/,""),spans:r}}function e(t,n,e,i){if(n){var s={sourceCode:n,basePos:t};e(s),i.push.apply(i,s.decorations)}}function i(t){for(var n=void 0,e=t.firstChild;e;e=e.nextSibling){var i=e.nodeType;n=1===i?n?t:e:3===i?V.test(e.nodeValue)?t:n:n}return n===t?void 0:n}function s(n,i){var s,o={};(function(){for(var e=n.concat(i),r=[],a={},h=0,l=e.length;l>h;++h){var c=e[h],u=c[3];if(u)for(var p=u.length;--p>=0;)o[u.charAt(p)]=c;var f=c[1],d=""+f;a.hasOwnProperty(d)||(r.push(f),a[d]=null)}r.push(/[\0-\uffff]/),s=t(r)})();var r=i.length,a=function(t){for(var n=t.sourceCode,h=t.basePos,c=[h,I],u=0,p=n.match(s)||[],f={},d=0,m=p.length;m>d;++d){var g,b=p[d],v=f[b],k=void 0;if("string"==typeof v)g=!1;else{var y=o[b.charAt(0)];if(y)k=b.match(y[1]),v=y[0];else{for(var x=0;r>x;++x)if(y=i[x],k=b.match(y[1])){v=y[0];break}k||(v=I)}g=v.length>=5&&"lang-"===v.substring(0,5),!g||k&&"string"==typeof k[1]||(g=!1,v=F),g||(f[b]=v)}var w=u;if(u+=b.length,g){var L=k[1],E=b.indexOf(L),C=E+L.length;k[2]&&(C=b.length-k[2].length,E=C-L.length);var D=v.substring(5);e(h+w,b.substring(0,E),a,c),e(h+w+E,L,l(D,L),c),e(h+w+C,b.substring(C),a,c)}else c.push(h+w,v)}t.decorations=c};return a}function o(t){var n=[],e=[];t.tripleQuotedStrings?n.push([N,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""]):t.multiLineStrings?n.push([N,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"]):n.push([N,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"]),t.verbatimStrings&&e.push([N,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null]);var i=t.hashComments;if(i&&(t.cStyleComments?(i>1?n.push([A,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"]):n.push([A,/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"]),e.push([N,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,null])):n.push([A,/^#[^\r\n]*/,null,"#"])),t.cStyleComments&&(e.push([A,/^\/\/[^\r\n]*/,null]),e.push([A,/^\/\*[\s\S]*?(?:\*\/|$)/,null])),t.regexLiterals){var o="/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/";e.push(["lang-regex",RegExp("^"+W+"("+o+")")])}var r=t.types;r&&e.push([O,r]);var a=(""+t.keywords).replace(/^ | $/g,"");a.length&&e.push([T,RegExp("^(?:"+a.replace(/[\s,]+/g,"|")+")\\b"),null]),n.push([I,/^\s+/,null," \r\n	 "]);var h=/^.[^\s\w\.$@\'\"\`\/\\]*/;return e.push([R,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[I,/^[a-z_$][a-z_$@0-9]*/i,null],[R,RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[I,/^\\[\s\S]?/,null],[P,h,null]),s(n,e)}function r(t,n,e){function i(t){switch(t.nodeType){case 1:if(o.test(t.className))break;if("br"===t.nodeName)s(t),t.parentNode&&t.parentNode.removeChild(t);else for(var n=t.firstChild;n;n=n.nextSibling)i(n);break;case 3:case 4:if(e){var h=t.nodeValue,l=h.match(r);if(l){var c=h.substring(0,l.index);t.nodeValue=c;var u=h.substring(l.index+l[0].length);if(u){var p=t.parentNode;p.insertBefore(a.createTextNode(u),t.nextSibling)}s(t),c||t.parentNode.removeChild(t)}}}}function s(t){function n(t,e){var i=e?t.cloneNode(!1):t,s=t.parentNode;if(s){var o=n(s,1),r=t.nextSibling;o.appendChild(i);for(var a=r;a;a=r)r=a.nextSibling,o.appendChild(a)}return i}for(;!t.nextSibling;)if(t=t.parentNode,!t)return;for(var e,i=n(t.nextSibling,0);(e=i.parentNode)&&1===e.nodeType;)i=e;l.push(i)}for(var o=/(?:^|\s)nocode(?:\s|$)/,r=/\r\n?|\n/,a=t.ownerDocument,h=a.createElement("li");t.firstChild;)h.appendChild(t.firstChild);for(var l=[h],c=0;l.length>c;++c)i(l[c]);n===(0|n)&&l[0].setAttribute("value",n);var u=a.createElement("ol");u.className="linenums";for(var p=Math.max(0,0|n-1)||0,c=0,f=l.length;f>c;++c)h=l[c],h.className="L"+(c+p)%10,h.firstChild||h.appendChild(a.createTextNode(" ")),u.appendChild(h);t.appendChild(u)}function a(t){var n=/\bMSIE\s(\d+)/.exec(navigator.userAgent);n=n&&8>=+n[1];var e=/\n/g,i=t.sourceCode,s=i.length,o=0,r=t.spans,a=r.length,h=0,l=t.decorations,c=l.length,u=0;l[c]=s;var p,f;for(f=p=0;c>f;)l[f]!==l[f+2]?(l[p++]=l[f++],l[p++]=l[f++]):f+=2;for(c=p,f=p=0;c>f;){for(var d=l[f],m=l[f+1],g=f+2;c>=g+2&&l[g+1]===m;)g+=2;l[p++]=d,l[p++]=m,f=g}c=l.length=p;var b,v=t.sourceNode;v&&(b=v.style.display,v.style.display="none");try{for(;a>h;){r[h];var k,y=r[h+2]||s,x=l[u+2]||s,g=Math.min(y,x),w=r[h+1];if(1!==w.nodeType&&(k=i.substring(o,g))){n&&(k=k.replace(e,"\r")),w.nodeValue=k;var L=w.ownerDocument,E=L.createElement("span");E.className=l[u+1];var C=w.parentNode;C.replaceChild(E,w),E.appendChild(w),y>o&&(r[h+1]=w=L.createTextNode(i.substring(g,y)),C.insertBefore(w,E.nextSibling))}o=g,o>=y&&(h+=2),o>=x&&(u+=2)}}finally{v&&(v.style.display=b)}}function h(t,n){for(var e=n.length;--e>=0;){var i=n[e];z.hasOwnProperty(i)?f.console&&console.warn("cannot override language handler %s",i):z[i]=t}}function l(t,n){return t&&z.hasOwnProperty(t)||(t=/^\s*</.test(n)?"default-markup":"default-code"),z[t]}function c(t){var e=t.langExtension;try{var i=n(t.sourceNode,t.pre),s=i.sourceCode;t.sourceCode=s,t.spans=i.spans,t.basePos=0,l(e,s)(t),a(t)}catch(o){f.console&&console.log(o&&o.stack?o.stack:o)}}function u(t,n,e){var i=document.createElement("pre");i.innerHTML=t,e&&r(i,e,!0);var s={langExtension:n,numberLines:e,sourceNode:i,pre:1};return c(s),i.innerHTML}function p(t){function n(t){return document.getElementsByTagName(t)}function e(){for(var n=f.PR_SHOULD_USE_CONTINUATION?u.now()+250:1/0;o.length>d&&n>u.now();d++){var s=o[d],a=s.className;if(g.test(a)&&!b.test(a)){for(var h=!1,l=s.parentNode;l;l=l.parentNode){var x=l.tagName;if(y.test(x)&&l.className&&g.test(l.className)){h=!0;break}}if(!h){s.className+=" prettyprinted";var w,L=a.match(m);!L&&(w=i(s))&&k.test(w.tagName)&&(L=w.className.match(m)),L&&(L=L[1]);var E;if(v.test(s.tagName))E=1;else{var C=s.currentStyle,D=C?C.whiteSpace:document.defaultView&&document.defaultView.getComputedStyle?document.defaultView.getComputedStyle(s,null).getPropertyValue("white-space"):0;E=D&&"pre"===D.substring(0,3)}var S=s.className.match(/\blinenums\b(?::(\d+))?/);S=S?S[1]&&S[1].length?+S[1]:!0:!1,S&&r(s,S,E),p={langExtension:L,sourceNode:s,numberLines:S,pre:E},c(p)}}}o.length>d?setTimeout(e,250):t&&t()}for(var s=[n("pre"),n("code"),n("xmp")],o=[],a=0;s.length>a;++a)for(var h=0,l=s[a].length;l>h;++h)o.push(s[a][h]);s=null;var u=Date;u.now||(u={now:function(){return+new Date}});var p,d=0,m=/\blang(?:uage)?-([\w.]+)(?!\S)/,g=/\bprettyprint\b/,b=/\bprettyprinted\b/,v=/pre|xmp/i,k=/^code$/i,y=/^(?:pre|code|xmp)$/i;e()}var f=window,d=["break,continue,do,else,for,if,return,while"],m=[d,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],g=[m,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],b=[g,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],v=[g,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"],k=[v,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],y="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",x=[g,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],w="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",L=[d,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],E=[d,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],C=[d,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],D=[b,k,x,w+L,E,C],S=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/,N="str",T="kwd",A="com",O="typ",R="lit",P="pun",I="pln",_="tag",M="dec",F="src",B="atn",$="atv",j="nocode",W="(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*",V=/\S/,q=o({keywords:D,hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),z={};h(q,["default-code"]),h(s([],[[I,/^[^<?]+/],[M,/^<!\w[^>]*(?:>|$)/],[A,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[P,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]),h(s([[I,/^[\s]+/,null," 	\r\n"],[$,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[_,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[B,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[P,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]),h(s([],[[$,/^[\s\S]+/]]),["uq.val"]),h(o({keywords:b,hashComments:!0,cStyleComments:!0,types:S}),["c","cc","cpp","cxx","cyc","m"]),h(o({keywords:"null,true,false"}),["json"]),h(o({keywords:k,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:S}),["cs"]),h(o({keywords:v,cStyleComments:!0}),["java"]),h(o({keywords:C,hashComments:!0,multiLineStrings:!0}),["bsh","csh","sh"]),h(o({keywords:L,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py"]),h(o({keywords:w,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["perl","pl","pm"]),h(o({keywords:E,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb"]),h(o({keywords:x,cStyleComments:!0,regexLiterals:!0}),["js"]),h(o({keywords:y,hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]),h(s([],[[N,/^[\s\S]+/]]),["regex"]);var H=f.PR={createSimpleLexer:s,registerLangHandler:h,sourceDecorator:o,PR_ATTRIB_NAME:B,PR_ATTRIB_VALUE:$,PR_COMMENT:A,PR_DECLARATION:M,PR_KEYWORD:T,PR_LITERAL:R,PR_NOCODE:j,PR_PLAIN:I,PR_PUNCTUATION:P,PR_SOURCE:F,PR_STRING:N,PR_TAG:_,PR_TYPE:O,prettyPrintOne:f.prettyPrintOne=u,prettyPrint:f.prettyPrint=p};"function"==typeof define&&define.amd&&define("prettify",[],function(){return H})}(),function(){function t(t){this.tokens=[],this.tokens.links={},this.options=t||a.defaults,this.rules=h.normal,this.options.gfm&&(this.rules=this.options.tables?h.tables:h.gfm)}function n(t,n){if(this.options=n||a.defaults,this.links=t,this.rules=l.normal,!this.links)throw Error("Tokens array requires a `links` property.");this.options.gfm?this.rules=this.options.breaks?l.breaks:l.gfm:this.options.pedantic&&(this.rules=l.pedantic)}function e(t){this.tokens=[],this.token=null,this.options=t||a.defaults}function i(t,n){return t.replace(n?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function s(t,n){return t=t.source,n=n||"",function e(i,s){return i?(s=s.source||s,s=s.replace(/(^|[^\[])\^/g,"$1"),t=t.replace(i,s),e):RegExp(t,n)}}function o(){}function r(t){for(var n,e,i=1;arguments.length>i;i++){n=arguments[i];for(e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])}return t}function a(n,s){try{return s&&(s=r({},a.defaults,s)),e.parse(t.lex(n,s),s)}catch(o){if(o.message+="\nPlease report this to https://github.com/chjj/marked.",(s||a.defaults).silent)return"<p>An error occured:</p><pre>"+i(o.message+"",!0)+"</pre>";throw o}}var h={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:o,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:o,lheading:/^([^\n]+)\n *(=|-){3,} *\n*/,blockquote:/^( *>[^\n]+(\n[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment|closed|closing) *(?:\n{2,}|\s*$)/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:o,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};h.bullet=/(?:[*+-]|\d+\.)/,h.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,h.item=s(h.item,"gm")(/bull/g,h.bullet)(),h.list=s(h.list)(/bull/g,h.bullet)("hr",/\n+(?=(?: *[-*_]){3,} *(?:\n+|$))/)(),h._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|@)\\b",h.html=s(h.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,h._tag)(),h.paragraph=s(h.paragraph)("hr",h.hr)("heading",h.heading)("lheading",h.lheading)("blockquote",h.blockquote)("tag","<"+h._tag)("def",h.def)(),h.normal=r({},h),h.gfm=r({},h.normal,{fences:/^ *(`{3,}|~{3,}) *(\w+)? *\n([\s\S]+?)\s*\1 *(?:\n+|$)/,paragraph:/^/}),h.gfm.paragraph=s(h.paragraph)("(?!","(?!"+h.gfm.fences.source.replace("\\1","\\2")+"|")(),h.tables=r({},h.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),t.rules=h,t.lex=function(n,e){var i=new t(e);return i.lex(n)},t.prototype.lex=function(t){return t=t.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(t,!0)},t.prototype.token=function(t,n){for(var e,i,s,o,r,a,l,c,u,t=t.replace(/^ +$/gm,"");t;)if((s=this.rules.newline.exec(t))&&(t=t.substring(s[0].length),s[0].length>1&&this.tokens.push({type:"space"})),s=this.rules.code.exec(t))t=t.substring(s[0].length),s=s[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?s:s.replace(/\n+$/,"")});else if(s=this.rules.fences.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"code",lang:s[2],text:s[3]});else if(s=this.rules.heading.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"heading",depth:s[1].length,text:s[2]});else if(n&&(s=this.rules.nptable.exec(t))){for(t=t.substring(s[0].length),a={type:"table",header:s[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3].replace(/\n$/,"").split("\n")},c=0;a.align.length>c;c++)a.align[c]=/^ *-+: *$/.test(a.align[c])?"right":/^ *:-+: *$/.test(a.align[c])?"center":/^ *:-+ *$/.test(a.align[c])?"left":null;for(c=0;a.cells.length>c;c++)a.cells[c]=a.cells[c].split(/ *\| */);this.tokens.push(a)}else if(s=this.rules.lheading.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"heading",depth:"="===s[2]?1:2,text:s[1]});else if(s=this.rules.hr.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"hr"});else if(s=this.rules.blockquote.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"blockquote_start"}),s=s[0].replace(/^ *> ?/gm,""),this.token(s,n),this.tokens.push({type:"blockquote_end"});else if(s=this.rules.list.exec(t)){for(t=t.substring(s[0].length),this.tokens.push({type:"list_start",ordered:isFinite(s[2])}),s=s[0].match(this.rules.item),this.options.smartLists&&(o=h.bullet.exec(s[0])[0]),e=!1,u=s.length,c=0;u>c;c++)a=s[c],l=a.length,a=a.replace(/^ *([*+-]|\d+\.) +/,""),~a.indexOf("\n ")&&(l-=a.length,a=this.options.pedantic?a.replace(/^ {1,4}/gm,""):a.replace(RegExp("^ {1,"+l+"}","gm"),"")),this.options.smartLists&&c!==u-1&&(r=h.bullet.exec(s[c+1])[0],o===r||"."===o[1]&&"."===r[1]||(t=s.slice(c+1).join("\n")+t,c=u-1)),i=e||/\n\n(?!\s*$)/.test(a),c!==u-1&&(e="\n"===a[a.length-1],i||(i=e)),this.tokens.push({type:i?"loose_item_start":"list_item_start"}),this.token(a,!1),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(s=this.rules.html.exec(t))t=t.substring(s[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:"pre"===s[1],text:s[0]});else if(n&&(s=this.rules.def.exec(t)))t=t.substring(s[0].length),this.tokens.links[s[1].toLowerCase()]={href:s[2],title:s[3]};else if(n&&(s=this.rules.table.exec(t))){for(t=t.substring(s[0].length),a={type:"table",header:s[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:s[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:s[3].replace(/(?: *\| *)?\n$/,"").split("\n")},c=0;a.align.length>c;c++)a.align[c]=/^ *-+: *$/.test(a.align[c])?"right":/^ *:-+: *$/.test(a.align[c])?"center":/^ *:-+ *$/.test(a.align[c])?"left":null;for(c=0;a.cells.length>c;c++)a.cells[c]=a.cells[c].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(a)}else if(n&&(s=this.rules.paragraph.exec(t)))t=t.substring(s[0].length),this.tokens.push({type:"paragraph",text:"\n"===s[1][s[1].length-1]?s[1].slice(0,-1):s[1]});else if(s=this.rules.text.exec(t))t=t.substring(s[0].length),this.tokens.push({type:"text",text:s[0]});else if(t)throw Error("Infinite loop on byte: "+t.charCodeAt(0));return this.tokens};var l={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:o,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:o,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};l._inside=/(?:\[[^\]]*\]|[^\]]|\](?=[^\[]*\]))*/,l._href=/\s*<?([^\s]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,l.link=s(l.link)("inside",l._inside)("href",l._href)(),l.reflink=s(l.reflink)("inside",l._inside)(),l.normal=r({},l),l.pedantic=r({},l.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),l.gfm=r({},l.normal,{escape:s(l.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:s(l.text)("]|","~]|")("|","|https?://|")()}),l.breaks=r({},l.gfm,{br:s(l.br)("{2,}","*")(),text:s(l.gfm.text)("{2,}","*")()}),n.rules=l,n.output=function(t,e,i){var s=new n(e,i);return s.output(t)},n.prototype.output=function(t){for(var n,e,s,o,r="";t;)if(o=this.rules.escape.exec(t))t=t.substring(o[0].length),r+=o[1];else if(o=this.rules.autolink.exec(t))t=t.substring(o[0].length),"@"===o[2]?(e=":"===o[1][6]?this.mangle(o[1].substring(7)):this.mangle(o[1]),s=this.mangle("mailto:")+e):(e=i(o[1]),s=e),r+='<a href="'+s+'">'+e+"</a>";else if(o=this.rules.url.exec(t))t=t.substring(o[0].length),e=i(o[1]),s=e,r+='<a href="'+s+'">'+e+"</a>";else if(o=this.rules.tag.exec(t))t=t.substring(o[0].length),r+=this.options.sanitize?i(o[0]):o[0];else if(o=this.rules.link.exec(t))t=t.substring(o[0].length),r+=this.outputLink(o,{href:o[2],title:o[3]});else if((o=this.rules.reflink.exec(t))||(o=this.rules.nolink.exec(t))){if(t=t.substring(o[0].length),n=(o[2]||o[1]).replace(/\s+/g," "),n=this.links[n.toLowerCase()],!n||!n.href){r+=o[0][0],t=o[0].substring(1)+t;continue}r+=this.outputLink(o,n)}else if(o=this.rules.strong.exec(t))t=t.substring(o[0].length),r+="<strong>"+this.output(o[2]||o[1])+"</strong>";else if(o=this.rules.em.exec(t))t=t.substring(o[0].length),r+="<em>"+this.output(o[2]||o[1])+"</em>";else if(o=this.rules.code.exec(t))t=t.substring(o[0].length),r+="<code>"+i(o[2],!0)+"</code>";else if(o=this.rules.br.exec(t))t=t.substring(o[0].length),r+="<br>";else if(o=this.rules.del.exec(t))t=t.substring(o[0].length),r+="<del>"+this.output(o[1])+"</del>";else if(o=this.rules.text.exec(t))t=t.substring(o[0].length),r+=i(o[0]);else if(t)throw Error("Infinite loop on byte: "+t.charCodeAt(0));return r},n.prototype.outputLink=function(t,n){return"!"!==t[0][0]?'<a href="'+i(n.href)+'"'+(n.title?' title="'+i(n.title)+'"':"")+">"+this.output(t[1])+"</a>":'<img src="'+i(n.href)+'" alt="'+i(t[1])+'"'+(n.title?' title="'+i(n.title)+'"':"")+">"},n.prototype.mangle=function(t){for(var n,e="",i=t.length,s=0;i>s;s++)n=t.charCodeAt(s),Math.random()>.5&&(n="x"+n.toString(16)),e+="&#"+n+";";return e},e.parse=function(t,n){var i=new e(n);return i.parse(t)},e.prototype.parse=function(t){this.inline=new n(t.links,this.options),this.tokens=t.reverse();for(var e="";this.next();)e+=this.tok();return e},e.prototype.next=function(){return this.token=this.tokens.pop()},e.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},e.prototype.parseText=function(){for(var t=this.token.text;"text"===this.peek().type;)t+="\n"+this.next().text;return this.inline.output(t)},e.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return"<hr>\n";case"heading":return"<h"+this.token.depth+">"+this.inline.output(this.token.text)+"</h"+this.token.depth+">\n";case"code":if(this.options.highlight){var t=this.options.highlight(this.token.text,this.token.lang);null!=t&&t!==this.token.text&&(this.token.escaped=!0,this.token.text=t)}return this.token.escaped||(this.token.text=i(this.token.text,!0)),"<pre><code"+(this.token.lang?' class="'+this.options.langPrefix+this.token.lang+'"':"")+">"+this.token.text+"</code></pre>\n";case"table":var n,e,s,o,r,a="";for(a+="<thead>\n<tr>\n",e=0;this.token.header.length>e;e++)n=this.inline.output(this.token.header[e]),a+=this.token.align[e]?'<th align="'+this.token.align[e]+'">'+n+"</th>\n":"<th>"+n+"</th>\n";for(a+="</tr>\n</thead>\n",a+="<tbody>\n",e=0;this.token.cells.length>e;e++){for(s=this.token.cells[e],a+="<tr>\n",r=0;s.length>r;r++)o=this.inline.output(s[r]),a+=this.token.align[r]?'<td align="'+this.token.align[r]+'">'+o+"</td>\n":"<td>"+o+"</td>\n";a+="</tr>\n"}return a+="</tbody>\n","<table>\n"+a+"</table>\n";case"blockquote_start":for(var a="";"blockquote_end"!==this.next().type;)a+=this.tok();return"<blockquote>\n"+a+"</blockquote>\n";case"list_start":for(var h=this.token.ordered?"ol":"ul",a="";"list_end"!==this.next().type;)a+=this.tok();return"<"+h+">\n"+a+"</"+h+">\n";case"list_item_start":for(var a="";"list_item_end"!==this.next().type;)a+="text"===this.token.type?this.parseText():this.tok();return"<li>"+a+"</li>\n";case"loose_item_start":for(var a="";"list_item_end"!==this.next().type;)a+=this.tok();return"<li>"+a+"</li>\n";case"html":return this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);case"paragraph":return"<p>"+this.inline.output(this.token.text)+"</p>\n";case"text":return"<p>"+this.parseText()+"</p>\n"}},o.exec=o,a.options=a.setOptions=function(t){return r(a.defaults,t),a},a.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-"},a.Parser=e,a.parser=e.parse,a.Lexer=t,a.lexer=t.lex,a.InlineLexer=n,a.inlineLexer=n.output,a.parse=a,"object"==typeof exports?module.exports=a:"function"==typeof define&&define.amd?define("marked",[],function(){return a}):this.marked=a}.call(function(){return this||("undefined"!=typeof window?window:global)}()),define("common",["underscore","data/toc"],function(t,n){"use strict";function e(e,i){function s(t){var e=n[t];return e.ch?"Chapter "+e.ch+" "+e.title:e.title}function o(e,i){var s=n[e].sections,o=t.find(s,function(t){return t.sec===i});return i+" "+o.title}return i?o(e,i):s(e)}return{getTitle:e}}),define("text",["module"],function(t){"use strict";var n,e,i,s,o=["Msxml2.XMLHTTP","Microsoft.XMLHTTP","Msxml2.XMLHTTP.4.0"],r=/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,a=/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,h="undefined"!=typeof location&&location.href,l=h&&location.protocol&&location.protocol.replace(/\:/,""),c=h&&location.hostname,u=h&&(location.port||void 0),p=[],f=t.config&&t.config()||{};return n={version:"2.0.6",strip:function(t){if(t){t=t.replace(r,"");var n=t.match(a);n&&(t=n[1])}else t="";return t},jsEscape:function(t){return t.replace(/(['\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r").replace(/[\u2028]/g,"\\u2028").replace(/[\u2029]/g,"\\u2029")},createXhr:f.createXhr||function(){var t,n,e;if("undefined"!=typeof XMLHttpRequest)return new XMLHttpRequest;if("undefined"!=typeof ActiveXObject)for(n=0;3>n;n+=1){e=o[n];try{t=new ActiveXObject(e)}catch(i){}if(t){o=[e];break}}return t},parseName:function(t){var n,e,i,s=!1,o=t.indexOf("."),r=0===t.indexOf("./")||0===t.indexOf("../");return-1!==o&&(!r||o>1)?(n=t.substring(0,o),e=t.substring(o+1,t.length)):n=t,i=e||n,o=i.indexOf("!"),-1!==o&&(s="strip"===i.substring(o+1),i=i.substring(0,o),e?e=i:n=i),{moduleName:n,ext:e,strip:s}},xdRegExp:/^((\w+)\:)?\/\/([^\/\\]+)/,useXhr:function(t,e,i,s){var o,r,a,h=n.xdRegExp.exec(t);return h?(o=h[2],r=h[3],r=r.split(":"),a=r[1],r=r[0],!(o&&o!==e||r&&r.toLowerCase()!==i.toLowerCase()||(a||r)&&a!==s)):!0},finishLoad:function(t,e,i,s){i=e?n.strip(i):i,f.isBuild&&(p[t]=i),s(i)},load:function(t,e,i,s){if(s.isBuild&&!s.inlineText)return i(),void 0;f.isBuild=s.isBuild;var o=n.parseName(t),r=o.moduleName+(o.ext?"."+o.ext:""),a=e.toUrl(r),p=f.useXhr||n.useXhr;!h||p(a,l,c,u)?n.get(a,function(e){n.finishLoad(t,o.strip,e,i)},function(t){i.error&&i.error(t)}):e([r],function(t){n.finishLoad(o.moduleName+"."+o.ext,o.strip,t,i)})},write:function(t,e,i){if(p.hasOwnProperty(e)){var s=n.jsEscape(p[e]);i.asModule(t+"!"+e,"define(function () { return '"+s+"';});\n")}},writeFile:function(t,e,i,s,o){var r=n.parseName(e),a=r.ext?"."+r.ext:"",h=r.moduleName+a,l=i.toUrl(r.moduleName+a)+".js";n.load(h,i,function(){var e=function(t){return s(l,t)};e.asModule=function(t,n){return s.asModule(t,l,n)},n.write(t,h,e,o)},o)}},"node"===f.env||!f.env&&"undefined"!=typeof process&&process.versions&&process.versions.node?(e=require.nodeRequire("fs"),n.get=function(t,n){var i=e.readFileSync(t,"utf8");0===i.indexOf("﻿")&&(i=i.substring(1)),n(i)}):"xhr"===f.env||!f.env&&n.createXhr()?n.get=function(t,e,i,s){var o,r=n.createXhr();if(r.open("GET",t,!0),s)for(o in s)s.hasOwnProperty(o)&&r.setRequestHeader(o.toLowerCase(),s[o]);f.onXhr&&f.onXhr(r,t),r.onreadystatechange=function(){var n,s;4===r.readyState&&(n=r.status,n>399&&600>n?(s=Error(t+" HTTP status: "+n),s.xhr=r,i(s)):e(r.responseText),f.onXhrComplete&&f.onXhrComplete(r,t))},r.send(null)}:"rhino"===f.env||!f.env&&"undefined"!=typeof Packages&&"undefined"!=typeof java?n.get=function(t,n){var e,i,s="utf-8",o=new java.io.File(t),r=java.lang.System.getProperty("line.separator"),a=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(o),s)),h="";try{for(e=new java.lang.StringBuffer,i=a.readLine(),i&&i.length()&&65279===i.charAt(0)&&(i=i.substring(1)),e.append(i);null!==(i=a.readLine());)e.append(r),e.append(i);h=""+e+""}finally{a.close()}n(h)}:("xpconnect"===f.env||!f.env&&"undefined"!=typeof Components&&Components.classes&&Components.interfaces)&&(i=Components.classes,s=Components.interfaces,Components.utils["import"]("resource://gre/modules/FileUtils.jsm"),n.get=function(t,n){var e,o,r={},a=new FileUtils.File(t);try{e=i["@mozilla.org/network/file-input-stream;1"].createInstance(s.nsIFileInputStream),e.init(a,1,0,!1),o=i["@mozilla.org/intl/converter-input-stream;1"].createInstance(s.nsIConverterInputStream),o.init(e,"utf-8",e.available(),s.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER),o.readString(e.available(),r),o.close(),e.close(),n(r.value)}catch(h){throw Error((a&&a.path||"")+": "+h)}}),n}),define("text!src",[],function(){return"/* global define */\n\n/**\n * Chapter 1 Introduction\n * ======================\n * 1.1 Introduction\n * ----------------\n * This series of articles is a tutorial on the theory and\n * practice of developing language parsers and compilers.\n * Before we are finished, we will have covered every aspect of\n * compiler construction, designed a new programming language,\n * and built a working compiler.\n *\n * 1.2 The cradle\n * --------------\n * The `cradle` is a boiler plate that consists of some *I/O routines*,\n * an *error-handling routine* and a *skeleton, null main program*.\n *\n * **A short list of the cradle**\n * ```\n * const:    TAB, CR, LF\n * variable: look\n * function: getChar, error, abort, expected,\n *           match, isAlpha, isDigit, getName, getNum\n *           emit, emitLn, init, main\n * ```\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var cradle = object.extend({\n\n        // Constant declarations\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations\n        look: '',   // lookahead character\n\n        // Read new character from input\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Match a specific input character\n        match: function (x) {\n            if (this.look === x) {\n                this.getChar();\n            } else {\n                this.expected('\"' + x + '\"');\n            }\n        },\n\n        // Recognize an alpha character\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Get an identifier\n        getName: function () {\n            var name;\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            name = this.look.toUpperCase();\n            this.getChar();\n            return name;\n        },\n\n        // Get a number\n        getNum: function () {\n            var num;\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            num = this.look;\n            this.getChar();\n            return num;\n        },\n\n        // Output a string with tab\n        emit: function (str) {\n            io.write(this.TAB, str);\n        },\n\n        // Output a string with tab and newline\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Initialize\n        init: function () {\n            this.getChar();\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n        }\n    });\n\n    return cradle;\n});\n\r\n/* global define */\n\n/**\n * Chapter 10 Introducing \"Tiny\"\n * ==============================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    var firstStep,                      // 10.2.1\n        theMainProgram,                 // 10.2.2\n        declarations,                   // 10.3\n        declarationsAndSymbols,         // 10.4.1\n        variableList,                   // 10.4.2\n        initializers,                   // 10.5.1\n        multiDigitInteger,              // 10.5.2\n        theSymbolTable,                 // 10.6\n        executableStatements,           // 10.7.1\n        codeGenerationRoutines,         // 10.7.2\n        assignmentStatement,            // 10.7.3\n        moreCodeGenerationRoutines,     // 10.8.1\n        booleanExpressions,             // 10.8.2\n        controlStructures,              // 10.9\n        lexicalScanning,                // 10.10\n        moreRelops,                     // 10.12\n        inputOutput;                    // 10.13\n\n    /**\n     * 10.1 Introduction\n     * ------------------\n     */\n\n    /**\n     * 10.2 Getting started\n     * ---------------------\n     * Top-level definition for TINY (similar to Pascal):\n     * ```\n     * <program> ::= PROGRAM <top-level decl> <main> '.'\n     * ```\n     */\n\n    /**\n     * ### 10.2.1 First step ###\n     * ```\n     * <program> ::= PROGRAM .\n     * ```\n     * At this point TINY will only accept code: `p.`, a null program.\n     */\n    firstStep = cradle.extend({\n\n        // Parse and translate a program\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.prolog();\n            this.match('.');\n            this.epilog();\n        },\n\n        // Write header info\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n        },\n\n        // Write the prolog\n        prolog: function () {\n            this.postLabel('MAIN');\n        },\n\n        // Post a label to output (ch 5.3)\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        // Write the epilog\n        epilog: function () {\n            this.emitLn('DC WARMST');\n            this.emitLn('END MAIN');\n        },\n\n        // Main program\n        main: function () {\n            this.init();\n            this.prog();\n            if (this.look !== this.LF) {\n                this.abort('Unexpected data after \".\"');\n            }\n        }\n    });\n\n    /**\n     * ### 10.2.2 The main program ###\n     * The next step is to process the code for the main program.\n     * The Pascal BEGIN-block is chosen\n     * ```\n     * <program> ::= PROGRAM BEGIN END '.'\n     * ```\n     * and the TINY now only accept code: `pbe.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     */\n    theMainProgram = firstStep.extend({\n\n        // Parse and translate a program\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.doMain();\n            this.match('.');\n        },\n\n        // Main program\n        doMain: function () {\n            this.match('b');\n            this.prolog();\n            this.match('e');\n            this.epilog();\n        }\n    });\n\n    /**\n     * 10.3 Declarations\n     * ------------------\n     * ```\n     * <program> ::= PROGRAM <top-level decls> BEGIN END '.'\n     * <top-level decls> ::= (<data declaration>)*\n     * <data declaration> ::= VAR <var-list>\n     * ```\n     * code example: `pbe.` or `pvxvybe.`\n     *\n     * which, the later, stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * VAR Y                    vy\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     * At this point, Decl is just a stub.\n     * It generates no code, and it doesn’t process a list.\n     */\n    declarations = theMainProgram.extend({\n\n        // Process a data declaration\n        decl: function () {\n            this.match('v');\n            this.getChar();\n        },\n\n        // Parse and translate global declarations\n        topDecls: function () {\n            while (this.look !== 'b') {\n                switch (this.look) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized Keyword \"' + this.look + '\"');\n                }\n            }\n        },\n\n        // Parse and translate a program\n        prog: function () {\n            this.match('p');\n            this.header();\n            this.topDecls();\n            this.doMain();\n            this.match('.');\n        }\n    });\n\n    /**\n     * 10.4 Declarations and symbols\n     * ------------------------------\n     * A real compiler would issue assembler directives\n     * to allocate storage for the variables.\n     * It’s about time we actually produced some code.\n     *\n     * The **BNF** is the same as the previous section.\n     * ```\n     * <data declaration> ::= VAR <var-list>\n     * <var-list> ::= <ident>\n     * ```\n     * try the code example: `pvxvyvzbe.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * VAR Y                    vy\n     * VAR Z                    yz\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     */\n    declarationsAndSymbols = declarations.extend({\n\n        // Parse and translate a data declaration\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n        },\n\n        // Allocate storage for a variable\n        alloc: function (name) {\n            io.writeLn(name, ':', this.TAB, 'DC 0');\n        }\n    });\n\n    /**\n     * ### 10.4.2 Variable list ###\n     * We haven’t really parsed the correct syntax for a data declaration,\n     * since it involves a variable list.\n     * Our version only permits a single variable. That’s easy to fix\n     * ```\n     * <var-list> ::= <indent> (, <ident>)*\n     * ```\n     * code example: `pvx,y,zbe.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X, Y, Z              vx,y,z\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     */\n    variableList = declarationsAndSymbols.extend({\n\n        // Parse and translate a data declaration\n        decl: function () {\n            this.match('v');\n            this.alloc(this.getName());\n            while (this.look === ',') {     // <--\n                this.getChar();\n                this.alloc(this.getName());\n            }\n        }\n    });\n\n    /**\n     * 10.5 Initializers\n     * ------------------\n     * ```\n     * <var-list> ::= <var> (, <var>)*\n     * <var> ::= <ident> [= <integer>]\n     * ```\n     * ### 10.5.1 ###\n     * code example: `pva=1vx=5,y=3,zbe.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR A = 1                va=1\n     * VAR X = 5,               vx=5,\n     *     Y = 3,               y=3,\n     *     Z                    z\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     */\n    initializers = variableList.extend({\n\n        // Allocate storage for a variable\n        alloc: function (name) {\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        }\n    });\n\n    /**\n     * ### 10.5.2 Multi-digit integer ###\n     * Use multi-digit version of `getNum` and\n     * now we should be able to initialize variables\n     * with negative and/or multi-digit values.\n     *\n     * Code example: `pvx=15,y,z=-23be.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X = 15, Y, Z = -23   vx=15,y,z=-23\n     * BEGIN                    b\n     * END                      e\n     * .                        .\n     * ```\n     */\n    multiDigitInteger = initializers.extend({\n\n        // Get a Number\n        getNum: function () {\n            var value = 0;\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {\n                value = +this.look + 10 * value;\n                this.getChar();\n            }\n            return value;\n        },\n\n        // Allocate storage for a variable\n        alloc: function (name) {\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                if (this.look === '-') {\n                    io.write('-');\n                    this.match('-');\n                }\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        }\n    });\n\n    /**\n     * 10.6 The symbol table\n     * ----------------------\n     */\n    theSymbolTable = multiDigitInteger.extend({\n\n        symbolTable: null,\n\n        // look for symbol in table\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Allocate storage for a variable\n        alloc: function (name) {\n            if (this.inTable(name)) {   // <-...\n                this.abort('Duplicate Variable Name ' + name);\n            }\n            this.symbolTable[name] = 'v';   // <--\n\n            io.write(name, ':', this.TAB, 'DC ');\n            if (this.look === '=') {\n                this.match('=');\n                if (this.look === '-') {\n                    io.write('-');\n                    this.match('-');\n                }\n                io.writeLn(this.getNum());\n            } else {\n                io.writeLn('0');\n            }\n        },\n\n        // Initialize\n        init: function () {\n            this.symbolTable = {};  // <--\n            this.getChar();\n        }\n    });\n\n    /**\n     * 10.7 Executable statements\n     * ---------------------------\n     * The BNF definition given earlier for the main program included\n     * a statement block, which we have so far ignored\n     * ```\n     * <main> ::= BEGIN <block> END\n     * ```\n     * For now, we can just consider a block to be\n     * a series of assignment statements\n     * ```\n     * <block> ::= (<assignment>)*\n     * ```\n     * ### 10.7.1 ###\n     * Null assignment\n     *\n     * code example `pvxbxe.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X                    vx\n     * BEGIN                    b\n     *     X                    x\n     * END                      e\n     * .                        .\n     * ```\n     */\n    executableStatements = theSymbolTable.extend({\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            this.getChar();\n        },\n\n        // Parse and translate a block of statement\n        block: function () {\n            while (this.look !== 'e') {\n                this.assignment();\n            }\n        },\n\n        // Main program\n        doMain: function () {\n            this.match('b');\n            this.prolog();\n            this.block();   // <--\n            this.match('e');\n            this.epilog();\n        }\n    });\n\n    /**\n     * ### 10.7.2 Code generation routines ###\n     */\n    codeGenerationRoutines = executableStatements.extend({\n\n        // Clear the primary register\n        clear: function () {\n            this.emitLn('CLR D0');\n        },\n\n        // Negate the primary register\n        negate: function () {\n            this.emitLn('NEG D0');\n        },\n\n        // Load a constant value to primary register\n        loadConst: function (number) {\n            this.emitLn('MOVE #' + number + ', D0');\n        },\n\n        // Load a variable to primary register\n        loadVar: function (name) {\n            if (!this.inTable(name)) {\n                this.undefinedd(name);\n            }\n            this.emitLn('MOVE ' + name + '(PC), D0');\n        },\n\n        // Push primary onto stack\n        push: function () {\n            this.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Add top of stack to primary\n        popAdd: function () {\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Subtract primary from top of stack\n        popSub: function () {\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Multiply top of stack to primary\n        popMul: function () {\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Divide top of stack by primary\n        popDiv: function () {\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Store primary to variable\n        store: function (name) {\n            if (!this.inTable(name)) {\n                this.undefinedd(name);\n            }\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Report an undefined identifier\n        undefinedd: function (name) {\n            this.abort('Undefined Identifier ' + name);\n        }\n    });\n\n    /**\n     * ### 10.7.3 Assignment statement ###\n     * ```\n     * <assignment> ::= <ident> = <expression>\n     * <expression> ::= <first term> (<addop> <term>)*\n     * <first term> ::= <first factor> <rest>\n     * <term> ::= <factor> <rest>\n     * <rest> ::= (<mulop> <factor>)*\n     * <first factor> ::= [<addop>] <factor>\n     * <factor> ::= <var> | <number> | (<expression>)\n     * ```\n     *\n     * Code example `pvx,y=-1bx=-22*(3-8)y=x+15e.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR X,                   vx,\n     *     Y = -1               y=-1\n     * BEGIN                    b\n     *     X = -22 * (3 - 8)    x=-22*(3-8)\n     *     Y = X + 15           y=x+15\n     * END                      e\n     * .                        .\n     * ```\n     */\n    assignmentStatement = codeGenerationRoutines.extend({\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.loadVar(this.getName());\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate a negative factor\n        negFactor: function () {\n            this.match('-');\n            if (this.isDigit(this.look)) {\n                this.loadConst(-this.getNum());\n            } else {\n                this.factor();\n                this.negate();\n            }\n        },\n\n        // Parse and translate a leading factor\n        firstFactor: function () {\n            switch (this.look) {\n            case '+':\n                this.match('+');\n                this.factor();\n                break;\n            case '-':\n                this.negFactor();\n                break;\n            default:\n                this.factor();\n            }\n        },\n\n        // Recognize and translate a multiply\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.popMul();\n        },\n\n        // Recognize and translate a divide\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.popDiv();\n        },\n\n        // Recognize an addop\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Common code used by term() and firstTerm()\n        term1: function () {\n            while (this.isMulop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            this.factor();\n            this.term1();\n        },\n\n        // Parse and translate a math term with possible leading sing\n        firstTerm: function () {\n            this.firstFactor();\n            this.term1();\n        },\n\n        // Recognize and translate an add\n        add: function () {\n            this.match('+');\n            this.term();\n            this.popAdd();\n        },\n\n        // Recognize and translate a subtract\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.popSub();\n        },\n\n        // Recognize an addop\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // parse and translate an expression\n        expression: function () {\n            this.firstTerm();\n            while (this.isAddop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.store(name);\n        }\n    });\n\n    /**\n     * 10.8 Booleans\n     * --------------\n     */\n\n    /**\n     * ### 10.8.1 More code generation routines ###\n     */\n    moreCodeGenerationRoutines = assignmentStatement.extend({\n\n        // Complement the primary register\n        notIt: function () {\n            this.emitLn('NOT D0');\n        },\n\n        // AND top of stack with primary\n        popAnd: function () {\n            this.emitLn('AND (SP)+, D0');\n        },\n\n        // OR top of stack with primary\n        popOr: function () {\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // XOR top of stack with primary\n        popXor: function () {\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Compare top of stack with primary\n        popCompare: function () {\n            this.emitLn('CMP (SP)+, D0');\n        },\n\n        // Set D0 If compare was =\n        setEqual: function () {\n            this.emitLn('SEQ D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was !=\n        setNEqual: function () {\n            this.emitLn('SNE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was >\n        setGreater: function () {\n            this.emitLn('SLT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was <\n        setLess: function () {\n            this.emitLn('SGT D0');\n            this.emitLn('EXT D0');\n        }\n    });\n\n    /**\n     * ### 10.8.2 Boolean expressions ###\n     * **BNF for the boolean expressions**\n     * ```\n     * <bool-expr>  ::= <bool-term> (<orop> <bool-term>)*\n     * <bool-term>  ::= <not-factor> (<andop> <not-factor>)*\n     * <not-factor> ::= ['!'] <relation>\n     * <relation>   ::= <expression> [<relop> <expression>]\n     * ```\n     * code example: `pvx,y,zbx=z>ye.`\n     *\n     * which stands for:\n     * ```\n     * PROGRAM                  p\n     * VAR X, Y, Z              vx,y,z\n     * BEGIN                    b\n     *     X = Z > Y            x=z>y\n     * END                      e\n     * .                        .\n     * ```\n     */\n    booleanExpressions = moreCodeGenerationRoutines.extend({\n\n        // Recognize a boolean orop\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize and translate a relational \"equals\"\n        equals: function () {\n            this.match('=');\n            this.expression();\n            this.popCompare();\n            this.setEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\"\n        notEquals: function () {\n            this.match('#');\n            this.expression();\n            this.popCompare();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\"\n        less: function () {\n            this.match('<');\n            this.expression();\n            this.popCompare();\n            this.setLess();\n        },\n\n        // Recognize and translate a relational \"greater than\"\n        greater: function () {\n            this.match('>');\n            this.expression();\n            this.popCompare();\n            this.setGreater();\n        },\n\n        // Parse and translate a relation\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '=':\n                    this.equals();\n                    break;\n                case '#':\n                    this.notEquals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean factor with leading NOT\n        notFactor: function () {\n            if (this.look === '!') {\n                this.match('!');\n                this.relation();\n                this.notIt();\n            } else {\n                this.relation();\n            }\n        },\n\n        // Parse and translate a boolean term\n        boolTerm: function () {\n            this.notFactor();\n            while (this.look === '&') {\n                this.push();\n                this.match('&');\n                this.notFactor();\n                this.popAnd();\n            }\n        },\n\n        // Recognize and translate a boolean OR\n        boolOr: function () {\n            this.match('|');\n            this.boolTerm();\n            this.popOr();\n        },\n\n        // Recognize and translate an exclusive or (XOR)\n        boolXor: function () {\n            this.match('~');\n            this.boolTerm();\n            this.popXor();\n        },\n\n        // Parse and translate a boolean expression\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.look)) {\n                this.push();\n                switch (this.look) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();  // <--\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.loadVar(this.getName());\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.boolExpression();  // <--\n            this.store(name);\n        }\n    });\n\n    /**\n     * 10.9 Control structures\n     * ------------------------\n     * ```\n     * <block> ::= ( <statement> )*\n     * <statement> ::= <if> | <while> | <assignment>\n     * <if> ::= IF <bool-expression> <block> [ ELSE <block> ] ENDIF\n     * <while> ::= WHILE <bool-expression> <block> ENDWHILE\n     * ```\n     * So far, we have **TINY version 0.1**\n     *\n     * Code example `pvc=1,sbwc<11s=s+cc=c+1ee.`\n     *\n     * which stands for\n     * ```\n     * PROGRAM                  p\n     * VAR C = 1, S             vc=1,s\n     * BEGIN                    b\n     *     WHILE C < 11         wc<11\n     *         S = S + C        s=s+c\n     *         C = C + 1        c=c+1\n     *     ENDWHILE             e\n     * END.                     e.\n     * ```\n     */\n    controlStructures = booleanExpressions.extend({\n\n        // Branch uncoditional\n        branch: function (label) {\n            this.emitLn('BRA ' + label);\n        },\n\n        // Branch false\n        branchFalse: function (label) {\n            this.emitLn('TST D0');\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Generate a unique lable\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label_1, label_2;\n\n            this.match('i');\n            this.boolExpression();\n            label_1 = this.newLabel();\n            label_2 = label_1;\n            this.branchFalse(label_1);\n            this.block();\n\n            if (this.look === 'l') {\n                this.match('l');\n                label_2 = this.newLabel();\n                this.branch(label_2);\n                this.postLabel(label_1);\n                this.block();\n            }\n\n            this.postLabel(label_2);\n            this.match('e');\n        },\n\n        // Parse and translate a WHILE statement\n        doWhile: function () {\n            var label_1, label_2;\n            this.match('w');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();\n            this.postLabel(label_1);\n            this.boolExpression();\n            this.branchFalse(label_2);\n            this.block();\n            this.match('e');\n            this.branch(label_1);\n            this.postLabel(label_2);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                default:\n                    this.assignment();\n                }\n            }\n        },\n\n        // Initialize\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n        }\n    });\n\n    /**\n     * 10.10 Lexical scanning\n     * -----------------------\n     */\n    lexicalScanning = controlStructures.extend({\n\n        // Variable declarations\n        token: '',      // encoded token\n        value: '',      // unencoded token\n\n        keywordCodeTable: {\n            IF: 'i',\n            ELSE: 'l',\n            ENDIF: 'e',\n            WHILE: 'w',\n            ENDWHILE: 'e',\n            VAR: 'v',\n            BEGIN: 'b',\n            END: 'e',\n            PROGRAM: 'p'\n        },\n\n        keywordCode: function (val) {\n            return this.keywordCodeTable[val] || 'x';\n        },\n\n        // Get an identifier and scan it for keywords\n        scan: function () {\n            this.getName();\n            this.token = this.keywordCode(this.value);\n        },\n\n        // Recognize an alphanumeric character\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Skip over an end-of-line\n        newLine: function () {\n            while (this.look === this.CR || this.look === this.LF) {\n                this.getChar();\n                this.skipWhite();\n            }\n        },\n\n        // Match a specific input character\n        match: function (x) {\n            this.newLine();     // <--\n            if (this.look !== x) {\n                this.expected('\"' + x + '\"');\n            }\n            this.getChar();\n            this.skipWhite();   // <--\n        },\n\n        // Match a specific input string\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n        },\n\n        // Get an identifier\n        getName: function () {\n            this.newLine();     // <--\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            this.value = '';\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n        },\n\n        // Get a Number\n        getNum: function () {\n            var value = 0;\n            this.newLine();     // <--\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {\n                value = +this.look + 10 * value;\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return value;\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.getName();\n                this.loadVar(this.value);\n            } else {\n                this.loadConst(this.getNum());\n            }\n        },\n\n        // Parse and translate a data declaration\n        decl: function () {\n            this.getName();\n            this.alloc(this.value);\n            while (this.look === ',') {     // <--\n                this.match(',');\n                this.getName();\n                this.alloc(this.value);\n            }\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.value;\n            this.match('=');\n            this.boolExpression();\n            this.store(name);\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label_1, label_2;\n\n            this.boolExpression();\n            label_1 = this.newLabel();\n            label_2 = label_1;\n            this.branchFalse(label_1);\n            this.block();\n\n            if (this.token === 'l') {\n                label_2 = this.newLabel();\n                this.branch(label_2);\n                this.postLabel(label_1);\n                this.block();\n            }\n\n            this.postLabel(label_2);\n            this.matchString('ENDIF');\n        },\n\n        // Parse and translate a WHILE statement\n        doWhile: function () {\n            var label_1 = this.newLabel(),\n                label_2 = this.newLabel();\n\n            this.postLabel(label_1);\n            this.boolExpression();\n            this.branchFalse(label_2);\n            this.block();\n            this.matchString('ENDWHILE');\n            this.branch(label_1);\n            this.postLabel(label_2);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        },\n\n        // Parse and translate global declarations\n        topDecls: function () {\n            this.scan();\n            while (this.token !== 'b') {\n                switch (this.token) {\n                case 'v':\n                    this.decl();\n                    break;\n                default:\n                    this.abort('Unrecognized Keyword \"' + this.value + '\"');\n                }\n                this.scan();\n            }\n        },\n\n        // Main program\n        doMain: function () {\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        },\n\n        // Parse and translate a program\n        prog: function () {\n            this.matchString('PROGRAM');\n            this.header();\n            this.topDecls();\n            this.doMain();\n            this.match('.');\n        },\n\n        // Initialize\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n            this.scan();\n        }\n    });\n\n    /**\n     * 10.11 Multi-character variable names\n     * ------------------------------------\n     * Skipped.\n     */\n\n    /**\n     * 10.12 More relops\n     * ------------------\n     * Some of the relops are indeed single characters,\n     * but others require two, such as `<=` and `>=`.\n     *\n     * We extend the relop set to include\n     * `<`, `<=`, `=`, `<>`, `#`, `>`, and `>=`.\n     */\n    moreRelops = lexicalScanning.extend({\n\n        // TODO: double check the Scc command!\n\n        // Set D0 if compare was <=\n        setLessOrEqual: function () {\n            this.emitLn('SGE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was >=\n        setGreaterOrEqual: function () {\n            this.emitLn('SLE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Recognize and translate a relational \"less than or equal\"\n        lessOrEqual: function () {\n            this.match('=');\n            this.expression();\n            this.popCompare();\n            this.setLessOrEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\"\n        notEqual: function () {\n            this.match('>');\n            this.expression();\n            this.popCompare();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\"\n        less: function () {\n            this.match('<');\n            switch (this.look) {\n            case '=':   // <=  less or equal\n                this.lessOrEqual();\n                break;\n            case '>':   // <>  not equal\n                this.notEqual();\n                break;\n            default:    // <  less\n                this.expression();\n                this.popCompare();\n                this.setLess();\n            }\n        },\n\n        // Recognize and translate a relational \"greater than\"\n        greater: function () {\n            this.match('>');\n            if (this.look === '=') {   // >=  greater or equal\n                this.match('=');\n                this.expression();\n                this.popCompare();\n                this.setGreaterOrEqual();\n            } else {        // >  greater\n                this.expression();\n                this.popCompare();\n                this.setGreater();\n            }\n        }\n    });\n\n    /**\n     * 10.13 Input / Output\n     * ---------------------\n     * Assuming a library call `TINYLIB.LIB` exists\n     */\n    inputOutput = moreRelops.extend({\n\n        keywordCodeTable: {\n            IF: 'i',\n            ELSE: 'l',\n            ENDIF: 'e',\n            WHILE: 'w',\n            ENDWHILE: 'e',\n            READ: 'R',      // <--\n            WRITE: 'W',     // <--\n            VAR: 'v',\n            BEGIN: 'b',\n            END: 'e',\n            PROGRAM: 'p'\n        },\n\n        // Write header info\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n            this.emitLn('LIB TINYLIB');\n        },\n\n        // Read variable to primary register\n        readVar: function () {\n            this.emitLn('BSR READ');\n            this.store(this.value);\n        },\n\n        // Write variable from primary register\n        writeVar: function () {\n            this.emitLn('BSR WRITE');\n        },\n\n        // Process a read statement\n        doRead: function () {\n            this.match('(');\n            this.getName();\n            this.readVar();\n            while (this.look === ',') {\n                this.match(',');\n                this.getName();\n                this.readVar();\n            }\n            this.match(')');\n        },\n\n        // Process a write statement\n        doWrite: function () {\n            this.match('(');\n            this.expression();\n            this.writeVar();\n            while (this.look === ',') {\n                this.match(',');\n                this.expression();\n                this.writeVar();\n            }\n            this.match(')');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            this.scan();\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':   // <--\n                    this.doRead();\n                    break;\n                case 'W':   // <--\n                    this.doWrite();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        }\n    });\n    /**\n     * 10.14 Conclusion\n     * -----------------\n     * So far, we have **TINY Version 1.0**\n     */\n\n\n    return {\n\n        // 10.2.1\n        firstStep: firstStep,\n        // 10.2.2\n        theMainProgram: theMainProgram,\n        // 10.3\n        declarations: declarations,\n        // 10.4.1\n        declarationsAndSymbols: declarationsAndSymbols,\n        // 10.4.2\n        variableList: variableList,\n        // 10.5.1\n        initializers: initializers,\n        // 10.5.2\n        multiDigitInteger: multiDigitInteger,\n        // 10.6\n        theSymbolTable: theSymbolTable,\n        // 10.7.1\n        executableStatements: executableStatements,\n        // 10.7.2\n        codeGenerationRoutines: codeGenerationRoutines,\n        // 10.7.3\n        assignmentStatement: assignmentStatement,\n        // 10.8.1\n        moreCodeGenerationRoutines: moreCodeGenerationRoutines,\n        // 10.8.2\n        booleanExpressions: booleanExpressions,\n        // 10.9\n        controlStructures: controlStructures,\n        //10.10\n        lexicalScanning: lexicalScanning,\n        // 10.12\n        moreRelops: moreRelops,\n        // 10.13\n        inputOutput: inputOutput\n    };\n});\n\r\n/* global define */\n\n/**\n * 11.6 Conclusion\n * ----------------\n * **Program Tiny v1.1** concludes chapter 11 Lexical scan revisited.\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var program = object.extend({\n\n        // Constant declarations\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations\n        look: '',       // lookahead character\n        lCount: 0,      // label counter\n        token: '',      // encoded token\n        value: '',      // unencoded token\n        symbolTable: null,\n\n        keywordCodeTable: {\n            IF: 'i',\n            ELSE: 'l',\n            ENDIF: 'e',\n            WHILE: 'w',\n            ENDWHILE: 'e',\n            READ: 'R',\n            WRITE: 'W',\n            VAR: 'v',\n            BEGIN: 'b',\n            END: 'e',\n            PROGRAM: 'p'\n        },\n\n        keywordCode: function (val) {\n            return this.keywordCodeTable[val] || 'x';\n        },\n\n        // Read new character from input\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Report an undefined identifier\n        undef: function (name) {\n            this.abort('Undefined Identifier ' + name);\n        },\n\n        // Report a duplicate identifier\n        duplicate: function (name) {\n            this.abort('Duplicate Identifier ' + name);\n        },\n\n        // Check to make sure the current token is an identifier\n        checkIdent: function () {\n            if (this.token !== 'x') {\n                this.expected('Identifier');\n            }\n        },\n\n        // Recognize an alpha character\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize a boolean orop\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Recognize a relop\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Look for symbol in table\n        inTable: function (name) {\n            return !!this.symbolTable[name];\n        },\n\n        // Check to see if an identifier is in the symbol table\n        // Report an error if it's not.\n        checkTable: function (name) {\n            if (!this.inTable(name)) {\n                this.undef(name);\n            }\n        },\n\n        // Check the symbol table for a duplicate identifier\n        // Report an error if identifier is already in table.\n        checkDup: function (name) {\n            if (this.inTable(name)) {\n                this.duplicate(name);\n            }\n        },\n\n        // Add a new entry to symbol table\n        addEntry: function (name, type) {\n            this.checkDup(name);\n            this.symbolTable[name] = type;\n        },\n\n        // Get an identifier\n        getName: function () {\n            this.skipWhite();\n            if (!this.isAlpha(this.look)) {\n                this.expected('Identifier');\n            }\n            this.token = 'x';\n            this.value = '';\n            do {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            } while (this.isAlNum(this.look));\n        },\n\n        // Get a Number\n        getNum: function () {\n            this.skipWhite();\n            if (!this.isDigit(this.look)) {\n                this.expected('Number');\n            }\n            this.token = '#';\n            this.value = '';\n            do {\n                this.value += this.look;\n                this.getChar();\n            } while (this.isDigit(this.look));\n        },\n\n        // Get an operator\n        getOp: function () {\n            this.token = this.look;\n            this.value = this.look;\n            this.getChar();\n        },\n\n        // Get the next input token\n        next: function () {\n            this.skipWhite();\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else {\n                this.getOp();\n            }\n        },\n\n        // Scan the current identifier for keywords\n        scan: function () {\n            if (this.token === 'x') {\n                this.token = this.keywordCode(this.value);\n            }\n        },\n\n        // Match a specific input string\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n            this.next();\n        },\n\n         // Output a string with tab\n        emit: function (str) {\n            io.write(this.TAB + str);\n        },\n\n        // Output a string with tab and newline\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        // Generate a unique lable\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        /**\n         * Code generation routines\n         */\n\n         // Clear the primary register\n        clear: function () {\n            this.emitLn('CLR D0');\n        },\n\n        // Negate the primary register\n        negate: function () {\n            this.emitLn('NEG D0');\n        },\n\n        // Complement the primary register\n        notIt: function () {\n            this.emitLn('NOT D0');\n        },\n\n        // Load a constant value to primary register\n        loadConst: function (number) {\n            this.emitLn('MOVE #' + number + ', D0');\n        },\n\n        // Load a variable to primary register\n        loadVar: function (name) {\n            if (!this.inTable(name)) {\n                this.undef(name);\n            }\n            this.emitLn('MOVE ' + name + '(PC), D0');\n        },\n\n        // Push primary onto stack\n        push: function () {\n            this.emitLn('MOVE D0, -(SP)');\n        },\n\n        // Add top of stack to primary\n        popAdd: function () {\n            this.emitLn('ADD (SP)+, D0');\n        },\n\n        // Subtract primary from top of stack\n        popSub: function () {\n            this.emitLn('SUB (SP)+, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Multiply top of stack to primary\n        popMul: function () {\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Divide top of stack by primary\n        popDiv: function () {\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // AND top of stack with primary\n        popAnd: function () {\n            this.emitLn('AND (SP)+, D0');\n        },\n\n        // OR top of stack with primary\n        popOr: function () {\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // XOR top of stack with primary\n        popXor: function () {\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Compare top of stack with primary\n        popCompare: function () {\n            this.emitLn('CMP (SP)+, D0');\n        },\n\n        // Set D0 If compare was =\n        setEqual: function () {\n            this.emitLn('SEQ D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was !=\n        setNEqual: function () {\n            this.emitLn('SNE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was >\n        setGreater: function () {\n            this.emitLn('SLT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 If compare was <\n        setLess: function () {\n            this.emitLn('SGT D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was <=\n        setLessOrEqual: function () {\n            this.emitLn('SGE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Set D0 if compare was >=\n        setGreaterOrEqual: function () {\n            this.emitLn('SLE D0');\n            this.emitLn('EXT D0');\n        },\n\n        // Store primary to variable\n        store: function (name) {\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Branch uncoditional\n        branch: function (label) {\n            this.emitLn('BRA ' + label);\n        },\n\n        // Branch false\n        branchFalse: function (label) {\n            this.emitLn('TST D0');\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Read variable to primary register\n        readIt: function () {\n            this.emitLn('BSR READ');\n            this.store(this.value);\n        },\n\n        // Write variable from primary register\n        writeIt: function () {\n            this.emitLn('BSR WRITE');\n        },\n\n        /**\n         * TODO: provide BNF\n         */\n\n        // Write header info\n        header: function () {\n            io.writeLn('WARMST', this.TAB, 'EQU $A01E');\n        },\n\n        // Write the prolog\n        prolog: function () {\n            this.postLabel('MAIN');\n        },\n\n        // Write the epilog\n        epilog: function () {\n            this.emitLn('DC WARMST');\n            this.emitLn('END MAIN');\n        },\n\n        // Allocate storage for a static variable\n        allocate: function (name, value) {\n            io.writeLn(name, ':', this.TAB, 'DC ', value);\n        },\n\n        /**\n         * ```\n         * <expression> ::= <term> [<addop> <term>]*\n         * <term> ::= <factor> [<mulop> <factor>]*\n         * <factor> ::= <number> | (<b-expression>) | <variable>\n         * ```\n         */\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.token === '(') {\n                this.next();\n                this.boolExpression();\n                this.matchString(')');\n            } else {\n                if (this.token === 'x') {\n                    this.loadVar(this.value);\n                } else if (this.token === '#') {\n                    this.loadConst(this.value);\n                } else {\n                    this.expected('Math Factor');\n                }\n                this.next();\n            }\n        },\n\n        // Recognize and translate a multiply\n        multiply: function () {\n            this.next();\n            this.factor();\n            this.popMul();\n        },\n\n        // Recognize and translate a divide\n        divide: function () {\n            this.next();\n            this.factor();\n            this.popDiv();\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            this.factor();\n            while (this.isMulop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Recognize and translate an add\n        add: function () {\n            this.next();\n            this.term();\n            this.popAdd();\n        },\n\n        // Recognize and translate a subtract\n        subtract: function () {\n            this.next();\n            this.term();\n            this.popSub();\n        },\n\n        // parse and translate an expression\n        expression: function () {\n            if (this.isAddop(this.token)) {\n                this.clear();\n            } else {\n                this.term();\n            }\n            while (this.isAddop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Get another expression and compare\n        compareExpression: function () {\n            this.expression();\n            this.popCompare();\n        },\n\n        // Get the next expression and compare\n        nextExpression: function () {\n            this.next();\n            this.compareExpression();\n        },\n\n        // Recognize and translate a relational \"equal\"\n        equal: function () {\n            this.nextExpression();\n            this.setEqual();\n        },\n\n        // Recognize and translate a relational \"less than or equal\"\n        lessOrEqual: function () {\n            this.nextExpression();\n            this.setLessOrEqual();\n        },\n\n        // Recognize and translate a relational \"not equals\"\n        notEqual: function () {\n            this.nextExpression();\n            this.setNEqual();\n        },\n\n        // Recognize and translate a relational \"less than\"\n        less: function () {\n            this.next();\n            switch (this.token) {\n            case '=':   // <=\n                this.lessOrEqual();\n                break;\n            case '>':   // <>\n                this.notEqual();\n                break;\n            default:    // <\n                this.compareExpression();\n                this.setLess();\n            }\n        },\n\n        // Recognize and translate a relational \"greater than\"\n        greater: function () {\n            this.next();\n            if (this.token === '=') {   // >=\n                this.nextExpression();\n                this.setGreaterOrEqual();\n            } else {                    // >\n                this.compareExpression();\n                this.setGreater();\n            }\n        },\n\n        // Parse and translate a relation\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '=':\n                    this.equals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a boolean factor with leading NOT\n        notFactor: function () {\n            if (this.token === '!') {\n                this.next();\n                this.relation();\n                this.notIt();\n            } else {\n                this.relation();\n            }\n        },\n\n        // Parse and translate a boolean term\n        boolTerm: function () {\n            this.notFactor();\n            while (this.token === '&') {\n                this.push();\n                this.next();\n                this.notFactor();\n                this.popAnd();\n            }\n        },\n\n        // Recognize and translate a boolean OR\n        boolOr: function () {\n            this.next();\n            this.boolTerm();\n            this.popOr();\n        },\n\n        // Recognize and translate an exclusive or (XOR)\n        boolXor: function () {\n            this.next();\n            this.boolTerm();\n            this.popXor();\n        },\n\n        // Parse and translate a boolean expression\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.token)) {\n                this.push();\n                switch (this.token) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name;\n            this.checkTable(this.value);\n            name = this.value;\n            this.next();\n            this.matchString('=');\n            this.boolExpression();\n            this.store(name);\n        },\n\n        /**\n         * ```\n         * <program> ::= <block> END\n         * <block> ::= [<statement>]*\n         * <statement> ::= <if> | <assignment>\n         * <if stmt> ::= IF <condition> <block> [ELSE <block>] ENDIF\n         * <assignment> ::= <identifier> = <expression>\n         * ```\n         */\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label_1, label_2;\n            this.next();\n            this.boolExpression();\n            label_1 = this.newLabel();\n            label_2 = label_1;\n            this.branchFalse(label_1);\n            this.block();\n\n            if (this.token === 'l') {\n                this.next();\n                label_2 = this.newLabel();\n                this.branch(label_2);\n                this.postLabel(label_1);\n                this.block();\n            }\n\n            this.postLabel(label_2);\n            this.matchString('ENDIF');\n        },\n\n        // Parse and translate a WHILE statement\n        doWhile: function () {\n            var label_1, label_2;\n            this.next();\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();\n            this.postLabel(label_1);\n            this.boolExpression();\n            this.branchFalse(label_2);\n            this.block();\n            this.matchString('ENDWHILE');\n            this.branch(label_1);\n            this.postLabel(label_2);\n        },\n\n        // Read variable to primary register\n        readVar: function () {\n            this.checkIdent();\n            this.checkTable(this.value);\n            this.readIt(this.value);\n            this.next();\n        },\n\n        // Process a read statement\n        doRead: function () {\n            this.next();\n            this.matchString('(');\n            this.readVar();\n            while (this.token === ',') {\n                this.next();\n                this.readVar();\n            }\n            this.matchString(')');\n        },\n\n        // Process a write statement\n        doWrite: function () {\n            this.next();\n            this.matchString('(');\n            this.expression();\n            this.writeIt();\n            while (this.token === ',') {\n                this.next();\n                this.expression();\n                this.writeIt();\n            }\n            this.matchString(')');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':\n                    this.doRead();\n                    break;\n                case 'W':\n                    this.doWrite();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();\n            }\n        },\n\n        // Allocate storage for a variable\n        alloc: function () {\n            this.next();\n            if (this.token !== 'x') {\n                this.expected('Variable Name');\n            }\n            this.checkDup(this.value);\n            this.addEntry(this.value, 'v');\n            this.allocate(this.value, '0');\n            this.next();\n        },\n\n        // Parse and translate global declarations\n        topDecls: function () {\n            this.scan();\n            while (this.token === 'v') {\n                this.alloc();\n                while (this.token === ',') {\n                    this.alloc();\n                }\n                this.scan();    // <--\n            }\n        },\n\n        // Initialize\n        init: function () {\n            this.symbolTable = {};\n            this.lCount = 0;\n            this.getChar();\n            this.next();\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.matchString('PROGRAM');\n            this.header();\n            this.topDecls();\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        }\n    });\n\n    // return main functions for executions\n    // and the program itself for chapter 12\n    return {\n        run: program,\n        object: program\n    };\n\n});\n\r\n/* global define */\n\n/**\n * Chapter 12 Miscellany\n * ======================\n */\n\ndefine(['./object', './11.6-tiny-1.1'], function (object, tiny_11) {\n    'use strict';\n\n    var dealingWithSemicolons;          // 12.4\n\n    /**\n     * 12.1 Introduction\n     * ------------------\n     */\n\n    /**\n     * 12.2 Semicolons\n     * ----------------\n     */\n\n    /**\n     * 12.3 Syntactic sugar\n     * ---------------------\n     */\n\n    /**\n     * 12.4 Dealing with semicolons\n     * -----------------------------\n     * In **Pascal**, semicolon is a statement *SEPARATOR*\n     * ```\n     * <block> ::= <statement> (';' <statement>)*\n     * <statement> ::= <assignment> | <if> | <while> ... | null\n     * ```\n     * In **C** and **Ada**, semicolon is a statement *TERMINATOR*\n     * ```\n     * <block> ::= (<statement> ';')*\n     * ```\n     */\n    dealingWithSemicolons = tiny_11.object.extend({\n\n        // Match a semicolon\n        semi: function () {\n            this.matchString(';');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.token !== 'e' && this.token !== 'l') {\n                switch (this.token) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'R':\n                    this.doRead();\n                    break;\n                case 'W':\n                    this.doWrite();\n                    break;\n                case 'x':   // <--\n                    this.assignment();\n                    break;\n                }\n                this.semi();    // <--\n                this.scan();\n            }\n        },\n\n        // Parse and translate global declarations\n        topDecls: function () {\n            this.scan();\n            while (this.token === 'v') {\n                this.alloc();\n                while (this.token === ',') {\n                    this.alloc();\n                }\n                this.semi();    // <--\n                this.scan();    // <--\n            }\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.matchString('PROGRAM');\n            this.semi();        // <--\n            this.header();\n            this.topDecls();\n            this.matchString('BEGIN');\n            this.prolog();\n            this.block();\n            this.matchString('END');\n            this.epilog();\n        }\n    });\n\n\n    return {\n        dealingWithSemicolons: dealingWithSemicolons\n    };\n\n});\n\r\n/* global define */\n\n/**\n * Chapter 2 Expression Parsing\n * ============================\n */\n\ndefine(['./1.2-cradle'], function (cradle) {\n    'use strict';\n\n    var singleDigits,               // 2.2\n        binaryExpressions,          // 2.3\n        generalExpressions,         // 2.4\n        usingTheStack,              // 2.5\n        multiplicationAndDivision,  // 2.6\n        parentheses,                // 2.7\n        unaryMinus;                 // 2.8\n\n    /**\n     * 2.1 Getting started\n     * -------------------\n     * The purpose of this chapter is for us to learn how to\n     * *parse* and *translate* **mathematical expressions**.\n     * An expression is the right-hand side of an equation, as in\n     * ```\n     * x = 2 * y + 3 / (4 * z)\n     * ```\n     */\n\n    /**\n     * 2.2 Single digits\n     * -----------------\n     * Let's start with the absolutely most simple case we can think of,\n     * an expression consisting of a single digit.\n     *\n     * **In Backus-Naur Form (BNF)**\n     * ```\n     * <expression> ::= <number>\n     * <number> ::= <digit>\n     * ```\n     */\n    singleDigits = cradle.extend({\n\n        // Parse and translate a math expression\n        expression: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.expression();\n        }\n    });\n\n    /**\n     * 2.3 Binary expressions\n     * ----------------------\n     * Suppose we want to handle expressions of the form:\n     * `1 + 2` or `4 - 3`\n     *\n     * or in general,\n     * **in Backus-Naur Form (BNF)**\n     * ```\n     * <expression> ::= <term> +/- <term>\n     * <term> ::= <number>\n     * ```\n     */\n    binaryExpressions = singleDigits.extend({\n\n        // Parse and translate a math term\n        term: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Recognize and translate an add\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD D1, D0');\n        },\n\n        // Recognize and translate a subtract\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB D1, D0');\n            this.emitLn('NEG D0');\n        },\n\n        // Parse and translate an expression\n        expression: function () {\n            this.term();\n            this.emitLn('MOVE D0, D1');\n            switch (this.look) {\n            case '+':\n                this.add();\n                break;\n            case '-':\n                this.subtract();\n                break;\n            default:\n                this.expected('Addop');\n            }\n        }\n    });\n\n    /**\n     * 2.4 General expressions\n     * -----------------------\n     * In the REAL world, an *expression* can consist of one\n     * or more *terms*, separated by *addops* (`+` or `-`).\n     *\n     * **In BNF**\n     * ```\n     * <expression> ::= <term> [<addop> <term>]*\n     * ```\n     */\n    generalExpressions = binaryExpressions.extend({\n\n        // Parse and translate an expression\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, D1');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.5 Using the stack\n     * -------------------\n     * To deal with complexity, such as `1 + (2 - (3 + (4 - 5)))`,\n     * we're going to run out of registers fast!\n     * The solution is to use the stack instead.\n     *\n     * For M68000 assembler langugage, a push is written as `-(SP)`,\n     * and pop `(SP)+`\n     */\n    usingTheStack = binaryExpressions.extend({\n\n        // Recognize and translate an add\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD (SP)+, D0');    // <-- pop from stack\n        },\n\n        // Recognize and translate a subtract\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB (SP)+, D0');    // <-- pop from stack\n            this.emitLn('NEG D0');\n        },\n\n        // Parse and translate an expression\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');   // <-- push to stack\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.6 Multiplication and division\n     * -------------------------------\n     * There is an implied operator *PRECEDENCE*, or *hierarchy*,\n     * associated with expressions, so that in an expression like\n     * ```\n     * 2 + 3 * 4\n     * ```\n     * we know that we’re supposed to multiply FIRST, then add.\n     * (See why we needed the stack?)\n     *\n     * **In BNF**\n     * ```\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * <factor> ::= <number>\n     * ```\n     */\n    multiplicationAndDivision = usingTheStack.extend({\n\n        // Parse and translate a math factor\n        // same as term() in 2.3 binary expressions\n        factor: function () {\n            this.emitLn('MOVE #' + this.getNum() + ', D0');\n        },\n\n        // Recognize and translate a multiply\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Recognize and translate a divide\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');  // exchange, swap(D0, D1)\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            this.factor();\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.7 Parentheses\n     * ---------------\n     * Parentheses are a mechanism to force a desired operator precedence.\n     * ```\n     * 2 * (3 + 4)\n     * ```\n     * They give us a mechanism for defining expressions of\n     * any degree of complexity.\n     * ```\n     * (1 + 2) / ((3 + 4) + (5 - 6))\n     * ```\n     * **In BNF**\n     * ```\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     * This is where the recursion comes in.\n     */\n    parentheses = multiplicationAndDivision.extend({\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        }\n    });\n\n    /**\n     * 2.8 Unary minus\n     * ---------------\n     * Try e.g. `-1`, `+3` or `-(3-2)`, etc. It doesn't work, does it?\n     *\n     * **Solution**\n     *\n     * The  easiest (although not necessarily the best) way is\n     * to stick an imaginary leading zero in front of expressions\n     * of this type, so that `-3` becomes `0 - 3`.\n     *\n     * **In BNF**\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * ```\n     */\n    unaryMinus = parentheses.extend({\n\n        // Recognize an addop\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Parse and translate an expression\n        expression: function () {\n            if (this.isAddop(this.look)) {\n                this.emitLn('CLR D0');\n            } else {\n                this.term();\n            }\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');   // <-- push to stack\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * 2.9 A word about optimization\n     * -----------------------------\n     */\n\n\n    return {\n\n        // <expression> ::= <number>\n        singleDigits: singleDigits,\n\n        // <term> ::= <number>\n        // <expression> ::= <term> <addop> <term>\n        binaryExpressions: binaryExpressions,\n\n        // <expression> ::= <term> [<addop> <term>]*\n        generalExpressions: generalExpressions,\n\n        // Use the stack instead of registers to serve for complexity\n        usingTheStack: usingTheStack,\n\n        // <factor> ::= <number>\n        // <term> ::= <factor> [<mulop> <factor>]*\n        multiplicationAndDivision: multiplicationAndDivision,\n\n        // <factor> ::= <number> | (<expression>)\n        parentheses: parentheses,\n\n        // <expression> ::= <unary op> <term> [<addop> <term>]*\n        unaryMinus: unaryMinus\n    };\n\n    /**\n     * Final results of this chapter in BNF\n     * -------------------------------------\n     * ```\n     * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * <factor> ::= <number> | (<expression>)\n     * ```\n     */\n});\n\r\n/* global define */\n\n/**\n * Chapter 3 More Expressions\n * ==========================\n */\n\ndefine(['./2-expression-parsing'], function (expressionParsing) {\n    'use strict';\n\n    var variables,              // 3.2\n        functions,              // 3.3\n        moreOnErrorHandling,    // 3.4\n        assignmentStatements,   // 3.5\n        multiCharacterTokens,   // 3.6\n        whiteSpace;             // 3.7\n\n    /**\n     * 3.1 Introduction\n     * ----------------\n     * In this chapter we will extend what we've done to deal with\n     *\n     * - variables\n     * - function calls\n     * - assignment statements\n     * - multi-character tokens (variables/numbers)\n     * - white space\n     */\n\n    /**\n     * 3.2 Variables\n     * --------------\n     * Most expressions that we see in practice involve variables, such as\n     * ```\n     * b * b + 4 * a * c\n     * ```\n     * It probably won’t come as too much of a surprise that a variable is\n     * just another kind of factor.\n     *\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>) | <variable>\n     * ```\n     * The format for a load in 68000 is\n     * ```\n     * MOVE X(PC), D0\n     * ```\n     * where `X` is the variable name.\n     */\n    variables = expressionParsing.unaryMinus.extend({\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.emitLn('MOVE ' + this.getName() + '(PC), D0');\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        }\n    });\n\n    /**\n     * 3.3 Functions\n     * -------------\n     * We don’t yet have a mechanism for declaring types,\n     * so let’s use the **C rule** for now. We also don’t have a mechanism\n     * to deal with parameters, we can only handle empty lists,\n     * so for now our function calls will have the form `x()`.\n     *\n     * **In BNF**\n     * ```\n     * <identifier> ::= <variable> | <function>\n     * <factor> ::= <number> | (<expression>) | <identifier>\n     * ```\n     */\n    functions = variables.extend({\n\n        // Parse and translate an identifier\n        identifier: function () {\n            var name = this.getName();\n            if (this.look === '(') {\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + name);\n            } else {\n                this.emitLn('MOVE ' + name + '(PC), D0');\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ', D0');\n            }\n        }\n    });\n\n    /**\n     * 3.4 More on error handling\n     * --------------------------\n     * Assert that the expression should end with an end-of-line.\n     */\n    moreOnErrorHandling = functions.extend({\n\n        // Main function\n        main: function () {\n            this.init();\n            this.expression();\n            if (this.look !== this.LF) {   // <--\n                this.expected('Newline');   // <--\n            }\n        }\n    });\n\n    /**\n     * 3.5 Assignment statements\n     * --------------------------\n     * Expressions *USUALLY* (but not always) appear in assignment statements.\n     *\n     * **In BNF**\n     * ```\n     * <assignment> ::= <ident> = <expression>\n     * ```\n     */\n    assignmentStatements = moreOnErrorHandling.extend({\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.assignment();  // <--\n            if (this.look !== this.LF) {\n                this.expected('Newline');\n            }\n        }\n    });\n\n    /**\n     * 3.6 Multi-character tokens\n     * --------------------------\n     * We can handle the multi-character tokens that we need by\n     * very slight and very local modifications to `getName`  and `getNum`.\n     */\n    multiCharacterTokens = assignmentStatements.extend({\n\n        // Recognize and alphanumeric\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Get an identifier\n        getName: function () {\n            var token = ''; // <--\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            while (this.isAlNum(this.look)) { // <--\n                token += this.look.toUpperCase(); // <--\n                this.getChar();\n            }\n            return token;   // <--\n        },\n\n        // Get a number\n        getNum: function () {\n            var value = ''; // <--\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) { // <--\n                value += this.look; // <--\n                this.getChar();\n            }\n            return value;   // <--\n        }\n    });\n\n    /**\n     * 3.7 White space\n     * ----------------\n     * Because we’ve been careful to use `getName`, `getNum`, and `match`\n     * for most of our input processing, it is only those three routines\n     * (plus `Init`) that we need to modify.\n     */\n    whiteSpace = multiCharacterTokens.extend({\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character\n        match: function (x) {\n            if (this.look === x) {\n                this.getChar();\n                this.skipWhite();   // <--\n            } else {\n                this.expected('\"' + x + '\"');\n            }\n        },\n\n        // Get an identifier\n        getName: function () {\n            var token = '';\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            while (this.isAlNum(this.look)) {\n                token += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return token;\n        },\n\n        // Get a number\n        getNum: function () {\n            var value = '';\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {\n                value += this.look;\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return value;\n        },\n\n        // Initialize\n        init: function () {\n            this.getChar();\n            this.skipWhite();   // <--\n        }\n    });\n\n\n    return {\n\n        // <factor> ::= <number> | (<expression>) | <variable>\n        variables: variables,\n\n        // <identifier> ::= <variable> | <function>\n        // <factor> ::= <number> | (<expression>) | <identifier>\n        functions: functions,\n\n        // Assert that the expression should end with an end-of-line\n        moreOnErrorHandling: moreOnErrorHandling,\n\n        // <identifier> = <expression>\n        assignmentStatements: assignmentStatements,\n\n        multiCharacterTokens: multiCharacterTokens,\n\n        whiteSpace: whiteSpace\n    };\n});\n\r\n/* global define */\n\n/**\n * Chapter 4 Interpreters\n * ======================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    var singleDigits,                   // 4.2.1\n        binaryExpressions,              // 4.2.2\n        generalExpressions,             // 4.2.3\n        multiDigitsNumber,              // 4.2.4\n        factor,                         // 4.2.5\n        variables,                      // 4.3.1\n        assignmentStatements,           // 4.3.2\n        multipleStatements,             // 4.3.3\n        ioRoutines;                     // 4.3.4\n\n    /**\n     * 4.1 Introduction\n     * ----------------\n     */\n\n    /**\n     * 4.2 The interpreters\n     * --------------------\n     */\n\n    /**\n     * ### 4.2.1 Single digits ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <number>\n     * <number> ::= <digit>\n     * ```\n     */\n    singleDigits = cradle.extend({\n\n        // Get a number\n        getNum: function () {\n            var num;\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            num = +this.look;   // convert string to number\n            this.getChar();\n            return num;\n        },\n\n        // Parse and translate an expression\n        expression: function () {\n            return this.getNum();\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            io.writeLn(this.expression());\n        }\n    });\n\n    /**\n     * ### 4.2.2 Binary expressions ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <number> [<addop> <number>]*\n     * ```\n     */\n    binaryExpressions = singleDigits.extend({\n\n        // Recognize an addop\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Parse and translate an expression\n        expression: function () {\n            var value;\n            if (this.isAddop(this.look)) {\n                value = 0;\n            } else {\n                value = this.getNum();\n            }\n            while (this.isAddop(this.look)) {\n                switch (this.look) {\n                case '+':\n                    this.match('+');\n                    value += this.getNum();\n                    break;\n                case '-':\n                    this.match('-');\n                    value -= this.getNum();\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.3 General expressions ###\n     * **In BNF notation**\n     * ```\n     * <expression> ::= <term> [<addop> <term>]*\n     * <term> ::= <number> [<mulop> <number>]*\n     * ```\n     */\n    generalExpressions = binaryExpressions.extend({\n\n        // Parse and translate a math term\n        term: function () {\n            var value = this.getNum();\n            while (this.look === '*' || this.look === '/') {\n                switch (this.look) {\n                case '*':\n                    this.match('*');\n                    value *= this.getNum();\n                    break;\n                case '/':\n                    this.match('/');\n                    value = Math.floor(value / this.getNum());\n                    break;\n                }\n            }\n            return value;\n        },\n\n        // Parse and translate an expression\n        expression: function () {\n            var value;\n            if (this.isAddop(this.look)) {\n                value = 0;\n            } else {\n                value = this.term();    // <--\n            }\n            while (this.isAddop(this.look)) {\n                switch (this.look) {\n                case '+':\n                    this.match('+');\n                    value += this.term();   // <--\n                    break;\n                case '-':\n                    this.match('-');    // <--\n                    value -= this.term();\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.4 Multi-digits number ###\n     * Extend `getNum` to support multi-digit number.\n     */\n    multiDigitsNumber = generalExpressions.extend({\n\n        // Get a Number\n        getNum: function () {\n            var value = 0;\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {    // <--\n                value = 10 * value + (+this.look);  // <--\n                this.getChar();\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.2.5 Factor ###\n     * The next step is to install function `factor`.\n     *\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>)\n     * <term> ::= <factor> [<mulop> <factor>]*\n     * ```\n     */\n    factor = multiDigitsNumber.extend({\n\n        // Parse and translate a math factor\n        factor: function () {\n            var value;\n            if (this.look === '(') {\n                this.match('(');\n                value = this.expression();  // <--\n                this.match(')');\n            } else {\n                value = this.getNum();  // <--\n            }\n            return value;\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            var value = this.factor();  // <--\n            while (this.look === '*' || this.look === '/') {\n                switch (this.look) {\n                case '*':\n                    this.match('*');\n                    value *= this.factor(); // <--\n                    break;\n                case '/':\n                    this.match('/');\n                    value = Math.floor(value / this.factor());  // <--\n                    break;\n                }\n            }\n            return value;\n        }\n    });\n\n    /**\n     * 4.3 A little philosophy\n     * -----------------------\n     */\n\n    /**\n     * ### 4.3.1 Variables ###\n     * **In BNF notation**\n     * ```\n     * <factor> ::= <number> | (<expression>) | <variable>\n     * ```\n     */\n    variables = factor.extend({\n\n        table: {},\n\n        // Initialize the variable Area\n        initTable: function () {\n            var charCodeOfA = 'A'.charCodeAt(0),\n                i,\n                name;\n\n            for (i = 0; i < 26; i += 1) {\n                name = String.fromCharCode(charCodeOfA + i);\n                this.table[name] = 0;\n            }\n        },\n\n        // Initialize\n        init: function () {\n            this.initTable();   // <--\n            this.getChar();\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            var value;\n            if (this.look === '(') {\n                this.match('(');\n                value = this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {    // <--\n                value = this.table[this.getName()]; // <--\n            } else {\n                value = this.getNum();\n            }\n            return value;\n        }\n    });\n\n    /**\n     * ### 4.3.2 Assignment statements ###\n     * **In BNF notation**\n     * ```\n     * <assignment> ::= <identifier> = <expression>\n     * ```\n     */\n    assignmentStatements = variables.extend({\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.table[name] = this.expression();\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.assignment();  // <--\n            io.writeLn(this.table.A);\n        }\n    });\n\n    /**\n     * ### 4.3.3 Multiple statements ###\n     */\n    multipleStatements = assignmentStatements.extend({\n\n        // Recognize and skip over a newline\n        newLine: function () {\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            do {\n                this.assignment();\n                this.newLine();\n            } while (this.look !== '.');\n        }\n    });\n\n    /**\n     * ### 4.3.4 I/O routines ###\n     */\n    ioRoutines = multipleStatements.extend({\n\n        // Input routine\n        input: function () {\n            this.match('?');\n\n            // not implemented\n        },\n\n        // Output routine\n        output: function () {\n            this.match('!');\n            io.writeLn(this.table[this.getName()]);\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            do {\n                switch (this.look) {\n                case '?':\n                    this.input();\n                    break;\n                case '!':\n                    this.output();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.newLine();\n            } while (this.look !== '.');\n        }\n    });\n\n\n    return {\n\n        // <expression> ::= <number>\n        singleDigits: singleDigits,\n\n        // <expression> ::= <number> [<addop> <number>]*\n        binaryExpressions: binaryExpressions,\n\n        // <term> ::= <number> [<mulop> <number>]*\n        // <expression> ::= <term> [<addop> <term>]*\n        generalExpressions: generalExpressions,\n\n        // Multi-digits number\n        multiDigitsNumber: multiDigitsNumber,\n\n        // <factor> ::= <number> | (<expression>)\n        // <term> ::= <factor> [<mulop> <factor>]*\n        factor: factor,\n\n        // <factor> ::= <number> | (<expression>) | <variable>\n        variables: variables,\n\n        assignmentStatements: assignmentStatements,\n\n        multipleStatements: multipleStatements,\n\n        ioRoutines: ioRoutines\n    };\n});\n\r\n/* global define */\n\n/**\n * Chapter 5 Control Constructs\n * ============================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    var oneStatement,               // 5.2.1\n        moreThanOneStatement,       // 5.2.2\n        someGroundwork,             // 5.3\n        theIfStatement,             // 5.4\n        addTheElseClause,           // 5.4.2\n        theWhileStatement,          // 5.5\n        theLoopStatement,           // 5.6\n        theRepeatUntilStatement,    // 5.7\n        theForLoop,                 // 5.8\n        theDoStatement,             // 5.9\n        theBreakStatement;          // 5.10\n\n    /**\n     * 5.1 Introduction\n     * ----------------\n     */\n\n    /**\n     * 5.2 The plan\n     * -------------\n     */\n\n    /**\n     * ### 5.2.1 One statement ###\n     * **In BNF notation**\n     * ```\n     * <program> ::= <statement>\n     * <statement> ::= <other>\n     * ```\n     * code example: `a`\n     */\n    oneStatement = cradle.extend({\n\n        // Recognize and translate an \"Other\"\n        // an anonymous statement serve as a place-holder\n        other: function () {\n            this.emitLn('<block ' + this.getName() + '>');\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.other();\n        }\n    });\n\n    /**\n     * ### 5.2.2 More than one statement ###\n     * **In BNF notation**\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * ```\n     * code example: `abc`\n     */\n    moreThanOneStatement = oneStatement.extend({\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e') {\n                this.other();\n            }\n        },\n\n        // Parse and translate a program\n        doProgram: function () {\n            this.block();\n            if (this.look !== 'e') {\n                this.expected('End');\n            }\n            this.emitLn('END');\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.doProgram();\n        }\n    });\n\n    /**\n     * 5.3 Some groundwork\n     * --------------------\n     * Prepare two routines\n     *\n     * - `newLable` to generate label **Lnn**,\n     *    where nn is a label number starting from zero.\n     * - `postLabel` to output the labels at the proper place.\n     */\n    someGroundwork = moreThanOneStatement.extend({\n\n        lCount: 0,  // label number\n\n        // Generate a unique lable\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        // Initialize\n        init: function () {\n            this.lCount = 0;\n            this.getChar();\n        }\n    });\n\n    /**\n     * 5.4 The IF statement\n     * ---------------------\n     * **In BNF**\n     * ```\n     * <if> ::= IF <condition> <block> ENDIF\n     * ```\n     * Output should be:\n     * ```\n     *      <condition>\n     *      BEQ L1      # branch if false\n     *      <block>\n     * L1:\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * IF\n     * <condition>    { condition();\n     *                  L = newLabel();\n     *                  emit(Branch False to L); }\n     * <block>\n     * ENDIF          { postLabel(L) }\n     * -------------------------------------------\n     * ```\n     * On the **68000** the condition flags are set\n     * whenever any data is moved or calculated.\n     * If the data is a 0000 (corresponding to a false condition),\n     * the zero flag will be set.\n     * The code for **branch on zero** is `BEQ`.\n     * So for our purposes here,\n     * ```\n     * BEQ <=> Branch if false\n     * BNE <=> Branch if true\n     * ```\n     * It’s the nature of the beast that most of the branches we see\n     * will be `BEQ`’s... we’ll be branching *AROUND* the code\n     * that’s supposed to be executed when the condition is true.\n     *\n     * For the **implementation**, as usual,\n     * we will be using our single-character approach,\n     * with the character `i` for `IF`, and `e` for `ENDIF`\n     * (as well as `END` ... that dual nature causes no confusion).\n     *\n     * code example: `aibcedhe`,\n     *\n     * which stands for\n     * ```\n     * <block A>                a\n     * IF <condition>           i\n     *     <block B>            b\n     *     <block C>            c\n     * ENDIF                    e\n     * <block D>                d\n     * <block H>                h\n     * END                      e\n     * ```\n     */\n    theIfStatement = someGroundwork.extend({\n\n        // Parse and translate a boolean condition\n        // This version is a dummy\n        condition: function () {\n            this.emitLn('<condition>');\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label;\n            this.match('i');\n            label = this.newLabel();\n            this.condition();\n            this.emitLn('BEQ ' + label);\n            this.block();\n            this.match('e');\n            this.postLabel(label);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 5.4.2 Add the ELSE clause ###\n     * **BNF of the `IF` statement**\n     * ```\n     * <if> ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * ```\n     * **Output** should be\n     * ```\n     *      <condition>\n     *      BEQ L1      # branch if false\n     *      <block>\n     *      BRA L2      # unconditional branch\n     * L1:\n     *      <block>\n     * L2:\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     *   SYNTAX           ACTIONS\n     *   -------------------------------------------\n     *   IF\n     *   <condition>    { condition();\n     *                    L1 = newLabel();\n     *                    L2 = newLabel();\n     *                    emit(BEQ L1); }\n     *   <block>\n     *   ELSE           { emit(BRA L2);\n     *                    postLabel(L1); }\n     *   <block>\n     *   ENDIF          { postLabel(L2); }\n     *   -------------------------------------------\n     * ```\n     * Try something like `aiblcede`\n     *\n     * which stands for\n     * ```\n     * <block A>            a\n     * IF <condition>       i\n     *     <block B>        b\n     * ELSE                 l\n     *     <block C>        c\n     * ENDIF                e\n     * <block D>            d\n     * END                  e\n     * ```\n     */\n    addTheElseClause = theIfStatement.extend({\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label_1, label_2;\n            this.match('i');\n            this.condition();\n            label_1 = this.newLabel();\n            label_2 = label_1;\n            this.emitLn('BEQ ' + label_1);\n            this.block();\n\n            if (this.look === 'l') {\n                this.match('l');\n                label_2 = this.newLabel();\n                this.emitLn('BRA ' + label_2);\n                this.postLabel(label_1);\n                this.block();\n            }\n\n            this.match('e');\n            this.postLabel(label_2);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {  // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.5 The WHILE statement\n     * ------------------------\n     * **BNF of the `WHILE` statement**\n     * ```\n     * <while> ::= WHILE <condition> <block> ENDWHILE\n     * ```\n     * Output should be:\n     * ```\n     * L1:  <condition>\n     *      BEQ L2\n     *      <block>\n     *      BRA L1\n     * L2:\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * WHILE          { L1 = newLabel;\n     *                  postLabel(L1) }\n     * <condition>    { emit(BEQ L2) }\n     * <block>\n     * ENDWHILE       { emit(BRA L1);\n     *                  PostLabel(L2) }\n     * ```\n     * OK, try the **new program**, such as `awbece` which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     * ENDWHILE                 e\n     * <block C>                c\n     * END                      e\n     * ```\n     * Note that this time, the <condition> code is *INSIDE* the upper label,\n     * which is just where we wanted it.\n     *\n     * Try some **nested loops**, for example `awbwcedefe` which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     *     WHILE <condition>    w\n     *         <block C>        c\n     *     ENDWHILE             e\n     *     <block D>            d\n     * ENDWHILE                 e\n     * <block F>                f\n     * END                      e\n     * ```\n     * Try some **loops within `IF`’s**, for example`aibwcedlfege`\n     * which stands for\n     * ```\n     * <block A>                a\n     * IF <condition>           i\n     *     <block B>            b\n     *     WHILE <condition>    w\n     *         <block C>        c\n     *     ENDWHILE             e\n     *     <block D>            d\n     * ELSE                     l\n     *     <block F>            f\n     * ENDIF                    e\n     * <block G>                g\n     * END                      e\n     * ```\n     * and some **`IF`’s within loops**, for example `awbicedefe`\n     * which stands for\n     * ```\n     * <block A>                a\n     * WHILE <condition>        w\n     *     <block B>            b\n     *     IF <condition>       i\n     *         <block C>        c\n     *     ENDIF                e\n     *     <block D>            d\n     * ENDWHILE                 e\n     * <block F>                f\n     * END                      e\n     * ```\n     * If you get a bit confused as to what you should type,\n     * don’t be discouraged: you write bugs in other languages, too, don’t you?\n     */\n    theWhileStatement = addTheElseClause.extend({\n\n        // Parse and translate a WHILE statement\n        doWhile: function () {\n            var label_1, label_2;\n            this.match('w');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();\n            this.postLabel(label_1);\n            this.condition();\n            this.emitLn('BEQ ' + label_2);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label_1);\n            this.postLabel(label_2);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':   // <--\n                    this.doWhile();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.6 The LOOP statement\n     * -----------------------\n     * **BNF** of the `LOOP` statement\n     * ```\n     * <loop> ::= LOOP <block> ENDLOOP\n     * ```\n     * **Output** should be:\n     * ```\n     * L1:\n     *      <block>\n     *      BRA L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * LOOP           { L = newLabel();\n     *                  postLabel(L) }\n     * <block>\n     * ENDLOOP        { emit(BRA L) }\n     * ```\n     * Code example `apbece`\n     *\n     * which stands for\n     * ```\n     * <block A>                a\n     * LOOP                     p\n     *     <block B>            b\n     * ENDLOOP                  e\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    theLoopStatement = theWhileStatement.extend({\n\n        // Parse and translate a LOOP statement\n        doLoop: function () {\n            var label;\n            this.match('p');\n            label = this.newLabel();\n            this.postLabel(label);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':   // <--\n                    this.doLoop();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.7 The Repeat-Until statement\n     * -------------------------------\n     * **BNF of the `REPEAT` statement**\n     * ```\n     * <repeat> ::= REPEAT <block> UNTIL <conditon>\n     * ```\n     * **Output** should be:\n     * ```\n     * L1:\n     *      <block>\n     *      <condition>\n     *      BEQ L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX              ACTIONS\n     * -------------------------------------------\n     * REPEAT         { L = newLabel();\n     *                  postLabel(L) }\n     * <block>\n     * UNTIL\n     * <condition>    { emit(BEQ L) }\n     * ```\n     * code example `arbuce`\n     * which stands for\n     * ```\n     * <block A>                a\n     * REPEAT                   r\n     *     <block B>            b\n     * UNTIL                    u\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    theRepeatUntilStatement = theLoopStatement.extend({\n\n        // Parse and translate a REPEAT statement\n        doRepeat: function () {\n            var label;\n            this.match('r');\n            label = this.newLabel();\n            this.postLabel(label);\n            this.block();\n            this.match('u');\n            this.condition();\n            this.emitLn('BEQ ' + label);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {    // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':   // <--\n                    this.doRepeat();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.8 The FOR loop\n     * -----------------\n     * **BNF of the `FOR` statement**\n     * ```\n     * <for> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * ```\n     * The construct is equivalence to:\n     * ```\n     *  <ident> = <expr1>\n     *  temp = <expr2>\n     *  WHILE <ident> <= temp\n     *  <block>\n     *  ENDWHILE\n     * ```\n     * The translated code came out like this:\n     * ```\n     *      <ident>               get name of loop counter\n     *      <expr1>               get initial value\n     *      LEA <ident>(PC),A0    address the loop counter\n     *      SUBQ #1, D0           predecrement it\n     *      MOVE D0, (A0)         save it\n     *      <expr2>               get upper limit\n     *      MOVE D0, -(SP)        save it on stack\n     * L1:\n     *      LEA <ident>(PC), A0   address loop counter\n     *      MOVE (A0), D0         fetch it to D0\n     *      ADDQ #1, D0           bump the counter\n     *      MOVE D0, (A0)         save new value\n     *      CMP (SP), D0          check for range\n     *      BLE L2                skip out if D0 > (SP)\n     *      <block>\n     *      BRA L1                loop for next pass\n     * L2:\n     *      ADDQ #2, SP           clean up the stack\n     * ```\n     * code example `afi=bece`\n     * which stands for\n     * ```\n     * <block A>                    a\n     * FOR I = <expr1> TO <expr2>   fi=\n     *     <block B>                b\n     * ENDFOR                       e\n     * <block C>                    c\n     * END                          e\n     * ```\n     */\n    theForLoop = theRepeatUntilStatement.extend({\n\n        // Parse and translate an expression\n        // This version is a dummy\n        expression: function () {\n            this.emitLn('<expression>');\n        },\n\n        // Parse and translate a FOR statement\n        doFor: function () {\n            var label_1,\n                label_2,\n                name;\n\n            this.match('f');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();\n            name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n            this.expression();\n            this.emitLn('MOVE D0, -(SP)');\n\n            this.postLabel(label_1);\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE (A0), D0');\n            this.emitLn('ADDQ #1, D0');\n            this.emitLn('MOVE D0, (A0)');\n            this.emitLn('CMP (SP), D0');\n            this.emitLn('BGT ' + label_2);\n            this.block();\n            this.match('e');\n            this.emitLn('BRA ' + label_1);\n            this.postLabel(label_2);\n            this.emitLn('ADDQ #2, SP');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':   // <--\n                    this.doFor();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.9 The DO statement\n     * ----------------------\n     * **BNF of the `DO` statement**\n     * ```\n     * <do> ::= DO <expr> <block> ENDDO\n     *\n     * translated code:\n     *\n     *      <expression>\n     *      SUBQ #1, D0\n     * L1:\n     *      MOVE D0, -(SP)      # push D0\n     *      <block>\n     *      MOVE (SP)+, D0      # pop D0\n     *      DBRA D0, L1\n     * ```\n     * **Syntax-directed translation**\n     * ```\n     * SYNTAX           ACTIONS\n     * -------------------------------------------\n     * DO             { emit(SUBQ #1,D0);\n     *                  L = newLabel();\n     *                  postLabel(L)\n     *                  emit(MOVE D0,-(SP)) }\n     * <block>\n     * ENDDO          { emit(MOVE (SP)+,D0);\n     *                  emit(DBRA D0,L) }\n     * ```\n     * code example `adbece`\n     * which stands for\n     * ```\n     * <block A>                a\n     * DO                       d\n     *     <block B>            b\n     * ENDDO                    e\n     * <block C>                c\n     * END                      e\n     * ```\n     */\n    theDoStatement = theForLoop.extend({\n\n        // Parse and translate a DO statement\n        doDo: function () {\n            var label;\n            this.match('d');\n            label = this.newLabel();\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.postLabel(label);\n            this.emitLn('MOVE D0, -(SP)');\n            this.block();\n            this.match('e');\n            this.emitLn('MOVE (SP)+, D0');\n            this.emitLn('DBRA D0, ' + label);\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':   // <--\n                    this.doDo();\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n    /**\n     * 5.10 The BREAK statement\n     * -------------------------\n     * **In BNF**\n     * ```\n     * <break> ::= BREAK\n     * ```\n     * code example `apcibegehe`\n     * which stands for\n     * ```\n     * <block A>                a\n     * LOOP                     p\n     *     <block C>            c\n     *     IF <condition>       i\n     *         BREAK            b\n     *     ENDIF                e\n     *     <block G>            g\n     * ENDLOOP                  e\n     * <block H>                h\n     * END                      e\n     * ```\n     */\n    theBreakStatement = theDoStatement.extend({\n\n        // Recognize and translate an IF constructor\n        doIf: function (label) {    // <--\n            var label_1, label_2;\n            this.match('i');\n            this.condition();\n            label_1 = this.newLabel();\n            label_2 = label_1;\n            this.emitLn('BEQ ' + label_1);\n            this.block(label);  // <--\n\n            if (this.look === 'l') {\n                this.match('l');\n                label_2 = this.newLabel();\n                this.emitLn('BRA ' + label_2);\n                this.postLabel(label_1);\n                this.block();\n            }\n\n            this.match('e');\n            this.postLabel(label_2);\n        },\n\n        // Parse and translate a WHILE statement\n        doWhile: function () {\n            var label_1, label_2;\n            this.match('w');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();\n            this.postLabel(label_1);\n            this.condition();\n            this.emitLn('BEQ ' + label_2);\n            this.block(label_2);    // <--\n            this.match('e');\n            this.emitLn('BRA ' + label_1);\n            this.postLabel(label_2);\n        },\n\n        // Parse and translate a LOOP statement\n        doLoop: function () {\n            var label_1, label_2;   // <--\n            this.match('p');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();  // <--\n            this.postLabel(label_1);\n            this.block(label_2);    // <--\n            this.match('e');\n            this.emitLn('BRA ' + label_1);\n            this.postLabel(label_2);    // <--\n        },\n\n        // Parse and translate a REPEAT statement\n        doRepeat: function () {\n            var label_1, label_2;   // <--\n            this.match('r');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();  // <--\n            this.postLabel(label_1);\n            this.block(label_2);    // <--\n            this.match('u');\n            this.condition();\n            this.emitLn('BEQ ' + label_1);\n            this.postLabel(label_2);    // <--\n        },\n\n        // Parse and translate a FOR statement\n        doFor: function () {\n            var label_1,\n                label_2,\n                name;\n\n            this.match('f');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();\n            name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n            this.expression();\n            this.emitLn('MOVE D0, -(SP)');\n\n            this.postLabel(label_1);\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE (A0), D0');\n            this.emitLn('ADDQ #1, D0');\n            this.emitLn('MOVE D0,(A0)');\n            this.emitLn('CMP (SP), D0');\n            this.emitLn('BGT ' + label_2);\n            this.block(label_2);   // <--\n            this.match('e');\n            this.emitLn('BRA ' + label_1);\n            this.postLabel(label_2);\n            this.emitLn('ADDQ #2, SP');\n        },\n\n        // Parse and translate a DO statement\n        doDo: function () {\n            var label_1, label_2;   // <--\n            this.match('d');\n            label_1 = this.newLabel();\n            label_2 = this.newLabel();\n            this.expression();\n            this.emitLn('SUBQ #1, D0');\n            this.postLabel(label_1);\n            this.emitLn('MOVE D0, -(SP)');\n            this.block(label_2);    // <--\n            this.emitLn('MOVE (SP)+, D0');\n            this.emitLn('DBRA D0, ' + label_1);\n            this.emitLn('SUBQ #2, SP');  // <--\n            this.postLabel(label_2);    // <--\n            this.emitLn('ADDQ #2, SP'); // <--\n        },\n\n        // Recognize and translate a break\n        doBreak: function (label) {\n            this.match('b');\n            if (label) {\n                this.emitLn('BRA ' + label);\n            } else {\n                this.abort('No loop to break from');\n            }\n        },\n\n        // Recognize and translate a statement block\n        block: function (label) {   // <--\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf(label);   // <--\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':\n                    this.doDo();\n                    break;\n                case 'b':   // <--\n                    this.doBreak(label);\n                    break;\n                default:\n                    this.other();\n                }\n            }\n        }\n    });\n\n\n    return {\n\n        // <program> ::= <statement>\n        oneStatement: oneStatement,\n\n        // <program> ::= <block> END\n        // <block> ::= [<statement>]*\n        moreThanOneStatement: moreThanOneStatement,\n\n        someGroundwork: someGroundwork,\n\n        // <if> ::= IF <condition> <block> ENDIF\n        theIfStatement: theIfStatement,\n\n        // <if> ::= IF <condition> <block> [ELSE <block>] ENDIF\n        addTheElseClause: addTheElseClause,\n\n        // <while> ::= WHILE <condition> <block> ENDWHILE\n        theWhileStatement: theWhileStatement,\n\n        // <loop> ::= LOOP <block> ENDLOOP\n        theLoopStatement: theLoopStatement,\n\n        // <repeat> ::= REPEAT <block> UNTIL <conditon>\n        theRepeatUntilStatement: theRepeatUntilStatement,\n\n        // <for> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n        theForLoop: theForLoop,\n\n        // <do> ::= DO <expression> <block> ENDDO\n        theDoStatement: theDoStatement,\n\n        theBreakStatement: theBreakStatement\n    };\n\n    /**\n     * Final results of this chapter in BNF\n     * ------------------------------------\n     * ### program ###\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * <statement> ::= <if> | <while> | <loop> | <repeat> |\n     *                 <for> | <do> | <break> |\n     *                 <other>\n     * ```\n     * ### control statements ###\n     * ```\n     * <if statement> ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <while statement> ::= WHILE <condition> <block> ENDWHILE\n     * <loop statement> ::= LOOP <block> ENDLOOP\n     * <repeat statement> ::= REPEAT <block> UNTIL <conditon>\n     * <for statement> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * <do statement> ::= DO <expression> <block> ENDDO\n     * <break statement> ::= BREAK\n     * ```\n     */\n});\n\r\n/* global define */\n\n/**\n * Chapter 6 Boolean Expressions\n * =============================\n */\n\ndefine([\n    './1.2-cradle', './3-more-expressions', './5-control-constructs',\n    'jquery', 'io'\n], function (cradle, moreExpressions, controlConstructs, $, io) {\n    'use strict';\n\n    var theParser,                      // 6.6.1\n        booleanLiteral,                 // 6.6.2\n        generalExpressions,             // 6.6.3\n        andOperation,                   // 6.6.4\n        notOperation,                   // 6.6.5\n        expandTheFactor,                // 6.6.6\n        fullBlownRelation,              // 6.6.7\n        mergingWithExpressions,         // 6.6.8\n        changeToLatestExpressionSyntax, // 6.6.9\n        mergingWithControlConstructs,   // 6.7\n        addingAssignments;              // 6.8\n\n    /**\n     * 6.1 Introduction\n     * -----------------\n     */\n\n    /**\n     * 6.2 The plan\n     * -------------\n     */\n\n    /**\n     * 6.3 The grammar\n     * ----------------\n     * **BNF syntax equations** for arithmetic expressions\n     * we have been implementing\n     * ```\n     * <expression> ::= <unary op> <term> [<addop> <term>]*\n     * <term>       ::= <factor> [<mulop> factor]*\n     * <factor>     :== <integer> | <variable> | (<expression>)\n     * ```\n     * It's better to write the *grammar* this way\n     * ```\n     * <expression>    ::= <term> [<addop> <term>]*\n     * <term>          ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>        :== <integer> | <variable> | (<expression>)\n     * ```\n     * Analogous grammar for boolean algebra\n     * ```\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term>       ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>   ::= [NOT] <b-factor>\n     * <b-factor>     ::= <b-literal> | <b-variable> | (<b-expression>)\n     * ```\n     */\n\n    /**\n     * 6.4 Relops\n     * -----------\n     * **BNF for relational expressions**\n     * ```\n     * <relation> ::= <expression> <relop> <expression>\n     * ```\n     * where relops are any of `=`, `<>` (or `!=`), `<`, `>`, `<=`, and `>=`.\n     *\n     * Expand the definition of a boolean factor to read\n     * ```\n     * <b-factor> ::= <b-literal>\n     *              | <b-variable>\n     *              | (<b-expression>) |\n     *              | <relation>\n     * ```\n     * The relops and the relation they define serve\n     * to wed the two kinds of algebra.\n     */\n\n    /**\n     * 6.5 Fixing the grammar\n     * ----------------------\n     * **In BNF**\n     * ```\n     * <b-expression>  ::= <b-term> [<orop> <b-term>]*\n     * <b-term>        ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>    ::= [NOT] <b-factor>\n     * <b-factor>      ::= <b-literal> | <b-variable> | <relation>\n     *\n     * <relation>      ::= <expression> [<relop> <expression>]\n     *\n     * <expression>    ::= <term> [<addop> <term>]*\n     * <term>          ::= <signed factor> [<mulop> factor]*\n     * <signed factor> ::= [<addop>] <factor>\n     * <factor>        ::= <integer> | <variable> | (<b-expression>)\n     * ```\n     */\n\n    /**\n     * 6.6 The parser\n     * ---------------\n     * ### 6.6.1 ###\n     */\n    theParser = cradle.extend({\n\n        // Recognize a boolean literal\n        isBoolean: function (c) {\n            c = c.toUpperCase();\n            return c === 'T' || c === 'F';\n        },\n\n        // Get a boolean literal\n        getBoolean: function () {\n            var result;\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n            result = this.look.toUpperCase() === 'T';\n            this.getChar();\n            return result;\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            io.writeLn(this.getBoolean());\n        }\n    });\n\n    /**\n     * ### 6.6.2 Boolean literal ###\n     * **In BNF**\n     * ```\n     * <b-expression>  ::= <b-literal>\n     * ```\n     */\n    booleanLiteral = theParser.extend({\n\n        // Parse and translate a boolean expression\n        boolExpression: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.boolExpression();\n        }\n    });\n\n    /**\n     * ### 6.6.3 General expressions ###\n     * **In BNF**\n     * ```\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term> ::= <b-literal>\n     * ```\n     */\n    generalExpressions = booleanLiteral.extend({\n\n        // Recognize a boolean orop\n        isOrop: function (c) {\n            return c === '|' || c === '~';\n        },\n\n        // Parse and translate a boolean term\n        // rename from previous boolExpression()\n        boolTerm: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Recognize and translate a boolean OR\n        boolOr: function () {\n            this.match('|');\n            this.boolTerm();\n            this.emitLn('OR (SP)+, D0');\n        },\n\n        // Recognize and translate an exclusive or (XOR)\n        boolXor: function () {\n            this.match('~');\n            this.boolTerm();\n            this.emitLn('EOR (SP)+, D0');\n        },\n\n        // Parse and translate a boolean expression\n        boolExpression: function () {\n            this.boolTerm();\n            while (this.isOrop(this.look)) {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '|':\n                    this.boolOr();\n                    break;\n                case '~':\n                    this.boolXor();\n                    break;\n                }\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.4 AND operation ###\n     * **In BNF**\n     * ```\n     * <b-term> ::= <not-factor> [AND <not-factor>]*\n     * <not-factor> :== <b-literal>\n     * ```\n     */\n    andOperation = generalExpressions.extend({\n\n        // Parse and translate a boolean factor with NOT\n        // rename from previous boolTerm()\n        notFactor: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Parse and translate a boolean term\n        boolTerm: function () {\n            this.notFactor();\n            while (this.look === '&') {\n                this.emitLn('MOVE D0, -(SP)');\n                this.match('&');\n                this.notFactor();\n                this.emitLn('AND (SP)+, D0');\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.5 NOT operation ###\n     * **In BNF**\n     * ```\n     * <not-factor> ::= [NOT] <b-factor>\n     * <b-factor> ::= <b-literal>\n     * ```\n     */\n    notOperation = andOperation.extend({\n\n        // Parse and translate a boolean factor\n        // Rename for previous notFactor()\n        boolFactor: function () {\n            if (!this.isBoolean(this.look)) {\n                this.expected('Boolean Literal');\n            }\n            if (this.getBoolean()) {\n                this.emitLn('MOVE #-1, D0');\n            } else {\n                this.emitLn('CLR D0');\n            }\n        },\n\n        // Parse and translate a boolean factor with NOT\n        notFactor: function () {\n            if (this.look === '!') {\n                this.match('!');\n                this.boolFactor();\n                this.emitLn('EOR #-1, D0');\n            } else {\n                this.boolFactor();\n            }\n        }\n    });\n\n    /**\n     * ### 6.6.6 Expand the factor ###\n     * **In BNF**\n     * ```\n     * <b-factor> ::= <b-literal> | <relation>\n     * ```\n     */\n    expandTheFactor = notOperation.extend({\n\n        // Parse and translate a relation\n        // This version is a dummy\n        relation: function () {\n            this.emitLn('<relation' + this.getName() + '>');\n        },\n\n        // Parse and translate a boolean factor\n        boolFactor: function () {\n            if (this.isBoolean(this.look)) {\n                if (this.getBoolean()) {\n                    this.emitLn('MOVE #-1, D0');\n                } else {\n                    this.emitLn('CLR D0');\n                }\n            } else {\n                this.relation();\n            }\n        }\n    });\n\n    /**\n     * ###6.6.7 Full-blown relation ###\n     * ```\n     * <relation> ::= <expression> [<relop> <expression>]\n     * ```\n     */\n    fullBlownRelation = expandTheFactor.extend({\n\n        // Recognize a relop\n        isRelop: function (c) {\n            return c === '=' || c === '#' || c === '<' || c === '>';\n        },\n\n        // Recognize and translate a relational \"equals\"\n        equals: function () {\n            this.match('=');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SEQ D0');\n        },\n\n        // Recognize and translate a relational \"not equals\"\n        notEquals: function () {\n            this.match('#');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SNE D0');\n        },\n\n        // Recognize and translate a relational \"less than\"\n        less: function () {\n            this.match('<');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SGE D0');\n        },\n\n        // Recognize and translate a relational \"greater than\"\n        greater: function () {\n            this.match('>');\n            this.expression();\n            this.emitLn('CMP (SP)+, D0');\n            this.emitLn('SLE D0');\n        },\n\n        // Parse and translate a relation\n        relation: function () {\n            this.expression();\n            if (this.isRelop(this.look)) {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '=':\n                    this.equals();\n                    break;\n                case '#':\n                    this.notEquals();\n                    break;\n                case '<':\n                    this.less();\n                    break;\n                case '>':\n                    this.greater();\n                    break;\n                }\n                this.emitLn('TST D0');\n            }\n        },\n\n        // Parse and translate an expression\n        // This version is a dummy\n        expression: function () {\n            this.emitLn('<Expression' + this.getName() + '>');\n        }\n    });\n\n    /**\n     * ### 6.6.8 Merging with expressions ###\n     * **After merging, the syntax in BNF**\n     * ```\n     * ----- boolean expressions -----\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term>       ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>   ::= [NOT] <b-factor>\n     * <b-factor>     ::= <b-literal> | <relation>\n     * <relation>     ::= <expression> [<relop> <expression>]\n     * ----- arithmetic expressions -----\n     * <expression>   ::= [<unary op>] <term> [<addop> <term>]*\n     * <term>         ::= <factor> |<mulop> <factor>|*\n     * <factor>       ::= <number> | (<expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     */\n    //{\n    mergingWithExpressions = $.extend(\n        true,   // deep copy\n        {},     // empty target\n\n        // 3.5\n        moreExpressions.assignmentStatementsObject,\n\n        // 6.6.7\n        fullBlownRelation,\n\n        // 3.5\n        {\n            expression : moreExpressions.assignmentStatements.expression\n        }\n    );\n    //}\n\n    /**\n     * ### 6.6.9 Change to latest expression syntax ###\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> <factor>]*\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * ```\n     */\n    changeToLatestExpressionSyntax = mergingWithExpressions.extend({\n\n        // parse and translate an expression\n        expression: function () {\n            this.term();\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            this.signedFactor();    // <--\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate the first math factor\n        signedFactor: function () {\n            if (this.look === '+') {\n                this.getChar();\n            }\n\n            if (this.look === '-') {\n                this.getChar();\n                if (this.isDigit(this.look)) {\n                    this.emitLn('MOVE #-' + this.getNum() + ', D0');\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.boolExpression();  // <--\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        }\n    });\n\n    /**\n     * 6.7 Merging with control constructs\n     * ------------------------------------\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * <statement> ::= <control-statement> | <b-expression>\n     * ```\n     */\n    //{\n    mergingWithControlConstructs = $.extend(\n        true,   // deep copy\n        {},     // empty target\n\n        // 6.6.9\n        changeToLatestExpressionSyntax,\n\n        // 5.10\n        controlConstructs.theBreakStatementObject,\n\n        // 6.6.9\n        {\n            condition: changeToLatestExpressionSyntax.boolExpression,\n            expression: changeToLatestExpressionSyntax.expression,\n            other: changeToLatestExpressionSyntax.boolExpression\n        }\n    );\n    //}\n\n    /**\n     * 6.8 Adding assignments\n     * -----------------------\n     * ```\n     * <statement> ::= <control-statement> | <assignment>\n     * <assignment> ::= <identifier> = <b-expression>\n     * ```\n     */\n    addingAssignments = mergingWithControlConstructs.extend({\n\n        // Skip a CRLF\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n        },\n\n        // Recognize and translate a statement block\n        block: function (label) {\n            while (this.look !== 'e' && this.look !== 'l' &&\n                    this.look !== 'u') {\n                this.fin();     // <--\n                switch (this.look) {\n                case 'i':\n                    this.doIf(label);\n                    break;\n                case 'w':\n                    this.doWhile();\n                    break;\n                case 'p':\n                    this.doLoop();\n                    break;\n                case 'r':\n                    this.doRepeat();\n                    break;\n                case 'f':\n                    this.doFor();\n                    break;\n                case 'd':\n                    this.doDo();\n                    break;\n                case 'b':   // <--\n                    this.doBreak(label);\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.fin();     // <--\n            }\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.boolExpression();  // <--\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        }\n    });\n\n\n    return {\n\n        // 6.6\n        theParser: theParser,\n\n        // <b-expression>  ::= <b-literal>\n        booleanLiteral: booleanLiteral,\n\n        // <b-expression> ::= <b-term> [<orop> <b-term>]*\n        // <b-term> ::= <b-literal>\n        generalExpressions: generalExpressions,\n\n        // <b-term> ::= <not-factor> [AND <not-factor>]*\n        // <not-factor> :== <b-literal>\n        andOperation: andOperation,\n\n        // <not-factor> ::= [NOT] <b-factor>\n        // <b-factor> ::= <b-literal>\n        notOperation: notOperation,\n\n        // <b-factor> ::= <b-literal> | <relation>\n        expandTheFactor: expandTheFactor,\n\n        // <relation> ::= <expression> [<relop> <expression>]\n        fullBlownRelation: fullBlownRelation,\n\n        /*\n         * 6.6.8\n         * No new codes after merging, the syntax in BNF:\n         * ----- boolean expressions -----\n         * <b-expression> ::= <b-term> [<orop> <b-term>]*\n         * <b-term>       ::= <not-factor> [AND <not-factor>]*\n         * <not-factor>   ::= [NOT] <b-factor>\n         * <b-factor>     ::= <b-literal> | <relation>\n         * <relation>     ::= <expression> [<relop> <expression>]\n         * ----- arithmetic expressions -----\n         * <expression>   ::= [<unary op>] <term> [<addop> <term>]*\n         * <term>         ::= <factor> |<mulop> <factor>|*\n         * <factor>       ::= <number> | (<expression>) | <identifier>\n         * <identifier>   ::= <variable> | <function>\n         */\n        mergingWithExpressions: mergingWithExpressions,\n\n        /*\n         * 6.6.9\n         * <expression>   ::= <term> [<addop> <term>]*\n         * <term>         ::= <signed factor> [<mulop> <factor>]*\n         * <factor>       ::= <number> | (<b-expression>) | <identifier>\n         */\n        changeToLatestExpressionSyntax:\n                changeToLatestExpressionSyntax,\n\n        // 6.7\n        // <program> ::= <block> END\n        // <block> ::= [<statement>]*\n        // <statement> ::= <control-statement> | <b-expression>\n        mergingWithControlConstructs: mergingWithControlConstructs,\n\n        // 6.8\n        // <statement> ::= <control-statement> | <assignment>\n        // <assignment> ::= <identifier> = <b-expression>\n        addingAssignments: addingAssignments\n    };\n\n    /**\n     * Final results of this chapter in BNF\n     * -------------------------------------\n     * ### program ###\n     * ```\n     * <program> ::= <block> END\n     * <block> ::= [<statement>]*\n     * <statement> ::= <if> | <while> | <loop> | <repeat> |<for> |\n     *                 <do> | <break> | <assignment>\n     * ```\n     * ### control statements ###\n     * ```\n     * <if statement> ::= IF <condition> <block> [ELSE <block>] ENDIF\n     * <while statement> ::= WHILE <condition> <block> ENDWHILE\n     * <loop statement> ::= LOOP <block> ENDLOOP\n     * <repeat statement> ::= REPEAT <block> UNTIL <conditon>\n     * <for statement> ::= FOR <ident> = <expr1> TO <expr2> <block> ENDFOR\n     * <do statement> ::= DO <expression> <block> ENDDO\n     * <break statement> ::= BREAK\n     * ```\n     * ### assignment statement ###\n     * ```\n     * <assignment statement> ::= <identifier> = <b-expression>\n     * ```\n     * ### boolean expressions ###\n     * ```\n     * <b-expression> ::= <b-term> [<orop> <b-term>]*\n     * <b-term>       ::= <not-factor> [AND <not-factor>]*\n     * <not-factor>   ::= [NOT] <b-factor>\n     * <b-factor>     ::= <b-literal> | <relation>\n     * <relation>     ::= <expression> [<relop> <expression>]\n     * ```\n     * ### arithmetic expressions ###\n     * ```\n     * <expression>   ::= <term> [<addop> <term>]*\n     * <term>         ::= <signed factor> [<mulop> <factor>]*\n     * <factor>       ::= <number> | (<b-expression>) | <identifier>\n     * <identifier>   ::= <variable> | <function>\n     * ```\n     */\n});\n\r\n/* global define */\n\n/**\n * Chapter 7 Lexical Scanning\n * ===========================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    var enumerate = cradle.enumerate,\n        someExperimentsInScanning,          // 7.4\n        whiteSpace,                         // 7.5\n        newlines,                           // 7.7\n        operators,                          // 7.8\n        listsCommasAndCommandLines,         // 7.9\n        gettingFancy,                       // 7.10.1\n        returningCodes,                     // 7.10.2\n        cleanupWithGlobal,                  // 7.10.3\n        returningACharacter;                // 7.11\n\n    /**\n     * 7.1 Introduction\n     * -----------------\n     */\n\n    /**\n     * 7.2 Lexical scanning\n     * ----------------------\n     * **Compiler**\n     * ```\n     * Text editor -> [stream of input characters]\n     * -> Lexical scanner -> [stream of input tokens]\n     * -> Parser (could be in one module) -> [object code]\n     * ```\n     *\n     * **Chomsky Hierarchy of grammars**\n     * ```\n     * Type 0: Unrestricted (e.g. English)\n     * Type 1: Context-Sensitive (older, e.g. Fortran)\n     * Type 2: Context-Free (modern)\n     * Type 3: Regular (modern)\n     * ```\n     * **Parser** for\n     * ```\n     * Type 3 - Regular grammar: an abstract machine called\n     *          the state machine (finite automaton)\n     * Type 2 - Context-free: push-down automaton\n     *          (a state machine augmented by a stack)\n     * ```\n     * **Regular expression** (lower-level of real, practical grammars)\n     *\n     * e.g.\n     * ```\n     * <identifier> ::= <letter> [<letter> | <digit>]*\n     * ```\n     * Lexical scanning is lower-level parsing.\n     */\n\n    /**\n     * 7.3 State machines and alternatives\n     * ------------------------------------\n     * - **Regular expressions** can be parsed by a state machine.\n     *\n     * - **State machine:** integers (current state), table of\n     *   actions, input chars\n     *\n     * - **LEX output:** a state machine + table of actions crspd.\n     *   to input grammar\n     * - **YACC output:** a canned table-driven parser + table crspd.\n     *   to lang syntax\n     */\n\n    /**\n     * 7.4 Some experiments in scanning\n     * ---------------------------------\n     * ```\n     * <identifier> ::= <letter> [<letter> | <digit>]*\n     * <number> ::= [<digit>]+\n     * ```\n     */\n    someExperimentsInScanning = cradle.extend({\n\n        // Recognize an alphanumeric character\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Get an identifier\n        getName: function () {\n            var name = '';\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            while (this.isAlNum(this.look)) {\n                name += this.look.toUpperCase();\n                this.getChar();\n            }\n            return name;\n        },\n\n        // Get a number\n        getNum: function () {\n            var num = '';\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {\n                num += this.look;\n                this.getChar();\n            }\n            return num;\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            io.writeLn(this.getName());\n        }\n    });\n\n    /**\n     * 7.5 White space\n     * ----------------\n     */\n    whiteSpace = someExperimentsInScanning.extend({\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Get an identifier\n        getName: function () {\n            var name = '';\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            while (this.isAlNum(this.look)) {\n                name += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return name;\n        },\n\n        // Get a number\n        getNum: function () {\n            var num = '';\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {\n                num += this.look;\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n            return num;\n        },\n\n        // Lexical scanner\n        scan: function () {\n            var result;\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n            return result;\n        },\n\n        // Main function\n        main: function () {\n            var token;\n\n            this.init();\n            do {\n                token = this.scan();\n                io.writeLn(token);\n            } while (token !== this.LF);\n        }\n    });\n\n    /**\n     * 7.6 State machines\n     * -------------------\n     * The `getName()` does indeed implement a state machine.\n     *\n     * **Syntax diagram (railroad-track diagram)**\n     * ```\n     *          |-----> Other---------------------------> Error\n     *          |\n     *  Start -------> Letter ---------------> Other -----> Finish\n     *          ^                        V\n     *          |                        |\n     *          |<----- Letter <---------|\n     *          |                        |\n     *          |<----- Digit  <----------\n     * ```\n     * The `SkipWhite()`, `getNum()`, and `scan()` are also state machines.\n     * Little machines make big machines.\n     * This is an implicit approach opposed to table-driven (explicite) one.\n     */\n\n    /**\n     * 7.7 Newlines\n     * -------------\n     */\n    newlines = whiteSpace.extend({\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF;\n        },\n\n        // Main function\n        main: function () {\n            var token;\n\n            this.init();\n            do {\n                token = this.scan();\n                io.writeLn(token);\n            } while (token !== '.');\n        }\n    });\n\n    /**\n     * 7.8 Operators\n     * --------------\n     */\n    operators = newlines.extend({\n\n        // Recognize any operator\n        isOp: function (c) {\n            return c === '+' || c === '-' || c === '*' || c === '/' ||\n                   c === '<' || c === '>' || c === ':' || c === '=';\n        },\n\n        // Get an operator\n        getOp: function () {\n            var op = '';\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n            while (this.isOp(this.look)) {\n                op += this.look;\n                this.getChar();\n            }\n            return op;\n        },\n\n        // Lexical scanner\n        scan: function () {\n            var result;\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else if (this.isOp(this.look)) {\n                result = this.getOp();\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n            return result;\n        }\n    });\n\n    /**\n     * 7.9 Lists, commas and command lines\n     * ------------------------------------\n     */\n    listsCommasAndCommandLines = operators.extend({\n\n        // Skip over a comma\n        skipComma: function () {\n            this.skipWhite();\n            if (this.look === ',') {\n                this.getChar();\n                this.skipWhite();\n            }\n        },\n\n        // Lexical scanner\n        // change skipWhite() to skipComma() temporarily\n        scan: function () {\n            var result;\n            if (this.isAlpha(this.look)) {\n                result = this.getName();\n            } else if (this.isDigit(this.look)) {\n                result = this.getNum();\n            } else if (this.isOp(this.look)) {\n                result = this.getOp();\n            } else {\n                result = this.look;\n                this.getChar();\n            }\n            this.skipComma();   // <--\n            return result;\n        }\n    });\n\n    /**\n     * 7.10 Getting fancy\n     * -------------------\n     * ### 7.10.1 ###\n     */\n    gettingFancy = listsCommasAndCommandLines.extend({\n\n        // Definition of keywords and token types\n        keywordType: enumerate(['IF', 'ELSE', 'ENDIF', 'END']),\n\n        // Main program\n        // temporarily changed.\n        main: function () {\n            var token = io.readLn();\n            io.writeLn(this.keywordType[token]);\n        }\n    });\n\n    /**\n     * ### 7.10.2 Returning codes ###\n     */\n    returningCodes = gettingFancy.extend({\n\n        // Type declarations\n        symType: enumerate(['ifSym', 'elseSym', 'endifSym', 'endSym',\n                'identifier', 'number', 'operator']),\n\n        // variable declarations\n        token: 0,   // Current token (symType)\n        value: '',  // String token of look\n\n        // Lexical scanner\n        scan: function () {\n            if (this.isAlpha(this.look)) {\n                this.value = this.getName();\n                this.token = this.keywordType[this.value];\n                if (this.token === undefined) {\n                    this.token = this.symType.identifier;\n                }\n            } else if (this.isDigit(this.look)) {\n                this.value = this.getNum();\n                this.token = this.symType.number;\n            } else if (this.isOp(this.look)) {\n                this.value = this.getOp();\n                this.token = this.symType.operator;\n            } else {\n                this.value = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            do {\n                this.scan();\n\n                switch (this.token) {\n                case this.symType.identifier:\n                    io.write('Ident ');\n                    break;\n                case this.symType.number:\n                    io.write('Number ');\n                    break;\n                case this.symType.operator:\n                    io.write('Operator ');\n                    break;\n                case this.symType.ifSym:    // fall through\n                case this.symType.elseSym:  // fall through\n                case this.symType.endifSym: // fall through\n                case this.symType.endSym:\n                    io.write('Keyword ');\n                    break;\n                }\n                io.writeLn(this.value);\n            } while (this.token !== this.symType.endSym);\n        }\n    });\n\n    /**\n     * ### 7.10.3 Cleanup with global ###\n     * `getName()`, `getNum()`, and `getOp()` becomes procedures,\n     * use globle variables (value and token) to eliminate the local copies.\n     */\n    cleanupWithGlobal = returningCodes.extend({\n\n        // Get an identifier\n        getName: function () {\n            this.value = '';\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.token = this.keywordType[this.value];  // copy\n            if (this.token === undefined) {    // from previous\n                this.token = this.symType.identifier;   // scan()\n            }\n        },\n\n        // Get a number\n        getNum: function () {\n            this.value = '';\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = this.symType.number;   // copy from previous scan()\n        },\n\n        // Get an operator\n        getOp: function () {\n            this.value = '';\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n            while (this.isOp(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = this.symType.operator; // copy from previous scan()\n        },\n\n        // Lexical scanner\n        scan: function () {\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else if (this.isOp(this.look)) {\n                this.getOp();\n            } else {\n                this.value = this.look;\n                this.getChar();\n            }\n            this.skipWhite();\n        }\n    });\n\n    /**\n     * 7.11 Returning a character\n     * ---------------------------\n     */\n    returningACharacter = cleanupWithGlobal.extend({\n\n        // Instead of symType, use keywordCode\n        keywordCode: 'xilee',\n        keywordType: enumerate(['IF', 'ELSE', 'ENDIF', 'END'], 1),\n\n        // Get an identifier\n        getName: function () {\n            var index;\n            this.value = '';\n\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            index = this.keywordType[this.value] || 0;   // <--\n            this.token = this.keywordCode.charAt(index); // <--\n        },\n\n        // Get a number\n        getNum: function () {\n            this.value = '';\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            while (this.isDigit(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = '#';   // <--\n        },\n\n        // Get an operator\n        getOp: function () {\n            this.value = '';\n            if (!this.isOp(this.look)) {\n                this.expected('Operator');\n            }\n            while (this.isOp(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            if (this.value.length === 1) {  // <--\n                this.token = this.value;    // .\n            } else {                        // .\n                this.token = '?';           // .\n            }\n        },\n\n        // Lexical scanner\n        scan: function () {\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else if (this.isOp(this.look)) {\n                this.getOp();\n            } else {\n                this.value = this.look;\n                this.token = '?';   // <--\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            do {\n                this.scan();\n\n                switch (this.token) {\n                case 'x':\n                    io.write('Ident ');\n                    break;\n                case '#':\n                    io.write('Number ');\n                    break;\n                case 'i':    // fall through\n                case 'l':    // fall through\n                case 'e':\n                    io.write('Keyword ');\n                    break;\n                default:\n                    io.write('Operator ');\n                }\n                io.writeLn(this.value);\n            } while (this.value !== 'END');\n        }\n    });\n\n    /**\n     * 7.12 Distributed vs centralized scanners\n     * -----------------------------------------\n     */\n\n    /**\n     * 7.13 Merging scanner and parser\n     * --------------------------------\n     * In file: 7.13-kiss.js\n     */\n\n\n    return {\n        someExperimentsInScanning: someExperimentsInScanning,\n        whiteSpace: whiteSpace,\n        newlines: newlines,\n        operators: operators,\n        listsCommasAndCommandLines: listsCommasAndCommandLines,\n        gettingFancy: gettingFancy,\n        returningCodes: returningCodes,\n        cleanupWithGlobal: cleanupWithGlobal,\n        returningACharacter: returningACharacter\n    };\n\n});\n\r\n/* global define */\n\n/**\n * Chapter 7.13 Merging Scanner and Parser\n * ---------------------------------------\n * Program kiss\n */\n\ndefine(['./object', 'io'], function (object, io) {\n    'use strict';\n\n    var enumerate = object.enumerate,\n        judiciousCopying,           // 7.13.1\n        mergingScannerAndParser;    // 7.13.2\n\n\n    /**\n     * 7.13 Merging scanner and parser\n     * --------------------------------\n     * ### 7.13.1 Judicious copying ###\n     * All the elements of the program to parse this subset, using\n     * single-character tokens, exist already in our previous programs.\n     *\n     * **A short list of the program KISS**\n     * ```\n     * const: TAB, CR, LF\n     * variable: look, lCount\n     * function: getChar, error, abort, expected,\n     *           isAlpha, isDigit, isAlNum, isAddop, isMulop, isWhite\n     *           skipWhite, match, fin, getName, getNum,\n     *           newLabel, postLabel, emit, emitLn\n     *           identifier, expression, signedFactor, multiply, divide\n     *           term1, term, firstTerm, add, subtract\n     *           expression, condition\n     *           doIf, assignment, block, doProgram,\n     *           init, main\n     * ```\n     */\n    judiciousCopying = object.extend({\n\n        // Constant declarations\n        TAB: '\\t',\n        CR: '\\r',\n        LF: '\\n',\n\n        // Variable declarations\n        look: '',   // lookahead character\n        lCount: 0,  // label counter\n\n        // Read new character from input\n        getChar: function () {\n            this.look = io.read();\n        },\n\n        // Report an error\n        error: function (str) {\n            io.writeLn('Error: ', str, '.');\n        },\n\n        // Report error and halt\n        abort: function (str) {\n            this.error(str);\n            io.halt();\n        },\n\n        // Report what was expected\n        expected: function (str) {\n            this.abort(str + ' Expected');\n        },\n\n        // Recognize an alpha character\n        isAlpha: function (c) {\n            return (/[A-Z]/i).test(c);\n        },\n\n        // Recognize a decimal digit\n        isDigit: function (c) {\n            return (/\\d/).test(c);\n        },\n\n        // Recognize an alphanumeric character\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize an addop\n        isAddop: function (c) {\n            return c === '+' || c === '-';\n        },\n\n        // Recognize a mulop\n        isMulop: function (c) {\n            return c === '*' || c === '/';\n        },\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Match a specific input character\n        match: function (x) {\n            if (this.look === x) {\n                this.getChar();\n                this.skipWhite();   // <--\n            } else {\n                this.expected('\"' + x + '\"');\n            }\n        },\n\n        // Skip a CRLF\n        fin: function () {\n            if (this.look === this.CR) {\n                this.getChar();\n            }\n            if (this.look === this.LF) {\n                this.getChar();\n            }\n            this.skipWhite();   // <--\n        },\n\n        // Get an identifier\n        getName: function () {\n            var name;\n\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            name = this.look.toUpperCase();\n            this.getChar();\n            this.skipWhite();   // <--\n            return name;\n        },\n\n        // Get a number\n        getNum: function () {\n            var num;\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            num = this.look;\n            this.getChar();\n            this.skipWhite();   // <--\n            return num;\n        },\n\n        // Generate a unique lable\n        newLabel: function () {\n            var label = 'L' + this.lCount;\n            this.lCount += 1;\n            return label;\n        },\n\n        // Post a label to output\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n         // Output a string with tab\n        emit: function (str) {\n            io.write(this.TAB + str);\n        },\n\n        // Output a string with tab and newline\n        emitLn: function (str) {\n            this.emit(str);\n            io.writeLn();\n        },\n\n        /**\n         * Improving arithmetic expressions:\n         * ----------------------------------\n         * **in 2.8**\n         * ```\n         * <expression> ::= [<unary op>] <term> [<addop> <term>]*\n         * <term> ::= <factor> |<mulop> <factor>|*\n         * <factor> ::= <number> | (<expression>)\n         * ```\n         * ** in 6.6.9**\n         * ```\n         * <expression>   ::= <term> [<addop> <term>]*\n         * <term>         ::= <signed factor> [<mulop> factor]*\n         * <signed factor> ::= [<addop>] <factor>\n         * <factor>       ::= <number> | (<b-expression>) | <identifier>\n         * <identifier>   ::= <variable> | <function>\n         * ```\n         * this version (only first term allows <signed factor>)\n         * ```\n         * <expression> ::= <first term> [<addop> <term>]*\n         * <first term> ::= <signed factor> <term 1>\n         * <term> ::= <factor> <term 1>\n         * <term 1> ::= [<mulop> <factor>]*\n         * <signed factor> ::= [<addop>] <factor>\n         * <factor>       ::= <number> | (<expression>) | <identifier>\n         * <identifier>   ::= <variable> | <function>\n         * ```\n         */\n\n        // Parse and translate an identifier\n        identifier: function () {\n            var name = this.getName();\n            if (this.look === '(') {\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + name);\n            } else {\n                this.emitLn('MOVE ' + name + '(PC), D0');\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.emitLn('MOVE #' + this.getNum() + ' ,D0');\n            }\n        },\n\n        // Parse and translate the first math factor\n        signedFactor: function () {\n            var signed = this.look === '-';\n\n            if (this.isAddop(this.look)) {\n                this.getChar();\n                this.skipWhite();\n            }\n\n            if (signed) {\n                if (this.isDigit(this.look)) {\n                    this.emitLn('MOVE #-' + this.getNum() + ', D0');\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Recognize and translate a multiply\n        multiply: function () {\n            this.match('*');\n            this.factor();\n            this.emitLn('MULS (SP)+, D0');\n        },\n\n        // Recognize and translate a divide\n        divide: function () {\n            this.match('/');\n            this.factor();\n            this.emitLn('MOVE (SP)+, D1');\n            this.emitLn('EXG  D0, D1');\n            this.emitLn('DIVS D1, D0');\n        },\n\n        // Parse and translate a math term\n        term1: function () {\n            while (this.look === '*' || this.look === '/') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '*':\n                    this.multiply();\n                    break;\n                case '/':\n                    this.divide();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate a math term\n        term: function () {\n            this.factor();    // <--\n            this.term1();\n        },\n\n        // Parse and translate a math term with possible leading sing\n        firstTerm: function () {\n            this.signedFactor();    // <--\n            this.term1();\n        },\n\n        // Recognize and translate an add\n        add: function () {\n            this.match('+');\n            this.term();\n            this.emitLn('ADD (SP)+, D0');    // <-- pop from stack\n        },\n\n        // Recognize and translate a subtract\n        subtract: function () {\n            this.match('-');\n            this.term();\n            this.emitLn('SUB (SP)+, D0');    // <-- pop from stack\n            this.emitLn('NEG D0');\n        },\n\n        // parse and translate an expression\n        expression: function () {\n            this.firstTerm();   // <--\n            while (this.look === '+' || this.look === '-') {\n                this.emitLn('MOVE D0, -(SP)');\n                switch (this.look) {\n                case '+':\n                    this.add();\n                    break;\n                case '-':\n                    this.subtract();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * ```\n         * <program> ::= <block> END\n         * <block> ::= [<statement>]*\n         * <statement> ::= <if> | <assignment>\n         * <if stmt> ::= IF <condition> <block> [ELSE <block>] ENDIF\n         * <assignment> ::= <identifier> = <expression>\n         * ```\n         */\n\n        // Parse and translate a boolean condition\n        // This version is a dummy\n        condition: function () {\n            this.emitLn('<condition>');\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label_1, label_2;\n            this.match('i');\n            this.condition();\n            label_1 = this.newLabel();\n            label_2 = label_1;\n            this.emitLn('BEQ ' + label_1);\n            this.block();\n\n            if (this.look === 'l') {\n                this.match('l');\n                label_2 = this.newLabel();\n                this.emitLn('BRA ' + label_2);\n                this.postLabel(label_1);\n                this.block();\n            }\n\n            this.match('e');\n            this.postLabel(label_2);\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.getName();\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            while (this.look !== 'e' && this.look !== 'l') {\n                switch (this.look) {\n                case 'i':\n                    this.doIf();\n                    break;\n                case this.LF:\n                    while (this.look === this.LF) {\n                        this.fin();\n                    }\n                    break;\n                default:\n                    this.assignment();\n                }\n            }\n        },\n\n        // Parse and translate a program\n        doProgram: function () {\n            this.block();\n            if (this.look !== 'e') {\n                this.expected('End');\n            }\n            this.emitLn('END');\n        },\n\n        // Initialize\n        init: function () {\n            this.lCount = 0;\n            this.getChar();\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.doProgram();\n        }\n    });\n\n    /**\n     * ### 7.13.2 Merging scanner and parser ###\n     */\n    mergingScannerAndParser = judiciousCopying.extend({\n\n        // Variable declarations\n        token: '',      // encoded token\n        value: '',      // unencoded token\n\n        //\n        keywordCode: 'xilee',\n        keywordType: enumerate(['IF', 'ELSE', 'ENDIF', 'END'], 1),\n\n        // Get an identifier\n        getName: function () {\n            while (this.look === this.LF) {\n                this.fin();\n            }\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            this.value = '';\n            while (this.isAlNum(this.look)) {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            }\n            this.skipWhite();\n        },\n\n        // Get a number\n        getNum: function () {\n            if (!this.isDigit(this.look)) {\n                this.expected('Integer');\n            }\n            this.value = '';\n            while (this.isDigit(this.look)) {\n                this.value += this.look;\n                this.getChar();\n            }\n            this.token = '#';\n            this.skipWhite();\n        },\n\n        // Get an identifier and scan it for keywords\n        scan: function () {\n            this.getName();\n            this.token = this.keywordCode.charAt(this.keywordType[this.value]);\n        },\n\n        // Match a specific input string\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n        },\n\n        // Parse and translate an identifier\n        identifier: function () {\n            this.getName();     // <--\n            if (this.look === '(') {\n                this.match('(');\n                this.match(')');\n                this.emitLn('BSR ' + this.value);   // <--\n            } else {\n                this.emitLn('MOVE ' + this.value + '(PC), D0');   // <--\n            }\n        },\n\n        // Parse and translate the first math factor\n        signedFactor: function () {\n            var signed = this.look === '-';\n\n            if (this.isAddop(this.look)) {\n                this.getChar();\n                this.skipWhite();\n            }\n\n            if (signed) {\n                if (this.isDigit(this.look)) {\n                    this.getNum();  // <--\n                    this.emitLn('MOVE #-' + this.value + ', D0');   // <--\n                } else {\n                    this.factor();\n                    this.emitLn('NEG D0');\n                }\n            } else {\n                this.factor();\n            }\n        },\n\n        // Parse and translate a math factor\n        factor: function () {\n            if (this.look === '(') {\n                this.match('(');\n                this.expression();\n                this.match(')');\n            } else if (this.isAlpha(this.look)) {\n                this.identifier();\n            } else {\n                this.getNum();\n                this.emitLn('MOVE #' + this.value + ' ,D0');\n            }\n        },\n\n        // Recognize and translate an IF constructor\n        doIf: function () {\n            var label_1, label_2;\n\n            this.condition();\n            label_1 = this.newLabel();\n            label_2 = label_1;\n            this.emitLn('BEQ ' + label_1);\n            this.block();\n\n            if (this.token === 'l') {   // <--\n                label_2 = this.newLabel();\n                this.emitLn('BRA ' + label_2);\n                this.postLabel(label_1);\n                this.block();\n            }\n\n            this.postLabel(label_2);\n            this.matchString('ENDIF');  // <--\n        },\n\n        // Parse and translate an assignment statement\n        assignment: function () {\n            var name = this.value;  // <--\n            this.match('=');\n            this.expression();\n            this.emitLn('LEA ' + name + '(PC), A0');    // <--\n            this.emitLn('MOVE D0, (A0)');\n        },\n\n        // Recognize and translate a statement block\n        block: function () {\n            this.scan();    // <--\n            while (this.token !== 'e' && this.token !== 'l') {  // <--\n                switch (this.token) {   // <--\n                case 'i':\n                    this.doIf();\n                    break;\n                default:\n                    this.assignment();\n                }\n                this.scan();    // <--\n            }\n        },\n\n        // Parse and translate a program\n        doProgram: function () {\n            this.block();\n            this.matchString('END');    // <--\n            this.emitLn('END');\n        }\n    });\n\n\n    return {\n        judiciousCopying: judiciousCopying,\n        mergingScannerAndParser: mergingScannerAndParser\n    };\n});\n\r\n/* global define */\n\n/**\n * Chapter 8 A Little Philosophy\n * ==============================\n *\n * 8.1 Introduction\n * -----------------\n * Some general thoughts concerning the usefulness of what we’ve been doing.\n *\n * 8.2 The road home\n * -----------------\n * To round out the series, we still have a few items to cover.\n * These include:\n *\n * - Procedure calls, with and without parameters\n * - Local and global variables\n * - Basic types, such as character and integer types\n * - Arrays\n * - Strings\n * - User-defined types and structures\n * - Tree-structured parsers and intermediate languages\n * - Optimization\n *\n * Two languages you will see in installments to come:\n *\n * - **TINY** A minimal, but usable language on the order of\n *   *Tiny BASIC* or *Tiny C*. It won’t be very practical,\n *   but it will have enough power to let you write and run real programs\n *   that do something worthwhile.\n *\n * - **KISS** The language I’m building for my own use.\n *   KISS is intended to be a systems programming language.\n *   It won’t have strong typing or fancy data structures,\n *   but it will support most of the things to do with\n *   a higher order language (HOL).\n *\n * 8.3 Why is it so simple?\n * ------------------------\n * Just to make sure you get the message here, let me state it flat out:\n * > USING THE TECHNIQUES WE’VE USED HERE, IT IS POSSIBLE TO BUILD\n * > A PRODUCTIONQUALITY, WORKING COMPILER WITHOUT ADDING A LOT OF\n * > COMPLEXITY TO WHAT WE’VE ALREADY DONE.\n *\n * The areas that I think have led to complexity in the past:\n *\n * - Limited RAM forcing multiple passes\n * - Batch processing\n * - Large programs\n * - Emphasis on efficiency\n * - Limited instruction sets\n * - Desire for generality\n *\n * 8.4 Conclusion\n * ---------------\n * So far, we’ve only looked at pieces of compilers,\n * and while we have many of the makings of a complete language,\n * we haven’t talked about how to put it all together.\n * That will be the subject of our next two installments.\n * Then we’ll press on into the new subjects listed at section 8.2.\n */\n\n{\n    'No code in this chapter';\n}\n\r\n/* global define */\n\n/**\n * Chapter 9 A Top View\n * =====================\n * **Program KISS**\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    var theStructureOfPascal,           // 9.3\n        fleshingItOut,                  // 9.4\n        declarations,                   // 9.5\n        theStructureOfC;                // 9.6\n\n    /**\n     * 9.1 Introduction\n     * -----------------\n     */\n\n    /**\n     * 9.2 The top level\n     * -----------------\n     * **In program design language (PDL)**\n     * ```\n     * begin\n     *     solve the problem\n     * end\n     * ```\n     */\n\n    /**\n     * 9.3 The structure of Pascal\n     * ----------------------------\n     * **In BNF**\n     * ```\n     * <program> ::= <program-header> <block> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * <block> ::= <declarations> | <statements>\n     * ```\n     * this section:\n     * ```\n     * <program> ::= <program-header> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * ```\n     */\n    theStructureOfPascal = cradle.extend({\n\n        // Parse and translate a program\n        prog: function () {\n            var name;\n            this.match('p');    // Handles program header part\n            name = this.getName();\n            this.prolog(name);\n            this.match('.');\n            this.epilog(name);\n        },\n\n        // Write the prolog\n        prolog: function () {\n            this.emitLn('WARMST EQU $A01E');\n        },\n\n        // Write the epilog\n        epilog: function (name) {\n            this.emitLn('DC WARMST');\n            this.emitLn('END ' + name);\n        },\n\n        // Main function\n        main: function () {\n            this.init();\n            this.prog();\n        }\n    });\n\n    /**\n     * 9.4 Fleshing it out\n     * --------------------\n     * **In BNF**\n     * ```\n     * <program> ::= <program-header> <block> '.'\n     * <program-header> ::= PROGRAM <ident>\n     * <block> ::= <declarations> | <statements>\n     * ```\n     */\n    fleshingItOut = theStructureOfPascal.extend({\n\n        // Post a label to output (ch 5.3)\n        postLabel: function (label) {\n            io.writeLn(label + ':');\n        },\n\n        declarations: function () {},\n\n        statements: function () {},\n\n        // Parse and translate a Pascal block\n        doBlock: function (name) {\n            this.declarations();\n            this.postLabel(name);\n            this.statements();\n        },\n\n        // Parse and translate a program\n        prog: function () {\n            var name;\n            this.match('p');\n            name = this.getName();\n            this.prolog(name);\n            this.doBlock(name);     // <--\n            this.match('.');\n            this.epilog(name);\n        }\n    });\n\n    /**\n     * 9.5 Declarations\n     * -----------------\n     * **The BNF for Pascal declarations**\n     * ```\n     * <declarations> ::= ( <label list>    |\n     *                      <constant list> |\n     *                      <type list>     |\n     *                      <variable list> |\n     *                      <procedure>     |\n     *                      <function>        )*\n     * ```\n     * **Statement part in BNF**\n     * ```\n     * <statements> ::= <compound statement>\n     * <compound statement> ::= BEGIN <statement> (';' <statement>)* END\n     * ```\n     * **Procedure statements**\n     * ```\n     * <statement> ::= <simple statement> | <structured statement>\n     * <simple statement> ::= <assignment> | <procedure call> | null\n     * <structured statement> ::= <compound statement> |\n     *                            <if statement>       |\n     *                            <case statement>     |\n     *                            <while statement>    |\n     *                            <repeat statement>   |\n     *                            <for statement>      |\n     *                            <with statement>\n     * ```\n     */\n    declarations = fleshingItOut.extend({\n\n        // Process label statement\n        labels: function () {\n            this.match('l');\n        },\n\n        // Process const statement\n        constants: function () {\n            this.match('c');\n        },\n\n        // Process type statement\n        types: function () {\n            this.match('t');\n        },\n\n        // Process var statement\n        variables: function () {\n            this.match('v');\n        },\n\n        // Process procedure statement\n        doProcedure: function () {\n            this.match('p');\n        },\n\n        // Process function statement\n        doFunction: function () {\n            this.match('f');\n        },\n\n        // Parse and translate the declaration part\n        declarations: function () {\n            while ((/[lctvpf]/).test(this.look)) {\n                switch (this.look) {\n                case 'l':\n                    this.labels();\n                    break;\n                case 'c':\n                    this.constants();\n                    break;\n                case 't':\n                    this.types();\n                    break;\n                case 'v':\n                    this.variables();\n                    break;\n                case 'p':\n                    this.doProcedure();\n                    break;\n                case 'f':\n                    this.doFunction();\n                    break;\n                }\n            }\n        },\n\n        // Parse and translate the statement part\n        statements: function () {\n            this.match('b');\n            while (this.look !== 'e') {\n                this.getChar();\n            }\n            this.match('e');\n        }\n    });\n\n    /**\n     * 9.6 The structure of C\n     * -----------------------\n     * At the top level, everything in C is a static declaration,\n     * either of data or of a function.\n     * ```\n     * <program> ::= ( <global declaration> )*\n     * <global declaration> ::= <data declaration> |\n     *                          <function>\n     * ```\n     * **In Small C**\n     * ```\n     * <global declaration> ::= '#' <preprocessor command>  |\n     *                          'int' <data list>           |\n     *                          'char' <data list>          |\n     *                          '<ident> <function body>\n     * ```\n     * **BNF for full C**\n     * ```\n     * <program> ::= ( <top-level decl> )*\n     * <top-level decl> ::= <function def> | <data decl>\n     * <data decl> ::= [<class>] <type> <decl-list>\n     * <function def> ::= [<class>] [<type>] <function decl>\n     * ```\n     * ambiguous for `<data decl>` and `<function def>` above,\n     * we can transform it:\n     * ```\n     * <top-level decl> ::= [<class>] <decl>\n     * <decl> ::= <type> <typed decl> | <function decl>\n     * <typed decl> ::= <data list> | <function decl>\n     * ```\n     */\n    theStructureOfC = cradle.extend({\n\n        // Demonstrates the top-level structure for small C\n        // Parse and translate a program\n        prog: function () {\n            while (this.look !== 'Z') {    // ^Z in real\n                switch (this.look) {\n                case '#':\n                    this.preProc();\n                    break;\n                case 'i':\n                    this.intDecl();\n                    break;\n                case 'c':\n                    this.charDecl();\n                    break;\n                default:\n                    this.doFunction();\n                }\n            }\n        },\n\n        // For full C\n        // Main program\n        main: function () {\n            this.init();\n            while (this.look !== this.LF) {     // ^Z in real\n                this.getClass();\n                this.getType();\n                this.topDecl();\n            }\n        },\n\n        // Global variable\n        clas: '',   // storage class: auto, extern, static, register, typedef\n        sign: '',   // signed, unsigned\n        typ: '',    // long, int, char, ...\n\n        showClass: {\n            a: 'auto ',\n            x: 'extern ',\n            s: 'static '\n        },\n        showSign: {\n            s: 'signed ',\n            u: 'unsigned '\n        },\n        showType: {\n            l: 'long ',\n            i: 'int ',\n            c: 'char '\n        },\n\n        // Get a storage class specifier\n        // a: auto, x: extern, s: static\n        getClass: function () {\n            if (this.look === 'a' || this.look === 'x' || this.look === 's') {\n                this.clas = this.look;\n                this.getChar();\n            } else {\n                this.clas = 'a';\n            }\n        },\n\n        // Get a type specifier\n        getType: function () {\n            this.typ = ' ';\n            if (this.look === 'u') {\n                this.sign = 'u';\n                this.typ = 'i';\n                this.getChar();\n            } else {\n                this.sign = 's';\n            }\n            if (this.look === 'i' || this.look === 'l' || this.look === 'c') {\n                this.typ = this.look;\n                this.getChar();\n            }\n        },\n\n        // Process a type-level declaration\n        topDecl: function () {\n            var name = this.getName();\n            if (this.look === '(') {\n                this.doFunc(name);\n            } else {\n                this.doData(name);\n            }\n        },\n\n        // Process a function definition\n        doFunc: function (name) {\n            this.match('(');\n            this.match(')');\n            this.match('{');\n            this.match('}');\n            if (this.typ === ' ') {\n                this.typ = 'i';\n            }\n            io.writeLn(this.showClass[this.clas], this.showSign[this.sign],\n                    this.showType[this.typ], 'function ', name);\n        },\n\n        // Process a data declaration\n        doData: function (name) {\n            if (this.typ === ' ') {\n                this.expected('Type declaration');\n            }\n            io.writeLn(this.showClass[this.clas], this.showSign[this.sign],\n                    this.showType[this.typ], 'data ', name);\n            this.match(';');\n        }\n    });\n\n\n    return {\n        theStructureOfPascal: theStructureOfPascal,\n        fleshingItOut: fleshingItOut,\n        declarations: declarations,\n        theStructureOfC: theStructureOfC\n    };\n});\n\r\n/* global define */\n\ndefine([\n    './2-expression-parsing',\n    './3-more-expressions',\n    './4-interpreters',\n    './5-control-constructs',\n    './6-boolean-expressions',\n    './7-lexical-scanning',\n    './7.13-kiss',\n    './9.a-top-view',\n    './10-introducing-tiny',\n    './11-lexical-scan-revisited',\n    './11.6-tiny-1.1',\n    './12-miscellany'\n], function (\n    expressionParsing,      // 2\n    moreExpressions,        // 3\n    interpreters,           // 4\n    controlConstructs,      // 5\n    booleanExpressions,     // 6\n    lexicalScanning,        // 7\n    kiss,                   // 7.13\n    aTopView,               // 9\n    introducingTiny,        // 10\n    lexicalScanRevisited,   // 11\n    tiny_11,                // 11.6\n    miscellany              // 12\n) {\n    'use strict';\n\n    return {\n        expressionParsing: expressionParsing,\n        moreExpressions: moreExpressions,\n        interpreters: interpreters,\n        controlConstructs: controlConstructs,\n        booleanExpressions: booleanExpressions,\n        lexicalScanning: lexicalScanning,\n        kiss: kiss,\n        aTopView: aTopView,\n        introducingTiny: introducingTiny,\n        lexicalScanRevisited: lexicalScanRevisited,\n        tiny_11: tiny_11,\n        miscellany: miscellany\n    };\n\n});\n\r\n/* global define */\n\n/**\n * Prologue\n * ========\n * This is a JavaScript port of **Let's Build a Compiler**,\n * *a non-technical introduction to compiler construction*,\n * written from 1988 to 1995 by Jack W. Crenshaw.\n * Please refer to the [original context][original]\n * or alternatively a [LaTeX typeset PDF version][latex].\n *\n * [original]: http://compilers.iecc.com/crenshaw/\n * [latex]: http://www.stack.nl/~marcov/compiler.pdf\n *\n * The JavaScript code was ported section by section based on\n * *prototypal inheritance*.\n * It aims to be similar to the [original Pascal version][original].\n * A tiny console is provided with necessary I/O routines\n * for user interactions.\n *\n * The base object\n * ------------\n * The base `object` provides the `object.extend` method\n * for *prototypal inheritance* and some other helper functions.\n *\n */\n\ndefine(['jquery'], function ($) {\n    'use strict';\n\n    var object = {\n\n        // Extend method used for prototyal inheritance\n        extend: function (obj) {\n            var newObj = Object.create(this),\n                prop;\n\n            for (prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    newObj[prop] = obj[prop];\n                }\n            }\n            return newObj;\n        },\n\n        /**\n         * Helper functions\n         */\n\n        // Convert an array to an object to work as enum\n        // e.g. enumerate([a, b]) => { a: 0, b: 1 }\n        enumerate: function (arr, start) {\n            var result = Object.create(null);\n\n            start = start || 0;\n            $.each(arr, function (i, name) {\n                result[name] = start + i;\n            });\n            return result;\n        }\n    };\n\n    return object;\n});\n\r\n/* global define */\n\n/**\n * Chapter 11 Lexical Scan Revisited\n * ==================================\n */\n\ndefine(['./1.2-cradle', 'io'], function (cradle, io) {\n    'use strict';\n\n    var theSolution,                // 11.4.1\n        singleCharacterOperators;   // 11.4.2\n\n    /**\n     * 11.1 Introduction\n     * ------------------\n     */\n\n    /**\n     * 11.2 Background\n     * ----------------\n     */\n\n    /**\n     * 11.3 The problem\n     * -----------------\n     */\n\n    /**\n     * 11.4 The solution\n     * ------------------\n     */\n    theSolution = cradle.extend({\n\n        // Recognize an alphanumeric character\n        isAlNum: function (c) {\n            return this.isAlpha(c) || this.isDigit(c);\n        },\n\n        // Recognize white space\n        isWhite: function (c) {\n            return c === ' ' || c === this.TAB ||\n                   c === this.CR || c === this.LF;\n        },\n\n        // Skip over leading white space\n        skipWhite: function () {\n            while (this.isWhite(this.look)) {\n                this.getChar();\n            }\n        },\n\n        // Get an identifier\n        getName: function () {\n            this.skipWhite();\n            if (!this.isAlpha(this.look)) {\n                this.expected('Name');\n            }\n            this.token = 'x';\n            this.value = '';\n            do {\n                this.value += this.look.toUpperCase();\n                this.getChar();\n            } while (this.isAlNum(this.look));\n        },\n\n        // Get a Number\n        getNum: function () {\n            this.skipWhite();\n            if (!this.isDigit(this.look)) {\n                this.expected('Number');\n            }\n            this.token = '#';\n            this.value = '';\n            do {\n                this.value += this.look;\n                this.getChar();\n            } while (this.isDigit(this.look));\n        },\n\n        // Get an operator\n        getOp: function () {\n            this.token = this.look;\n            this.value = '';\n            do {\n                this.value += this.look;\n                this.getChar();\n            } while (!this.isAlpha(this.look) && !this.isDigit(this.look) &&\n                     !this.isWhite(this.look));\n        },\n\n        // Get the next input token\n        next: function () {\n            this.skipWhite();\n            if (this.isAlpha(this.look)) {\n                this.getName();\n            } else if (this.isDigit(this.look)) {\n                this.getNum();\n            } else {\n                this.getOp();\n            }\n        },\n\n        // Main program\n        main: function () {\n            this.init();\n            do {\n                this.next();\n                io.writeLn(this.token, ' ', this.value);\n            } while (this.token !== '.');\n        }\n    });\n\n    /**\n     * ### 11.4.2 Single-character operators ###\n     * e.g. `(a+b)*(c+d)`, problem of op: `)*(` is fixed.\n     */\n    singleCharacterOperators = theSolution.extend({\n\n        // Get an operator\n        getOp: function () {\n            this.token = this.look;\n            this.value = this.look;\n            this.getChar();\n        },\n\n        // Scan the current identifier for keywords\n        scan: function () {\n            if (this.token === 'x') {\n                this.token = this.keywordCode(this.value);\n            }\n        },\n\n        // Match a specific input string\n        matchString: function (str) {\n            if (this.value !== str) {\n                this.expected('\"' + str + '\"');\n            }\n        }\n    });\n\n    /**\n     * 11.5 Fixing up the compiler\n     * ----------------------------\n     */\n\n    /**\n     * 11.6 Conclusion\n     * ----------------\n     * in file: `11.6-tiny-1.1.js`\n     */\n\n\n    return {\n        theSolution: theSolution,\n        singleCharacterOperators: singleCharacterOperators\n    };\n\n});\n"
}),define("models/content",["underscore","backbone","prettify","marked","common","text!src"],function(t,n,e,i,s,o){"use strict";function r(t){var n,e,i=l(t),s=u(i);return i=c(i),n=p(s),e=f(n),{docLines:h.slice(i,s),codeLines:h.slice(n,e)}}function a(n,e,i){var s=Number.MAX_VALUE;return i=void 0===i?!0:i,e=e||0,i?t.each(n,function(t){var n=t.search(/\S/);n>-1&&s>n&&(s=n)}):s=0,n.map(function(t){return t.slice(s+e)})}var h=o.split("\n"),l=t.memoize(function(n){var e;return t.each(h,function(t,i){return-1!==t.search(n)?(e=i,!1):void 0}),e}),c=t.memoize(function(t){var n,e;for(n=t;n>=0;n-=1)if(e=h[n]){if(-1===e.indexOf("*"))break;e.indexOf("/**")>-1&&(t=n)}return t}),u=t.memoize(function(t){var n,e=h.length;for(n=t;e>n;n+=1)if(h[n].indexOf("*/")>-1)return n}),p=t.memoize(function(t){for(var n=t+1;!h[n].trim();)n+=1;return n}),f=t.memoize(function(t){var n,e,i=h.length,s=0,o=!1,r=!1;for(n=t;i>n;n+=1)if(e=h[n],e.indexOf("/*")>-1&&(r=!0),e.indexOf("*/")>-1&&(r=!1),!r&&e.indexOf("{")>-1&&(s+=1,o=!0),!r&&e.indexOf("}")>-1&&(s-=1),o&&0===s)return n+1});i.setOptions({highlight:function(n){return e.prettyPrintOne(t.escape(n))}});var d=n.Model.extend({defaults:{doc:"",code:"",hasConsole:!1,hasEditor:!1},update:function(n,o){var h=s.getTitle(n,o),l=r(h),c=a(l.docLines,3).join("\n"),u=t.escape(a(l.codeLines).join("\n"));this.set("doc",i(c)),this.set("code",e.prettyPrintOne(u))}});return d}),define("models/setting",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{editor:!0,editorTitle:"",console:!0,consoleTitle:""},initialize:function(){this.setTitle("editor"),this.setTitle("console")},toggle:function(t){var n=!this.get(t);return this.set(t,n),this.setTitle(t),n},setTitle:function(t){var n=this.get(t);n?this.set(t+"Title","<div>The "+t+" is shown when available.</div><div>Uncheck to hide the "+t+".</div>"):this.set(t+"Title","<div>Check to show the "+t+"</div><div>when available.</div>")}});return n}),define("models/pagerItem",["backbone"],function(t){"use strict";var n=t.Model.extend({defaults:{className:"",href:"#",title:"Untitled",text:"Untitled",placement:""}});return n}),define("collections/pager",["jquery","underscore","backbone","models/pagerItem","data/toc"],function(t,n,e,i,s){"use strict";function o(t){t=t||"0.0.0";var e=t.split(".");return e[2]=e[2]||"0",n.reduce(e,function(t,n){return 100*t+parseInt(n,10)},0)}function r(t,n){var e,i,a,h,l=s[t].sections;for(h=l.length-1;h>=0;h-=1)if(e=l[h],o(e.sec)<o(n)&&!e.disabled){i=e.sec,a="&sect;"+i+" "+e.title;break}if(!i){if(!n)return t>0?r(t-1,"99.9"):null;a=(t?"Chapter "+s[t].ch+" ":"")+s[t].title}return{className:"previous",href:"#ch"+t+(i?"/"+i:""),title:a,text:"&laquo; Previous"}}function a(n,e){var i,r,a=12;if(t.each(s[n].sections,function(t,n){return o(n.sec)>o(e)&&!n.disabled?(i=n.sec,r="&sect;"+i+" "+n.title,!1):void 0}),!i){if(!(a>n))return null;n+=1,r="Chapter "+s[n].ch+" "+s[n].title}return{className:"next",href:"#ch"+n+(i?"/"+i:""),title:r,text:"Next &raquo;",placement:"bottom"}}function h(t,e){var i,o=s[t],h=[];return i=r(t,e),i&&h.push(i),h.push({className:e?"":"disabled",href:"#ch"+t,title:(t?"Chapter "+t+" ":"")+o.title,text:t?"Ch"+t:o.title}),n.each(o.sections,function(n){n.disabled||h.push({className:n.sec===e?"disabled":"",href:"#ch"+t+"/"+n.sec,title:"&sect;"+n.sec+" "+n.title,text:n.sec})}),i=a(t,e),i&&h.push(i),h}var l=e.Collection.extend({model:i,update:function(t,n){this.reset(h(t,n))}});return l}),define("views/pager",["jquery","underscore","backbone","templates","collections/pager"],function(t,n,e,i,s){"use strict";var o=e.View.extend({template:i["app/scripts/templates/pagerItem.ejs"],events:{"click a":"itemClicked"},initialize:function(){this.collection=new s,this.listenTo(this.collection,"reset",this.render)},render:function(){var t=this;this.$el.empty(),this.collection.each(function(n){t.$el.append(t.template(n.attributes))}),this.$el.find("a").tooltip()},update:function(t,n){this.collection.update(t,n)},itemClicked:function(n){var e=t(n.target).attr("href").replace(/#/,"");this.trigger("click:item",e),n.preventDefault()}});return o}),define("views/setting",["jquery","underscore","backbone","templates"],function(t,n,e,i){"use strict";var s=e.View.extend({className:"clearfix",template:i["app/scripts/templates/setting.ejs"],events:{"click #toggle-editor":"toggleEditorItem","click #toggle-console":"toggleConsoleItem"},initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$toggleEditor=this.$("#toggle-editor"),this.$toggleConsole=this.$("#toggle-console"),this.$toggleEditor.tooltip({html:!0}),this.$toggleConsole.tooltip({html:!0}),this},toggleEditorItem:function(t){var n=this.model.toggle("editor");t.preventDefault(),this.$("#toggle-editor i").toggleClass("icon-ok",n),this.$toggleEditor.tooltip("destroy").tooltip({title:this.model.get("editorTitle"),html:!0})},toggleConsoleItem:function(t){var n=this.model.toggle("console");t.preventDefault(),this.$("#toggle-console i").toggleClass("icon-ok",n),this.$toggleConsole.tooltip("destroy").tooltip({title:this.model.get("consoleTitle"),html:!0})}});return s}),define("lbac/object",["jquery"],function(t){"use strict";var n={extend:function(t){var n,e=Object.create(this);for(n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},enumerate:function(n,e){var i=Object.create(null);return e=e||0,t.each(n,function(t,n){i[n]=e+t}),i}};return n}),define("io",[],function(){"use strict";var t;return{set:function(n){t=n},read:function(){return t.read()},readLn:function(){return t.readLn()},write:function(){return t.write.apply(null,arguments)},writeLn:function(){return t.writeLn.apply(null,arguments)},halt:function(){return t.halt()}}}),define("lbac/1.2-cradle",["./object","io"],function(t,n){"use strict";var e=t.extend({TAB:"	",CR:"\r",LF:"\n",look:"",getChar:function(){this.look=n.read()},error:function(t){n.writeLn("Error: ",t,".")},abort:function(t){this.error(t),n.halt()},expected:function(t){this.abort(t+" Expected")},match:function(t){this.look===t?this.getChar():this.expected('"'+t+'"')},isAlpha:function(t){return/[A-Z]/i.test(t)},isDigit:function(t){return/\d/.test(t)},getName:function(){var t;return this.isAlpha(this.look)||this.expected("Name"),t=this.look.toUpperCase(),this.getChar(),t},getNum:function(){var t;return this.isDigit(this.look)||this.expected("Integer"),t=this.look,this.getChar(),t},emit:function(t){n.write(this.TAB,t)},emitLn:function(t){this.emit(t),n.writeLn()},init:function(){this.getChar()},main:function(){this.init()}});return e}),define("lbac/2-expression-parsing",["./1.2-cradle"],function(t){"use strict";var n,e,i,s,o,r,a;return n=t.extend({expression:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},main:function(){this.init(),this.expression()}}),e=n.extend({term:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},add:function(){this.match("+"),this.term(),this.emitLn("ADD D1, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB D1, D0"),this.emitLn("NEG D0")},expression:function(){switch(this.term(),this.emitLn("MOVE D0, D1"),this.look){case"+":this.add();break;case"-":this.subtract();break;default:this.expected("Addop")}}}),i=e.extend({expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, D1"),this.look){case"+":this.add();break;case"-":this.subtract()}}}),s=e.extend({add:function(){this.match("+"),this.term(),this.emitLn("ADD (SP)+, D0")},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}}}),o=s.extend({factor:function(){this.emitLn("MOVE #"+this.getNum()+", D0")},multiply:function(){this.match("*"),this.factor(),this.emitLn("MULS (SP)+, D0")},divide:function(){this.match("/"),this.factor(),this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},term:function(){for(this.factor();"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}}}),r=o.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.emitLn("MOVE #"+this.getNum()+" ,D0")}}),a=r.extend({isAddop:function(t){return"+"===t||"-"===t},expression:function(){for(this.isAddop(this.look)?this.emitLn("CLR D0"):this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}}}),{singleDigits:n,binaryExpressions:e,generalExpressions:i,usingTheStack:s,multiplicationAndDivision:o,parentheses:r,unaryMinus:a}}),define("lbac/3-more-expressions",["./2-expression-parsing"],function(t){"use strict";var n,e,i,s,o,r;return n=t.unaryMinus.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.emitLn("MOVE "+this.getName()+"(PC), D0"):this.emitLn("MOVE #"+this.getNum()+" ,D0")}}),e=n.extend({identifier:function(){var t=this.getName();"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+t)):this.emitLn("MOVE "+t+"(PC), D0")},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+", D0")}}),i=e.extend({main:function(){this.init(),this.expression(),this.look!==this.LF&&this.expected("Newline")}}),s=i.extend({assignment:function(){var t=this.getName();this.match("="),this.expression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},main:function(){this.init(),this.assignment(),this.look!==this.LF&&this.expected("Newline")}}),o=s.extend({isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},getName:function(){var t="";for(this.isAlpha(this.look)||this.expected("Name");this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return t},getNum:function(){var t="";for(this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t+=this.look,this.getChar();return t}}),r=o.extend({isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},match:function(t){this.look===t?(this.getChar(),this.skipWhite()):this.expected('"'+t+'"')},getName:function(){var t="";for(this.isAlpha(this.look)||this.expected("Name");this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return this.skipWhite(),t},getNum:function(){var t="";for(this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t+=this.look,this.getChar();return this.skipWhite(),t},init:function(){this.getChar(),this.skipWhite()}}),{variables:n,functions:e,moreOnErrorHandling:i,assignmentStatements:s,multiCharacterTokens:o,whiteSpace:r}}),define("lbac/4-interpreters",["./1.2-cradle","io"],function(t,n){"use strict";var e,i,s,o,r,a,h,l,c;return e=t.extend({getNum:function(){var t;return this.isDigit(this.look)||this.expected("Integer"),t=+this.look,this.getChar(),t},expression:function(){return this.getNum()},main:function(){this.init(),n.writeLn(this.expression())}}),i=e.extend({isAddop:function(t){return"+"===t||"-"===t},expression:function(){var t;for(t=this.isAddop(this.look)?0:this.getNum();this.isAddop(this.look);)switch(this.look){case"+":this.match("+"),t+=this.getNum();break;case"-":this.match("-"),t-=this.getNum()}return t}}),s=i.extend({term:function(){for(var t=this.getNum();"*"===this.look||"/"===this.look;)switch(this.look){case"*":this.match("*"),t*=this.getNum();break;case"/":this.match("/"),t=Math.floor(t/this.getNum())}return t},expression:function(){var t;for(t=this.isAddop(this.look)?0:this.term();this.isAddop(this.look);)switch(this.look){case"+":this.match("+"),t+=this.term();break;case"-":this.match("-"),t-=this.term()}return t}}),o=s.extend({getNum:function(){var t=0;for(this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t=10*t+ +this.look,this.getChar();return t}}),r=o.extend({factor:function(){var t;return"("===this.look?(this.match("("),t=this.expression(),this.match(")")):t=this.getNum(),t},term:function(){for(var t=this.factor();"*"===this.look||"/"===this.look;)switch(this.look){case"*":this.match("*"),t*=this.factor();break;case"/":this.match("/"),t=Math.floor(t/this.factor())}return t}}),a=r.extend({table:{},initTable:function(){var t,n,e="A".charCodeAt(0);for(t=0;26>t;t+=1)n=String.fromCharCode(e+t),this.table[n]=0},init:function(){this.initTable(),this.getChar()},factor:function(){var t;return"("===this.look?(this.match("("),t=this.expression(),this.match(")")):t=this.isAlpha(this.look)?this.table[this.getName()]:this.getNum(),t}}),h=a.extend({assignment:function(){var t=this.getName();this.match("="),this.table[t]=this.expression()},main:function(){this.init(),this.assignment(),n.writeLn(this.table.A)}}),l=h.extend({newLine:function(){this.look===this.LF&&this.getChar()},main:function(){this.init();do this.assignment(),this.newLine();while("."!==this.look)}}),c=l.extend({input:function(){this.match("?")},output:function(){this.match("!"),n.writeLn(this.table[this.getName()])},main:function(){this.init();do{switch(this.look){case"?":this.input();break;case"!":this.output();break;default:this.assignment()}this.newLine()}while("."!==this.look)}}),{singleDigits:e,binaryExpressions:i,generalExpressions:s,multiDigitsNumber:o,factor:r,variables:a,assignmentStatements:h,multipleStatements:l,ioRoutines:c}}),define("lbac/5-control-constructs",["./1.2-cradle","io"],function(t,n){"use strict";var e,i,s,o,r,a,h,l,c,u,p;return e=t.extend({other:function(){this.emitLn("<block "+this.getName()+">")},main:function(){this.init(),this.other()}}),i=e.extend({block:function(){for(;"e"!==this.look;)this.other()},doProgram:function(){this.block(),"e"!==this.look&&this.expected("End"),this.emitLn("END")},main:function(){this.init(),this.doProgram()}}),s=i.extend({lCount:0,newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},postLabel:function(t){n.writeLn(t+":")},init:function(){this.lCount=0,this.getChar()}}),o=s.extend({condition:function(){this.emitLn("<condition>")},doIf:function(){var t;this.match("i"),t=this.newLabel(),this.condition(),this.emitLn("BEQ "+t),this.block(),this.match("e"),this.postLabel(t)},block:function(){for(;"e"!==this.look;)switch(this.look){case"i":this.doIf();break;default:this.other()}}}),r=o.extend({doIf:function(){var t,n;this.match("i"),this.condition(),t=this.newLabel(),n=t,this.emitLn("BEQ "+t),this.block(),"l"===this.look&&(this.match("l"),n=this.newLabel(),this.emitLn("BRA "+n),this.postLabel(t),this.block()),this.match("e"),this.postLabel(n)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;default:this.other()}}}),a=r.extend({doWhile:function(){var t,n;this.match("w"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.condition(),this.emitLn("BEQ "+n),this.block(),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.other()}}}),h=a.extend({doLoop:function(){var t;this.match("p"),t=this.newLabel(),this.postLabel(t),this.block(),this.match("e"),this.emitLn("BRA "+t)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;default:this.other()}}}),l=h.extend({doRepeat:function(){var t;this.match("r"),t=this.newLabel(),this.postLabel(t),this.block(),this.match("u"),this.condition(),this.emitLn("BEQ "+t)},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;default:this.other()}}}),c=l.extend({expression:function(){this.emitLn("<expression>")},doFor:function(){var t,n,e;this.match("f"),t=this.newLabel(),n=this.newLabel(),e=this.getName(),this.match("="),this.expression(),this.emitLn("SUBQ #1, D0"),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE D0, (A0)"),this.expression(),this.emitLn("MOVE D0, -(SP)"),this.postLabel(t),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE (A0), D0"),this.emitLn("ADDQ #1, D0"),this.emitLn("MOVE D0, (A0)"),this.emitLn("CMP (SP), D0"),this.emitLn("BGT "+n),this.block(),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n),this.emitLn("ADDQ #2, SP")},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;default:this.other()}}}),u=c.extend({doDo:function(){var t;this.match("d"),t=this.newLabel(),this.expression(),this.emitLn("SUBQ #1, D0"),this.postLabel(t),this.emitLn("MOVE D0, -(SP)"),this.block(),this.match("e"),this.emitLn("MOVE (SP)+, D0"),this.emitLn("DBRA D0, "+t)},block:function(){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;default:this.other()}}}),p=u.extend({doIf:function(t){var n,e;this.match("i"),this.condition(),n=this.newLabel(),e=n,this.emitLn("BEQ "+n),this.block(t),"l"===this.look&&(this.match("l"),e=this.newLabel(),this.emitLn("BRA "+e),this.postLabel(n),this.block()),this.match("e"),this.postLabel(e)},doWhile:function(){var t,n;this.match("w"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.condition(),this.emitLn("BEQ "+n),this.block(n),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n)},doLoop:function(){var t,n;this.match("p"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.block(n),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n)},doRepeat:function(){var t,n;this.match("r"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.block(n),this.match("u"),this.condition(),this.emitLn("BEQ "+t),this.postLabel(n)},doFor:function(){var t,n,e;this.match("f"),t=this.newLabel(),n=this.newLabel(),e=this.getName(),this.match("="),this.expression(),this.emitLn("SUBQ #1, D0"),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE D0, (A0)"),this.expression(),this.emitLn("MOVE D0, -(SP)"),this.postLabel(t),this.emitLn("LEA "+e+"(PC), A0"),this.emitLn("MOVE (A0), D0"),this.emitLn("ADDQ #1, D0"),this.emitLn("MOVE D0,(A0)"),this.emitLn("CMP (SP), D0"),this.emitLn("BGT "+n),this.block(n),this.match("e"),this.emitLn("BRA "+t),this.postLabel(n),this.emitLn("ADDQ #2, SP")},doDo:function(){var t,n;this.match("d"),t=this.newLabel(),n=this.newLabel(),this.expression(),this.emitLn("SUBQ #1, D0"),this.postLabel(t),this.emitLn("MOVE D0, -(SP)"),this.block(n),this.emitLn("MOVE (SP)+, D0"),this.emitLn("DBRA D0, "+t),this.emitLn("SUBQ #2, SP"),this.postLabel(n),this.emitLn("ADDQ #2, SP")},doBreak:function(t){this.match("b"),t?this.emitLn("BRA "+t):this.abort("No loop to break from")},block:function(t){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;)switch(this.look){case"i":this.doIf(t);break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;case"b":this.doBreak(t);break;default:this.other()}}}),{oneStatement:e,moreThanOneStatement:i,someGroundwork:s,theIfStatement:o,addTheElseClause:r,theWhileStatement:a,theLoopStatement:h,theRepeatUntilStatement:l,theForLoop:c,theDoStatement:u,theBreakStatement:p}}),define("lbac/6-boolean-expressions",["./1.2-cradle","./3-more-expressions","./5-control-constructs","jquery","io"],function(t,n,e,i,s){"use strict";var o,r,a,h,l,c,u,p,f,d,m;return o=t.extend({isBoolean:function(t){return t=t.toUpperCase(),"T"===t||"F"===t},getBoolean:function(){var t;return this.isBoolean(this.look)||this.expected("Boolean Literal"),t="T"===this.look.toUpperCase(),this.getChar(),t},main:function(){this.init(),s.writeLn(this.getBoolean())}}),r=o.extend({boolExpression:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},main:function(){this.init(),this.boolExpression()}}),a=r.extend({isOrop:function(t){return"|"===t||"~"===t},boolTerm:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},boolOr:function(){this.match("|"),this.boolTerm(),this.emitLn("OR (SP)+, D0")},boolXor:function(){this.match("~"),this.boolTerm(),this.emitLn("EOR (SP)+, D0")},boolExpression:function(){for(this.boolTerm();this.isOrop(this.look);)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"|":this.boolOr();break;case"~":this.boolXor()}}}),h=a.extend({notFactor:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},boolTerm:function(){for(this.notFactor();"&"===this.look;)this.emitLn("MOVE D0, -(SP)"),this.match("&"),this.notFactor(),this.emitLn("AND (SP)+, D0")}}),l=h.extend({boolFactor:function(){this.isBoolean(this.look)||this.expected("Boolean Literal"),this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0")},notFactor:function(){"!"===this.look?(this.match("!"),this.boolFactor(),this.emitLn("EOR #-1, D0")):this.boolFactor()}}),c=l.extend({relation:function(){this.emitLn("<relation"+this.getName()+">")},boolFactor:function(){this.isBoolean(this.look)?this.getBoolean()?this.emitLn("MOVE #-1, D0"):this.emitLn("CLR D0"):this.relation()}}),u=c.extend({isRelop:function(t){return"="===t||"#"===t||"<"===t||">"===t},equals:function(){this.match("="),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SEQ D0")},notEquals:function(){this.match("#"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SNE D0")},less:function(){this.match("<"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SGE D0")},greater:function(){this.match(">"),this.expression(),this.emitLn("CMP (SP)+, D0"),this.emitLn("SLE D0")},relation:function(){if(this.expression(),this.isRelop(this.look)){switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"=":this.equals();break;case"#":this.notEquals();break;case"<":this.less();break;case">":this.greater()}this.emitLn("TST D0")}},expression:function(){this.emitLn("<Expression"+this.getName()+">")}}),p=i.extend(!0,{},n.assignmentStatementsObject,u,{expression:n.assignmentStatements.expression}),f=p.extend({expression:function(){for(this.term();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}},term:function(){for(this.signedFactor();"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}},signedFactor:function(){"+"===this.look&&this.getChar(),"-"===this.look?(this.getChar(),this.isDigit(this.look)?this.emitLn("MOVE #-"+this.getNum()+", D0"):(this.factor(),this.emitLn("NEG D0"))):this.factor()},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+" ,D0")}}),d=i.extend(!0,{},f,e.theBreakStatementObject,{condition:f.boolExpression,expression:f.expression,other:f.boolExpression}),m=d.extend({fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar()},block:function(t){for(;"e"!==this.look&&"l"!==this.look&&"u"!==this.look;){switch(this.fin(),this.look){case"i":this.doIf(t);break;case"w":this.doWhile();break;case"p":this.doLoop();break;case"r":this.doRepeat();break;case"f":this.doFor();break;case"d":this.doDo();break;case"b":this.doBreak(t);break;default:this.assignment()}this.fin()}},assignment:function(){var t=this.getName();this.match("="),this.boolExpression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")}}),{theParser:o,booleanLiteral:r,generalExpressions:a,andOperation:h,notOperation:l,expandTheFactor:c,fullBlownRelation:u,mergingWithExpressions:p,changeToLatestExpressionSyntax:f,mergingWithControlConstructs:d,addingAssignments:m}}),define("lbac/7-lexical-scanning",["./1.2-cradle","io"],function(t,n){"use strict";var e,i,s,o,r,a,h,l,c,u=t.enumerate;return e=t.extend({isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},getName:function(){var t="";for(this.isAlpha(this.look)||this.expected("Name");this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return t},getNum:function(){var t="";for(this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t+=this.look,this.getChar();return t},main:function(){this.init(),n.writeLn(this.getName())}}),i=e.extend({isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},getName:function(){var t="";for(this.isAlpha(this.look)||this.expected("Name");this.isAlNum(this.look);)t+=this.look.toUpperCase(),this.getChar();return this.skipWhite(),t},getNum:function(){var t="";for(this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t+=this.look,this.getChar();return this.skipWhite(),t},scan:function(){var t;return this.isAlpha(this.look)?t=this.getName():this.isDigit(this.look)?t=this.getNum():(t=this.look,this.getChar()),this.skipWhite(),t},main:function(){var t;this.init();do t=this.scan(),n.writeLn(t);while(t!==this.LF)}}),s=i.extend({isWhite:function(t){return" "===t||t===this.TAB||t===this.CR||t===this.LF},main:function(){var t;this.init();do t=this.scan(),n.writeLn(t);while("."!==t)}}),o=s.extend({isOp:function(t){return"+"===t||"-"===t||"*"===t||"/"===t||"<"===t||">"===t||":"===t||"="===t},getOp:function(){var t="";for(this.isOp(this.look)||this.expected("Operator");this.isOp(this.look);)t+=this.look,this.getChar();return t},scan:function(){var t;return this.isAlpha(this.look)?t=this.getName():this.isDigit(this.look)?t=this.getNum():this.isOp(this.look)?t=this.getOp():(t=this.look,this.getChar()),this.skipWhite(),t}}),r=o.extend({skipComma:function(){this.skipWhite(),","===this.look&&(this.getChar(),this.skipWhite())},scan:function(){var t;return this.isAlpha(this.look)?t=this.getName():this.isDigit(this.look)?t=this.getNum():this.isOp(this.look)?t=this.getOp():(t=this.look,this.getChar()),this.skipComma(),t}}),a=r.extend({keywordType:u(["IF","ELSE","ENDIF","END"]),main:function(){var t=n.readLn();n.writeLn(this.keywordType[t])}}),h=a.extend({symType:u(["ifSym","elseSym","endifSym","endSym","identifier","number","operator"]),token:0,value:"",scan:function(){this.isAlpha(this.look)?(this.value=this.getName(),this.token=this.keywordType[this.value],void 0===this.token&&(this.token=this.symType.identifier)):this.isDigit(this.look)?(this.value=this.getNum(),this.token=this.symType.number):this.isOp(this.look)?(this.value=this.getOp(),this.token=this.symType.operator):(this.value=this.look,this.getChar()),this.skipWhite()},main:function(){this.init();do{switch(this.scan(),this.token){case this.symType.identifier:n.write("Ident ");break;case this.symType.number:n.write("Number ");break;case this.symType.operator:n.write("Operator ");break;case this.symType.ifSym:case this.symType.elseSym:case this.symType.endifSym:case this.symType.endSym:n.write("Keyword ")}n.writeLn(this.value)}while(this.token!==this.symType.endSym)}}),l=h.extend({getName:function(){for(this.value="",this.isAlpha(this.look)||this.expected("Name");this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();this.token=this.keywordType[this.value],void 0===this.token&&(this.token=this.symType.identifier)},getNum:function(){for(this.value="",this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token=this.symType.number},getOp:function(){for(this.value="",this.isOp(this.look)||this.expected("Operator");this.isOp(this.look);)this.value+=this.look,this.getChar();this.token=this.symType.operator},scan:function(){this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.isOp(this.look)?this.getOp():(this.value=this.look,this.getChar()),this.skipWhite()}}),c=l.extend({keywordCode:"xilee",keywordType:u(["IF","ELSE","ENDIF","END"],1),getName:function(){var t;for(this.value="",this.isAlpha(this.look)||this.expected("Name");this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();t=this.keywordType[this.value]||0,this.token=this.keywordCode.charAt(t)},getNum:function(){for(this.value="",this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token="#"},getOp:function(){for(this.value="",this.isOp(this.look)||this.expected("Operator");this.isOp(this.look);)this.value+=this.look,this.getChar();this.token=1===this.value.length?this.value:"?"},scan:function(){this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.isOp(this.look)?this.getOp():(this.value=this.look,this.token="?",this.getChar()),this.skipWhite()},main:function(){this.init();do{switch(this.scan(),this.token){case"x":n.write("Ident ");break;case"#":n.write("Number ");break;case"i":case"l":case"e":n.write("Keyword ");break;default:n.write("Operator ")}n.writeLn(this.value)}while("END"!==this.value)}}),{someExperimentsInScanning:e,whiteSpace:i,newlines:s,operators:o,listsCommasAndCommandLines:r,gettingFancy:a,returningCodes:h,cleanupWithGlobal:l,returningACharacter:c}}),define("lbac/7.13-kiss",["./object","io"],function(t,n){"use strict";var e,i,s=t.enumerate;return e=t.extend({TAB:"	",CR:"\r",LF:"\n",look:"",lCount:0,getChar:function(){this.look=n.read()},error:function(t){n.writeLn("Error: ",t,".")},abort:function(t){this.error(t),n.halt()},expected:function(t){this.abort(t+" Expected")},isAlpha:function(t){return/[A-Z]/i.test(t)},isDigit:function(t){return/\d/.test(t)},isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isAddop:function(t){return"+"===t||"-"===t},isMulop:function(t){return"*"===t||"/"===t},isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},match:function(t){this.look===t?(this.getChar(),this.skipWhite()):this.expected('"'+t+'"')},fin:function(){this.look===this.CR&&this.getChar(),this.look===this.LF&&this.getChar(),this.skipWhite()},getName:function(){for(var t;this.look===this.LF;)this.fin();return this.isAlpha(this.look)||this.expected("Name"),t=this.look.toUpperCase(),this.getChar(),this.skipWhite(),t},getNum:function(){var t;return this.isDigit(this.look)||this.expected("Integer"),t=this.look,this.getChar(),this.skipWhite(),t},newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},postLabel:function(t){n.writeLn(t+":")},emit:function(t){n.write(this.TAB+t)},emitLn:function(t){this.emit(t),n.writeLn()},identifier:function(){var t=this.getName();"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+t)):this.emitLn("MOVE "+t+"(PC), D0")},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():this.emitLn("MOVE #"+this.getNum()+" ,D0")},signedFactor:function(){var t="-"===this.look;this.isAddop(this.look)&&(this.getChar(),this.skipWhite()),t?this.isDigit(this.look)?this.emitLn("MOVE #-"+this.getNum()+", D0"):(this.factor(),this.emitLn("NEG D0")):this.factor()},multiply:function(){this.match("*"),this.factor(),this.emitLn("MULS (SP)+, D0")},divide:function(){this.match("/"),this.factor(),this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},term1:function(){for(;"*"===this.look||"/"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"*":this.multiply();break;case"/":this.divide()}},term:function(){this.factor(),this.term1()},firstTerm:function(){this.signedFactor(),this.term1()},add:function(){this.match("+"),this.term(),this.emitLn("ADD (SP)+, D0")
},subtract:function(){this.match("-"),this.term(),this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},expression:function(){for(this.firstTerm();"+"===this.look||"-"===this.look;)switch(this.emitLn("MOVE D0, -(SP)"),this.look){case"+":this.add();break;case"-":this.subtract()}},condition:function(){this.emitLn("<condition>")},doIf:function(){var t,n;this.match("i"),this.condition(),t=this.newLabel(),n=t,this.emitLn("BEQ "+t),this.block(),"l"===this.look&&(this.match("l"),n=this.newLabel(),this.emitLn("BRA "+n),this.postLabel(t),this.block()),this.match("e"),this.postLabel(n)},assignment:function(){var t=this.getName();this.match("="),this.expression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case this.LF:for(;this.look===this.LF;)this.fin();break;default:this.assignment()}},doProgram:function(){this.block(),"e"!==this.look&&this.expected("End"),this.emitLn("END")},init:function(){this.lCount=0,this.getChar()},main:function(){this.init(),this.doProgram()}}),i=e.extend({token:"",value:"",keywordCode:"xilee",keywordType:s(["IF","ELSE","ENDIF","END"],1),getName:function(){for(;this.look===this.LF;)this.fin();for(this.isAlpha(this.look)||this.expected("Name"),this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();this.skipWhite()},getNum:function(){for(this.isDigit(this.look)||this.expected("Integer"),this.value="";this.isDigit(this.look);)this.value+=this.look,this.getChar();this.token="#",this.skipWhite()},scan:function(){this.getName(),this.token=this.keywordCode.charAt(this.keywordType[this.value])},matchString:function(t){this.value!==t&&this.expected('"'+t+'"')},identifier:function(){this.getName(),"("===this.look?(this.match("("),this.match(")"),this.emitLn("BSR "+this.value)):this.emitLn("MOVE "+this.value+"(PC), D0")},signedFactor:function(){var t="-"===this.look;this.isAddop(this.look)&&(this.getChar(),this.skipWhite()),t?this.isDigit(this.look)?(this.getNum(),this.emitLn("MOVE #-"+this.value+", D0")):(this.factor(),this.emitLn("NEG D0")):this.factor()},factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.identifier():(this.getNum(),this.emitLn("MOVE #"+this.value+" ,D0"))},doIf:function(){var t,n;this.condition(),t=this.newLabel(),n=t,this.emitLn("BEQ "+t),this.block(),"l"===this.token&&(n=this.newLabel(),this.emitLn("BRA "+n),this.postLabel(t),this.block()),this.postLabel(n),this.matchString("ENDIF")},assignment:function(){var t=this.value;this.match("="),this.expression(),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;default:this.assignment()}this.scan()}},doProgram:function(){this.block(),this.matchString("END"),this.emitLn("END")}}),{judiciousCopying:e,mergingScannerAndParser:i}}),define("lbac/9.a-top-view",["./1.2-cradle","io"],function(t,n){"use strict";var e,i,s,o;return e=t.extend({prog:function(){var t;this.match("p"),t=this.getName(),this.prolog(t),this.match("."),this.epilog(t)},prolog:function(){this.emitLn("WARMST EQU $A01E")},epilog:function(t){this.emitLn("DC WARMST"),this.emitLn("END "+t)},main:function(){this.init(),this.prog()}}),i=e.extend({postLabel:function(t){n.writeLn(t+":")},declarations:function(){},statements:function(){},doBlock:function(t){this.declarations(),this.postLabel(t),this.statements()},prog:function(){var t;this.match("p"),t=this.getName(),this.prolog(t),this.doBlock(t),this.match("."),this.epilog(t)}}),s=i.extend({labels:function(){this.match("l")},constants:function(){this.match("c")},types:function(){this.match("t")},variables:function(){this.match("v")},doProcedure:function(){this.match("p")},doFunction:function(){this.match("f")},declarations:function(){for(;/[lctvpf]/.test(this.look);)switch(this.look){case"l":this.labels();break;case"c":this.constants();break;case"t":this.types();break;case"v":this.variables();break;case"p":this.doProcedure();break;case"f":this.doFunction()}},statements:function(){for(this.match("b");"e"!==this.look;)this.getChar();this.match("e")}}),o=t.extend({prog:function(){for(;"Z"!==this.look;)switch(this.look){case"#":this.preProc();break;case"i":this.intDecl();break;case"c":this.charDecl();break;default:this.doFunction()}},main:function(){for(this.init();this.look!==this.LF;)this.getClass(),this.getType(),this.topDecl()},clas:"",sign:"",typ:"",showClass:{a:"auto ",x:"extern ",s:"static "},showSign:{s:"signed ",u:"unsigned "},showType:{l:"long ",i:"int ",c:"char "},getClass:function(){"a"===this.look||"x"===this.look||"s"===this.look?(this.clas=this.look,this.getChar()):this.clas="a"},getType:function(){this.typ=" ","u"===this.look?(this.sign="u",this.typ="i",this.getChar()):this.sign="s",("i"===this.look||"l"===this.look||"c"===this.look)&&(this.typ=this.look,this.getChar())},topDecl:function(){var t=this.getName();"("===this.look?this.doFunc(t):this.doData(t)},doFunc:function(t){this.match("("),this.match(")"),this.match("{"),this.match("}")," "===this.typ&&(this.typ="i"),n.writeLn(this.showClass[this.clas],this.showSign[this.sign],this.showType[this.typ],"function ",t)},doData:function(t){" "===this.typ&&this.expected("Type declaration"),n.writeLn(this.showClass[this.clas],this.showSign[this.sign],this.showType[this.typ],"data ",t),this.match(";")}}),{theStructureOfPascal:e,fleshingItOut:i,declarations:s,theStructureOfC:o}}),define("lbac/10-introducing-tiny",["./1.2-cradle","io"],function(t,n){"use strict";var e,i,s,o,r,a,h,l,c,u,p,f,d,m,g,b,v;return e=t.extend({prog:function(){this.match("p"),this.header(),this.prolog(),this.match("."),this.epilog()},header:function(){n.writeLn("WARMST",this.TAB,"EQU $A01E")},prolog:function(){this.postLabel("MAIN")},postLabel:function(t){n.writeLn(t+":")},epilog:function(){this.emitLn("DC WARMST"),this.emitLn("END MAIN")},main:function(){this.init(),this.prog(),this.look!==this.LF&&this.abort('Unexpected data after "."')}}),i=e.extend({prog:function(){this.match("p"),this.header(),this.doMain(),this.match(".")},doMain:function(){this.match("b"),this.prolog(),this.match("e"),this.epilog()}}),s=i.extend({decl:function(){this.match("v"),this.getChar()},topDecls:function(){for(;"b"!==this.look;)switch(this.look){case"v":this.decl();break;default:this.abort('Unrecognized Keyword "'+this.look+'"')}},prog:function(){this.match("p"),this.header(),this.topDecls(),this.doMain(),this.match(".")}}),o=s.extend({decl:function(){this.match("v"),this.alloc(this.getName())},alloc:function(t){n.writeLn(t,":",this.TAB,"DC 0")}}),r=o.extend({decl:function(){for(this.match("v"),this.alloc(this.getName());","===this.look;)this.getChar(),this.alloc(this.getName())}}),a=r.extend({alloc:function(t){n.write(t,":",this.TAB,"DC "),"="===this.look?(this.match("="),n.writeLn(this.getNum())):n.writeLn("0")}}),h=a.extend({getNum:function(){var t=0;for(this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t=+this.look+10*t,this.getChar();return t},alloc:function(t){n.write(t,":",this.TAB,"DC "),"="===this.look?(this.match("="),"-"===this.look&&(n.write("-"),this.match("-")),n.writeLn(this.getNum())):n.writeLn("0")}}),l=h.extend({symbolTable:null,inTable:function(t){return!!this.symbolTable[t]},alloc:function(t){this.inTable(t)&&this.abort("Duplicate Variable Name "+t),this.symbolTable[t]="v",n.write(t,":",this.TAB,"DC "),"="===this.look?(this.match("="),"-"===this.look&&(n.write("-"),this.match("-")),n.writeLn(this.getNum())):n.writeLn("0")},init:function(){this.symbolTable={},this.getChar()}}),c=l.extend({assignment:function(){this.getChar()},block:function(){for(;"e"!==this.look;)this.assignment()},doMain:function(){this.match("b"),this.prolog(),this.block(),this.match("e"),this.epilog()}}),u=c.extend({clear:function(){this.emitLn("CLR D0")},negate:function(){this.emitLn("NEG D0")},loadConst:function(t){this.emitLn("MOVE #"+t+", D0")},loadVar:function(t){this.inTable(t)||this.undefinedd(t),this.emitLn("MOVE "+t+"(PC), D0")},push:function(){this.emitLn("MOVE D0, -(SP)")},popAdd:function(){this.emitLn("ADD (SP)+, D0")},popSub:function(){this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},popMul:function(){this.emitLn("MULS (SP)+, D0")},popDiv:function(){this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},store:function(t){this.inTable(t)||this.undefinedd(t),this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},undefinedd:function(t){this.abort("Undefined Identifier "+t)}}),p=u.extend({factor:function(){"("===this.look?(this.match("("),this.expression(),this.match(")")):this.isAlpha(this.look)?this.loadVar(this.getName()):this.loadConst(this.getNum())},negFactor:function(){this.match("-"),this.isDigit(this.look)?this.loadConst(-this.getNum()):(this.factor(),this.negate())},firstFactor:function(){switch(this.look){case"+":this.match("+"),this.factor();break;case"-":this.negFactor();break;default:this.factor()}},multiply:function(){this.match("*"),this.factor(),this.popMul()},divide:function(){this.match("/"),this.factor(),this.popDiv()},isMulop:function(t){return"*"===t||"/"===t},term1:function(){for(;this.isMulop(this.look);)switch(this.push(),this.look){case"*":this.multiply();break;case"/":this.divide()}},term:function(){this.factor(),this.term1()},firstTerm:function(){this.firstFactor(),this.term1()},add:function(){this.match("+"),this.term(),this.popAdd()},subtract:function(){this.match("-"),this.term(),this.popSub()},isAddop:function(t){return"+"===t||"-"===t},expression:function(){for(this.firstTerm();this.isAddop(this.look);)switch(this.push(),this.look){case"+":this.add();break;case"-":this.subtract()}},assignment:function(){var t=this.getName();this.match("="),this.expression(),this.store(t)}}),f=p.extend({notIt:function(){this.emitLn("NOT D0")},popAnd:function(){this.emitLn("AND (SP)+, D0")},popOr:function(){this.emitLn("OR (SP)+, D0")},popXor:function(){this.emitLn("EOR (SP)+, D0")},popCompare:function(){this.emitLn("CMP (SP)+, D0")},setEqual:function(){this.emitLn("SEQ D0"),this.emitLn("EXT D0")},setNEqual:function(){this.emitLn("SNE D0"),this.emitLn("EXT D0")},setGreater:function(){this.emitLn("SLT D0"),this.emitLn("EXT D0")},setLess:function(){this.emitLn("SGT D0"),this.emitLn("EXT D0")}}),d=f.extend({isOrop:function(t){return"|"===t||"~"===t},isRelop:function(t){return"="===t||"#"===t||"<"===t||">"===t},equals:function(){this.match("="),this.expression(),this.popCompare(),this.setEqual()},notEquals:function(){this.match("#"),this.expression(),this.popCompare(),this.setNEqual()},less:function(){this.match("<"),this.expression(),this.popCompare(),this.setLess()},greater:function(){this.match(">"),this.expression(),this.popCompare(),this.setGreater()},relation:function(){if(this.expression(),this.isRelop(this.look))switch(this.push(),this.look){case"=":this.equals();break;case"#":this.notEquals();break;case"<":this.less();break;case">":this.greater()}},notFactor:function(){"!"===this.look?(this.match("!"),this.relation(),this.notIt()):this.relation()},boolTerm:function(){for(this.notFactor();"&"===this.look;)this.push(),this.match("&"),this.notFactor(),this.popAnd()},boolOr:function(){this.match("|"),this.boolTerm(),this.popOr()},boolXor:function(){this.match("~"),this.boolTerm(),this.popXor()},boolExpression:function(){for(this.boolTerm();this.isOrop(this.look);)switch(this.push(),this.look){case"|":this.boolOr();break;case"~":this.boolXor()}},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?this.loadVar(this.getName()):this.loadConst(this.getNum())},assignment:function(){var t=this.getName();this.match("="),this.boolExpression(),this.store(t)}}),m=d.extend({branch:function(t){this.emitLn("BRA "+t)},branchFalse:function(t){this.emitLn("TST D0"),this.emitLn("BEQ "+t)},newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},doIf:function(){var t,n;this.match("i"),this.boolExpression(),t=this.newLabel(),n=t,this.branchFalse(t),this.block(),"l"===this.look&&(this.match("l"),n=this.newLabel(),this.branch(n),this.postLabel(t),this.block()),this.postLabel(n),this.match("e")},doWhile:function(){var t,n;this.match("w"),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.boolExpression(),this.branchFalse(n),this.block(),this.match("e"),this.branch(t),this.postLabel(n)},block:function(){for(;"e"!==this.look&&"l"!==this.look;)switch(this.look){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.assignment()}},init:function(){this.symbolTable={},this.lCount=0,this.getChar()}}),g=m.extend({token:"",value:"",keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",VAR:"v",BEGIN:"b",END:"e",PROGRAM:"p"},keywordCode:function(t){return this.keywordCodeTable[t]||"x"},scan:function(){this.getName(),this.token=this.keywordCode(this.value)},isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isWhite:function(t){return" "===t||t===this.TAB},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},newLine:function(){for(;this.look===this.CR||this.look===this.LF;)this.getChar(),this.skipWhite()},match:function(t){this.newLine(),this.look!==t&&this.expected('"'+t+'"'),this.getChar(),this.skipWhite()},matchString:function(t){this.value!==t&&this.expected('"'+t+'"')},getName:function(){for(this.newLine(),this.isAlpha(this.look)||this.expected("Name"),this.value="";this.isAlNum(this.look);)this.value+=this.look.toUpperCase(),this.getChar();this.skipWhite()},getNum:function(){var t=0;for(this.newLine(),this.isDigit(this.look)||this.expected("Integer");this.isDigit(this.look);)t=+this.look+10*t,this.getChar();return this.skipWhite(),t},factor:function(){"("===this.look?(this.match("("),this.boolExpression(),this.match(")")):this.isAlpha(this.look)?(this.getName(),this.loadVar(this.value)):this.loadConst(this.getNum())},decl:function(){for(this.getName(),this.alloc(this.value);","===this.look;)this.match(","),this.getName(),this.alloc(this.value)},assignment:function(){var t=this.value;this.match("="),this.boolExpression(),this.store(t)},doIf:function(){var t,n;this.boolExpression(),t=this.newLabel(),n=t,this.branchFalse(t),this.block(),"l"===this.token&&(n=this.newLabel(),this.branch(n),this.postLabel(t),this.block()),this.postLabel(n),this.matchString("ENDIF")},doWhile:function(){var t=this.newLabel(),n=this.newLabel();this.postLabel(t),this.boolExpression(),this.branchFalse(n),this.block(),this.matchString("ENDWHILE"),this.branch(t),this.postLabel(n)},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;default:this.assignment()}this.scan()}},topDecls:function(){for(this.scan();"b"!==this.token;){switch(this.token){case"v":this.decl();break;default:this.abort('Unrecognized Keyword "'+this.value+'"')}this.scan()}},doMain:function(){this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()},prog:function(){this.matchString("PROGRAM"),this.header(),this.topDecls(),this.doMain(),this.match(".")},init:function(){this.symbolTable={},this.lCount=0,this.getChar(),this.scan()}}),b=g.extend({setLessOrEqual:function(){this.emitLn("SGE D0"),this.emitLn("EXT D0")},setGreaterOrEqual:function(){this.emitLn("SLE D0"),this.emitLn("EXT D0")},lessOrEqual:function(){this.match("="),this.expression(),this.popCompare(),this.setLessOrEqual()},notEqual:function(){this.match(">"),this.expression(),this.popCompare(),this.setNEqual()},less:function(){switch(this.match("<"),this.look){case"=":this.lessOrEqual();break;case">":this.notEqual();break;default:this.expression(),this.popCompare(),this.setLess()}},greater:function(){this.match(">"),"="===this.look?(this.match("="),this.expression(),this.popCompare(),this.setGreaterOrEqual()):(this.expression(),this.popCompare(),this.setGreater())}}),v=b.extend({keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",READ:"R",WRITE:"W",VAR:"v",BEGIN:"b",END:"e",PROGRAM:"p"},header:function(){n.writeLn("WARMST",this.TAB,"EQU $A01E"),this.emitLn("LIB TINYLIB")},readVar:function(){this.emitLn("BSR READ"),this.store(this.value)},writeVar:function(){this.emitLn("BSR WRITE")},doRead:function(){for(this.match("("),this.getName(),this.readVar();","===this.look;)this.match(","),this.getName(),this.readVar();this.match(")")},doWrite:function(){for(this.match("("),this.expression(),this.writeVar();","===this.look;)this.match(","),this.expression(),this.writeVar();this.match(")")},block:function(){for(this.scan();"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;default:this.assignment()}this.scan()}}}),{firstStep:e,theMainProgram:i,declarations:s,declarationsAndSymbols:o,variableList:r,initializers:a,multiDigitInteger:h,theSymbolTable:l,executableStatements:c,codeGenerationRoutines:u,assignmentStatement:p,moreCodeGenerationRoutines:f,booleanExpressions:d,controlStructures:m,lexicalScanning:g,moreRelops:b,inputOutput:v}}),define("lbac/11-lexical-scan-revisited",["./1.2-cradle","io"],function(t,n){"use strict";var e,i;return e=t.extend({isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isWhite:function(t){return" "===t||t===this.TAB||t===this.CR||t===this.LF},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},getName:function(){this.skipWhite(),this.isAlpha(this.look)||this.expected("Name"),this.token="x",this.value="";do this.value+=this.look.toUpperCase(),this.getChar();while(this.isAlNum(this.look))},getNum:function(){this.skipWhite(),this.isDigit(this.look)||this.expected("Number"),this.token="#",this.value="";do this.value+=this.look,this.getChar();while(this.isDigit(this.look))},getOp:function(){this.token=this.look,this.value="";do this.value+=this.look,this.getChar();while(!this.isAlpha(this.look)&&!this.isDigit(this.look)&&!this.isWhite(this.look))},next:function(){this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.getOp()},main:function(){this.init();do this.next(),n.writeLn(this.token," ",this.value);while("."!==this.token)}}),i=e.extend({getOp:function(){this.token=this.look,this.value=this.look,this.getChar()},scan:function(){"x"===this.token&&(this.token=this.keywordCode(this.value))},matchString:function(t){this.value!==t&&this.expected('"'+t+'"')}}),{theSolution:e,singleCharacterOperators:i}}),define("lbac/11.6-tiny-1.1",["./object","io"],function(t,n){"use strict";var e=t.extend({TAB:"	",CR:"\r",LF:"\n",look:"",lCount:0,token:"",value:"",symbolTable:null,keywordCodeTable:{IF:"i",ELSE:"l",ENDIF:"e",WHILE:"w",ENDWHILE:"e",READ:"R",WRITE:"W",VAR:"v",BEGIN:"b",END:"e",PROGRAM:"p"},keywordCode:function(t){return this.keywordCodeTable[t]||"x"},getChar:function(){this.look=n.read()},error:function(t){n.writeLn("Error: ",t,".")},abort:function(t){this.error(t),n.halt()},expected:function(t){this.abort(t+" Expected")},undef:function(t){this.abort("Undefined Identifier "+t)},duplicate:function(t){this.abort("Duplicate Identifier "+t)},checkIdent:function(){"x"!==this.token&&this.expected("Identifier")},isAlpha:function(t){return/[A-Z]/i.test(t)},isDigit:function(t){return/\d/.test(t)},isAlNum:function(t){return this.isAlpha(t)||this.isDigit(t)},isAddop:function(t){return"+"===t||"-"===t},isMulop:function(t){return"*"===t||"/"===t},isOrop:function(t){return"|"===t||"~"===t},isRelop:function(t){return"="===t||"#"===t||"<"===t||">"===t},isWhite:function(t){return" "===t||t===this.TAB||t===this.CR||t===this.LF},skipWhite:function(){for(;this.isWhite(this.look);)this.getChar()},inTable:function(t){return!!this.symbolTable[t]},checkTable:function(t){this.inTable(t)||this.undef(t)},checkDup:function(t){this.inTable(t)&&this.duplicate(t)},addEntry:function(t,n){this.checkDup(t),this.symbolTable[t]=n},getName:function(){this.skipWhite(),this.isAlpha(this.look)||this.expected("Identifier"),this.token="x",this.value="";do this.value+=this.look.toUpperCase(),this.getChar();while(this.isAlNum(this.look))},getNum:function(){this.skipWhite(),this.isDigit(this.look)||this.expected("Number"),this.token="#",this.value="";do this.value+=this.look,this.getChar();while(this.isDigit(this.look))},getOp:function(){this.token=this.look,this.value=this.look,this.getChar()},next:function(){this.skipWhite(),this.isAlpha(this.look)?this.getName():this.isDigit(this.look)?this.getNum():this.getOp()},scan:function(){"x"===this.token&&(this.token=this.keywordCode(this.value))},matchString:function(t){this.value!==t&&this.expected('"'+t+'"'),this.next()},emit:function(t){n.write(this.TAB+t)},emitLn:function(t){this.emit(t),n.writeLn()},newLabel:function(){var t="L"+this.lCount;return this.lCount+=1,t},postLabel:function(t){n.writeLn(t+":")},clear:function(){this.emitLn("CLR D0")},negate:function(){this.emitLn("NEG D0")},notIt:function(){this.emitLn("NOT D0")},loadConst:function(t){this.emitLn("MOVE #"+t+", D0")},loadVar:function(t){this.inTable(t)||this.undef(t),this.emitLn("MOVE "+t+"(PC), D0")},push:function(){this.emitLn("MOVE D0, -(SP)")},popAdd:function(){this.emitLn("ADD (SP)+, D0")},popSub:function(){this.emitLn("SUB (SP)+, D0"),this.emitLn("NEG D0")},popMul:function(){this.emitLn("MULS (SP)+, D0")},popDiv:function(){this.emitLn("MOVE (SP)+, D1"),this.emitLn("EXG  D0, D1"),this.emitLn("DIVS D1, D0")},popAnd:function(){this.emitLn("AND (SP)+, D0")},popOr:function(){this.emitLn("OR (SP)+, D0")},popXor:function(){this.emitLn("EOR (SP)+, D0")},popCompare:function(){this.emitLn("CMP (SP)+, D0")},setEqual:function(){this.emitLn("SEQ D0"),this.emitLn("EXT D0")},setNEqual:function(){this.emitLn("SNE D0"),this.emitLn("EXT D0")},setGreater:function(){this.emitLn("SLT D0"),this.emitLn("EXT D0")},setLess:function(){this.emitLn("SGT D0"),this.emitLn("EXT D0")},setLessOrEqual:function(){this.emitLn("SGE D0"),this.emitLn("EXT D0")},setGreaterOrEqual:function(){this.emitLn("SLE D0"),this.emitLn("EXT D0")},store:function(t){this.emitLn("LEA "+t+"(PC), A0"),this.emitLn("MOVE D0, (A0)")},branch:function(t){this.emitLn("BRA "+t)},branchFalse:function(t){this.emitLn("TST D0"),this.emitLn("BEQ "+t)},readIt:function(){this.emitLn("BSR READ"),this.store(this.value)},writeIt:function(){this.emitLn("BSR WRITE")},header:function(){n.writeLn("WARMST",this.TAB,"EQU $A01E")},prolog:function(){this.postLabel("MAIN")},epilog:function(){this.emitLn("DC WARMST"),this.emitLn("END MAIN")},allocate:function(t,e){n.writeLn(t,":",this.TAB,"DC ",e)},factor:function(){"("===this.token?(this.next(),this.boolExpression(),this.matchString(")")):("x"===this.token?this.loadVar(this.value):"#"===this.token?this.loadConst(this.value):this.expected("Math Factor"),this.next())},multiply:function(){this.next(),this.factor(),this.popMul()},divide:function(){this.next(),this.factor(),this.popDiv()},term:function(){for(this.factor();this.isMulop(this.token);)switch(this.push(),this.token){case"*":this.multiply();break;case"/":this.divide()}},add:function(){this.next(),this.term(),this.popAdd()},subtract:function(){this.next(),this.term(),this.popSub()},expression:function(){for(this.isAddop(this.token)?this.clear():this.term();this.isAddop(this.token);)switch(this.push(),this.token){case"+":this.add();break;case"-":this.subtract()}},compareExpression:function(){this.expression(),this.popCompare()},nextExpression:function(){this.next(),this.compareExpression()},equal:function(){this.nextExpression(),this.setEqual()},lessOrEqual:function(){this.nextExpression(),this.setLessOrEqual()},notEqual:function(){this.nextExpression(),this.setNEqual()},less:function(){switch(this.next(),this.token){case"=":this.lessOrEqual();break;case">":this.notEqual();break;default:this.compareExpression(),this.setLess()}},greater:function(){this.next(),"="===this.token?(this.nextExpression(),this.setGreaterOrEqual()):(this.compareExpression(),this.setGreater())},relation:function(){if(this.expression(),this.isRelop(this.token))switch(this.push(),this.token){case"=":this.equals();break;case"<":this.less();break;case">":this.greater()}},notFactor:function(){"!"===this.token?(this.next(),this.relation(),this.notIt()):this.relation()},boolTerm:function(){for(this.notFactor();"&"===this.token;)this.push(),this.next(),this.notFactor(),this.popAnd()},boolOr:function(){this.next(),this.boolTerm(),this.popOr()},boolXor:function(){this.next(),this.boolTerm(),this.popXor()},boolExpression:function(){for(this.boolTerm();this.isOrop(this.token);)switch(this.push(),this.token){case"|":this.boolOr();break;case"~":this.boolXor()}},assignment:function(){var t;this.checkTable(this.value),t=this.value,this.next(),this.matchString("="),this.boolExpression(),this.store(t)},doIf:function(){var t,n;this.next(),this.boolExpression(),t=this.newLabel(),n=t,this.branchFalse(t),this.block(),"l"===this.token&&(this.next(),n=this.newLabel(),this.branch(n),this.postLabel(t),this.block()),this.postLabel(n),this.matchString("ENDIF")},doWhile:function(){var t,n;this.next(),t=this.newLabel(),n=this.newLabel(),this.postLabel(t),this.boolExpression(),this.branchFalse(n),this.block(),this.matchString("ENDWHILE"),this.branch(t),this.postLabel(n)},readVar:function(){this.checkIdent(),this.checkTable(this.value),this.readIt(this.value),this.next()},doRead:function(){for(this.next(),this.matchString("("),this.readVar();","===this.token;)this.next(),this.readVar();this.matchString(")")},doWrite:function(){for(this.next(),this.matchString("("),this.expression(),this.writeIt();","===this.token;)this.next(),this.expression(),this.writeIt();this.matchString(")")},block:function(){for(;"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;default:this.assignment()}this.scan()}},alloc:function(){this.next(),"x"!==this.token&&this.expected("Variable Name"),this.checkDup(this.value),this.addEntry(this.value,"v"),this.allocate(this.value,"0"),this.next()},topDecls:function(){for(this.scan();"v"===this.token;){for(this.alloc();","===this.token;)this.alloc();this.scan()}},init:function(){this.symbolTable={},this.lCount=0,this.getChar(),this.next()},main:function(){this.init(),this.matchString("PROGRAM"),this.header(),this.topDecls(),this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()}});return{run:e,object:e}}),define("lbac/12-miscellany",["./object","./11.6-tiny-1.1"],function(t,n){"use strict";var e;return e=n.object.extend({semi:function(){this.matchString(";")},block:function(){for(;"e"!==this.token&&"l"!==this.token;){switch(this.token){case"i":this.doIf();break;case"w":this.doWhile();break;case"R":this.doRead();break;case"W":this.doWrite();break;case"x":this.assignment()}this.semi(),this.scan()}},topDecls:function(){for(this.scan();"v"===this.token;){for(this.alloc();","===this.token;)this.alloc();this.semi(),this.scan()}},main:function(){this.init(),this.matchString("PROGRAM"),this.semi(),this.header(),this.topDecls(),this.matchString("BEGIN"),this.prolog(),this.block(),this.matchString("END"),this.epilog()}}),{dealingWithSemicolons:e}}),define("lbac/main",["./2-expression-parsing","./3-more-expressions","./4-interpreters","./5-control-constructs","./6-boolean-expressions","./7-lexical-scanning","./7.13-kiss","./9.a-top-view","./10-introducing-tiny","./11-lexical-scan-revisited","./11.6-tiny-1.1","./12-miscellany"],function(t,n,e,i,s,o,r,a,h,l,c,u){"use strict";return{expressionParsing:t,moreExpressions:n,interpreters:e,controlConstructs:i,booleanExpressions:s,lexicalScanning:o,kiss:r,aTopView:a,introducingTiny:h,lexicalScanRevisited:l,tiny_11:c,miscellany:u}}),define("lbac",["lbac/main"],function(t){return t}),function(t){"use strict";"function"==typeof define&&define.amd?define("tiny-console",["jquery"],t):t(jQuery)}(function(t){"use strict";function n(n){var e=[[/</g,"&lt;"],[/>/g,"&gt;"]];return t.each(e,function(t,e){n=n.replace(e[0],e[1])}),n}function e(n,e){var i,s=document.createRange(),o=window.getSelection(),r=0;n.contents().each(function(){var n=t(this).text().length;return"BR"===this.nodeName.toUpperCase()&&(n=1),n>=e?!1:(e-=n,r+=1,void 0)}),i=n[0].childNodes[r],3!==i.nodeType&&(i=i.firstChild),s.setStart(i,e),s.collapse(!0),o.removeAllRanges(),o.addRange(s)}function i(n){var e=window.getSelection().getRangeAt(0),i=e.startContainer,s=e.startOffset;return n.contents().each(function(){return this===i||this.firstChild===i?!1:(s+=t(this).text().length,void 0)}),s}function s(t){e(t,t.text().length)}function o(){function e(t){return'<span class="'+t+'">$&</span>'}function i(n){var e={};return e.index=Number.MAX_VALUE,t.each(s,function(t,i){var s=n.search(i.pattern);return s>=0&&e.index>s&&(e.index=s,e.match=n.match(i.pattern)[0],e.length=e.match.length,e.format=i.format),0===s?!1:void 0}),e.index===Number.MAX_VALUE&&(e.index=-1),e}var s=[];this.addRule=function(t){s.push({pattern:t.pattern,format:e(t["class"])})},this.addRules=function(n,i){var o=e(i);t.each(n,function(t,n){s.push({pattern:n,format:o})})},this.highlightElement=function(t){for(var e,s=n(t.text()),o=i(s),r="";o.index>=0;)e=s.substr(0,o.index+o.length),s=s.substr(o.index+o.length),r+=e.replace(o.match,o.format),o=i(s);r+=s,t.html(r)}}function r(t){var n=[/\bEND\b/,/\bMOVE\b/,/\bADD\w?\b/,/\bSUB\w?\b/,/\bNEG\b/,/\bEXG\b/,/\bMUL\w?\b/,/\bDIV\w?\b/,/\bBSR\b/,/\bLEA\b/,/\bCMP\b/,/\bCLR\b/,/\b\w?OR\b/,/\bAND\b/,/\bSEQ\b/,/\bSNE\b/,/\bSGE\b/,/\bSLE\b/,/\bTST\b/],e=[/\bBEQ\b/,/\b\w?BRA\b/,/\bBGT\b/],i="m68k-keyword",s="m68k-branch",o={pattern:/\bL\d+:?/,"class":"m68k-label"},r={pattern:/Error:([\w\W]*?)\n/,"class":"m68k-error"};this.addRules(n,i),this.addRules(e,s),this.addRule(o),this.addRule(r),this.highlight=function(){this.highlightElement(t)}}function a(t){this.addRule({pattern:/[bl]/,"class":"compiler-middle"}),this.addRule({pattern:/[dfiwpr]/,"class":"compiler-start"}),this.addRule({pattern:/[eu]/,"class":"compiler-end"}),this.highlight=function(){var n=i(t);this.highlightElement(t),e(t,n)}}function h(n){"outputHighlighter"in n&&n.outputHighlighter.highlight();var e=n.$entry.clone(),i=t(".entry-input",e),o=t(".entry-output",e),r=i.html();i.attr("contenteditable","false").html(r+"<br>"),""===o.html()&&o.remove(),e.insertBefore(n.$entry),n.$output.html(""),n.$input.html(" "),n.target.scrollTop(n.target.prop("scrollHeight")),s(n.$input),n.$input.focus()}function l(n){var e=t(this).data("tinyConsole"),o=e.$input.text().length;if(13===n.keyCode){n.preventDefault(),e.stream.update(e.$input.text()+p),e.history.update();try{e.execute()}catch(r){}h(e)}else if(9===n.keyCode)try{document.execCommand("insertHtml",!1,"	"),n.preventDefault()}catch(a){}else 37!==n.keyCode&&8!==n.keyCode||1!==i(e.$input)?39===n.keyCode?i(e.$input)===o?n.preventDefault():i(e.$input)===o-1&&(n.preventDefault(),s(e.$input)):38===n.keyCode?(n.preventDefault(),e.history.scrollUp()):40===n.keyCode&&(n.preventDefault(),e.history.scrollDown()):n.preventDefault();e.$input[0].normalize()}function c(t){1>=i(t)&&e(t,1)}function u(){var n=t(this).data("tinyConsole");n.$input.focus(),c(n.$input)}var p="\n";r.prototype=new o,a.prototype=new o;var f={init:function(n){function i(n,e,i){var s=t("#"+e),o=t("#"+n);o&&s&&s.click(function(){var t=i.data("tinyConsole");t.stream.update(" "+o.val()+"\n"),t.history.update();try{t.execute()}catch(n){}h(t)})}var o=t.extend({prompt:">>>"},n);return this.each(function(){var n=t(this),h=n.data("tinyConsole");if(!h){o.width&&n.width(o.width),o.height&&n.height(o.height),n.addClass("tiny-console");var f=t("<div />").addClass("console-entry"),d=t("<pre />").addClass("entry-prompt").text(o.prompt),m=t("<pre />").addClass("entry-input").attr("contenteditable","true").html(" "),g=t("<pre />").addClass("entry-output");if(n.append(f.append(d).append(m).append(g)),"tabSize"in o){var b=""+o.tabSize;t("pre",f).css({"-moz-tab-size":b,"-o-tab-size":b,"tab-size":b})
}var v=!1,k=!1;if("highlight"in o)switch(o.highlight){case"input":v=!0;break;case"output":k=!0;break;case"both":v=k=!0}m.focus(),e(m,1),m.bind("focus.tinyConsole",function(n){c(t(n.target))}),n.bind("keydown.tinyConsole",l),n.bind("click.tinyConsole",u);var y={target:n,$entry:f,$prompt:d,$input:m,$output:g,stream:{content:"",offset:1,update:function(t){this.content=t,this.offset=1},read:function(){var n=this.offset;return n===this.content.length&&t.error("End of input stream"),this.offset+=1,this.content.charAt(n)},readLn:function(){return this.offset=1,this.content.substring(1,this.content.length-1)}},history:{content:[],position:-1,last:function(){return this.content[this.content.length-1]},update:function(){var t=y.stream,n=t.content.substr(0,t.content.length-p.length);" "!==n&&n!==this.last()&&this.content.push(n),this.position=this.content.length,y.target.scrollTop(y.target.prop("scrollHeight"))},scrollUp:function(){0>=this.position||(this.position-=1,m.text(this.content[this.position]),s(m),y.target.scrollTop(y.target.prop("scrollHeight")))},scrollDown:function(){this.position!==this.content.length-1&&(this.position+=1,m.text(this.content[this.position]),s(m),y.target.scrollTop(y.target.prop("scrollHeight")))}}};k&&(y.outputHighlighter=new r(g)),v&&(y.inputHighlighter=new a(m),n.bind("keyup.tinyConsole",function(){y.inputHighlighter.highlight()})),n.data("tinyConsole",y),i(o.editorElement,o.runButtonElement,n)}})},destroy:function(){return this.each(function(){var n=t(this);t(window).unbind(".tinyConsole"),n.removeData("tinyConsole")})},option:function(t,n){var e=this.data("tinyConsole");"prompt"===t&&e.$prompt.text(n)},read:function(){var t,n=this.data("tinyConsole");try{t=n.stream.read()}catch(e){f.writeLn.call(this,"Error: End of Input Stream.")}return t},readLn:function(){var t=this.data("tinyConsole");return t.stream.readLn()},write:function(){var e=Array.prototype.slice.call(arguments).join("");return this.each(function(){var i=t(this).data("tinyConsole");i.$output.append(n(e))})},writeLn:function(){var t=Array.prototype.slice.call(arguments);t.push(p),f.write.apply(this,t)},halt:function(){throw"Halt."},getFunction:function(n){return t.proxy(f[n],this)},setExecute:function(n){return this.each(function(){var e=t(this).data("tinyConsole");e.execute=n})}};t.fn.tinyConsole=function(n){return f[n]?f[n].apply(this,Array.prototype.slice.call(arguments,1)):"object"!=typeof n&&n?(t.error("Method "+n+" does not exist on jQuery.tinyConsole"),void 0):f.init.apply(this,arguments)}}),define("views/console",["jquery","underscore","backbone","lbac","io","common","tiny-console"],function(t,n,e,i,s,o){"use strict";function r(n){var e;return n=n.replace(/Chapter\s*\d*\s*/,""),n=n.replace(/\d+\.\d+\.?\d?\s*/,""),n=n.replace(/-/g," "),n=n.replace(/[,\/"]/g,""),e=n.split(" "),t.each(e,function(t,n){0===t?e[0]=n.toLowerCase():e[t]=n.substr(0,1).toUpperCase()+n.substr(1).toLowerCase()}),e.join("")}function a(t){return n.bind(t.main,t)}var h=e.View.extend({initialize:function(){this.render()},render:function(){return this.$el.tinyConsole({editorElement:"editor",runButtonElement:"run-button",height:350,highlight:"output"}),s.set({read:this.$el.tinyConsole("getFunction","read"),readLn:this.$el.tinyConsole("getFunction","readLn"),write:this.$el.tinyConsole("getFunction","write"),writeLn:this.$el.tinyConsole("getFunction","writeLn"),halt:this.$el.tinyConsole("getFunction","halt")}),this},update:function(t,n){var e=o.getTitle(t),s=o.getTitle(t,n),h=r(e),l=r(s);return("judiciousCopying"===l||"mergingScannerAndParser"===l)&&(h="kiss"),"lexicalScanRevisited"===h&&"conclusion"===l&&(h="tiny_11",l="run"),i[h]&&i[h][l]?(this.$el.tinyConsole("setExecute",a(i[h][l])),this.$el.tinyConsole("option","prompt",s+">"),!0):!1}});return h}),define("views/content",["jquery","underscore","backbone","templates","models/content","models/setting","views/pager","views/setting","views/console","data/toc"],function(t,n,e,i,s,o,r,a,h,l){"use strict";var c=e.View.extend({infoTemplate:i["app/scripts/templates/info.ejs"],initialize:function(){this.$info=this.$("#info"),this.$doc=this.$("#doc"),this.$editorArea=this.$("#editor-area"),this.$console=this.$("#console"),this.$codeArea=this.$("#code-area"),this.$code=this.$("#code"),this.content=new s,this.setting=new o,this.topPagerView=new r({el:"#top-pager"}),this.bottomPagerView=new r({el:"#bottom-pager"}),this.listenTo(this.content,"change:doc",this.renderDoc),this.listenTo(this.content,"change:code",this.renderCode),this.listenTo(this.content,"change:hasEditor",this.toggleEditor),this.listenTo(this.content,"change:hasConsole",this.toggleConsole),this.listenTo(this.setting,"change:editor",this.toggleEditor),this.listenTo(this.setting,"change:console",this.toggleConsole),this.render()},render:function(){this.$info.show(),this.settingView=new a({model:this.setting}),this.consoleView=new h({el:"#console"}),this.$codeArea.show()},update:function(t,n){this.topPagerView.update(t,n),this.bottomPagerView.update(t,n),this.$info.html(this.infoTemplate({ch:t,title:l[t].title.toUpperCase().replace(/ /g,"&nbsp;")})),this.content.update(t,n),this.updateConsole(t,n)},updateConsole:function(t,e){var i,s;e?(i=this.consoleView.update(t,e),this.content.set("hasConsole",i),s=n.find(l[t].sections,function(t){return t.sec===e}),this.content.set("hasEditor",!!s.editor)):(this.content.set("hasConsole",!1),this.content.set("hasEditor",!1))},renderDoc:function(t){this.settingView.$el.detach(),this.$doc.html(t.get("doc")),this.$doc.children(":first-child").after(this.settingView.el)},renderCode:function(t){this.$code.html(t.get("code"))},toggleEditor:function(){var t=this.content.get("hasEditor")&&this.setting.get("editor");this.$editorArea.toggle(t)},toggleConsole:function(){var t=this.content.get("hasConsole")&&this.setting.get("console");this.$console.toggle(t)}});return c}),define("views/app",["jquery","underscore","backbone","templates","views/menu","views/content"],function(t,n,e,i,s,o){"use strict";var r=e.View.extend({el:"body",initialize:function(){this.menuView=new s,this.$content=t("#content"),this.render()},render:function(){this.$("#menu").html(this.menuView.el),this.contentView=new o({el:this.$content}),this.$("#footer").show(),this.$("#loading").remove()},update:function(n,e){this.menuView.update(n,e),this.contentView.update(n,e),t("html, body").scrollTop(this.$content.offset().top-20)}});return r}),!function(t){"use strict";t(function(){t.support.transition=function(){var t=function(){var t,n=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in e)if(void 0!==n.style[t])return e[t]}();return t&&{end:t}}()})}(window.jQuery),!function(t){"use strict";var n='[data-dismiss="alert"]',e=function(e){t(e).on("click",n,this.close)};e.prototype.close=function(n){function e(){i.trigger("closed").remove()}var i,s=t(this),o=s.attr("data-target");o||(o=s.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),i=t(o),n&&n.preventDefault(),i.length||(i=s.hasClass("alert")?s:s.parent()),i.trigger(n=t.Event("close")),n.isDefaultPrevented()||(i.removeClass("in"),t.support.transition&&i.hasClass("fade")?i.on(t.support.transition.end,e):e())};var i=t.fn.alert;t.fn.alert=function(n){return this.each(function(){var i=t(this),s=i.data("alert");s||i.data("alert",s=new e(this)),"string"==typeof n&&s[n].call(i)})},t.fn.alert.Constructor=e,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.alert.data-api",n,e.prototype.close)}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.options=t.extend({},t.fn.button.defaults,e)};n.prototype.setState=function(t){var n="disabled",e=this.$element,i=e.data(),s=e.is("input")?"val":"html";t+="Text",i.resetText||e.data("resetText",e[s]()),e[s](i[t]||this.options[t]),setTimeout(function(){"loadingText"==t?e.addClass(n).attr(n,n):e.removeClass(n).removeAttr(n)},0)},n.prototype.toggle=function(){var t=this.$element.closest('[data-toggle="buttons-radio"]');t&&t.find(".active").removeClass("active"),this.$element.toggleClass("active")};var e=t.fn.button;t.fn.button=function(e){return this.each(function(){var i=t(this),s=i.data("button"),o="object"==typeof e&&e;s||i.data("button",s=new n(this,o)),"toggle"==e?s.toggle():e&&s.setState(e)})},t.fn.button.defaults={loadingText:"loading..."},t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=e,this},t(document).on("click.button.data-api","[data-toggle^=button]",function(n){var e=t(n.target);e.hasClass("btn")||(e=e.closest(".btn")),e.button("toggle")})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.$indicators=this.$element.find(".carousel-indicators"),this.options=e,"hover"==this.options.pause&&this.$element.on("mouseenter",t.proxy(this.pause,this)).on("mouseleave",t.proxy(this.cycle,this))};n.prototype={cycle:function(n){return n||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},getActiveIndex:function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},to:function(n){var e=this.getActiveIndex(),i=this;if(!(n>this.$items.length-1||0>n))return this.sliding?this.$element.one("slid",function(){i.to(n)}):e==n?this.pause().cycle():this.slide(n>e?"next":"prev",t(this.$items[n]))},pause:function(n){return n||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition.end&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),clearInterval(this.interval),this.interval=null,this},next:function(){return this.sliding?void 0:this.slide("next")},prev:function(){return this.sliding?void 0:this.slide("prev")},slide:function(n,e){var i,s=this.$element.find(".item.active"),o=e||s[n](),r=this.interval,a="next"==n?"left":"right",h="next"==n?"first":"last",l=this;if(this.sliding=!0,r&&this.pause(),o=o.length?o:this.$element.find(".item")[h](),i=t.Event("slide",{relatedTarget:o[0],direction:a}),!o.hasClass("active")){if(this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid",function(){var n=t(l.$indicators.children()[l.getActiveIndex()]);n&&n.addClass("active")})),t.support.transition&&this.$element.hasClass("slide")){if(this.$element.trigger(i),i.isDefaultPrevented())return;o.addClass(n),o[0].offsetWidth,s.addClass(a),o.addClass(a),this.$element.one(t.support.transition.end,function(){o.removeClass([n,a].join(" ")).addClass("active"),s.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger("slid")},0)})}else{if(this.$element.trigger(i),i.isDefaultPrevented())return;s.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return r&&this.cycle(),this}}};var e=t.fn.carousel;t.fn.carousel=function(e){return this.each(function(){var i=t(this),s=i.data("carousel"),o=t.extend({},t.fn.carousel.defaults,"object"==typeof e&&e),r="string"==typeof e?e:o.slide;s||i.data("carousel",s=new n(this,o)),"number"==typeof e?s.to(e):r?s[r]():o.interval&&s.pause().cycle()})},t.fn.carousel.defaults={interval:5e3,pause:"hover"},t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=e,this},t(document).on("click.carousel.data-api","[data-slide], [data-slide-to]",function(n){var e,i,s=t(this),o=t(s.attr("data-target")||(e=s.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"")),r=t.extend({},o.data(),s.data());o.carousel(r),(i=s.attr("data-slide-to"))&&o.data("carousel").pause().to(i).cycle(),n.preventDefault()})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.options=t.extend({},t.fn.collapse.defaults,e),this.options.parent&&(this.$parent=t(this.options.parent)),this.options.toggle&&this.toggle()};n.prototype={constructor:n,dimension:function(){var t=this.$element.hasClass("width");return t?"width":"height"},show:function(){var n,e,i,s;if(!this.transitioning&&!this.$element.hasClass("in")){if(n=this.dimension(),e=t.camelCase(["scroll",n].join("-")),i=this.$parent&&this.$parent.find("> .accordion-group > .in"),i&&i.length){if(s=i.data("collapse"),s&&s.transitioning)return;i.collapse("hide"),s||i.data("collapse",null)}this.$element[n](0),this.transition("addClass",t.Event("show"),"shown"),t.support.transition&&this.$element[n](this.$element[0][e])}},hide:function(){var n;!this.transitioning&&this.$element.hasClass("in")&&(n=this.dimension(),this.reset(this.$element[n]()),this.transition("removeClass",t.Event("hide"),"hidden"),this.$element[n](0))},reset:function(t){var n=this.dimension();return this.$element.removeClass("collapse")[n](t||"auto")[0].offsetWidth,this.$element[null!==t?"addClass":"removeClass"]("collapse"),this},transition:function(n,e,i){var s=this,o=function(){"show"==e.type&&s.reset(),s.transitioning=0,s.$element.trigger(i)};this.$element.trigger(e),e.isDefaultPrevented()||(this.transitioning=1,this.$element[n]("in"),t.support.transition&&this.$element.hasClass("collapse")?this.$element.one(t.support.transition.end,o):o())},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}};var e=t.fn.collapse;t.fn.collapse=function(e){return this.each(function(){var i=t(this),s=i.data("collapse"),o=t.extend({},t.fn.collapse.defaults,i.data(),"object"==typeof e&&e);s||i.data("collapse",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.collapse.defaults={toggle:!0},t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=e,this},t(document).on("click.collapse.data-api","[data-toggle=collapse]",function(n){var e,i=t(this),s=i.attr("data-target")||n.preventDefault()||(e=i.attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,""),o=t(s).data("collapse")?"toggle":i.data();i[t(s).hasClass("in")?"addClass":"removeClass"]("collapsed"),t(s).collapse(o)})}(window.jQuery),!function(t){"use strict";function n(){t(i).each(function(){e(t(this)).removeClass("open")})}function e(n){var e,i=n.attr("data-target");return i||(i=n.attr("href"),i=i&&/#/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,"")),e=i&&t(i),e&&e.length||(e=n.parent()),e}var i="[data-toggle=dropdown]",s=function(n){var e=t(n).on("click.dropdown.data-api",this.toggle);t("html").on("click.dropdown.data-api",function(){e.parent().removeClass("open")})};s.prototype={constructor:s,toggle:function(){var i,s,o=t(this);if(!o.is(".disabled, :disabled"))return i=e(o),s=i.hasClass("open"),n(),s||i.toggleClass("open"),o.focus(),!1},keydown:function(n){var s,o,r,a,h;if(/(38|40|27)/.test(n.keyCode)&&(s=t(this),n.preventDefault(),n.stopPropagation(),!s.is(".disabled, :disabled"))){if(r=e(s),a=r.hasClass("open"),!a||a&&27==n.keyCode)return 27==n.which&&r.find(i).focus(),s.click();o=t("[role=menu] li:not(.divider):visible a",r),o.length&&(h=o.index(o.filter(":focus")),38==n.keyCode&&h>0&&h--,40==n.keyCode&&o.length-1>h&&h++,~h||(h=0),o.eq(h).focus())}}};var o=t.fn.dropdown;t.fn.dropdown=function(n){return this.each(function(){var e=t(this),i=e.data("dropdown");i||e.data("dropdown",i=new s(this)),"string"==typeof n&&i[n].call(e)})},t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=o,this},t(document).on("click.dropdown.data-api",n).on("click.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.dropdown-menu",function(t){t.stopPropagation()}).on("click.dropdown.data-api",i,s.prototype.toggle).on("keydown.dropdown.data-api",i+", [role=menu]",s.prototype.keydown)}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.options=e,this.$element=t(n).delegate('[data-dismiss="modal"]',"click.dismiss.modal",t.proxy(this.hide,this)),this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};n.prototype={constructor:n,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var n=this,e=t.Event("show");this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.escape(),this.backdrop(function(){var e=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(document.body),n.$element.show(),e&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus(),e?n.$element.one(t.support.transition.end,function(){n.$element.focus().trigger("shown")}):n.$element.focus().trigger("shown")}))},hide:function(n){n&&n.preventDefault(),n=t.Event("hide"),this.$element.trigger(n),this.isShown&&!n.isDefaultPrevented()&&(this.isShown=!1,this.escape(),t(document).off("focusin.modal"),this.$element.removeClass("in").attr("aria-hidden",!0),t.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal())},enforceFocus:function(){var n=this;t(document).on("focusin.modal",function(t){n.$element[0]===t.target||n.$element.has(t.target).length||n.$element.focus()})},escape:function(){var t=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(n){27==n.which&&t.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var n=this,e=setTimeout(function(){n.$element.off(t.support.transition.end),n.hideModal()},500);this.$element.one(t.support.transition.end,function(){clearTimeout(e),n.hideModal()})},hideModal:function(){var t=this;this.$element.hide(),this.backdrop(function(){t.removeBackdrop(),t.$element.trigger("hidden")})},removeBackdrop:function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},backdrop:function(n){var e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=t.support.transition&&e;if(this.$backdrop=t('<div class="modal-backdrop '+e+'" />').appendTo(document.body),this.$backdrop.click("static"==this.options.backdrop?t.proxy(this.$element[0].focus,this.$element[0]):t.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!n)return;i?this.$backdrop.one(t.support.transition.end,n):n()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(t.support.transition.end,n):n()):n&&n()}};var e=t.fn.modal;t.fn.modal=function(e){return this.each(function(){var i=t(this),s=i.data("modal"),o=t.extend({},t.fn.modal.defaults,i.data(),"object"==typeof e&&e);s||i.data("modal",s=new n(this,o)),"string"==typeof e?s[e]():o.show&&s.show()})},t.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0},t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=e,this},t(document).on("click.modal.data-api",'[data-toggle="modal"]',function(n){var e=t(this),i=e.attr("href"),s=t(e.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),o=s.data("modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},s.data(),e.data());n.preventDefault(),s.modal(o).one("hide",function(){e.focus()})})}(window.jQuery),!function(t){"use strict";var n=function(t,n){this.init("tooltip",t,n)};n.prototype={constructor:n,init:function(n,e,i){var s,o,r,a,h;for(this.type=n,this.$element=t(e),this.options=this.getOptions(i),this.enabled=!0,r=this.options.trigger.split(" "),h=r.length;h--;)a=r[h],"click"==a?this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this)):"manual"!=a&&(s="hover"==a?"mouseenter":"focus",o="hover"==a?"mouseleave":"blur",this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(o+"."+this.type,this.options.selector,t.proxy(this.leave,this)));this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(n){return n=t.extend({},t.fn[this.type].defaults,this.$element.data(),n),n.delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),n},enter:function(n){var e,i=t.fn[this.type].defaults,s={};return this._options&&t.each(this._options,function(t,n){i[t]!=n&&(s[t]=n)},this),e=t(n.currentTarget)[this.type](s).data(this.type),e.options.delay&&e.options.delay.show?(clearTimeout(this.timeout),e.hoverState="in",this.timeout=setTimeout(function(){"in"==e.hoverState&&e.show()},e.options.delay.show),void 0):e.show()},leave:function(n){var e=t(n.currentTarget)[this.type](this._options).data(this.type);return this.timeout&&clearTimeout(this.timeout),e.options.delay&&e.options.delay.hide?(e.hoverState="out",this.timeout=setTimeout(function(){"out"==e.hoverState&&e.hide()},e.options.delay.hide),void 0):e.hide()},show:function(){var n,e,i,s,o,r,a=t.Event("show");if(this.hasContent()&&this.enabled){if(this.$element.trigger(a),a.isDefaultPrevented())return;switch(n=this.tip(),this.setContent(),this.options.animation&&n.addClass("fade"),o="function"==typeof this.options.placement?this.options.placement.call(this,n[0],this.$element[0]):this.options.placement,n.detach().css({top:0,left:0,display:"block"}),this.options.container?n.appendTo(this.options.container):n.insertAfter(this.$element),e=this.getPosition(),i=n[0].offsetWidth,s=n[0].offsetHeight,o){case"bottom":r={top:e.top+e.height,left:e.left+e.width/2-i/2};break;case"top":r={top:e.top-s,left:e.left+e.width/2-i/2};break;case"left":r={top:e.top+e.height/2-s/2,left:e.left-i};break;case"right":r={top:e.top+e.height/2-s/2,left:e.left+e.width}}this.applyPlacement(r,o),this.$element.trigger("shown")}},applyPlacement:function(t,n){var e,i,s,o,r=this.tip(),a=r[0].offsetWidth,h=r[0].offsetHeight;r.offset(t).addClass(n).addClass("in"),e=r[0].offsetWidth,i=r[0].offsetHeight,"top"==n&&i!=h&&(t.top=t.top+h-i,o=!0),"bottom"==n||"top"==n?(s=0,0>t.left&&(s=-2*t.left,t.left=0,r.offset(t),e=r[0].offsetWidth,i=r[0].offsetHeight),this.replaceArrow(s-a+e,e,"left")):this.replaceArrow(i-h,i,"top"),o&&r.offset(t)},replaceArrow:function(t,n,e){this.arrow().css(e,t?50*(1-t/n)+"%":"")},setContent:function(){var t=this.tip(),n=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](n),t.removeClass("fade in top bottom left right")},hide:function(){function n(){var n=setTimeout(function(){e.off(t.support.transition.end).detach()},500);e.one(t.support.transition.end,function(){clearTimeout(n),e.detach()})}var e=this.tip(),i=t.Event("hide");return this.$element.trigger(i),i.isDefaultPrevented()?void 0:(e.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?n():e.detach(),this.$element.trigger("hidden"),this)},fixTitle:function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},hasContent:function(){return this.getTitle()},getPosition:function(){var n=this.$element[0];return t.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():{width:n.offsetWidth,height:n.offsetHeight},this.$element.offset())},getTitle:function(){var t,n=this.$element,e=this.options;return t=n.attr("data-original-title")||("function"==typeof e.title?e.title.call(n[0]):e.title)},tip:function(){return this.$tip=this.$tip||t(this.options.template)},arrow:function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(n){var e=n?t(n.currentTarget)[this.type](this._options).data(this.type):this;e.tip().hasClass("in")?e.hide():e.show()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};var e=t.fn.tooltip;t.fn.tooltip=function(e){return this.each(function(){var i=t(this),s=i.data("tooltip"),o="object"==typeof e&&e;s||i.data("tooltip",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.tooltip.Constructor=n,t.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},t.fn.tooltip.noConflict=function(){return t.fn.tooltip=e,this}}(window.jQuery),!function(t){"use strict";var n=function(t,n){this.init("popover",t,n)};n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype,{constructor:n,setContent:function(){var t=this.tip(),n=this.getTitle(),e=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](n),t.find(".popover-content")[this.options.html?"html":"text"](e),t.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var t,n=this.$element,e=this.options;return t=("function"==typeof e.content?e.content.call(n[0]):e.content)||n.attr("data-content")},tip:function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}});var e=t.fn.popover;t.fn.popover=function(e){return this.each(function(){var i=t(this),s=i.data("popover"),o="object"==typeof e&&e;s||i.data("popover",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.popover.Constructor=n,t.fn.popover.defaults=t.extend({},t.fn.tooltip.defaults,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),t.fn.popover.noConflict=function(){return t.fn.popover=e,this}}(window.jQuery),!function(t){"use strict";function n(n,e){var i,s=t.proxy(this.process,this),o=t(n).is("body")?t(window):t(n);this.options=t.extend({},t.fn.scrollspy.defaults,e),this.$scrollElement=o.on("scroll.scroll-spy.data-api",s),this.selector=(this.options.target||(i=t(n).attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.$body=t("body"),this.refresh(),this.process()}n.prototype={constructor:n,refresh:function(){var n,e=this;this.offsets=t([]),this.targets=t([]),n=this.$body.find(this.selector).map(function(){var n=t(this),i=n.data("target")||n.attr("href"),s=/^#\w/.test(i)&&t(i);return s&&s.length&&[[s.position().top+(!t.isWindow(e.$scrollElement.get(0))&&e.$scrollElement.scrollTop()),i]]||null}).sort(function(t,n){return t[0]-n[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},process:function(){var t,n=this.$scrollElement.scrollTop()+this.options.offset,e=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,i=e-this.$scrollElement.height(),s=this.offsets,o=this.targets,r=this.activeTarget;if(n>=i)return r!=(t=o.last()[0])&&this.activate(t);for(t=s.length;t--;)r!=o[t]&&n>=s[t]&&(!s[t+1]||s[t+1]>=n)&&this.activate(o[t])},activate:function(n){var e,i;this.activeTarget=n,t(this.selector).parent(".active").removeClass("active"),i=this.selector+'[data-target="'+n+'"],'+this.selector+'[href="'+n+'"]',e=t(i).parent("li").addClass("active"),e.parent(".dropdown-menu").length&&(e=e.closest("li.dropdown").addClass("active")),e.trigger("activate")}};var e=t.fn.scrollspy;t.fn.scrollspy=function(e){return this.each(function(){var i=t(this),s=i.data("scrollspy"),o="object"==typeof e&&e;s||i.data("scrollspy",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.scrollspy.Constructor=n,t.fn.scrollspy.defaults={offset:10},t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=e,this},t(window).on("load",function(){t('[data-spy="scroll"]').each(function(){var n=t(this);n.scrollspy(n.data())})})}(window.jQuery),!function(t){"use strict";var n=function(n){this.element=t(n)};n.prototype={constructor:n,show:function(){var n,e,i,s=this.element,o=s.closest("ul:not(.dropdown-menu)"),r=s.attr("data-target");r||(r=s.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),s.parent("li").hasClass("active")||(n=o.find(".active:last a")[0],i=t.Event("show",{relatedTarget:n}),s.trigger(i),i.isDefaultPrevented()||(e=t(r),this.activate(s.parent("li"),o),this.activate(e,e.parent(),function(){s.trigger({type:"shown",relatedTarget:n})})))},activate:function(n,e,i){function s(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),n.addClass("active"),r?(n[0].offsetWidth,n.addClass("in")):n.removeClass("fade"),n.parent(".dropdown-menu")&&n.closest("li.dropdown").addClass("active"),i&&i()}var o=e.find("> .active"),r=i&&t.support.transition&&o.hasClass("fade");r?o.one(t.support.transition.end,s):s(),o.removeClass("in")}};var e=t.fn.tab;t.fn.tab=function(e){return this.each(function(){var i=t(this),s=i.data("tab");s||i.data("tab",s=new n(this)),"string"==typeof e&&s[e]()})},t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=e,this},t(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),t(this).tab("show")})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.$element=t(n),this.options=t.extend({},t.fn.typeahead.defaults,e),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.source=this.options.source,this.$menu=t(this.options.menu),this.shown=!1,this.listen()};n.prototype={constructor:n,select:function(){var t=this.$menu.find(".active").attr("data-value");return this.$element.val(this.updater(t)).change(),this.hide()},updater:function(t){return t},show:function(){var n=t.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});return this.$menu.insertAfter(this.$element).css({top:n.top+n.height,left:n.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(){var n;return this.query=this.$element.val(),!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(n=t.isFunction(this.source)?this.source(this.query,t.proxy(this.process,this)):this.source,n?this.process(n):this)},process:function(n){var e=this;return n=t.grep(n,function(t){return e.matcher(t)}),n=this.sorter(n),n.length?this.render(n.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(t){return~t.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(t){for(var n,e=[],i=[],s=[];n=t.shift();)n.toLowerCase().indexOf(this.query.toLowerCase())?~n.indexOf(this.query)?i.push(n):s.push(n):e.push(n);return e.concat(i,s)},highlighter:function(t){var n=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return t.replace(RegExp("("+n+")","ig"),function(t,n){return"<strong>"+n+"</strong>"})},render:function(n){var e=this;return n=t(n).map(function(n,i){return n=t(e.options.item).attr("data-value",i),n.find("a").html(e.highlighter(i)),n[0]}),n.first().addClass("active"),this.$menu.html(n),this},next:function(){var n=this.$menu.find(".active").removeClass("active"),e=n.next();e.length||(e=t(this.$menu.find("li")[0])),e.addClass("active")},prev:function(){var t=this.$menu.find(".active").removeClass("active"),n=t.prev();n.length||(n=this.$menu.find("li").last()),n.addClass("active")},listen:function(){this.$element.on("focus",t.proxy(this.focus,this)).on("blur",t.proxy(this.blur,this)).on("keypress",t.proxy(this.keypress,this)).on("keyup",t.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",t.proxy(this.keydown,this)),this.$menu.on("click",t.proxy(this.click,this)).on("mouseenter","li",t.proxy(this.mouseenter,this)).on("mouseleave","li",t.proxy(this.mouseleave,this))},eventSupported:function(t){var n=t in this.$element;return n||(this.$element.setAttribute(t,"return;"),n="function"==typeof this.$element[t]),n},move:function(t){if(this.shown){switch(t.keyCode){case 9:case 13:case 27:t.preventDefault();break;case 38:t.preventDefault(),this.prev();break;case 40:t.preventDefault(),this.next()}t.stopPropagation()}},keydown:function(n){this.suppressKeyPressRepeat=~t.inArray(n.keyCode,[40,38,9,13,27]),this.move(n)},keypress:function(t){this.suppressKeyPressRepeat||this.move(t)},keyup:function(t){switch(t.keyCode){case 40:case 38:case 16:case 17:case 18:break;
case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}t.stopPropagation(),t.preventDefault()},focus:function(){this.focused=!0},blur:function(){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(t){t.stopPropagation(),t.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(n){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),t(n.currentTarget).addClass("active")},mouseleave:function(){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var e=t.fn.typeahead;t.fn.typeahead=function(e){return this.each(function(){var i=t(this),s=i.data("typeahead"),o="object"==typeof e&&e;s||i.data("typeahead",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1},t.fn.typeahead.Constructor=n,t.fn.typeahead.noConflict=function(){return t.fn.typeahead=e,this},t(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(){var n=t(this);n.data("typeahead")||n.typeahead(n.data())})}(window.jQuery),!function(t){"use strict";var n=function(n,e){this.options=t.extend({},t.fn.affix.defaults,e),this.$window=t(window).on("scroll.affix.data-api",t.proxy(this.checkPosition,this)).on("click.affix.data-api",t.proxy(function(){setTimeout(t.proxy(this.checkPosition,this),1)},this)),this.$element=t(n),this.checkPosition()};n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var n,e=t(document).height(),i=this.$window.scrollTop(),s=this.$element.offset(),o=this.options.offset,r=o.bottom,a=o.top,h="affix affix-top affix-bottom";"object"!=typeof o&&(r=a=o),"function"==typeof a&&(a=o.top()),"function"==typeof r&&(r=o.bottom()),n=null!=this.unpin&&i+this.unpin<=s.top?!1:null!=r&&s.top+this.$element.height()>=e-r?"bottom":null!=a&&a>=i?"top":!1,this.affixed!==n&&(this.affixed=n,this.unpin="bottom"==n?s.top-i:null,this.$element.removeClass(h).addClass("affix"+(n?"-"+n:"")))}};var e=t.fn.affix;t.fn.affix=function(e){return this.each(function(){var i=t(this),s=i.data("affix"),o="object"==typeof e&&e;s||i.data("affix",s=new n(this,o)),"string"==typeof e&&s[e]()})},t.fn.affix.Constructor=n,t.fn.affix.defaults={offset:0},t.fn.affix.noConflict=function(){return t.fn.affix=e,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),e=n.data();e.offset=e.offset||{},e.offsetBottom&&(e.offset.bottom=e.offsetBottom),e.offsetTop&&(e.offset.top=e.offsetTop),n.affix(e)})})}(window.jQuery),define("bootstrap",["jquery"],function(t){return function(){var n;return n||t.jquery}}(this)),define("app",["jquery","backbone","routes/router","views/app","bootstrap"],function(t,n,e,i){"use strict";t(function(){function t(t){s.navigate(t,{trigger:!0})}var s=new e,o=new i;o.listenTo(s,"update",o.update),o.menuView.on("click:chapter",t),o.contentView.topPagerView.on("click:item",t),o.contentView.bottomPagerView.on("click:item",t),n.history.start()})}),require.config({paths:{jquery:"../components/jquery/jquery",text:"../components/requirejs-text/text",backbone:"../components/backbone-amd/backbone",underscore:"../components/underscore-amd/underscore",bootstrap:"vendor/bootstrap",cookie:"../components/jquery.cookie/jquery.cookie",prettify:"../components/google-code-prettify/src/prettify",marked:"../components/marked/lib/marked",common:"helpers/common",io:"helpers/io",src:"../../data/lbac.src.txt"},shim:{underscore:{exports:"_"},backbone:{deps:["underscore","jquery"],exports:"Backbone"},bootstrap:{deps:["jquery"],exports:"jquery"},cookie:{deps:["jquery"],exports:"jquery"}},packages:["lbac"]}),require(["app"]),define("main",function(){})})();